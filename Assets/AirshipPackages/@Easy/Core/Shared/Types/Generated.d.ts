/* eslint-disable */

/*
* Types generated by Unity.
*
* DO NOT EDIT!
*/

declare const enum HideFlags {
    None = 0,
    HideInHierarchy = 1,
    HideInInspector = 2,
    DontSaveInEditor = 4,
    NotEditable = 8,
    DontSaveInBuild = 16,
    DontUnloadUnusedAsset = 32,
    DontSave = 52,
    HideAndDontSave = 61,
}
declare const enum FindObjectsInactive {
    Exclude = 0,
    Include = 1,
}
declare const enum FindObjectsSortMode {
    None = 0,
    InstanceID = 1,
}
declare const enum Space {
    World = 0,
    Self = 1,
}
declare const enum SendMessageOptions {
    RequireReceiver = 0,
    DontRequireReceiver = 1,
}
declare const enum PrimitiveType {
    Sphere = 0,
    Capsule = 1,
    Cylinder = 2,
    Cube = 3,
    Plane = 4,
    Quad = 5,
}
declare const enum RigidbodyConstraints {
    None = 0,
    FreezePositionX = 2,
    FreezePositionY = 4,
    FreezePositionZ = 8,
    FreezePosition = 14,
    FreezeRotationX = 16,
    FreezeRotationY = 32,
    FreezeRotationZ = 64,
    FreezeRotation = 112,
    FreezeAll = 126,
}
declare const enum CollisionDetectionMode {
    Discrete = 0,
    Continuous = 1,
    ContinuousDynamic = 2,
    ContinuousSpeculative = 3,
}
declare const enum RigidbodyInterpolation {
    None = 0,
    Interpolate = 1,
    Extrapolate = 2,
}
declare const enum ForceMode {
    Force = 0,
    Impulse = 1,
    VelocityChange = 2,
    Acceleration = 5,
}
declare const enum QueryTriggerInteraction {
    UseGlobal = 0,
    Ignore = 1,
    Collide = 2,
}
declare const enum ArticulationJointType {
    FixedJoint = 0,
    PrismaticJoint = 1,
    RevoluteJoint = 2,
    SphericalJoint = 3,
}
declare const enum ArticulationDofLock {
    LockedMotion = 0,
    LimitedMotion = 1,
    FreeMotion = 2,
}
declare const enum ArticulationDriveType {
    Force = 0,
    Acceleration = 1,
    Target = 2,
    Velocity = 3,
}
declare const enum ArticulationDriveAxis {
    X = 0,
    Y = 1,
    Z = 2,
}
declare const enum GeometryType {
    Sphere = 0,
    Capsule = 2,
    Box = 3,
    ConvexMesh = 4,
    TriangleMesh = 5,
    Terrain = 6,
    Invalid = -1,
}
declare const enum PhysicsMaterialCombine {
    Average = 0,
    Multiply = 1,
    Minimum = 2,
    Maximum = 3,
}
declare const enum SimulationMode {
    FixedUpdate = 0,
    Update = 1,
    Script = 2,
}
declare const enum SimulationStage {
    None = 0,
    PrepareSimulation = 1,
    RunSimulation = 2,
    PublishSimulationResults = 4,
    All = 7,
}
declare const enum SimulationOption {
    None = 0,
    SyncTransforms = 1,
    IgnoreEmptyScenes = 2,
    All = 3,
}
declare const enum MeshColliderCookingOptions {
    None = 0,
    InflateConvexMesh = 1,
    CookForFasterSimulation = 2,
    EnableMeshCleaning = 4,
    WeldColocatedVertices = 8,
    UseFastMidphase = 16,
}
declare const enum CompositeOperation {
    None = 0,
    Merge = 1,
    Intersect = 2,
    Difference = 3,
    Flip = 4,
}
declare const enum GeometryType {
    Outlines = 0,
    Polygons = 1,
}
declare const enum GenerationType {
    Synchronous = 0,
    Manual = 1,
}
declare const enum PhysicsMaterialCombine2D {
    Average = 0,
    Mean = 1,
    Multiply = 2,
    Minimum = 3,
    Maximum = 4,
}
declare const enum RigidbodyType2D {
    Dynamic = 0,
    Kinematic = 1,
    Static = 2,
}
declare const enum RigidbodyConstraints2D {
    None = 0,
    FreezePositionX = 1,
    FreezePositionY = 2,
    FreezePosition = 3,
    FreezeRotation = 4,
    FreezeAll = 7,
}
declare const enum RigidbodyInterpolation2D {
    None = 0,
    Interpolate = 1,
    Extrapolate = 2,
}
declare const enum RigidbodySleepMode2D {
    NeverSleep = 0,
    StartAwake = 1,
    StartAsleep = 2,
}
declare const enum CollisionDetectionMode2D {
    None = 0,
    Discrete = 0,
    Continuous = 1,
}
declare const enum ForceMode2D {
    Force = 0,
    Impulse = 1,
}
declare const enum PhysicsShapeType2D {
    Circle = 0,
    Capsule = 1,
    Polygon = 2,
    Edges = 3,
}
declare const enum ColliderErrorState2D {
    None = 0,
    NoShapes = 1,
    RemovedShapes = 2,
}
declare const enum IndexFormat {
    UInt16 = 0,
    UInt32 = 1,
}
declare const enum Target {
    Vertex = 1,
    Index = 2,
    CopySource = 4,
    CopyDestination = 8,
    Structured = 16,
    Raw = 32,
    Append = 64,
    Counter = 128,
    IndirectArguments = 256,
    Constant = 512,
}
declare const enum SkinWeights {
    None = 0,
    OneBone = 1,
    TwoBones = 2,
    FourBones = 4,
    Unlimited = 255,
}
declare const enum UsageFlags {
    None = 0,
    LockBufferForWrite = 1,
}
declare const enum BlendShapeBufferLayout {
    PerShape = 0,
    PerVertex = 1,
}
declare const enum MeshTopology {
    Triangles = 0,
    Quads = 2,
    Lines = 3,
    LineStrip = 4,
    Points = 5,
}
declare const enum VertexAttribute {
    Position = 0,
    Normal = 1,
    Tangent = 2,
    Color = 3,
    TexCoord0 = 4,
    TexCoord1 = 5,
    TexCoord2 = 6,
    TexCoord3 = 7,
    TexCoord4 = 8,
    TexCoord5 = 9,
    TexCoord6 = 10,
    TexCoord7 = 11,
    BlendWeight = 12,
    BlendIndices = 13,
}
declare const enum VertexAttributeFormat {
    Float32 = 0,
    Float16 = 1,
    UNorm8 = 2,
    SNorm8 = 3,
    UNorm16 = 4,
    SNorm16 = 5,
    UInt8 = 6,
    SInt8 = 7,
    UInt16 = 8,
    SInt16 = 9,
    UInt32 = 10,
    SInt32 = 11,
}
declare const enum MeshUpdateFlags {
    Default = 0,
    DontValidateIndices = 1,
    DontResetBoneBounds = 2,
    DontNotifyMeshUsers = 4,
    DontRecalculateBounds = 8,
}
declare const enum CapsuleDirection2D {
    Vertical = 0,
    Horizontal = 1,
}
declare const enum SimulationMode2D {
    FixedUpdate = 0,
    Update = 1,
    Script = 2,
}
declare const enum IntegrityCheckLevel {
    Low = 1,
    Medium = 2,
    High = 3,
}
declare const enum ValidationLevel {
    None = 0,
    Low = 1,
    Medium = 2,
    High = 3,
}
declare const enum LogType {
    Error = 0,
    Assert = 1,
    Warning = 2,
    Log = 3,
    Exception = 4,
}
declare const enum LogOption {
    None = 0,
    NoStacktrace = 1,
}
declare const enum GraphicsFormat {
    None = 0,
    R8_SRGB = 1,
    R8G8_SRGB = 2,
    R8G8B8_SRGB = 3,
    R8G8B8A8_SRGB = 4,
    R8_UNorm = 5,
    R8G8_UNorm = 6,
    R8G8B8_UNorm = 7,
    R8G8B8A8_UNorm = 8,
    R8_SNorm = 9,
    R8G8_SNorm = 10,
    R8G8B8_SNorm = 11,
    R8G8B8A8_SNorm = 12,
    R8_UInt = 13,
    R8G8_UInt = 14,
    R8G8B8_UInt = 15,
    R8G8B8A8_UInt = 16,
    R8_SInt = 17,
    R8G8_SInt = 18,
    R8G8B8_SInt = 19,
    R8G8B8A8_SInt = 20,
    R16_UNorm = 21,
    R16G16_UNorm = 22,
    R16G16B16_UNorm = 23,
    R16G16B16A16_UNorm = 24,
    R16_SNorm = 25,
    R16G16_SNorm = 26,
    R16G16B16_SNorm = 27,
    R16G16B16A16_SNorm = 28,
    R16_UInt = 29,
    R16G16_UInt = 30,
    R16G16B16_UInt = 31,
    R16G16B16A16_UInt = 32,
    R16_SInt = 33,
    R16G16_SInt = 34,
    R16G16B16_SInt = 35,
    R16G16B16A16_SInt = 36,
    R32_UInt = 37,
    R32G32_UInt = 38,
    R32G32B32_UInt = 39,
    R32G32B32A32_UInt = 40,
    R32_SInt = 41,
    R32G32_SInt = 42,
    R32G32B32_SInt = 43,
    R32G32B32A32_SInt = 44,
    R16_SFloat = 45,
    R16G16_SFloat = 46,
    R16G16B16_SFloat = 47,
    R16G16B16A16_SFloat = 48,
    R32_SFloat = 49,
    R32G32_SFloat = 50,
    R32G32B32_SFloat = 51,
    R32G32B32A32_SFloat = 52,
    B8G8R8_SRGB = 56,
    B8G8R8A8_SRGB = 57,
    B8G8R8_UNorm = 58,
    B8G8R8A8_UNorm = 59,
    B8G8R8_SNorm = 60,
    B8G8R8A8_SNorm = 61,
    B8G8R8_UInt = 62,
    B8G8R8A8_UInt = 63,
    B8G8R8_SInt = 64,
    B8G8R8A8_SInt = 65,
    R4G4B4A4_UNormPack16 = 66,
    B4G4R4A4_UNormPack16 = 67,
    R5G6B5_UNormPack16 = 68,
    B5G6R5_UNormPack16 = 69,
    R5G5B5A1_UNormPack16 = 70,
    B5G5R5A1_UNormPack16 = 71,
    A1R5G5B5_UNormPack16 = 72,
    E5B9G9R9_UFloatPack32 = 73,
    B10G11R11_UFloatPack32 = 74,
    A2B10G10R10_UNormPack32 = 75,
    A2B10G10R10_UIntPack32 = 76,
    A2B10G10R10_SIntPack32 = 77,
    A2R10G10B10_UNormPack32 = 78,
    A2R10G10B10_UIntPack32 = 79,
    A2R10G10B10_SIntPack32 = 80,
    A2R10G10B10_XRSRGBPack32 = 81,
    A2R10G10B10_XRUNormPack32 = 82,
    R10G10B10_XRSRGBPack32 = 83,
    R10G10B10_XRUNormPack32 = 84,
    A10R10G10B10_XRSRGBPack32 = 85,
    A10R10G10B10_XRUNormPack32 = 86,
    D16_UNorm = 90,
    D24_UNorm = 91,
    D24_UNorm_S8_UInt = 92,
    D32_SFloat = 93,
    D32_SFloat_S8_UInt = 94,
    S8_UInt = 95,
    RGB_DXT1_SRGB = 96,
    RGBA_DXT1_SRGB = 96,
    RGB_DXT1_UNorm = 97,
    RGBA_DXT1_UNorm = 97,
    RGBA_DXT3_SRGB = 98,
    RGBA_DXT3_UNorm = 99,
    RGBA_DXT5_SRGB = 100,
    RGBA_DXT5_UNorm = 101,
    R_BC4_UNorm = 102,
    R_BC4_SNorm = 103,
    RG_BC5_UNorm = 104,
    RG_BC5_SNorm = 105,
    RGB_BC6H_UFloat = 106,
    RGB_BC6H_SFloat = 107,
    RGBA_BC7_SRGB = 108,
    RGBA_BC7_UNorm = 109,
    RGB_PVRTC_2Bpp_SRGB = 110,
    RGB_PVRTC_2Bpp_UNorm = 111,
    RGB_PVRTC_4Bpp_SRGB = 112,
    RGB_PVRTC_4Bpp_UNorm = 113,
    RGBA_PVRTC_2Bpp_SRGB = 114,
    RGBA_PVRTC_2Bpp_UNorm = 115,
    RGBA_PVRTC_4Bpp_SRGB = 116,
    RGBA_PVRTC_4Bpp_UNorm = 117,
    RGB_ETC_UNorm = 118,
    RGB_ETC2_SRGB = 119,
    RGB_ETC2_UNorm = 120,
    RGB_A1_ETC2_SRGB = 121,
    RGB_A1_ETC2_UNorm = 122,
    RGBA_ETC2_SRGB = 123,
    RGBA_ETC2_UNorm = 124,
    R_EAC_UNorm = 125,
    R_EAC_SNorm = 126,
    RG_EAC_UNorm = 127,
    RG_EAC_SNorm = 128,
    RGBA_ASTC4X4_SRGB = 129,
    RGBA_ASTC4X4_UNorm = 130,
    RGBA_ASTC5X5_SRGB = 131,
    RGBA_ASTC5X5_UNorm = 132,
    RGBA_ASTC6X6_SRGB = 133,
    RGBA_ASTC6X6_UNorm = 134,
    RGBA_ASTC8X8_SRGB = 135,
    RGBA_ASTC8X8_UNorm = 136,
    RGBA_ASTC10X10_SRGB = 137,
    RGBA_ASTC10X10_UNorm = 138,
    RGBA_ASTC12X12_SRGB = 139,
    RGBA_ASTC12X12_UNorm = 140,
    YUV2 = 141,
    DepthAuto = 142,
    ShadowAuto = 143,
    VideoAuto = 144,
    RGBA_ASTC4X4_UFloat = 145,
    RGBA_ASTC5X5_UFloat = 146,
    RGBA_ASTC6X6_UFloat = 147,
    RGBA_ASTC8X8_UFloat = 148,
    RGBA_ASTC10X10_UFloat = 149,
    RGBA_ASTC12X12_UFloat = 150,
    D16_UNorm_S8_UInt = 151,
}
declare const enum TextureDimension {
    None = 0,
    Any = 1,
    Tex2D = 2,
    Tex3D = 3,
    Cube = 4,
    Tex2DArray = 5,
    CubeArray = 6,
    Unknown = -1,
}
declare const enum TextureWrapMode {
    Repeat = 0,
    Clamp = 1,
    Mirror = 2,
    MirrorOnce = 3,
}
declare const enum FilterMode {
    Point = 0,
    Bilinear = 1,
    Trilinear = 2,
}
declare const enum GraphicsTextureDescriptorFlags {
    None = 0,
    RenderTarget = 1,
    RandomWriteTarget = 2,
}
declare const enum GraphicsTextureState {
    Constructed = 0,
    Initializing = 1,
    InitializedOnRenderThread = 2,
    DestroyQueued = 3,
    Destroyed = 4,
}
declare const enum AnisotropicFiltering {
    Disable = 0,
    Enable = 1,
    ForceEnable = 2,
}
declare const enum TextureFormat {
    Alpha8 = 1,
    ARGB4444 = 2,
    RGB24 = 3,
    RGBA32 = 4,
    ARGB32 = 5,
    RGB565 = 7,
    R16 = 9,
    DXT1 = 10,
    DXT5 = 12,
    RGBA4444 = 13,
    BGRA32 = 14,
    RHalf = 15,
    RGHalf = 16,
    RGBAHalf = 17,
    RFloat = 18,
    RGFloat = 19,
    RGBAFloat = 20,
    YUY2 = 21,
    RGB9e5Float = 22,
    BC6H = 24,
    BC7 = 25,
    BC4 = 26,
    BC5 = 27,
    DXT1Crunched = 28,
    DXT5Crunched = 29,
    PVRTC_RGB2 = 30,
    PVRTC_RGBA2 = 31,
    PVRTC_RGB4 = 32,
    PVRTC_RGBA4 = 33,
    ETC_RGB4 = 34,
    EAC_R = 41,
    EAC_R_SIGNED = 42,
    EAC_RG = 43,
    EAC_RG_SIGNED = 44,
    ETC2_RGB = 45,
    ETC2_RGBA1 = 46,
    ETC2_RGBA8 = 47,
    ASTC_4x4 = 48,
    ASTC_5x5 = 49,
    ASTC_6x6 = 50,
    ASTC_8x8 = 51,
    ASTC_10x10 = 52,
    ASTC_12x12 = 53,
    RG16 = 62,
    R8 = 63,
    ETC_RGB4Crunched = 64,
    ETC2_RGBA8Crunched = 65,
    ASTC_HDR_4x4 = 66,
    ASTC_HDR_5x5 = 67,
    ASTC_HDR_6x6 = 68,
    ASTC_HDR_8x8 = 69,
    ASTC_HDR_10x10 = 70,
    ASTC_HDR_12x12 = 71,
    RG32 = 72,
    RGB48 = 73,
    RGBA64 = 74,
    R8_SIGNED = 75,
    RG16_SIGNED = 76,
    RGB24_SIGNED = 77,
    RGBA32_SIGNED = 78,
    R16_SIGNED = 79,
    RG32_SIGNED = 80,
    RGB48_SIGNED = 81,
    RGBA64_SIGNED = 82,
    ETC_RGBA8_3DS = -61,
    ETC_RGB4_3DS = -60,
    ASTC_RGBA_12x12 = -59,
    ASTC_RGBA_10x10 = -58,
    ASTC_RGBA_8x8 = -57,
    ASTC_RGBA_6x6 = -56,
    ASTC_RGBA_5x5 = -55,
    ASTC_RGBA_4x4 = -54,
    ASTC_RGB_12x12 = -53,
    ASTC_RGB_10x10 = -52,
    ASTC_RGB_8x8 = -51,
    ASTC_RGB_6x6 = -50,
    ASTC_RGB_5x5 = -49,
    ASTC_RGB_4x4 = -48,
}
declare const enum SpritePackingMode {
    Tight = 0,
    Rectangle = 1,
}
declare const enum SpritePackingRotation {
    None = 0,
    FlipHorizontal = 1,
    FlipVertical = 2,
    Rotate180 = 3,
    Any = 15,
}
declare const enum SpriteMeshType {
    FullRect = 0,
    Tight = 1,
}
declare const enum DefaultFormat {
    LDR = 0,
    HDR = 1,
    DepthStencil = 2,
    Shadow = 3,
    Video = 4,
}
declare const enum TextureCreationFlags {
    None = 0,
    MipChain = 1,
    DontInitializePixels = 4,
    Crunch = 64,
    DontUploadUponCreate = 1024,
    IgnoreMipmapLimit = 2048,
}
declare const enum RenderingPath {
    VertexLit = 0,
    Forward = 1,
    DeferredLighting = 2,
    DeferredShading = 3,
    UsePlayerSettings = -1,
}
declare const enum OpaqueSortMode {
    Default = 0,
    FrontToBack = 1,
    NoDistanceSort = 2,
}
declare const enum TransparencySortMode {
    Default = 0,
    Perspective = 1,
    Orthographic = 2,
    CustomAxis = 3,
}
declare const enum CameraType {
    Game = 1,
    SceneView = 2,
    Preview = 4,
    VR = 8,
    Reflection = 16,
}
declare const enum CameraClearFlags {
    Skybox = 1,
    Color = 2,
    SolidColor = 2,
    Depth = 3,
    Nothing = 4,
}
declare const enum DepthTextureMode {
    None = 0,
    Depth = 1,
    DepthNormals = 2,
    MotionVectors = 4,
}
declare const enum GateFitMode {
    None = 0,
    Vertical = 1,
    Horizontal = 2,
    Fill = 3,
    Overscan = 4,
}
declare const enum VRTextureUsage {
    None = 0,
    OneEye = 1,
    TwoEyes = 2,
    DeviceSpecific = 3,
}
declare const enum RenderTextureMemoryless {
    None = 0,
    Color = 1,
    Depth = 2,
    MSAA = 4,
}
declare const enum RenderTextureFormat {
    ARGB32 = 0,
    Depth = 1,
    ARGBHalf = 2,
    Shadowmap = 3,
    RGB565 = 4,
    ARGB4444 = 5,
    ARGB1555 = 6,
    Default = 7,
    ARGB2101010 = 8,
    DefaultHDR = 9,
    ARGB64 = 10,
    ARGBFloat = 11,
    RGFloat = 12,
    RGHalf = 13,
    RFloat = 14,
    RHalf = 15,
    R8 = 16,
    ARGBInt = 17,
    RGInt = 18,
    RInt = 19,
    BGRA32 = 20,
    RGB111110Float = 22,
    RG32 = 23,
    RGBAUShort = 24,
    RG16 = 25,
    BGRA10101010_XR = 26,
    BGR101010_XR = 27,
    R16 = 28,
}
declare const enum ShadowSamplingMode {
    CompareDepths = 0,
    RawDepth = 1,
    None = 2,
}
declare const enum RenderTextureCreationFlags {
    MipMap = 1,
    AutoGenerateMips = 2,
    SRGB = 4,
    EyeTexture = 8,
    EnableRandomWrite = 16,
    CreatedFromScript = 32,
    AllowVerticalFlip = 128,
    NoResolvedColorSurface = 256,
    DynamicallyScalable = 1024,
    BindMS = 2048,
    DynamicallyScalableExplicit = 131072,
}
declare const enum MonoOrStereoscopicEye {
    Left = 0,
    Right = 1,
    Mono = 2,
}
declare const enum RenderTextureReadWrite {
    Default = 0,
    Linear = 1,
    sRGB = 2,
}
declare const enum StereoTargetEyeMask {
    None = 0,
    Left = 1,
    Right = 2,
    Both = 3,
}
declare const enum SceneViewFilterMode {
    Off = 0,
    ShowFiltered = 1,
}
declare const enum CameraEvent {
    BeforeDepthTexture = 0,
    AfterDepthTexture = 1,
    BeforeDepthNormalsTexture = 2,
    AfterDepthNormalsTexture = 3,
    BeforeGBuffer = 4,
    AfterGBuffer = 5,
    BeforeLighting = 6,
    AfterLighting = 7,
    BeforeFinalPass = 8,
    AfterFinalPass = 9,
    BeforeForwardOpaque = 10,
    AfterForwardOpaque = 11,
    BeforeImageEffectsOpaque = 12,
    AfterImageEffectsOpaque = 13,
    BeforeSkybox = 14,
    AfterSkybox = 15,
    BeforeForwardAlpha = 16,
    AfterForwardAlpha = 17,
    BeforeImageEffects = 18,
    AfterImageEffects = 19,
    AfterEverything = 20,
    BeforeReflections = 21,
    AfterReflections = 22,
    BeforeHaloAndLensFlares = 23,
    AfterHaloAndLensFlares = 24,
}
declare const enum RenderBufferLoadAction {
    Load = 0,
    Clear = 1,
    DontCare = 2,
}
declare const enum RenderBufferStoreAction {
    Store = 0,
    Resolve = 1,
    StoreAndResolve = 2,
    DontCare = 3,
}
declare const enum SubPassFlags {
    None = 0,
    ReadOnlyDepth = 2,
    ReadOnlyStencil = 4,
    ReadOnlyDepthStencil = 6,
}
declare const enum ShaderKeywordType {
    None = 0,
    BuiltinDefault = 2,
    BuiltinExtra = 6,
    BuiltinAutoStripped = 10,
    UserDefined = 16,
    Plugin = 32,
}
declare const enum ShaderPropertyFlags {
    None = 0,
    HideInInspector = 1,
    PerRendererData = 2,
    NoScaleOffset = 4,
    Normal = 8,
    HDR = 16,
    Gamma = 32,
    NonModifiableTextureData = 64,
    MainTexture = 128,
    MainColor = 256,
}
declare const enum ShaderPropertyType {
    Color = 0,
    Vector = 1,
    Float = 2,
    Range = 3,
    Texture = 4,
    Int = 5,
}
declare const enum ShadowCastingMode {
    Off = 0,
    On = 1,
    TwoSided = 2,
    ShadowsOnly = 3,
}
declare const enum MotionVectorGenerationMode {
    Camera = 0,
    Object = 1,
    ForceNoMotion = 2,
}
declare const enum LightProbeUsage {
    Off = 0,
    BlendProbes = 1,
    UseProxyVolume = 2,
    CustomProvided = 4,
}
declare const enum ReflectionProbeUsage {
    Off = 0,
    BlendProbes = 1,
    BlendProbesAndSkybox = 2,
    Simple = 3,
}
declare const enum RayTracingMode {
    Off = 0,
    Static = 1,
    DynamicTransform = 2,
    DynamicGeometry = 3,
}
declare const enum RayTracingAccelerationStructureBuildFlags {
    None = 0,
    PreferFastTrace = 1,
    PreferFastBuild = 2,
    MinimizeMemory = 4,
}
declare const enum LODFadeMode {
    None = 0,
    CrossFade = 1,
    SpeedTree = 2,
}
declare const enum ReflectionProbeClearFlags {
    Skybox = 1,
    SolidColor = 2,
}
declare const enum ReflectionProbeMode {
    Baked = 0,
    Realtime = 1,
    Custom = 2,
}
declare const enum ReflectionProbeRefreshMode {
    OnAwake = 0,
    EveryFrame = 1,
    ViaScripting = 2,
}
declare const enum ReflectionProbeTimeSlicingMode {
    AllFacesAtOnce = 0,
    IndividualFaces = 1,
    NoTimeSlicing = 2,
}
declare const enum ReflectionProbeEvent {
    ReflectionProbeAdded = 0,
    ReflectionProbeRemoved = 1,
}
declare const enum RenderTextureSubElement {
    Color = 0,
    Depth = 1,
    Stencil = 2,
    Default = 3,
}
declare const enum MaterialGlobalIlluminationFlags {
    None = 0,
    RealtimeEmissive = 1,
    BakedEmissive = 2,
    AnyEmissive = 3,
    EmissiveIsBlack = 4,
}
declare const enum MaterialPropertyType {
    Float = 0,
    Int = 1,
    Vector = 2,
    Matrix = 3,
    Texture = 4,
    ConstantBuffer = 5,
    ComputeBuffer = 6,
}
declare const enum RTClearFlags {
    None = 0,
    Color = 1,
    Depth = 2,
    ColorDepth = 3,
    Stencil = 4,
    ColorStencil = 5,
    DepthStencil = 6,
    All = 7,
}
declare const enum SynchronisationStage {
    VertexProcessing = 0,
    PixelProcessing = 1,
}
declare const enum GraphicsFenceType {
    AsyncQueueSynchronisation = 0,
    CPUSynchronisation = 1,
}
declare const enum SynchronisationStageFlags {
    VertexProcessing = 1,
    PixelProcessing = 2,
    ComputeProcessing = 4,
    AllGPUOperations = 7,
}
declare const enum CustomMarkerCallbackFlags {
    CustomMarkerCallbackDefault = 0,
    CustomMarkerCallbackForceInvalidateStateTracking = 4,
}
declare const enum CameraLateLatchMatrixType {
    View = 0,
    InverseView = 1,
    ViewProjection = 2,
    InverseViewProjection = 3,
}
declare const enum CommandBufferExecutionFlags {
    None = 0,
    AsyncCompute = 2,
}
declare const enum FoveatedRenderingMode {
    Disabled = 0,
    Enabled = 1,
}
declare const enum CubemapFace {
    PositiveX = 0,
    NegativeX = 1,
    PositiveY = 2,
    NegativeY = 3,
    PositiveZ = 4,
    NegativeZ = 5,
    Unknown = -1,
}
declare const enum RenderTargetFlags {
    None = 0,
    ReadOnlyDepth = 1,
    ReadOnlyStencil = 2,
    ReadOnlyDepthStencil = 3,
}
declare const enum SinglePassStereoMode {
    None = 0,
    SideBySide = 1,
    Instancing = 2,
    Multiview = 3,
}
declare const enum ComputeQueueType {
    Default = 0,
    Background = 1,
    Urgent = 2,
}
declare const enum StereoscopicEye {
    Left = 0,
    Right = 1,
}
declare const enum IMECompositionMode {
    Auto = 0,
    On = 1,
    Off = 2,
}
declare const enum DeviceOrientation {
    Unknown = 0,
    Portrait = 1,
    PortraitUpsideDown = 2,
    LandscapeLeft = 3,
    LandscapeRight = 4,
    FaceUp = 5,
    FaceDown = 6,
}
declare const enum LocationServiceStatus {
    Stopped = 0,
    Initializing = 1,
    Running = 2,
    Failed = 3,
}
declare const enum TouchPhase {
    Began = 0,
    Moved = 1,
    Stationary = 2,
    Ended = 3,
    Canceled = 4,
}
declare const enum TouchType {
    Direct = 0,
    Indirect = 1,
    Stylus = 2,
}
declare const enum KeyCode {
    None = 0,
    Backspace = 8,
    Tab = 9,
    Clear = 12,
    Return = 13,
    Pause = 19,
    Escape = 27,
    Space = 32,
    Exclaim = 33,
    DoubleQuote = 34,
    Hash = 35,
    Dollar = 36,
    Percent = 37,
    Ampersand = 38,
    Quote = 39,
    LeftParen = 40,
    RightParen = 41,
    Asterisk = 42,
    Plus = 43,
    Comma = 44,
    Minus = 45,
    Period = 46,
    Slash = 47,
    Alpha0 = 48,
    Alpha1 = 49,
    Alpha2 = 50,
    Alpha3 = 51,
    Alpha4 = 52,
    Alpha5 = 53,
    Alpha6 = 54,
    Alpha7 = 55,
    Alpha8 = 56,
    Alpha9 = 57,
    Colon = 58,
    Semicolon = 59,
    Less = 60,
    Equals = 61,
    Greater = 62,
    Question = 63,
    At = 64,
    LeftBracket = 91,
    Backslash = 92,
    RightBracket = 93,
    Caret = 94,
    Underscore = 95,
    BackQuote = 96,
    A = 97,
    B = 98,
    C = 99,
    D = 100,
    E = 101,
    F = 102,
    G = 103,
    H = 104,
    I = 105,
    J = 106,
    K = 107,
    L = 108,
    M = 109,
    N = 110,
    O = 111,
    P = 112,
    Q = 113,
    R = 114,
    S = 115,
    T = 116,
    U = 117,
    V = 118,
    W = 119,
    X = 120,
    Y = 121,
    Z = 122,
    LeftCurlyBracket = 123,
    Pipe = 124,
    RightCurlyBracket = 125,
    Tilde = 126,
    Delete = 127,
    Keypad0 = 256,
    Keypad1 = 257,
    Keypad2 = 258,
    Keypad3 = 259,
    Keypad4 = 260,
    Keypad5 = 261,
    Keypad6 = 262,
    Keypad7 = 263,
    Keypad8 = 264,
    Keypad9 = 265,
    KeypadPeriod = 266,
    KeypadDivide = 267,
    KeypadMultiply = 268,
    KeypadMinus = 269,
    KeypadPlus = 270,
    KeypadEnter = 271,
    KeypadEquals = 272,
    UpArrow = 273,
    DownArrow = 274,
    RightArrow = 275,
    LeftArrow = 276,
    Insert = 277,
    Home = 278,
    End = 279,
    PageUp = 280,
    PageDown = 281,
    F1 = 282,
    F2 = 283,
    F3 = 284,
    F4 = 285,
    F5 = 286,
    F6 = 287,
    F7 = 288,
    F8 = 289,
    F9 = 290,
    F10 = 291,
    F11 = 292,
    F12 = 293,
    F13 = 294,
    F14 = 295,
    F15 = 296,
    Numlock = 300,
    CapsLock = 301,
    ScrollLock = 302,
    RightShift = 303,
    LeftShift = 304,
    RightControl = 305,
    LeftControl = 306,
    RightAlt = 307,
    LeftAlt = 308,
    RightMeta = 309,
    RightCommand = 309,
    RightApple = 309,
    LeftMeta = 310,
    LeftCommand = 310,
    LeftApple = 310,
    LeftWindows = 311,
    RightWindows = 312,
    AltGr = 313,
    Help = 315,
    Print = 316,
    SysReq = 317,
    Break = 318,
    Menu = 319,
    WheelUp = 321,
    WheelDown = 322,
    Mouse0 = 323,
    Mouse1 = 324,
    Mouse2 = 325,
    Mouse3 = 326,
    Mouse4 = 327,
    Mouse5 = 328,
    Mouse6 = 329,
    JoystickButton0 = 330,
    JoystickButton1 = 331,
    JoystickButton2 = 332,
    JoystickButton3 = 333,
    JoystickButton4 = 334,
    JoystickButton5 = 335,
    JoystickButton6 = 336,
    JoystickButton7 = 337,
    JoystickButton8 = 338,
    JoystickButton9 = 339,
    JoystickButton10 = 340,
    JoystickButton11 = 341,
    JoystickButton12 = 342,
    JoystickButton13 = 343,
    JoystickButton14 = 344,
    JoystickButton15 = 345,
    JoystickButton16 = 346,
    JoystickButton17 = 347,
    JoystickButton18 = 348,
    JoystickButton19 = 349,
    Joystick1Button0 = 350,
    Joystick1Button1 = 351,
    Joystick1Button2 = 352,
    Joystick1Button3 = 353,
    Joystick1Button4 = 354,
    Joystick1Button5 = 355,
    Joystick1Button6 = 356,
    Joystick1Button7 = 357,
    Joystick1Button8 = 358,
    Joystick1Button9 = 359,
    Joystick1Button10 = 360,
    Joystick1Button11 = 361,
    Joystick1Button12 = 362,
    Joystick1Button13 = 363,
    Joystick1Button14 = 364,
    Joystick1Button15 = 365,
    Joystick1Button16 = 366,
    Joystick1Button17 = 367,
    Joystick1Button18 = 368,
    Joystick1Button19 = 369,
    Joystick2Button0 = 370,
    Joystick2Button1 = 371,
    Joystick2Button2 = 372,
    Joystick2Button3 = 373,
    Joystick2Button4 = 374,
    Joystick2Button5 = 375,
    Joystick2Button6 = 376,
    Joystick2Button7 = 377,
    Joystick2Button8 = 378,
    Joystick2Button9 = 379,
    Joystick2Button10 = 380,
    Joystick2Button11 = 381,
    Joystick2Button12 = 382,
    Joystick2Button13 = 383,
    Joystick2Button14 = 384,
    Joystick2Button15 = 385,
    Joystick2Button16 = 386,
    Joystick2Button17 = 387,
    Joystick2Button18 = 388,
    Joystick2Button19 = 389,
    Joystick3Button0 = 390,
    Joystick3Button1 = 391,
    Joystick3Button2 = 392,
    Joystick3Button3 = 393,
    Joystick3Button4 = 394,
    Joystick3Button5 = 395,
    Joystick3Button6 = 396,
    Joystick3Button7 = 397,
    Joystick3Button8 = 398,
    Joystick3Button9 = 399,
    Joystick3Button10 = 400,
    Joystick3Button11 = 401,
    Joystick3Button12 = 402,
    Joystick3Button13 = 403,
    Joystick3Button14 = 404,
    Joystick3Button15 = 405,
    Joystick3Button16 = 406,
    Joystick3Button17 = 407,
    Joystick3Button18 = 408,
    Joystick3Button19 = 409,
    Joystick4Button0 = 410,
    Joystick4Button1 = 411,
    Joystick4Button2 = 412,
    Joystick4Button3 = 413,
    Joystick4Button4 = 414,
    Joystick4Button5 = 415,
    Joystick4Button6 = 416,
    Joystick4Button7 = 417,
    Joystick4Button8 = 418,
    Joystick4Button9 = 419,
    Joystick4Button10 = 420,
    Joystick4Button11 = 421,
    Joystick4Button12 = 422,
    Joystick4Button13 = 423,
    Joystick4Button14 = 424,
    Joystick4Button15 = 425,
    Joystick4Button16 = 426,
    Joystick4Button17 = 427,
    Joystick4Button18 = 428,
    Joystick4Button19 = 429,
    Joystick5Button0 = 430,
    Joystick5Button1 = 431,
    Joystick5Button2 = 432,
    Joystick5Button3 = 433,
    Joystick5Button4 = 434,
    Joystick5Button5 = 435,
    Joystick5Button6 = 436,
    Joystick5Button7 = 437,
    Joystick5Button8 = 438,
    Joystick5Button9 = 439,
    Joystick5Button10 = 440,
    Joystick5Button11 = 441,
    Joystick5Button12 = 442,
    Joystick5Button13 = 443,
    Joystick5Button14 = 444,
    Joystick5Button15 = 445,
    Joystick5Button16 = 446,
    Joystick5Button17 = 447,
    Joystick5Button18 = 448,
    Joystick5Button19 = 449,
    Joystick6Button0 = 450,
    Joystick6Button1 = 451,
    Joystick6Button2 = 452,
    Joystick6Button3 = 453,
    Joystick6Button4 = 454,
    Joystick6Button5 = 455,
    Joystick6Button6 = 456,
    Joystick6Button7 = 457,
    Joystick6Button8 = 458,
    Joystick6Button9 = 459,
    Joystick6Button10 = 460,
    Joystick6Button11 = 461,
    Joystick6Button12 = 462,
    Joystick6Button13 = 463,
    Joystick6Button14 = 464,
    Joystick6Button15 = 465,
    Joystick6Button16 = 466,
    Joystick6Button17 = 467,
    Joystick6Button18 = 468,
    Joystick6Button19 = 469,
    Joystick7Button0 = 470,
    Joystick7Button1 = 471,
    Joystick7Button2 = 472,
    Joystick7Button3 = 473,
    Joystick7Button4 = 474,
    Joystick7Button5 = 475,
    Joystick7Button6 = 476,
    Joystick7Button7 = 477,
    Joystick7Button8 = 478,
    Joystick7Button9 = 479,
    Joystick7Button10 = 480,
    Joystick7Button11 = 481,
    Joystick7Button12 = 482,
    Joystick7Button13 = 483,
    Joystick7Button14 = 484,
    Joystick7Button15 = 485,
    Joystick7Button16 = 486,
    Joystick7Button17 = 487,
    Joystick7Button18 = 488,
    Joystick7Button19 = 489,
    Joystick8Button0 = 490,
    Joystick8Button1 = 491,
    Joystick8Button2 = 492,
    Joystick8Button3 = 493,
    Joystick8Button4 = 494,
    Joystick8Button5 = 495,
    Joystick8Button6 = 496,
    Joystick8Button7 = 497,
    Joystick8Button8 = 498,
    Joystick8Button9 = 499,
    Joystick8Button10 = 500,
    Joystick8Button11 = 501,
    Joystick8Button12 = 502,
    Joystick8Button13 = 503,
    Joystick8Button14 = 504,
    Joystick8Button15 = 505,
    Joystick8Button16 = 506,
    Joystick8Button17 = 507,
    Joystick8Button18 = 508,
    Joystick8Button19 = 509,
}
declare const enum PenStatus {
    None = 0,
    Contact = 1,
    Barrel = 2,
    Inverted = 4,
    Eraser = 8,
}
declare const enum PenEventType {
    NoContact = 0,
    PenDown = 1,
    PenUp = 2,
}
declare const enum InputButton {
    Left = 0,
    Right = 1,
    Middle = 2,
}
declare const enum MoveDirection {
    Left = 0,
    Up = 1,
    Right = 2,
    Down = 3,
    None = 4,
}
declare const enum Mode {
    None = 0,
    Horizontal = 1,
    Vertical = 2,
    Automatic = 3,
    Explicit = 4,
}
declare const enum Transition {
    None = 0,
    ColorTint = 1,
    SpriteSwap = 2,
    Animation = 3,
}
declare const enum CanvasUpdate {
    Prelayout = 0,
    Layout = 1,
    PostLayout = 2,
    PreRender = 3,
    LatePreRender = 4,
    MaxUpdateValue = 5,
}
declare const enum Edge {
    Left = 0,
    Right = 1,
    Top = 2,
    Bottom = 3,
}
declare const enum Axis {
    Horizontal = 0,
    Vertical = 1,
}
declare const enum RenderMode {
    ScreenSpaceOverlay = 0,
    ScreenSpaceCamera = 1,
    WorldSpace = 2,
}
declare const enum AdditionalCanvasShaderChannels {
    None = 0,
    TexCoord1 = 1,
    TexCoord2 = 2,
    TexCoord3 = 4,
    Normal = 8,
    Tangent = 16,
}
declare const enum StandaloneRenderResize {
    Enabled = 0,
    Disabled = 1,
}
declare const enum Type {
    Simple = 0,
    Sliced = 1,
    Tiled = 2,
    Filled = 3,
}
declare const enum FillMethod {
    Horizontal = 0,
    Vertical = 1,
    Radial90 = 2,
    Radial180 = 3,
    Radial360 = 4,
}
declare const enum AnimatorUpdateMode {
    Normal = 0,
    Fixed = 1,
    AnimatePhysics = 1,
    UnscaledTime = 2,
}
declare const enum AnimatorControllerParameterType {
    Float = 1,
    Int = 3,
    Bool = 4,
    Trigger = 9,
}
declare const enum AnimatorCullingMode {
    AlwaysAnimate = 0,
    CullUpdateTransforms = 1,
    BasedOnRenderers = 1,
    CullCompletely = 2,
}
declare const enum AnimatorRecorderMode {
    Offline = 0,
    Playback = 1,
    Record = 2,
}
declare const enum WrapMode {
    Default = 0,
    Once = 1,
    Clamp = 1,
    Loop = 2,
    PingPong = 4,
    ClampForever = 8,
}
declare const enum AnimationBlendMode {
    Blend = 0,
    Additive = 1,
}
declare const enum WeightedMode {
    None = 0,
    In = 1,
    Out = 2,
    Both = 3,
}
declare const enum DirectorUpdateMode {
    DSPClock = 0,
    GameTime = 1,
    UnscaledGameTime = 2,
    Manual = 3,
}
declare const enum DurationUnit {
    Fixed = 0,
    Normalized = 1,
}
declare const enum HumanBodyBones {
    Hips = 0,
    LeftUpperLeg = 1,
    RightUpperLeg = 2,
    LeftLowerLeg = 3,
    RightLowerLeg = 4,
    LeftFoot = 5,
    RightFoot = 6,
    Spine = 7,
    Chest = 8,
    Neck = 9,
    Head = 10,
    LeftShoulder = 11,
    RightShoulder = 12,
    LeftUpperArm = 13,
    RightUpperArm = 14,
    LeftLowerArm = 15,
    RightLowerArm = 16,
    LeftHand = 17,
    RightHand = 18,
    LeftToes = 19,
    RightToes = 20,
    LeftEye = 21,
    RightEye = 22,
    Jaw = 23,
    LeftThumbProximal = 24,
    LeftThumbIntermediate = 25,
    LeftThumbDistal = 26,
    LeftIndexProximal = 27,
    LeftIndexIntermediate = 28,
    LeftIndexDistal = 29,
    LeftMiddleProximal = 30,
    LeftMiddleIntermediate = 31,
    LeftMiddleDistal = 32,
    LeftRingProximal = 33,
    LeftRingIntermediate = 34,
    LeftRingDistal = 35,
    LeftLittleProximal = 36,
    LeftLittleIntermediate = 37,
    LeftLittleDistal = 38,
    RightThumbProximal = 39,
    RightThumbIntermediate = 40,
    RightThumbDistal = 41,
    RightIndexProximal = 42,
    RightIndexIntermediate = 43,
    RightIndexDistal = 44,
    RightMiddleProximal = 45,
    RightMiddleIntermediate = 46,
    RightMiddleDistal = 47,
    RightRingProximal = 48,
    RightRingIntermediate = 49,
    RightRingDistal = 50,
    RightLittleProximal = 51,
    RightLittleIntermediate = 52,
    RightLittleDistal = 53,
    UpperChest = 54,
    LastBone = 55,
}
declare const enum AvatarIKHint {
    LeftKnee = 0,
    RightKnee = 1,
    LeftElbow = 2,
    RightElbow = 3,
}
declare const enum AvatarIKGoal {
    LeftFoot = 0,
    RightFoot = 1,
    LeftHand = 2,
    RightHand = 3,
}
declare const enum AvatarTarget {
    Root = 0,
    Body = 1,
    LeftFoot = 2,
    RightFoot = 3,
    LeftHand = 4,
    RightHand = 5,
}
declare const enum ReceiveGI {
    Lightmaps = 1,
    LightProbes = 2,
}
declare const enum FontStyle {
    Normal = 0,
    Bold = 1,
    Italic = 2,
    BoldAndItalic = 3,
}
declare const enum AtlasPopulationMode {
    Static = 0,
    Dynamic = 1,
    DynamicOS = 2,
}
declare const enum GlyphClassDefinitionType {
    Undefined = 0,
    Base = 1,
    Ligature = 2,
    Mark = 3,
    Component = 4,
}
declare const enum TextElementType {
    Character = 1,
    Sprite = 2,
}
declare const enum GlyphRenderMode {
    SMOOTH = 4117,
    RASTER = 4118,
    SMOOTH_HINTED = 4121,
    RASTER_HINTED = 4122,
    SDF = 4134,
    SDFAA = 4165,
    SDFAA_HINTED = 4169,
    SDF8 = 8230,
    SDF16 = 16422,
    SDF32 = 32806,
    COLOR = 69652,
    COLOR_HINTED = 69656,
}
declare const enum FontFeatureLookupFlags {
    None = 0,
    IgnoreLigatures = 4,
    IgnoreSpacingAdjustments = 256,
}
declare const enum ColorMode {
    Single = 0,
    HorizontalGradient = 1,
    VerticalGradient = 2,
    FourCornersGradient = 3,
}
declare const enum FontWeight {
    Thin = 100,
    ExtraLight = 200,
    Light = 300,
    Regular = 400,
    Medium = 500,
    SemiBold = 600,
    Bold = 700,
    Heavy = 800,
    Black = 900,
}
declare const enum FontStyles {
    Normal = 0,
    Bold = 1,
    Italic = 2,
    Underline = 4,
    LowerCase = 8,
    UpperCase = 16,
    SmallCaps = 32,
    Strikethrough = 64,
    Superscript = 128,
    Subscript = 256,
    Highlight = 512,
}
declare const enum HorizontalAlignmentOptions {
    Left = 1,
    Center = 2,
    Right = 4,
    Justified = 8,
    Flush = 16,
    Geometry = 32,
}
declare const enum VerticalAlignmentOptions {
    Top = 256,
    Middle = 512,
    Bottom = 1024,
    Baseline = 2048,
    Geometry = 4096,
    Capline = 8192,
}
declare const enum TextAlignmentOptions {
    TopLeft = 257,
    Top = 258,
    TopRight = 260,
    TopJustified = 264,
    TopFlush = 272,
    TopGeoAligned = 288,
    Left = 513,
    Center = 514,
    Right = 516,
    Justified = 520,
    Flush = 528,
    CenterGeoAligned = 544,
    BottomLeft = 1025,
    Bottom = 1026,
    BottomRight = 1028,
    BottomJustified = 1032,
    BottomFlush = 1040,
    BottomGeoAligned = 1056,
    BaselineLeft = 2049,
    Baseline = 2050,
    BaselineRight = 2052,
    BaselineJustified = 2056,
    BaselineFlush = 2064,
    BaselineGeoAligned = 2080,
    MidlineLeft = 4097,
    Midline = 4098,
    MidlineRight = 4100,
    MidlineJustified = 4104,
    MidlineFlush = 4112,
    MidlineGeoAligned = 4128,
    CaplineLeft = 8193,
    Capline = 8194,
    CaplineRight = 8196,
    CaplineJustified = 8200,
    CaplineFlush = 8208,
    CaplineGeoAligned = 8224,
    Converted = 65535,
}
declare const enum TextWrappingModes {
    NoWrap = 0,
    Normal = 1,
    PreserveWhitespace = 2,
    PreserveWhitespaceNoWrap = 3,
}
declare const enum TextOverflowModes {
    Overflow = 0,
    Ellipsis = 1,
    Masking = 2,
    Truncate = 3,
    ScrollRect = 4,
    Page = 5,
    Linked = 6,
}
declare const enum OTL_FeatureTag {
    kern = 1801810542,
    liga = 1818847073,
    mark = 1835102827,
    mkmk = 1835756907,
}
declare const enum TextureMappingOptions {
    Character = 0,
    Line = 1,
    Paragraph = 2,
    MatchAspect = 3,
}
declare const enum TextRenderFlags {
    DontRender = 0,
    Render = 255,
}
declare const enum VertexSortingOrder {
    Normal = 0,
    Reverse = 1,
}
declare const enum TMP_TextElementType {
    Character = 0,
    Sprite = 1,
}
declare const enum TMP_VertexDataUpdateFlags {
    None = 0,
    Vertices = 1,
    Uv0 = 2,
    Uv2 = 4,
    Uv4 = 8,
    Colors32 = 16,
    All = 255,
}
declare const enum AnimationUpdateMode {
    Normal = 0,
    Fixed = 1,
}
declare const enum AnimationCullingType {
    AlwaysAnimate = 0,
    BasedOnRenderers = 1,
    BasedOnClipBounds = 2,
    BasedOnUserBounds = 3,
}
declare const enum PlayMode {
    StopSameLayer = 0,
    StopAll = 4,
}
declare const enum QueueMode {
    CompleteOthers = 0,
    PlayNow = 2,
}
declare const enum Status {
    Visible = 0,
    Done = 1,
    Canceled = 2,
    LostFocus = 3,
}
declare const enum TouchScreenKeyboardType {
    Default = 0,
    ASCIICapable = 1,
    NumbersAndPunctuation = 2,
    URL = 3,
    NumberPad = 4,
    PhonePad = 5,
    NamePhonePad = 6,
    EmailAddress = 7,
    NintendoNetworkAccount = 8,
    Social = 9,
    Search = 10,
    DecimalPad = 11,
    OneTimeCode = 12,
}
declare const enum InputFieldAppearance {
    Customizable = 0,
    AlwaysVisible = 1,
    AlwaysHidden = 2,
}
declare const enum Align {
    Auto = 0,
    FlexStart = 1,
    Center = 2,
    FlexEnd = 3,
    Stretch = 4,
}
declare const enum BackgroundPositionKeyword {
    Center = 0,
    Top = 1,
    Bottom = 2,
    Left = 3,
    Right = 4,
}
declare const enum LengthUnit {
    Pixel = 0,
    Percent = 1,
}
declare const enum Repeat {
    NoRepeat = 0,
    Space = 1,
    Round = 2,
    Repeat = 3,
}
declare const enum BackgroundSizeType {
    Length = 0,
    Cover = 1,
    Contain = 2,
}
declare const enum DisplayStyle {
    Flex = 0,
    None = 1,
}
declare const enum StyleKeyword {
    Undefined = 0,
    Null = 1,
    Auto = 2,
    None = 3,
    Initial = 4,
}
declare const enum FlexDirection {
    Column = 0,
    ColumnReverse = 1,
    Row = 2,
    RowReverse = 3,
}
declare const enum Wrap {
    NoWrap = 0,
    Wrap = 1,
    WrapReverse = 2,
}
declare const enum Justify {
    FlexStart = 0,
    Center = 1,
    FlexEnd = 2,
    SpaceBetween = 3,
    SpaceAround = 4,
    SpaceEvenly = 5,
}
declare const enum Position {
    Relative = 0,
    Absolute = 1,
}
declare const enum AngleUnit {
    Degree = 0,
    Gradian = 1,
    Radian = 2,
    Turn = 3,
}
declare const enum TextOverflow {
    Clip = 0,
    Ellipsis = 1,
}
declare const enum TimeUnit {
    Second = 0,
    Millisecond = 1,
}
declare const enum EasingMode {
    Ease = 0,
    EaseIn = 1,
    EaseOut = 2,
    EaseInOut = 3,
    Linear = 4,
    EaseInSine = 5,
    EaseOutSine = 6,
    EaseInOutSine = 7,
    EaseInCubic = 8,
    EaseOutCubic = 9,
    EaseInOutCubic = 10,
    EaseInCirc = 11,
    EaseOutCirc = 12,
    EaseInOutCirc = 13,
    EaseInElastic = 14,
    EaseOutElastic = 15,
    EaseInOutElastic = 16,
    EaseInBack = 17,
    EaseOutBack = 18,
    EaseInOutBack = 19,
    EaseInBounce = 20,
    EaseOutBounce = 21,
    EaseInOutBounce = 22,
}
declare const enum EditorTextRenderingMode {
    SDF = 0,
    Bitmap = 1,
}
declare const enum AtlasPopulationMode {
    Static = 0,
    Dynamic = 1,
    DynamicOS = 2,
}
declare const enum TextElementType {
    Character = 1,
    Sprite = 2,
}
declare const enum TextAnchor {
    UpperLeft = 0,
    UpperCenter = 1,
    UpperRight = 2,
    MiddleLeft = 3,
    MiddleCenter = 4,
    MiddleRight = 5,
    LowerLeft = 6,
    LowerCenter = 7,
    LowerRight = 8,
}
declare const enum TextGeneratorType {
    Standard = 0,
    Advanced = 1,
}
declare const enum TextOverflowPosition {
    End = 0,
    Start = 1,
    Middle = 2,
}
declare const enum Visibility {
    Visible = 0,
    Hidden = 1,
}
declare const enum WhiteSpace {
    Normal = 0,
    NoWrap = 1,
    Pre = 2,
    PreWrap = 3,
}
declare const enum StylePropertyId {
    Unknown = 0,
    Color = 65536,
    FontSize = 65537,
    LetterSpacing = 65538,
    TextShadow = 65539,
    UnityEditorTextRenderingMode = 65540,
    UnityFont = 65541,
    UnityFontDefinition = 65542,
    UnityFontStyleAndWeight = 65543,
    UnityParagraphSpacing = 65544,
    UnityTextAlign = 65545,
    UnityTextGenerator = 65546,
    UnityTextOutlineColor = 65547,
    UnityTextOutlineWidth = 65548,
    Visibility = 65549,
    WhiteSpace = 65550,
    WordSpacing = 65551,
    AlignContent = 131072,
    AlignItems = 131073,
    AlignSelf = 131074,
    BorderBottomWidth = 131075,
    BorderLeftWidth = 131076,
    BorderRightWidth = 131077,
    BorderTopWidth = 131078,
    Bottom = 131079,
    Display = 131080,
    FlexBasis = 131081,
    FlexDirection = 131082,
    FlexGrow = 131083,
    FlexShrink = 131084,
    FlexWrap = 131085,
    Height = 131086,
    JustifyContent = 131087,
    Left = 131088,
    MarginBottom = 131089,
    MarginLeft = 131090,
    MarginRight = 131091,
    MarginTop = 131092,
    MaxHeight = 131093,
    MaxWidth = 131094,
    MinHeight = 131095,
    MinWidth = 131096,
    PaddingBottom = 131097,
    PaddingLeft = 131098,
    PaddingRight = 131099,
    PaddingTop = 131100,
    Position = 131101,
    Right = 131102,
    Top = 131103,
    Width = 131104,
    Cursor = 196608,
    TextOverflow = 196609,
    UnityBackgroundImageTintColor = 196610,
    UnityOverflowClipBox = 196611,
    UnitySliceBottom = 196612,
    UnitySliceLeft = 196613,
    UnitySliceRight = 196614,
    UnitySliceScale = 196615,
    UnitySliceTop = 196616,
    UnityTextOverflowPosition = 196617,
    All = 262144,
    BackgroundPosition = 262145,
    BorderColor = 262146,
    BorderRadius = 262147,
    BorderWidth = 262148,
    Flex = 262149,
    Margin = 262150,
    Padding = 262151,
    Transition = 262152,
    UnityBackgroundScaleMode = 262153,
    UnityTextOutline = 262154,
    Rotate = 327680,
    Scale = 327681,
    TransformOrigin = 327682,
    Translate = 327683,
    TransitionDelay = 393216,
    TransitionDuration = 393217,
    TransitionProperty = 393218,
    TransitionTimingFunction = 393219,
    BackgroundColor = 458752,
    BackgroundImage = 458753,
    BackgroundPositionX = 458754,
    BackgroundPositionY = 458755,
    BackgroundRepeat = 458756,
    BackgroundSize = 458757,
    BorderBottomColor = 458758,
    BorderBottomLeftRadius = 458759,
    BorderBottomRightRadius = 458760,
    BorderLeftColor = 458761,
    BorderRightColor = 458762,
    BorderTopColor = 458763,
    BorderTopLeftRadius = 458764,
    BorderTopRightRadius = 458765,
    Opacity = 458766,
    Overflow = 458767,
    Custom = -1,
}
declare const enum PropagationPhase {
    None = 0,
    TrickleDown = 1,
    AtTarget = 2,
    BubbleUp = 3,
    DefaultAction = 4,
    DefaultActionAtTarget = 5,
}
declare const enum EventType {
    MouseDown = 0,
    mouseDown = 0,
    MouseUp = 1,
    mouseUp = 1,
    MouseMove = 2,
    mouseMove = 2,
    mouseDrag = 3,
    MouseDrag = 3,
    KeyDown = 4,
    keyDown = 4,
    keyUp = 5,
    KeyUp = 5,
    ScrollWheel = 6,
    scrollWheel = 6,
    Repaint = 7,
    repaint = 7,
    Layout = 8,
    layout = 8,
    DragUpdated = 9,
    dragUpdated = 9,
    dragPerform = 10,
    DragPerform = 10,
    ignore = 11,
    Ignore = 11,
    used = 12,
    Used = 12,
    ValidateCommand = 13,
    ExecuteCommand = 14,
    DragExited = 15,
    ContextClick = 16,
    MouseEnterWindow = 20,
    MouseLeaveWindow = 21,
    TouchDown = 30,
    TouchUp = 31,
    TouchMove = 32,
    TouchEnter = 33,
    TouchLeave = 34,
    TouchStationary = 35,
}
declare const enum PointerType {
    Mouse = 0,
    Touch = 1,
    Pen = 2,
}
declare const enum EventModifiers {
    None = 0,
    Shift = 1,
    Control = 2,
    Alt = 4,
    Command = 8,
    Numeric = 16,
    CapsLock = 32,
    FunctionKey = 64,
}
declare const enum TrickleDown {
    NoTrickleDown = 0,
    TrickleDown = 1,
}
declare const enum UsageHints {
    None = 0,
    DynamicTransform = 1,
    GroupTransform = 2,
    MaskContainer = 4,
    DynamicColor = 8,
}
declare const enum PickingMode {
    Position = 0,
    Ignore = 1,
}
declare const enum LanguageDirection {
    Inherit = 0,
    LTR = 1,
    RTL = 2,
}
declare const enum GradientMode {
    Blend = 0,
    Fixed = 1,
    PerceptualBlend = 2,
}
declare const enum ColorSpace {
    Gamma = 0,
    Linear = 1,
    Uninitialized = -1,
}
declare const enum LineJoin {
    Miter = 0,
    Bevel = 1,
    Round = 2,
}
declare const enum LineCap {
    Butt = 0,
    Round = 1,
}
declare const enum ArcDirection {
    Clockwise = 0,
    CounterClockwise = 1,
}
declare const enum FillRule {
    NonZero = 0,
    OddEven = 1,
}
declare const enum PropertyPathPartKind {
    Name = 0,
    Index = 1,
    Key = 2,
}
declare const enum ContextType {
    Player = 0,
    Editor = 1,
}
declare const enum Overflow {
    Visible = 0,
    Hidden = 1,
}
declare const enum OverflowClipBox {
    PaddingBox = 0,
    ContentBox = 1,
}
declare const enum BindingUpdateTrigger {
    WhenDirty = 0,
    OnSourceChanged = 1,
    EveryUpdate = 2,
}
declare const enum BindingLogLevel {
    None = 0,
    Once = 1,
    All = 2,
}
declare const enum MeasureMode {
    Undefined = 0,
    Exactly = 1,
    AtMost = 2,
}
declare const enum ScrollerVisibility {
    Auto = 0,
    AlwaysVisible = 1,
    Hidden = 2,
}
declare const enum FogMode {
    Linear = 1,
    Exponential = 2,
    ExponentialSquared = 3,
}
declare const enum AmbientMode {
    Skybox = 0,
    Trilight = 1,
    Flat = 3,
    Custom = 4,
}
declare const enum LightType {
    Spot = 0,
    Directional = 1,
    Point = 2,
    Area = 3,
    Rectangle = 3,
    Disc = 4,
    Pyramid = 5,
    Box = 6,
    Tube = 7,
}
declare const enum LightUnit {
    Lumen = 0,
    Candela = 1,
    Lux = 2,
    Nits = 3,
    Ev100 = 4,
}
declare const enum LightmapBakeType {
    Mixed = 1,
    Baked = 2,
    Realtime = 4,
}
declare const enum MixedLightingMode {
    IndirectOnly = 0,
    Subtractive = 1,
    Shadowmask = 2,
}
declare const enum LightShadowCasterMode {
    Default = 0,
    NonLightmappedOnly = 1,
    Everything = 2,
}
declare const enum LightShadows {
    None = 0,
    Hard = 1,
    Soft = 2,
}
declare const enum LightShadowResolution {
    Low = 0,
    Medium = 1,
    High = 2,
    VeryHigh = 3,
    FromQualitySettings = -1,
}
declare const enum LightRenderMode {
    Auto = 0,
    ForcePixel = 1,
    ForceVertex = 2,
}
declare const enum LightEvent {
    BeforeShadowMap = 0,
    AfterShadowMap = 1,
    BeforeScreenspaceMask = 2,
    AfterScreenspaceMask = 3,
    BeforeShadowMapPass = 4,
    AfterShadowMapPass = 5,
}
declare const enum ShadowMapPass {
    PointlightPositiveX = 1,
    PointlightNegativeX = 2,
    PointlightPositiveY = 4,
    PointlightNegativeY = 8,
    PointlightPositiveZ = 16,
    PointlightNegativeZ = 32,
    Pointlight = 63,
    DirectionalCascade0 = 64,
    DirectionalCascade1 = 128,
    DirectionalCascade2 = 256,
    DirectionalCascade3 = 512,
    Directional = 960,
    Spotlight = 1024,
    All = 2047,
    AreaLight = 2048,
}
declare const enum DefaultReflectionMode {
    Skybox = 0,
    Custom = 1,
}
declare const enum SyncDirection {
    ServerToClient = 0,
    ClientToServer = 1,
}
declare const enum SyncMode {
    Observers = 0,
    Owner = 1,
}
declare const enum Visibility {
    Default = 0,
    ForceHidden = 1,
    ForceShown = 2,
}
declare const enum LocalPhysicsMode {
    None = 0,
    Physics2D = 1,
    Physics3D = 2,
}
declare const enum LoadSceneMode {
    Single = 0,
    Additive = 1,
}
declare const enum UnloadSceneOptions {
    None = 0,
    UnloadAllEmbeddedSceneObjects = 1,
}
declare const enum AvatarMaskBodyPart {
    Root = 0,
    Body = 1,
    Head = 2,
    LeftLeg = 3,
    RightLeg = 4,
    LeftArm = 5,
    RightArm = 6,
    LeftFingers = 7,
    RightFingers = 8,
    LeftFootIK = 9,
    RightFootIK = 10,
    LeftHandIK = 11,
    RightHandIK = 12,
    LastBodyPart = 13,
}
declare const enum SkinQuality {
    Auto = 0,
    Bone1 = 1,
    Bone2 = 2,
    Bone4 = 4,
}
declare const enum ApplicationInstallMode {
    Unknown = 0,
    Store = 1,
    DeveloperBuild = 2,
    Adhoc = 3,
    Enterprise = 4,
    Editor = 5,
}
declare const enum ApplicationSandboxType {
    Unknown = 0,
    NotSandboxed = 1,
    Sandboxed = 2,
    SandboxBroken = 3,
}
declare const enum ThreadPriority {
    Low = 0,
    BelowNormal = 1,
    Normal = 2,
    High = 4,
}
declare const enum RuntimePlatform {
    OSXEditor = 0,
    OSXPlayer = 1,
    WindowsPlayer = 2,
    OSXWebPlayer = 3,
    OSXDashboardPlayer = 4,
    WindowsWebPlayer = 5,
    WindowsEditor = 7,
    IPhonePlayer = 8,
    PS3 = 9,
    XBOX360 = 10,
    Android = 11,
    NaCl = 12,
    LinuxPlayer = 13,
    FlashPlayer = 15,
    LinuxEditor = 16,
    WebGLPlayer = 17,
    MetroPlayerX86 = 18,
    WSAPlayerX86 = 18,
    MetroPlayerX64 = 19,
    WSAPlayerX64 = 19,
    MetroPlayerARM = 20,
    WSAPlayerARM = 20,
    WP8Player = 21,
    BB10Player = 22,
    BlackBerryPlayer = 22,
    TizenPlayer = 23,
    PSP2 = 24,
    PS4 = 25,
    PSM = 26,
    XboxOne = 27,
    SamsungTVPlayer = 28,
    WiiU = 30,
    tvOS = 31,
    Switch = 32,
    Lumin = 33,
    Stadia = 34,
    LinuxHeadlessSimulation = 35,
    GameCoreXboxSeries = 36,
    GameCoreXboxOne = 37,
    PS5 = 38,
    EmbeddedLinuxArm64 = 39,
    EmbeddedLinuxArm32 = 40,
    EmbeddedLinuxX64 = 41,
    EmbeddedLinuxX86 = 42,
    LinuxServer = 43,
    WindowsServer = 44,
    OSXServer = 45,
    QNXArm32 = 46,
    QNXArm64 = 47,
    QNXX64 = 48,
    QNXX86 = 49,
    VisionOS = 50,
    ReservedCFE = 51,
    CloudRendering = -1,
    GameCoreScarlett = -1,
}
declare const enum SystemLanguage {
    Afrikaans = 0,
    Arabic = 1,
    Basque = 2,
    Belarusian = 3,
    Bulgarian = 4,
    Catalan = 5,
    Chinese = 6,
    Czech = 7,
    Danish = 8,
    Dutch = 9,
    English = 10,
    Estonian = 11,
    Faroese = 12,
    Finnish = 13,
    French = 14,
    German = 15,
    Greek = 16,
    Hebrew = 17,
    Hungarian = 18,
    Hugarian = 18,
    Icelandic = 19,
    Indonesian = 20,
    Italian = 21,
    Japanese = 22,
    Korean = 23,
    Latvian = 24,
    Lithuanian = 25,
    Norwegian = 26,
    Polish = 27,
    Portuguese = 28,
    Romanian = 29,
    Russian = 30,
    SerboCroatian = 31,
    Slovak = 32,
    Slovenian = 33,
    Spanish = 34,
    Swedish = 35,
    Thai = 36,
    Turkish = 37,
    Ukrainian = 38,
    Vietnamese = 39,
    ChineseSimplified = 40,
    ChineseTraditional = 41,
    Hindi = 42,
    Unknown = 43,
}
declare const enum NetworkReachability {
    NotReachable = 0,
    ReachableViaCarrierDataNetwork = 1,
    ReachableViaLocalAreaNetwork = 2,
}
declare const enum StackTraceLogType {
    None = 0,
    ScriptOnly = 1,
    Full = 2,
}
declare const enum UserAuthorization {
    WebCam = 1,
    Microphone = 2,
}
declare const enum ParticleSystemCurveMode {
    Constant = 0,
    Curve = 1,
    TwoCurves = 2,
    TwoConstants = 3,
}
declare const enum ParticleSystemGradientMode {
    Color = 0,
    Gradient = 1,
    TwoColors = 2,
    TwoGradients = 3,
    RandomColor = 4,
}
declare const enum ParticleSystemGravitySource {
    Physics3D = 0,
    Physics2D = 1,
}
declare const enum ParticleSystemSimulationSpace {
    Local = 0,
    World = 1,
    Custom = 2,
}
declare const enum ParticleSystemScalingMode {
    Hierarchy = 0,
    Local = 1,
    Shape = 2,
}
declare const enum ParticleSystemEmitterVelocityMode {
    Transform = 0,
    Rigidbody = 1,
    Custom = 2,
}
declare const enum ParticleSystemStopAction {
    None = 0,
    Disable = 1,
    Destroy = 2,
    Callback = 3,
}
declare const enum ParticleSystemRingBufferMode {
    Disabled = 0,
    PauseUntilReplaced = 1,
    LoopUntilReplaced = 2,
}
declare const enum ParticleSystemCullingMode {
    Automatic = 0,
    PauseAndCatchup = 1,
    Pause = 2,
    AlwaysSimulate = 3,
}
declare const enum ParticleSystemShapeType {
    Sphere = 0,
    SphereShell = 1,
    Hemisphere = 2,
    HemisphereShell = 3,
    Cone = 4,
    Box = 5,
    Mesh = 6,
    ConeShell = 7,
    ConeVolume = 8,
    ConeVolumeShell = 9,
    Circle = 10,
    CircleEdge = 11,
    SingleSidedEdge = 12,
    MeshRenderer = 13,
    SkinnedMeshRenderer = 14,
    BoxShell = 15,
    BoxEdge = 16,
    Donut = 17,
    Rectangle = 18,
    Sprite = 19,
    SpriteRenderer = 20,
}
declare const enum ParticleSystemShapeMultiModeValue {
    Random = 0,
    Loop = 1,
    PingPong = 2,
    BurstSpread = 3,
}
declare const enum ParticleSystemMeshShapeType {
    Vertex = 0,
    Edge = 1,
    Triangle = 2,
}
declare const enum SpriteDrawMode {
    Simple = 0,
    Sliced = 1,
    Tiled = 2,
}
declare const enum SpriteTileMode {
    Continuous = 0,
    Adaptive = 1,
}
declare const enum SpriteMaskInteraction {
    None = 0,
    VisibleInsideMask = 1,
    VisibleOutsideMask = 2,
}
declare const enum SpriteSortPoint {
    Center = 0,
    Pivot = 1,
}
declare const enum ParticleSystemShapeTextureChannel {
    Red = 0,
    Green = 1,
    Blue = 2,
    Alpha = 3,
}
declare const enum ParticleSystemInheritVelocityMode {
    Initial = 0,
    Current = 1,
}
declare const enum ParticleSystemGameObjectFilter {
    LayerMask = 0,
    List = 1,
    LayerMaskAndList = 2,
}
declare const enum ParticleSystemForceFieldShape {
    Sphere = 0,
    Hemisphere = 1,
    Cylinder = 2,
    Box = 3,
}
declare const enum ParticleSystemNoiseQuality {
    Low = 0,
    Medium = 1,
    High = 2,
}
declare const enum ParticleSystemCollisionType {
    Planes = 0,
    World = 1,
}
declare const enum ParticleSystemCollisionMode {
    Collision3D = 0,
    Collision2D = 1,
}
declare const enum ParticleSystemCollisionQuality {
    High = 0,
    Medium = 1,
    Low = 2,
}
declare const enum ParticleSystemOverlapAction {
    Ignore = 0,
    Kill = 1,
    Callback = 2,
}
declare const enum ParticleSystemColliderQueryMode {
    Disabled = 0,
    One = 1,
    All = 2,
}
declare const enum ParticleSystemSubEmitterType {
    Birth = 0,
    Collision = 1,
    Death = 2,
    Trigger = 3,
    Manual = 4,
}
declare const enum ParticleSystemSubEmitterProperties {
    InheritNothing = 0,
    InheritColor = 1,
    InheritSize = 2,
    InheritRotation = 4,
    InheritLifetime = 8,
    InheritDuration = 16,
    InheritEverything = 31,
}
declare const enum ParticleSystemAnimationMode {
    Grid = 0,
    Sprites = 1,
}
declare const enum ParticleSystemAnimationTimeMode {
    Lifetime = 0,
    Speed = 1,
    FPS = 2,
}
declare const enum ParticleSystemAnimationType {
    WholeSheet = 0,
    SingleRow = 1,
}
declare const enum ParticleSystemAnimationRowMode {
    Custom = 0,
    Random = 1,
    MeshIndex = 2,
}
declare const enum UVChannelFlags {
    UV0 = 1,
    UV1 = 2,
    UV2 = 4,
    UV3 = 8,
}
declare const enum ParticleSystemTrailMode {
    PerParticle = 0,
    Ribbon = 1,
}
declare const enum ParticleSystemTrailTextureMode {
    Stretch = 0,
    Tile = 1,
    DistributePerSegment = 2,
    RepeatPerSegment = 3,
    Static = 4,
}
declare const enum ParticleSystemCustomData {
    Custom1 = 0,
    Custom2 = 1,
}
declare const enum ParticleSystemCustomDataMode {
    Disabled = 0,
    Vector = 1,
    Color = 2,
}
declare const enum ParticleSystemStopBehavior {
    StopEmittingAndClear = 0,
    StopEmitting = 1,
}
declare const enum ParticleSystemRenderSpace {
    View = 0,
    World = 1,
    Local = 2,
    Facing = 3,
    Velocity = 4,
}
declare const enum ParticleSystemRenderMode {
    Billboard = 0,
    Stretch = 1,
    HorizontalBillboard = 2,
    VerticalBillboard = 3,
    Mesh = 4,
    None = 5,
}
declare const enum ParticleSystemMeshDistribution {
    UniformRandom = 0,
    NonUniformRandom = 1,
}
declare const enum ParticleSystemSortMode {
    None = 0,
    Distance = 1,
    OldestInFront = 2,
    YoungestInFront = 3,
    Depth = 4,
    DistanceReverse = 5,
    DepthReverse = 6,
}
declare const enum ParticleSystemBakeMeshOptions {
    Default = 0,
    BakeRotationAndScale = 1,
    BakePosition = 2,
}
declare const enum ParticleSystemBakeTextureOptions {
    BakeRotationAndScale = 1,
    BakePosition = 2,
    PerVertex = 4,
    Default = 4,
    PerParticle = 8,
    IncludeParticleIndices = 16,
}
declare const enum ParticleSystemVertexStream {
    Position = 0,
    Normal = 1,
    Tangent = 2,
    Color = 3,
    UV = 4,
    UV2 = 5,
    UV3 = 6,
    UV4 = 7,
    AnimBlend = 8,
    AnimFrame = 9,
    Center = 10,
    VertexID = 11,
    SizeX = 12,
    SizeXY = 13,
    SizeXYZ = 14,
    Rotation = 15,
    Rotation3D = 16,
    RotationSpeed = 17,
    RotationSpeed3D = 18,
    Velocity = 19,
    Speed = 20,
    AgePercent = 21,
    InvStartLifetime = 22,
    StableRandomX = 23,
    StableRandomXY = 24,
    StableRandomXYZ = 25,
    StableRandomXYZW = 26,
    VaryingRandomX = 27,
    VaryingRandomXY = 28,
    VaryingRandomXYZ = 29,
    VaryingRandomXYZW = 30,
    Custom1X = 31,
    Custom1XY = 32,
    Custom1XYZ = 33,
    Custom1XYZW = 34,
    Custom2X = 35,
    Custom2XY = 36,
    Custom2XYZ = 37,
    Custom2XYZW = 38,
    NoiseSumX = 39,
    NoiseSumXY = 40,
    NoiseSumXYZ = 41,
    NoiseImpulseX = 42,
    NoiseImpulseXY = 43,
    NoiseImpulseXYZ = 44,
    MeshIndex = 45,
    ParticleIndex = 46,
    ColorPackedAsTwoFloats = 47,
    MeshAxisOfRotation = 48,
    NextTrailCenter = 49,
    PreviousTrailCenter = 50,
    PercentageAlongTrail = 51,
    TrailWidth = 52,
}
declare const enum ProfilerArea {
    CPU = 0,
    GPU = 1,
    Rendering = 2,
    Memory = 3,
    Audio = 4,
    Video = 5,
    Physics = 6,
    Physics2D = 7,
    NetworkMessages = 8,
    NetworkOperations = 9,
    UI = 10,
    UIDetails = 11,
    GlobalIllumination = 12,
    VirtualTexturing = 13,
}
declare const enum Direction {
    LeftToRight = 0,
    RightToLeft = 1,
    BottomToTop = 2,
    TopToBottom = 3,
}
declare const enum ContentType {
    Standard = 0,
    Autocorrected = 1,
    IntegerNumber = 2,
    DecimalNumber = 3,
    Alphanumeric = 4,
    Name = 5,
    EmailAddress = 6,
    Password = 7,
    Pin = 8,
    Custom = 9,
}
declare const enum LineType {
    SingleLine = 0,
    MultiLineSubmit = 1,
    MultiLineNewline = 2,
}
declare const enum InputType {
    Standard = 0,
    AutoCorrect = 1,
    Password = 2,
}
declare const enum CharacterValidation {
    None = 0,
    Digit = 1,
    Integer = 2,
    Decimal = 3,
    Alphanumeric = 4,
    Name = 5,
    Regex = 6,
    EmailAddress = 7,
    CustomValidator = 8,
}
declare const enum Direction {
    LeftToRight = 0,
    RightToLeft = 1,
    BottomToTop = 2,
    TopToBottom = 3,
}
declare const enum VerticalWrapMode {
    Truncate = 0,
    Overflow = 1,
}
declare const enum HorizontalWrapMode {
    Wrap = 0,
    Overflow = 1,
}
declare const enum AudioClipLoadType {
    DecompressOnLoad = 0,
    CompressedInMemory = 1,
    Streaming = 2,
}
declare const enum AudioDataLoadState {
    Unloaded = 0,
    Loading = 1,
    Loaded = 2,
    Failed = 3,
}
declare const enum AudioMixerUpdateMode {
    Normal = 0,
    UnscaledTime = 1,
}
declare const enum GamepadSpeakerOutputType {
    Speaker = 0,
    Vibration = 1,
    SecondaryVibration = 2,
}
declare const enum AudioVelocityUpdateMode {
    Auto = 0,
    Fixed = 1,
    Dynamic = 2,
}
declare const enum AudioRolloffMode {
    Logarithmic = 0,
    Linear = 1,
    Custom = 2,
}
declare const enum AudioSourceCurveType {
    CustomRolloff = 0,
    SpatialBlend = 1,
    ReverbZoneMix = 2,
    Spread = 3,
}
declare const enum FFTWindow {
    Rectangular = 0,
    Triangle = 1,
    Hamming = 2,
    Hanning = 3,
    Blackman = 4,
    BlackmanHarris = 5,
}
declare const enum EaseType {
    Linear = 0,
    SineIn = 10,
    SineOut = 11,
    SineInOut = 12,
    QuadIn = 20,
    QuadOut = 21,
    QuadInOut = 22,
    CubicIn = 30,
    CubicOut = 31,
    CubicInOut = 32,
    QuartIn = 40,
    QuartOut = 41,
    QuartInOut = 42,
    QuintIn = 50,
    QuintOut = 51,
    QuintInOut = 52,
    ExpoIn = 60,
    ExpoOut = 61,
    ExpoInOut = 62,
    CircIn = 70,
    CircOut = 71,
    CircInOut = 72,
    BackIn = 80,
    BackOut = 81,
    BackInOut = 82,
    ElasticIn = 90,
    ElasticOut = 91,
    ElasticInOut = 92,
    BounceIn = 100,
    BounceOut = 101,
    BounceInOut = 102,
}
declare const enum ChatroomAgentMode {
    Unconnected = 0,
    Host = 1,
    Guest = 2,
}
declare const enum StereoScreenCaptureMode {
    LeftEye = 1,
    RightEye = 2,
    BothEyes = 3,
    MotionVectors = 4,
}
declare const enum ContextStyle {
    Block = 0,
    Prefab = 1,
    GreedyMeshingTiles = 2,
    PipeBlocks = 3,
    QuarterBlocks = 4,
    StaticMesh = 5,
}
declare const enum CollisionType {
    None = 0,
    Solid = 1,
    Slope = 2,
}
declare const enum Rotations {
    None = 0,
    Y90 = 1,
    Y180 = 2,
    Y270 = 3,
}
declare const enum CollisionFlags {
    None = 0,
    Sides = 1,
    CollidedSides = 1,
    Above = 2,
    CollidedAbove = 2,
    Below = 4,
    CollidedBelow = 4,
}
declare const enum LineTextureMode {
    Stretch = 0,
    Tile = 1,
    DistributePerSegment = 2,
    RepeatPerSegment = 3,
    Static = 4,
}
declare const enum LineAlignment {
    View = 0,
    Local = 1,
    TransformZ = 1,
}
declare const enum Result {
    InProgress = 0,
    Success = 1,
    ConnectionError = 2,
    ProtocolError = 3,
    DataProcessingError = 4,
}
declare const enum ToggleTransition {
    None = 0,
    Fade = 1,
}
declare const enum FitMode {
    Unconstrained = 0,
    MinSize = 1,
    PreferredSize = 2,
}
declare const enum AspectMode {
    None = 0,
    WidthControlsHeight = 1,
    HeightControlsWidth = 2,
    FitInParent = 3,
    EnvelopeParent = 4,
}
declare const enum MovementType {
    Unrestricted = 0,
    Elastic = 1,
    Clamped = 2,
}
declare const enum ScrollbarVisibility {
    Permanent = 0,
    AutoHide = 1,
    AutoHideAndExpandViewport = 2,
}
declare const enum LogContext {
    Client = 0,
    Server = 1,
    Memory = 2,
}
declare const enum Key {
    None = 0,
    Space = 1,
    Enter = 2,
    Tab = 3,
    Backquote = 4,
    Quote = 5,
    Semicolon = 6,
    Comma = 7,
    Period = 8,
    Slash = 9,
    Backslash = 10,
    LeftBracket = 11,
    RightBracket = 12,
    Minus = 13,
    Equals = 14,
    A = 15,
    B = 16,
    C = 17,
    D = 18,
    E = 19,
    F = 20,
    G = 21,
    H = 22,
    I = 23,
    J = 24,
    K = 25,
    L = 26,
    M = 27,
    N = 28,
    O = 29,
    P = 30,
    Q = 31,
    R = 32,
    S = 33,
    T = 34,
    U = 35,
    V = 36,
    W = 37,
    X = 38,
    Y = 39,
    Z = 40,
    Digit1 = 41,
    Digit2 = 42,
    Digit3 = 43,
    Digit4 = 44,
    Digit5 = 45,
    Digit6 = 46,
    Digit7 = 47,
    Digit8 = 48,
    Digit9 = 49,
    Digit0 = 50,
    LeftShift = 51,
    RightShift = 52,
    LeftAlt = 53,
    RightAlt = 54,
    AltGr = 54,
    LeftCtrl = 55,
    RightCtrl = 56,
    LeftMeta = 57,
    LeftWindows = 57,
    LeftCommand = 57,
    LeftApple = 57,
    RightCommand = 58,
    RightMeta = 58,
    RightWindows = 58,
    RightApple = 58,
    ContextMenu = 59,
    Escape = 60,
    LeftArrow = 61,
    RightArrow = 62,
    UpArrow = 63,
    DownArrow = 64,
    Backspace = 65,
    PageDown = 66,
    PageUp = 67,
    Home = 68,
    End = 69,
    Insert = 70,
    Delete = 71,
    CapsLock = 72,
    NumLock = 73,
    PrintScreen = 74,
    ScrollLock = 75,
    Pause = 76,
    NumpadEnter = 77,
    NumpadDivide = 78,
    NumpadMultiply = 79,
    NumpadPlus = 80,
    NumpadMinus = 81,
    NumpadPeriod = 82,
    NumpadEquals = 83,
    Numpad0 = 84,
    Numpad1 = 85,
    Numpad2 = 86,
    Numpad3 = 87,
    Numpad4 = 88,
    Numpad5 = 89,
    Numpad6 = 90,
    Numpad7 = 91,
    Numpad8 = 92,
    Numpad9 = 93,
    F1 = 94,
    F2 = 95,
    F3 = 96,
    F4 = 97,
    F5 = 98,
    F6 = 99,
    F7 = 100,
    F8 = 101,
    F9 = 102,
    F10 = 103,
    F11 = 104,
    F12 = 105,
    OEM1 = 106,
    OEM2 = 107,
    OEM3 = 108,
    OEM4 = 109,
    OEM5 = 110,
    IMESelected = 111,
}
declare const enum EngineRunMode {
    EDITOR = 0,
    PLAY = 1,
    BOTH = 2,
    NONE = -1,
}
declare const enum AccessorySlot {
    Root = 0,
    Head = 1,
    Hair = 2,
    Face = 3,
    Neck = 4,
    Torso = 5,
    RightHand = 6,
    LeftHand = 7,
    Waist = 8,
    Legs = 9,
    Feet = 10,
    Ears = 11,
    Nose = 12,
    TorsoOuter = 13,
    TorsoInner = 14,
    Backpack = 15,
    Hands = 16,
    HandsOuter = 17,
    LeftWrist = 18,
    RightWrist = 19,
    LegsOuter = 20,
    LegsInner = 21,
    FeetInner = 22,
    LeftFoot = 23,
    RightFoot = 24,
    LeftLegUpper = 25,
    LeftLegLower = 26,
    RightLegUpper = 27,
    RightLegLower = 28,
    LeftArmUpper = 29,
    LeftArmLower = 30,
    RightArmUpper = 31,
    RightArmLower = 32,
    RightShoulder = 33,
    LeftShoulder = 34,
    FrontChest = 35,
    BackChest = 36,
}
declare const enum VisibilityMode {
    ThirdPerson = 0,
    FirstPerson = 1,
    Both = 2,
}
declare const enum BodyMask {
    NONE = 0,
    HAIR = 1,
    FACE = 2,
    R_ARM_UPPER = 4,
    L_ARM_UPPER = 8,
    EARS = 16,
    UNUSED1 = 32,
    UNUSED2 = 64,
    L_ARM_LOWER = 128,
    L_HAND = 256,
    R_HAND = 512,
    R_ARM_LOWER = 1024,
    R_ARM_JOINTS = 2048,
    L_ARM_JOINTS = 4096,
    UNUSED5 = 8192,
    UNUSED6 = 16384,
    L_LEG_UPPER = 32768,
    HIPS = 65536,
    TORSO = 131072,
    R_LEG_UPPER = 262144,
    R_LEG_JOINTS = 524288,
    L_LEG_JOINTS = 1048576,
    UNUSED9 = 2097152,
    UNUSED10 = 4194304,
    L_LEG_LOWER = 8388608,
    L_FOOT = 16777216,
    R_FOOT = 33554432,
    R_LEG_LOWER = 67108864,
    UNUSED11 = 134217728,
    UNUSED12 = 268435456,
    UNUSED13 = 536870912,
    UNUSED14 = 1073741824,
}
declare const enum BlendMode {
    Normal = 0,
    Additive = 1,
    Screen = 2,
    Multiply = 3,
}
declare const enum ColorBleedMode {
    ImageColor = 0,
    ShadowColor = 1,
    Black = 2,
    White = 3,
    Plugin = 4,
}
declare const enum AirshipPlatform {
    iOS = 0,
    Android = 1,
    Mac = 2,
    Windows = 3,
    Linux = 4,
}
declare const enum BuildTarget {
    StandaloneOSX = 2,
    StandaloneOSXUniversal = 3,
    StandaloneOSXIntel = 4,
    StandaloneWindows = 5,
    WebPlayer = 6,
    WebPlayerStreamed = 7,
    iOS = 9,
    PS3 = 10,
    XBOX360 = 11,
    Android = 13,
    StandaloneLinux = 17,
    StandaloneWindows64 = 19,
    WebGL = 20,
    WSAPlayer = 21,
    StandaloneLinux64 = 24,
    StandaloneLinuxUniversal = 25,
    WP8Player = 26,
    StandaloneOSXIntel64 = 27,
    BlackBerry = 28,
    Tizen = 29,
    PSP2 = 30,
    PS4 = 31,
    PSM = 32,
    XboxOne = 33,
    SamsungTV = 34,
    N3DS = 35,
    WiiU = 36,
    tvOS = 37,
    Switch = 38,
    Lumin = 39,
    Stadia = 40,
    CloudRendering = 41,
    LinuxHeadlessSimulation = 41,
    GameCoreXboxSeries = 42,
    GameCoreScarlett = 42,
    GameCoreXboxOne = 43,
    PS5 = 44,
    EmbeddedLinux = 45,
    QNX = 46,
    VisionOS = 47,
    ReservedCFE = 48,
    NoTarget = -2,
    iPhone = -1,
    BB10 = -1,
    MetroPlayer = -1,
}
declare const enum BatteryStatus {
    Unknown = 0,
    Charging = 1,
    Discharging = 2,
    NotCharging = 3,
    Full = 4,
}
declare const enum OperatingSystemFamily {
    Other = 0,
    MacOSX = 1,
    Windows = 2,
    Linux = 3,
}
declare const enum DeviceType {
    Unknown = 0,
    Handheld = 1,
    Console = 2,
    Desktop = 3,
}
declare const enum GraphicsDeviceType {
    OpenGL2 = 0,
    Direct3D9 = 1,
    Direct3D11 = 2,
    PlayStation3 = 3,
    Null = 4,
    Xbox360 = 6,
    OpenGLES2 = 8,
    OpenGLES3 = 11,
    PlayStationVita = 12,
    PlayStation4 = 13,
    XboxOne = 14,
    PlayStationMobile = 15,
    Metal = 16,
    OpenGLCore = 17,
    Direct3D12 = 18,
    N3DS = 19,
    Vulkan = 21,
    Switch = 22,
    XboxOneD3D12 = 23,
    GameCoreXboxOne = 24,
    GameCoreXboxSeries = 25,
    PlayStation5 = 26,
    PlayStation5NGGC = 27,
    WebGPU = 28,
    ReservedCFE = 29,
    GameCoreScarlett = -1,
}
declare const enum RenderingThreadingMode {
    Direct = 0,
    SingleThreaded = 1,
    MultiThreaded = 2,
    LegacyJobified = 3,
    NativeGraphicsJobs = 4,
    NativeGraphicsJobsWithoutRenderThread = 5,
    NativeGraphicsJobsSplitThreading = 6,
}
declare const enum FoveatedRenderingCaps {
    None = 0,
    FoveationImage = 1,
    NonUniformRaster = 2,
    ModeChangeOnlyBeforeRenderTargetSet = 4,
}
declare const enum CopyTextureSupport {
    None = 0,
    Basic = 1,
    Copy3D = 2,
    DifferentTypes = 4,
    TextureToRT = 8,
    RTToTexture = 16,
}
declare const enum NPOTSupport {
    None = 0,
    Restricted = 1,
    Full = 2,
}
declare const enum HDRDisplaySupportFlags {
    None = 0,
    Supported = 1,
    RuntimeSwitchable = 2,
    AutomaticTonemapping = 4,
}
declare const enum GraphicsFormatUsage {
    None = 0,
    Sample = 1,
    Linear = 2,
    Sparse = 4,
    Render = 16,
    Blend = 32,
    GetPixels = 64,
    SetPixels = 128,
    SetPixels32 = 256,
    ReadPixels = 512,
    LoadStore = 1024,
    MSAA2x = 2048,
    MSAA4x = 4096,
    MSAA8x = 8192,
    StencilSampling = 65536,
}
declare const enum ScaleMode {
    ConstantPixelSize = 0,
    ScaleWithScreenSize = 1,
    ConstantPhysicalSize = 2,
}
declare const enum ScreenMatchMode {
    MatchWidthOrHeight = 0,
    Expand = 1,
    Shrink = 2,
}
declare const enum Unit {
    Centimeters = 0,
    Millimeters = 1,
    Inches = 2,
    Points = 3,
    Picas = 4,
}
declare const enum Corner {
    UpperLeft = 0,
    UpperRight = 1,
    LowerLeft = 2,
    LowerRight = 3,
}
declare const enum Axis {
    Horizontal = 0,
    Vertical = 1,
}
declare const enum Constraint {
    Flexible = 0,
    FixedColumnCount = 1,
    FixedRowCount = 2,
}
declare const enum FullScreenMode {
    ExclusiveFullScreen = 0,
    FullScreenWindow = 1,
    MaximizedWindow = 2,
    Windowed = 3,
}
declare const enum ScreenOrientation {
    Unknown = 0,
    Portrait = 1,
    PortraitUpsideDown = 2,
    LandscapeLeft = 3,
    Landscape = 3,
    LandscapeRight = 4,
    AutoRotation = 5,
}
declare const enum AirshipDeviceType {
    Tablet = 0,
    Phone = 1,
    Desktop = 2,
}
declare const enum OffMeshLinkType {
    LinkTypeManual = 0,
    LinkTypeDropDown = 1,
    LinkTypeJumpAcross = 2,
}
declare const enum NavMeshPathStatus {
    PathComplete = 0,
    PathPartial = 1,
    PathInvalid = 2,
}
declare const enum ObstacleAvoidanceType {
    NoObstacleAvoidance = 0,
    LowQualityObstacleAvoidance = 1,
    MedQualityObstacleAvoidance = 2,
    GoodQualityObstacleAvoidance = 3,
    HighQualityObstacleAvoidance = 4,
}
declare const enum NavMeshBuildDebugFlags {
    None = 0,
    InputGeometry = 1,
    Voxels = 2,
    Regions = 4,
    RawContours = 8,
    SimplifiedContours = 16,
    PolygonMeshes = 32,
    PolygonMeshesDetail = 64,
    All = 127,
}
declare const enum NavMeshObstacleShape {
    Capsule = 0,
    Box = 1,
}
declare const enum TouchScrollBehavior {
    Unrestricted = 0,
    Elastic = 1,
    Clamped = 2,
}
declare const enum NestedInteractionKind {
    Default = 0,
    StopScrolling = 1,
    ForwardScrolling = 2,
}
declare const enum DeltaSpeed {
    Fast = 0,
    Normal = 1,
    Slow = 2,
}
declare const enum SliderDirection {
    Horizontal = 0,
    Vertical = 1,
}
declare const enum ScrollViewMode {
    Vertical = 0,
    Horizontal = 1,
    VerticalAndHorizontal = 2,
}
declare const enum DecalScaleMode {
    ScaleInvariant = 0,
    InheritFromHierarchy = 1,
}
declare const enum DetailScatterMode {
    CoverageMode = 0,
    InstanceCountMode = 1,
}
declare const enum DetailRenderMode {
    GrassBillboard = 0,
    VertexLit = 1,
    Grass = 2,
}
declare const enum TerrainLayerSmoothnessSource {
    Constant = 0,
    DiffuseAlphaChannel = 1,
}
declare const enum TerrainHeightmapSyncControl {
    None = 0,
    HeightOnly = 1,
    HeightAndLod = 2,
}
declare const enum ColorGamut {
    sRGB = 0,
    Rec709 = 1,
    Rec2020 = 2,
    DisplayP3 = 3,
    HDR10 = 4,
    DolbyHDR = 5,
    P3D65G22 = 6,
}
declare const enum GraphicsTier {
    Tier1 = 0,
    Tier2 = 1,
    Tier3 = 2,
}
declare const enum OpenGLESVersion {
    None = 0,
    OpenGLES20 = 1,
    OpenGLES30 = 2,
    OpenGLES31 = 3,
    OpenGLES31AEP = 4,
    OpenGLES32 = 5,
}
declare const enum BoundingBoxMode {
    AutomaticLocal = 0,
    AutomaticWorld = 1,
    Custom = 2,
}
declare const enum ResolutionMode {
    Automatic = 0,
    Custom = 1,
}
declare const enum ProbePositionMode {
    CellCorner = 0,
    CellCenter = 1,
}
declare const enum RefreshMode {
    Automatic = 0,
    EveryFrame = 1,
    ViaScripting = 2,
}
declare const enum QualityMode {
    Low = 0,
    Normal = 1,
}
declare const enum DataFormat {
    HalfFloat = 0,
    Float = 1,
}
declare const enum DownloadedTextureFlags {
    None = 0,
    Readable = 1,
    MipmapChain = 2,
    LinearColorSpace = 4,
}
declare const enum EventTriggerType {
    PointerEnter = 0,
    PointerExit = 1,
    PointerDown = 2,
    PointerUp = 3,
    PointerClick = 4,
    Drag = 5,
    Drop = 6,
    Scroll = 7,
    UpdateSelected = 8,
    Select = 9,
    Deselect = 10,
    Move = 11,
    InitializePotentialDrag = 12,
    BeginDrag = 13,
    EndDrag = 14,
    Submit = 15,
    Cancel = 16,
}
declare const enum TerrainRenderFlags {
    heightmap = 1,
    Heightmap = 1,
    trees = 2,
    Trees = 2,
    details = 4,
    Details = 4,
    all = 7,
    All = 7,
}
declare const enum TreeMotionVectorModeOverride {
    CameraMotionOnly = 0,
    PerObjectMotion = 1,
    ForceNoMotion = 2,
    InheritFromPrototype = 3,
}
declare const enum BlockingObjects {
    None = 0,
    TwoD = 1,
    ThreeD = 2,
    All = 3,
}
declare const enum DepthOfFieldMode {
    Off = 0,
    Gaussian = 1,
    Bokeh = 2,
}
declare const enum DisplayType {
    Checkbox = 0,
    EnumPopup = 1,
}
declare const enum PassType {
    Normal = 0,
    Vertex = 1,
    VertexLM = 2,
    VertexLMRGBM = 3,
    ForwardBase = 4,
    ForwardAdd = 5,
    LightPrePassBase = 6,
    LightPrePassFinal = 7,
    ShadowCaster = 8,
    Deferred = 10,
    Meta = 11,
    MotionVectors = 12,
    ScriptableRenderPipeline = 13,
    ScriptableRenderPipelineDefaultUnlit = 14,
    GrabPass = 15,
}
declare const enum ShadowQuality {
    Disable = 0,
    HardOnly = 1,
    All = 2,
}
declare const enum ShadowProjection {
    CloseFit = 0,
    StableFit = 1,
}
declare const enum ShadowResolution {
    Low = 0,
    Medium = 1,
    High = 2,
    VeryHigh = 3,
}
declare const enum ShadowmaskMode {
    Shadowmask = 0,
    DistanceShadowmask = 1,
}
declare const enum TerrainQualityOverrides {
    None = 0,
    PixelError = 1,
    BasemapDistance = 2,
    DetailDensity = 4,
    DetailDistance = 8,
    TreeDistance = 16,
    BillboardStart = 32,
    FadeLength = 64,
    MaxTrees = 128,
}
declare const enum TextureMipmapLimitBiasMode {
    OffsetGlobalLimit = 0,
    OverrideGlobalLimit = 1,
}
declare const enum VideoShadersIncludeMode {
    Never = 0,
    Referenced = 1,
    Always = 2,
}
declare const enum LightProbeOutsideHullStrategy {
    kLightProbeSearchTetrahedralHull = 0,
    kLightProbeUseAmbientProbe = 1,
}
declare const enum BuiltinShaderType {
    DeferredShading = 0,
    DeferredReflections = 1,
    LegacyDeferredLighting = 2,
    ScreenSpaceShadows = 3,
    DepthNormals = 4,
    MotionVectors = 5,
    LightHalo = 6,
    LensFlare = 7,
}
declare const enum BuiltinShaderMode {
    Disabled = 0,
    UseBuiltin = 1,
    UseCustom = 2,
}
declare const enum BuiltinShaderDefine {
    UNITY_NO_DXT5nm = 0,
    UNITY_NO_RGBM = 1,
    UNITY_USE_NATIVE_HDR = 2,
    UNITY_ENABLE_REFLECTION_BUFFERS = 3,
    UNITY_FRAMEBUFFER_FETCH_AVAILABLE = 4,
    UNITY_ENABLE_NATIVE_SHADOW_LOOKUPS = 5,
    UNITY_METAL_SHADOWS_USE_POINT_FILTERING = 6,
    UNITY_NO_CUBEMAP_ARRAY = 7,
    UNITY_NO_SCREENSPACE_SHADOWS = 8,
    UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS = 9,
    UNITY_PBS_USE_BRDF1 = 10,
    UNITY_PBS_USE_BRDF2 = 11,
    UNITY_PBS_USE_BRDF3 = 12,
    UNITY_NO_FULL_STANDARD_SHADER = 13,
    UNITY_SPECCUBE_BOX_PROJECTION = 14,
    UNITY_SPECCUBE_BLENDING = 15,
    UNITY_ENABLE_DETAIL_NORMALMAP = 16,
    SHADER_API_MOBILE = 17,
    SHADER_API_DESKTOP = 18,
    UNITY_HARDWARE_TIER1 = 19,
    UNITY_HARDWARE_TIER2 = 20,
    UNITY_HARDWARE_TIER3 = 21,
    UNITY_COLORSPACE_GAMMA = 22,
    UNITY_LIGHT_PROBE_PROXY_VOLUME = 23,
    UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS = 24,
    UNITY_LIGHTMAP_DLDR_ENCODING = 25,
    UNITY_LIGHTMAP_RGBM_ENCODING = 26,
    UNITY_LIGHTMAP_FULL_HDR = 27,
    UNITY_VIRTUAL_TEXTURING = 28,
    UNITY_PRETRANSFORM_TO_DISPLAY_ORIENTATION = 29,
    UNITY_ASTC_NORMALMAP_ENCODING = 30,
    SHADER_API_GLES30 = 31,
    UNITY_UNIFIED_SHADER_PRECISION_MODEL = 32,
    UNITY_PLATFORM_SUPPORTS_WAVE_32 = 33,
    UNITY_PLATFORM_SUPPORTS_WAVE_64 = 34,
    UNITY_NEEDS_RENDERPASS_FBFETCH_FALLBACK = 35,
    UNITY_PLATFORM_SUPPORTS_DEPTH_FETCH = 36,
}
declare const enum GPUResidentDrawerMode {
    Disabled = 0,
    InstancedDrawing = 1,
}
declare const enum ProbeVolumeSHBands {
    SphericalHarmonicsL1 = 1,
    SphericalHarmonicsL2 = 2,
}
declare const enum TextureSizeMode {
    Explicit = 0,
    Scale = 1,
    Functor = 2,
}
declare const enum MSAASamples {
    None = 1,
    MSAA2x = 2,
    MSAA4x = 4,
    MSAA8x = 8,
}
declare const enum FastMemoryFlags {
    None = 0,
    SpillTop = 1,
    SpillBottom = 2,
}
declare const enum DepthBits {
    None = 0,
    Depth8 = 8,
    Depth16 = 16,
    Depth24 = 24,
    Depth32 = 32,
}
declare const enum Flags {
    None = 0,
    EditorOnly = 2,
    RuntimeOnly = 4,
    EditorForceUpdate = 8,
    FrequentlyUsed = 16,
}
declare const enum RenderPassEvent {
    BeforeRendering = 0,
    BeforeRenderingShadows = 50,
    AfterRenderingShadows = 100,
    BeforeRenderingPrePasses = 150,
    AfterRenderingPrePasses = 200,
    BeforeRenderingGbuffer = 210,
    AfterRenderingGbuffer = 220,
    BeforeRenderingDeferredLights = 230,
    AfterRenderingDeferredLights = 240,
    BeforeRenderingOpaques = 250,
    AfterRenderingOpaques = 300,
    BeforeRenderingSkybox = 350,
    AfterRenderingSkybox = 400,
    BeforeRenderingTransparents = 450,
    AfterRenderingTransparents = 500,
    BeforeRenderingPostProcessing = 550,
    AfterRenderingPostProcessing = 600,
    AfterRendering = 1000,
}
declare const enum ScriptableRenderPassInput {
    None = 0,
    Depth = 1,
    Normal = 2,
    Color = 4,
    Motion = 8,
}
declare const enum ClearFlag {
    None = 0,
    Color = 1,
    Depth = 2,
    Stencil = 4,
    ColorStencil = 5,
    DepthStencil = 6,
    All = 7,
}
declare const enum SortingCriteria {
    None = 0,
    SortingLayer = 1,
    RenderQueue = 2,
    BackToFront = 4,
    QuantizedFrontToBack = 8,
    OptimizeStateChanges = 16,
    CommonTransparent = 23,
    CanvasOrder = 32,
    CommonOpaque = 59,
    RendererPriority = 64,
}
declare const enum DistanceMetric {
    Perspective = 0,
    Orthographic = 1,
    CustomAxis = 2,
}
declare const enum PerObjectData {
    None = 0,
    LightProbe = 1,
    ReflectionProbes = 2,
    LightProbeProxyVolume = 4,
    Lightmaps = 8,
    LightData = 16,
    MotionVectors = 32,
    LightIndices = 64,
    ReflectionProbeData = 128,
    OcclusionProbe = 256,
    OcclusionProbeProxyVolume = 512,
    ShadowMask = 1024,
}
declare const enum Allocator {
    Invalid = 0,
    None = 1,
    Temp = 2,
    TempJob = 3,
    Persistent = 4,
    AudioKernel = 5,
    Domain = 6,
    FirstUserIndex = 64,
}
declare const enum RenderingMode {
    Forward = 0,
    Deferred = 1,
    ForwardPlus = 2,
}
declare const enum CameraRenderType {
    Base = 0,
    Overlay = 1,
}
declare const enum AntialiasingMode {
    None = 0,
    FastApproximateAntialiasing = 1,
    SubpixelMorphologicalAntiAliasing = 2,
    TemporalAntiAliasing = 3,
}
declare const enum AntialiasingQuality {
    Low = 0,
    Medium = 1,
    High = 2,
}
declare const enum CullingOptions {
    None = 0,
    ForceEvenIfCameraIsNotActive = 1,
    OcclusionCull = 2,
    NeedsLighting = 4,
    NeedsReflectionProbes = 8,
    Stereo = 16,
    DisablePerObjectCulling = 32,
    ShadowCasters = 64,
}
declare const enum ReflectionProbeSortingCriteria {
    None = 0,
    Importance = 1,
    Size = 2,
    ImportanceThenSize = 3,
}
declare const enum Downsampling {
    None = 0,
    _2xBilinear = 1,
    _4xBox = 2,
    _4xBilinear = 3,
}
declare const enum StoreActionsOptimization {
    Auto = 0,
    Discard = 1,
    Store = 2,
}
declare const enum HDRColorBufferPrecision {
    _32Bits = 0,
    _64Bits = 1,
}
declare const enum LODCrossFadeDitheringType {
    BayerMatrix = 0,
    BlueNoise = 1,
}
declare const enum UpscalingFilterSelection {
    Auto = 0,
    Linear = 1,
    Point = 2,
    FSR = 3,
    STP = 4,
}
declare const enum ShEvalMode {
    Auto = 0,
    PerVertex = 1,
    Mixed = 2,
    PerPixel = 3,
}
declare const enum LightProbeSystem {
    LegacyLightProbes = 0,
    ProbeVolumes = 1,
}
declare const enum ProbeVolumeTextureMemoryBudget {
    MemoryBudgetLow = 512,
    MemoryBudgetMedium = 1024,
    MemoryBudgetHigh = 2048,
}
declare const enum ProbeVolumeBlendingTextureMemoryBudget {
    MemoryBudgetLow = 128,
    MemoryBudgetMedium = 256,
    MemoryBudgetHigh = 512,
}
declare const enum LightRenderingMode {
    Disabled = 0,
    PerPixel = 1,
    PerVertex = 2,
}
declare const enum VolumeFrameworkUpdateMode {
    EveryFrame = 0,
    ViaScripting = 1,
    UsePipelineSettings = 2,
}
declare const enum ColorGradingMode {
    LowDynamicRange = 0,
    HighDynamicRange = 1,
}
declare const enum RendererType {
    Custom = 0,
    UniversalRenderer = 1,
    _2DRenderer = 2,
}
declare const enum TransportError {
    DnsResolve = 0,
    Refused = 1,
    Timeout = 2,
    Congestion = 3,
    InvalidReceive = 4,
    InvalidSend = 5,
    ConnectionClosed = 6,
    Unexpected = 7,
}
declare const enum RemovePlayerOptions {
    KeepActive = 0,
    Unspawn = 1,
    Destroy = 2,
}
declare const enum ConnectionQuality {
    ESTIMATING = 0,
    POOR = 1,
    FAIR = 2,
    GOOD = 3,
    EXCELLENT = 4,
}
declare const enum ConnectionQualityMethod {
    Simple = 0,
    Pragmatic = 1,
}
declare const enum CoordinateSpace {
    Local = 0,
    World = 1,
}
declare const enum PredictionMode {
    Smooth = 0,
    Fast = 1,
}
declare const enum CellLayout {
    Rectangle = 0,
    Hexagon = 1,
    Isometric = 2,
    IsometricZAsY = 3,
}
declare const enum CellSwizzle {
    XYZ = 0,
    XZY = 1,
    YXZ = 2,
    YZX = 3,
    ZXY = 4,
    ZYX = 5,
}
declare const enum VFXSpace {
    Local = 0,
    World = 1,
    None = -1,
}
declare const enum VFXSpawnerLoopState {
    Finished = 0,
    DelayingBeforeLoop = 1,
    Looping = 2,
    DelayingAfterLoop = 3,
}
declare const enum RotationOrder {
    XYZ = 0,
    XZY = 1,
    YXZ = 2,
    YZX = 3,
    ZXY = 4,
    Default = 4,
    ZYX = 5,
}
declare const enum TangentMode {
    AutoSmooth = 0,
    Linear = 1,
    Mirrored = 2,
    Continuous = 3,
    Broken = 4,
}
declare const enum EmbeddedSplineDataType {
    Int = 0,
    Float = 1,
    Float4 = 2,
    Object = 3,
}
declare const enum BezierTangent {
    In = 0,
    Out = 1,
}
declare const enum SplineModification {
    Default = 0,
    ClosedModified = 1,
    KnotModified = 2,
    KnotInserted = 3,
    KnotRemoved = 4,
    KnotReordered = 5,
}
declare const enum LoopMode {
    Once = 0,
    Loop = 1,
    LoopEaseInOnce = 2,
    PingPong = 3,
}
declare const enum Method {
    Time = 0,
    Speed = 1,
}
declare const enum EasingMode {
    None = 0,
    EaseIn = 1,
    EaseOut = 2,
    EaseInOut = 3,
}
declare const enum AlignmentMode {
    None = 0,
    SplineElement = 1,
    SplineObject = 2,
    World = 3,
}
declare const enum AlignAxis {
    XAxis = 0,
    YAxis = 1,
    ZAxis = 2,
    NegativeXAxis = 3,
    NegativeYAxis = 4,
    NegativeZAxis = 5,
}
declare const enum PathIndexUnit {
    Distance = 0,
    Normalized = 1,
    Knot = 2,
}
declare const enum LoadingStatus {
    NotLoading = 0,
    Loading = 1,
    Loaded = 2,
}
declare const enum CrouchEdgeDetection {
    None = 0,
    UseMeshNormals = 1,
    UseAxisAlignedNormals = 2,
}
declare const enum CharacterState {
    Idle = 0,
    Running = 1,
    Airborne = 2,
    Sprinting = 3,
    Crouching = 4,
}
declare const enum AccessoryAddMode {
    ReplaceAll = 0,
    Replace = 1,
    AddIfNone = 2,
}

    
interface RaycastHit {
    /**
     * The Collider that was hit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-collider.html | RaycastHit.collider}
     */
    readonly collider: Collider;
    /**
     * Instance ID of the Collider that was hit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-colliderInstanceID.html | RaycastHit.colliderInstanceID}
     */
    readonly colliderInstanceID: number;
    /**
     * The impact point in world space where the ray hit the collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-point.html | RaycastHit.point}
     */
    point: Vector3;
    /**
     * The normal of the surface the ray hit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-normal.html | RaycastHit.normal}
     */
    normal: Vector3;
    /**
     * The barycentric coordinate of the triangle we hit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-barycentricCoordinate.html | RaycastHit.barycentricCoordinate}
     */
    barycentricCoordinate: Vector3;
    /**
     * The distance from the ray's origin to the impact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-distance.html | RaycastHit.distance}
     */
    distance: number;
    /**
     * The index of the triangle that was hit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-triangleIndex.html | RaycastHit.triangleIndex}
     */
    readonly triangleIndex: number;
    /**
     * The uv texture coordinate at the collision location.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-textureCoord.html | RaycastHit.textureCoord}
     */
    readonly textureCoord: Vector2;
    /**
     * The secondary uv texture coordinate at the impact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-textureCoord2.html | RaycastHit.textureCoord2}
     */
    readonly textureCoord2: Vector2;
    /**
     * The Transform of the rigidbody or collider that was hit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-transform.html | RaycastHit.transform}
     */
    readonly transform: Transform;
    /**
     * The Rigidbody of the collider that was hit. If the collider is not attached to a rigidbody then it is null.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-rigidbody.html | RaycastHit.rigidbody}
     */
    readonly rigidbody: Rigidbody;
    /**
     * The ArticulationBody of the collider that was hit. If the collider is not attached to an articulation body then it is null.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-articulationBody.html | RaycastHit.articulationBody}
     */
    readonly articulationBody: ArticulationBody;
    /**
     * The uv lightmap coordinate at the impact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit-lightmapCoord.html | RaycastHit.lightmapCoord}
     */
    readonly lightmapCoord: Vector2;





}
    
    
    
    
    
    
    
    
interface FrustumPlanes {
    left: number;
    right: number;
    bottom: number;
    top: number;
    zNear: number;
    zFar: number;





}
    
    
    
interface Plane {
    /**
     * Normal vector of the plane.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Plane-normal.html | Plane.normal}
     */
    normal: Vector3;
    /**
     * The distance measured from the Plane to the origin, along the Plane's normal.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Plane-distance.html | Plane.distance}
     */
    distance: number;
    /**
     * Returns a copy of the plane that faces in the opposite direction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Plane-flipped.html | Plane.flipped}
     */
    readonly flipped: Plane;



    /**
     * For a given point returns the closest point on the plane.
     * @param point The point to project onto the plane.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Plane.ClosestPointOnPlane.html | Plane.ClosestPointOnPlane}
     */
    ClosestPointOnPlane(point: Vector3): Vector3;
    /**
     * Makes the plane face in the opposite direction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Plane.Flip.html | Plane.Flip}
     */
    Flip(): void;
    /**
     * Returns a signed distance from plane to point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Plane.GetDistanceToPoint.html | Plane.GetDistanceToPoint}
     */
    GetDistanceToPoint(point: Vector3): number;
    /**
     * Is a point on the positive side of the plane?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Plane.GetSide.html | Plane.GetSide}
     */
    GetSide(point: Vector3): boolean;
    /**
     * Are two points on the same side of the plane?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Plane.SameSide.html | Plane.SameSide}
     */
    SameSide(inPt0: Vector3, inPt1: Vector3): boolean;
    /**
     * Sets a plane using three points that lie within it.  The points go around clockwise as you look down on the top surface of the plane.
     * @param a First point in clockwise order.
     * @param b Second point in clockwise order.
     * @param c Third point in clockwise order.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Plane.Set3Points.html | Plane.Set3Points}
     */
    Set3Points(a: Vector3, b: Vector3, c: Vector3): void;
    /**
     * Sets a plane using a point that lies within it along with a normal to orient it.
     * @param inNormal The plane's normal vector.
     * @param inPoint A point that lies on the plane.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Plane.SetNormalAndPosition.html | Plane.SetNormalAndPosition}
     */
    SetNormalAndPosition(inNormal: Vector3, inPoint: Vector3): void;
    ToString(): string;
    ToString(format: string): string;
    ToString(format: string, formatProvider: IFormatProvider): string;
    /**
     * Moves the plane in space by the translation vector.
     * @param translation The offset in space to move the plane with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Plane.Translate.html | Plane.Translate}
     */
    Translate(translation: Vector3): void;


}
    
interface PlaneConstructor {


    new(inNormal: Vector3, inPoint: Vector3): Plane;
    new(inNormal: Vector3, d: number): Plane;
    new(a: Vector3, b: Vector3, c: Vector3): Plane;


    Translate(plane: Plane, translation: Vector3): Plane;

}
declare const Plane: PlaneConstructor;
    
    
interface Scene {
    readonly handle: number;
    /**
     * Returns the relative path of the Scene. For example: &quot;AssetsMyScenesMyScene.unity&quot;.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SceneManagement.Scene-path.html | SceneManagement.Scene.path}
     */
    readonly path: string;
    /**
     * Returns the name of the Scene that is currently active in the game or app.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SceneManagement.Scene-name.html | SceneManagement.Scene.name}
     */
    name: string;
    /**
     * IsLoaded is set to true after loading has completed and objects have been enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SceneManagement.Scene-isLoaded.html | SceneManagement.Scene.isLoaded}
     */
    readonly isLoaded: boolean;
    /**
     * Return the index of the Scene in the Build Settings.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SceneManagement.Scene-buildIndex.html | SceneManagement.Scene.buildIndex}
     */
    readonly buildIndex: number;
    /**
     * Returns true if the Scene is modified.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SceneManagement.Scene-isDirty.html | SceneManagement.Scene.isDirty}
     */
    readonly isDirty: boolean;
    /**
     * The number of root transforms of this Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SceneManagement.Scene-rootCount.html | SceneManagement.Scene.rootCount}
     */
    readonly rootCount: number;
    isSubScene: boolean;



    Equals(other: unknown): boolean;
    GetHashCode(): number;
    /**
     * Returns all the root game objects in the Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SceneManagement.Scene.GetRootGameObjects.html | SceneManagement.Scene.GetRootGameObjects}
     */
    GetRootGameObjects(): Readonly<GameObject[]>;
    GetRootGameObjects(rootGameObjects: Readonly<GameObject[]>): void;
    /**
     * Whether this is a valid Scene.
A Scene may be invalid if, for example, you tried to open a Scene that does not exist. In this case, the Scene returned from EditorSceneManager.OpenScene would return False for IsValid.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SceneManagement.Scene.IsValid.html | SceneManagement.Scene.IsValid}
     */
    IsValid(): boolean;


}
    
    
interface TagHandle {



    ToString(): string;


}
    
interface TagHandleConstructor {




    GetExistingTag(tagName: string): TagHandle;

}
declare const TagHandle: TagHandleConstructor;
    
    
interface InstantiateParameters {
    parent: Transform;
    scene: Scene;
    worldSpace: boolean;





}
    
interface YieldInstruction {





}
    
interface YieldInstructionConstructor {


    new(): YieldInstruction;



}
declare const YieldInstruction: YieldInstructionConstructor;
    
interface AsyncOperation extends YieldInstruction {
    /**
     * Has the operation finished? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AsyncOperation-isDone.html | AsyncOperation.isDone}
     */
    readonly isDone: boolean;
    /**
     * What's the operation's progress. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AsyncOperation-progress.html | AsyncOperation.progress}
     */
    readonly progress: number;
    /**
     * Priority lets you tweak in which order async operation calls will be performed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AsyncOperation-priority.html | AsyncOperation.priority}
     */
    priority: number;
    /**
     * Allow Scenes to be activated as soon as it is ready.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AsyncOperation-allowSceneActivation.html | AsyncOperation.allowSceneActivation}
     */
    allowSceneActivation: boolean;

    readonly completed: MonoSignal<AsyncOperation>;




}
    
interface AsyncOperationConstructor {


    new(): AsyncOperation;



}
declare const AsyncOperation: AsyncOperationConstructor;
    
interface AsyncInstantiateOperation extends AsyncOperation {
    /**
     * If isDone is true, then Result contains the instantiated objects. The size of the array is the same as the 'count' argument for the InstantiateAsync call.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AsyncInstantiateOperation-Result.html | AsyncInstantiateOperation.Result}
     */
    readonly Result: Readonly<Object[]>;



    /**
     * Method that cancels all the operations connected to the asynchronous instantiation if the operation is not done yet, that is, where isDone == false. This method deletes all the objects created so far, which are not visible to users while they're not activated, and stops all the internal jobs connected to the operation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AsyncInstantiateOperation.Cancel.html | AsyncInstantiateOperation.Cancel}
     */
    Cancel(): void;
    /**
     * This property can be true only if allowSceneActivation is set to false, and if the operation has already completed everything needed for object instantiation except for the main thread integrating the objects and calling their Awake methods. Users can set allowSceneActivation to true to trigger the activation or call the Cancel method to cancel instantiation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AsyncInstantiateOperation.IsWaitingForSceneActivation.html | AsyncInstantiateOperation.IsWaitingForSceneActivation}
     */
    IsWaitingForSceneActivation(): boolean;
    /**
     * Blocks the current thread until this operation is done.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AsyncInstantiateOperation.WaitForCompletion.html | AsyncInstantiateOperation.WaitForCompletion}
     */
    WaitForCompletion(): void;


}
    
interface AsyncInstantiateOperationConstructor {


    new(): AsyncInstantiateOperation;


    GetIntegrationTimeMS(): number;
    SetIntegrationTimeMS(integrationTimeMS: number): void;

}
declare const AsyncInstantiateOperation: AsyncInstantiateOperationConstructor;
    
interface AsyncInstantiateOperation<T> extends AsyncInstantiateOperation {
    readonly Result: Readonly<T[]>;



    GetAwaiter(): Awaiter<T>;


}
    
interface Awaiter<T> {
    readonly IsCompleted: boolean;



    GetResult(): Readonly<T[]>;
    OnCompleted(continuation: Action): void;


}
    
interface AwaiterConstructor {


    new(op: AsyncInstantiateOperation<T>): Awaiter<T>;



}
declare const Awaiter: AwaiterConstructor;
    
    
    
    
    
interface Rigidbody extends Component {
    /**
     * The linear velocity vector of the rigidbody. It represents the rate of change of Rigidbody position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-linearVelocity.html | Rigidbody.linearVelocity}
     */
    linearVelocity: Vector3;
    /**
     * The angular velocity vector of the rigidbody measured in radians per second.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-angularVelocity.html | Rigidbody.angularVelocity}
     */
    angularVelocity: Vector3;
    /**
     * The linear damping of the object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-linearDamping.html | Rigidbody.linearDamping}
     */
    linearDamping: number;
    /**
     * The angular damping of the object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-angularDamping.html | Rigidbody.angularDamping}
     */
    angularDamping: number;
    /**
     * The mass of the rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-mass.html | Rigidbody.mass}
     */
    mass: number;
    /**
     * Controls whether gravity affects this rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-useGravity.html | Rigidbody.useGravity}
     */
    useGravity: boolean;
    /**
     * Maximum velocity of a rigidbody when moving out of penetrating state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-maxDepenetrationVelocity.html | Rigidbody.maxDepenetrationVelocity}
     */
    maxDepenetrationVelocity: number;
    /**
     * Controls whether physics affects the rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-isKinematic.html | Rigidbody.isKinematic}
     */
    isKinematic: boolean;
    /**
     * Controls whether physics will change the rotation of the object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-freezeRotation.html | Rigidbody.freezeRotation}
     */
    freezeRotation: boolean;
    /**
     * Controls which degrees of freedom are allowed for the simulation of this Rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-constraints.html | Rigidbody.constraints}
     */
    constraints: RigidbodyConstraints;
    /**
     * The Rigidbody's collision detection mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-collisionDetectionMode.html | Rigidbody.collisionDetectionMode}
     */
    collisionDetectionMode: CollisionDetectionMode;
    /**
     * Whether or not to calculate the center of mass automatically.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-automaticCenterOfMass.html | Rigidbody.automaticCenterOfMass}
     */
    automaticCenterOfMass: boolean;
    /**
     * The center of mass relative to the transform's origin.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-centerOfMass.html | Rigidbody.centerOfMass}
     */
    centerOfMass: Vector3;
    /**
     * The center of mass of the rigidbody in world space (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-worldCenterOfMass.html | Rigidbody.worldCenterOfMass}
     */
    readonly worldCenterOfMass: Vector3;
    /**
     * Whether or not to calculate the inertia tensor automatically.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-automaticInertiaTensor.html | Rigidbody.automaticInertiaTensor}
     */
    automaticInertiaTensor: boolean;
    /**
     * The rotation of the inertia tensor.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-inertiaTensorRotation.html | Rigidbody.inertiaTensorRotation}
     */
    inertiaTensorRotation: Quaternion;
    /**
     * The inertia tensor of this body, defined as a diagonal matrix in a reference frame positioned at this body's center of mass and rotated by Rigidbody.inertiaTensorRotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-inertiaTensor.html | Rigidbody.inertiaTensor}
     */
    inertiaTensor: Vector3;
    /**
     * Should collision detection be enabled? (By default always enabled).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-detectCollisions.html | Rigidbody.detectCollisions}
     */
    detectCollisions: boolean;
    /**
     * The position of the rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-position.html | Rigidbody.position}
     */
    position: Vector3;
    /**
     * The rotation of the Rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-rotation.html | Rigidbody.rotation}
     */
    rotation: Quaternion;
    /**
     * Interpolation provides a way to manage the appearance of jitter in the movement of your Rigidbody GameObjects at run time.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-interpolation.html | Rigidbody.interpolation}
     */
    interpolation: RigidbodyInterpolation;
    /**
     * The solverIterations determines how accurately Rigidbody joints and collision contacts are resolved. Overrides Physics.defaultSolverIterations. Must be positive.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-solverIterations.html | Rigidbody.solverIterations}
     */
    solverIterations: number;
    /**
     * The mass-normalized energy threshold, below which objects start going to sleep.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-sleepThreshold.html | Rigidbody.sleepThreshold}
     */
    sleepThreshold: number;
    /**
     * The maximum angular velocity of the rigidbody measured in radians per second. (Default 7) range { 0, infinity }.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-maxAngularVelocity.html | Rigidbody.maxAngularVelocity}
     */
    maxAngularVelocity: number;
    /**
     * The maximum linear velocity of the rigidbody measured in meters per second.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-maxLinearVelocity.html | Rigidbody.maxLinearVelocity}
     */
    maxLinearVelocity: number;
    /**
     * The solverVelocityIterations affects how how accurately Rigidbody joints and collision contacts are resolved. Overrides Physics.defaultSolverVelocityIterations. Must be positive.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-solverVelocityIterations.html | Rigidbody.solverVelocityIterations}
     */
    solverVelocityIterations: number;
    /**
     * The additional layers that all Colliders attached to this Rigidbody should exclude when deciding if the Collider can come into contact with another Collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-excludeLayers.html | Rigidbody.excludeLayers}
     */
    excludeLayers: LayerMask;
    /**
     * The additional layers that all Colliders attached to this Rigidbody should include when deciding if the Collider can come into contact with another Collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody-includeLayers.html | Rigidbody.includeLayers}
     */
    includeLayers: LayerMask;



    /**
     * Applies a force to a rigidbody that simulates explosion effects.
     * @param explosionForce The force of the explosion (which may be modified by distance).
     * @param explosionPosition The centre of the sphere within which the explosion has its effect.
     * @param explosionRadius The radius of the sphere within which the explosion has its effect.
     * @param upwardsModifier Adjustment to the apparent position of the explosion to make it seem to lift objects.
     * @param mode The method used to apply the force to its targets.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddExplosionForce.html | Rigidbody.AddExplosionForce}
     */
    AddExplosionForce(explosionForce: number, explosionPosition: Vector3, explosionRadius: number, upwardsModifier: number, mode: ForceMode): void;
    /**
     * Applies a force to a rigidbody that simulates explosion effects.
     * @param explosionForce The force of the explosion (which may be modified by distance).
     * @param explosionPosition The centre of the sphere within which the explosion has its effect.
     * @param explosionRadius The radius of the sphere within which the explosion has its effect.
     * @param upwardsModifier Adjustment to the apparent position of the explosion to make it seem to lift objects.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddExplosionForce.html | Rigidbody.AddExplosionForce}
     */
    AddExplosionForce(explosionForce: number, explosionPosition: Vector3, explosionRadius: number, upwardsModifier: number): void;
    /**
     * Applies a force to a rigidbody that simulates explosion effects.
     * @param explosionForce The force of the explosion (which may be modified by distance).
     * @param explosionPosition The centre of the sphere within which the explosion has its effect.
     * @param explosionRadius The radius of the sphere within which the explosion has its effect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddExplosionForce.html | Rigidbody.AddExplosionForce}
     */
    AddExplosionForce(explosionForce: number, explosionPosition: Vector3, explosionRadius: number): void;
    /**
     * Adds a force to the Rigidbody.
     * @param force Force vector in world coordinates.
     * @param mode Type of force to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddForce.html | Rigidbody.AddForce}
     */
    AddForce(force: Vector3, mode: ForceMode): void;
    /**
     * Adds a force to the Rigidbody.
     * @param force Force vector in world coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddForce.html | Rigidbody.AddForce}
     */
    AddForce(force: Vector3): void;
    /**
     * Adds a force to the Rigidbody.
     * @param x Size of force along the world x-axis.
     * @param y Size of force along the world y-axis.
     * @param z Size of force along the world z-axis.
     * @param mode Type of force to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddForce.html | Rigidbody.AddForce}
     */
    AddForce(x: number, y: number, z: number, mode: ForceMode): void;
    /**
     * Adds a force to the Rigidbody.
     * @param x Size of force along the world x-axis.
     * @param y Size of force along the world y-axis.
     * @param z Size of force along the world z-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddForce.html | Rigidbody.AddForce}
     */
    AddForce(x: number, y: number, z: number): void;
    /**
     * Applies force at position. As a result this will apply a torque and force on the object.
     * @param force Force vector in world coordinates.
     * @param position Position in world coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddForceAtPosition.html | Rigidbody.AddForceAtPosition}
     */
    AddForceAtPosition(force: Vector3, position: Vector3, mode: ForceMode): void;
    /**
     * Applies force at position. As a result this will apply a torque and force on the object.
     * @param force Force vector in world coordinates.
     * @param position Position in world coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddForceAtPosition.html | Rigidbody.AddForceAtPosition}
     */
    AddForceAtPosition(force: Vector3, position: Vector3): void;
    /**
     * Adds a force to the rigidbody relative to its coordinate system.
     * @param force Force vector in local coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddRelativeForce.html | Rigidbody.AddRelativeForce}
     */
    AddRelativeForce(force: Vector3, mode: ForceMode): void;
    /**
     * Adds a force to the rigidbody relative to its coordinate system.
     * @param force Force vector in local coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddRelativeForce.html | Rigidbody.AddRelativeForce}
     */
    AddRelativeForce(force: Vector3): void;
    /**
     * Adds a force to the rigidbody relative to its coordinate system.
     * @param x Size of force along the local x-axis.
     * @param y Size of force along the local y-axis.
     * @param z Size of force along the local z-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddRelativeForce.html | Rigidbody.AddRelativeForce}
     */
    AddRelativeForce(x: number, y: number, z: number, mode: ForceMode): void;
    /**
     * Adds a force to the rigidbody relative to its coordinate system.
     * @param x Size of force along the local x-axis.
     * @param y Size of force along the local y-axis.
     * @param z Size of force along the local z-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddRelativeForce.html | Rigidbody.AddRelativeForce}
     */
    AddRelativeForce(x: number, y: number, z: number): void;
    /**
     * Adds a torque to the rigidbody relative to its coordinate system.
     * @param torque Torque vector in local coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddRelativeTorque.html | Rigidbody.AddRelativeTorque}
     */
    AddRelativeTorque(torque: Vector3, mode: ForceMode): void;
    /**
     * Adds a torque to the rigidbody relative to its coordinate system.
     * @param torque Torque vector in local coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddRelativeTorque.html | Rigidbody.AddRelativeTorque}
     */
    AddRelativeTorque(torque: Vector3): void;
    /**
     * Adds a torque to the rigidbody relative to its coordinate system.
     * @param x Size of torque along the local x-axis.
     * @param y Size of torque along the local y-axis.
     * @param z Size of torque along the local z-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddRelativeTorque.html | Rigidbody.AddRelativeTorque}
     */
    AddRelativeTorque(x: number, y: number, z: number, mode: ForceMode): void;
    /**
     * Adds a torque to the rigidbody relative to its coordinate system.
     * @param x Size of torque along the local x-axis.
     * @param y Size of torque along the local y-axis.
     * @param z Size of torque along the local z-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddRelativeTorque.html | Rigidbody.AddRelativeTorque}
     */
    AddRelativeTorque(x: number, y: number, z: number): void;
    /**
     * Adds a torque to the rigidbody.
     * @param torque Torque vector in world coordinates.
     * @param mode The type of torque to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddTorque.html | Rigidbody.AddTorque}
     */
    AddTorque(torque: Vector3, mode: ForceMode): void;
    /**
     * Adds a torque to the rigidbody.
     * @param torque Torque vector in world coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddTorque.html | Rigidbody.AddTorque}
     */
    AddTorque(torque: Vector3): void;
    /**
     * Adds a torque to the rigidbody.
     * @param x Size of torque along the world x-axis.
     * @param y Size of torque along the world y-axis.
     * @param z Size of torque along the world z-axis.
     * @param mode The type of torque to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddTorque.html | Rigidbody.AddTorque}
     */
    AddTorque(x: number, y: number, z: number, mode: ForceMode): void;
    /**
     * Adds a torque to the rigidbody.
     * @param x Size of torque along the world x-axis.
     * @param y Size of torque along the world y-axis.
     * @param z Size of torque along the world z-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.AddTorque.html | Rigidbody.AddTorque}
     */
    AddTorque(x: number, y: number, z: number): void;
    /**
     * The closest point to the bounding box of the attached colliders.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.ClosestPointOnBounds.html | Rigidbody.ClosestPointOnBounds}
     */
    ClosestPointOnBounds(position: Vector3): Vector3;
    /**
     * Returns the force that the Rigidbody has accumulated before the simulation step.
     * @param step The timestep of the next physics simulation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.GetAccumulatedForce.html | Rigidbody.GetAccumulatedForce}
     */
    GetAccumulatedForce(step: number): Vector3;
    GetAccumulatedForce(): Vector3;
    /**
     * Returns the torque that the Rigidbody has accumulated before the simulation step.
     * @param step The timestep of the next physics simulation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.GetAccumulatedTorque.html | Rigidbody.GetAccumulatedTorque}
     */
    GetAccumulatedTorque(step: number): Vector3;
    GetAccumulatedTorque(): Vector3;
    /**
     * The velocity of the rigidbody at the point worldPoint in global space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.GetPointVelocity.html | Rigidbody.GetPointVelocity}
     */
    GetPointVelocity(worldPoint: Vector3): Vector3;
    /**
     * The velocity relative to the rigidbody at the point relativePoint.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.GetRelativePointVelocity.html | Rigidbody.GetRelativePointVelocity}
     */
    GetRelativePointVelocity(relativePoint: Vector3): Vector3;
    /**
     * Is the rigidbody sleeping?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.IsSleeping.html | Rigidbody.IsSleeping}
     */
    IsSleeping(): boolean;
    /**
     * Moves the Rigidbody to position and rotates the Rigidbody to rotation.
     * @param position The new position for the Rigidbody.
     * @param rotation The new rotation for the Rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.Move.html | Rigidbody.Move}
     */
    Move(position: Vector3, rotation: Quaternion): void;
    /**
     * Moves the kinematic Rigidbody towards position.
     * @param position Provides the new position for the Rigidbody object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.MovePosition.html | Rigidbody.MovePosition}
     */
    MovePosition(position: Vector3): void;
    /**
     * Rotates the rigidbody to rotation.
     * @param rot The new rotation for the Rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.MoveRotation.html | Rigidbody.MoveRotation}
     */
    MoveRotation(rot: Quaternion): void;
    /**
     * Applies the position and rotation of the Rigidbody to the corresponding Transform component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.PublishTransform.html | Rigidbody.PublishTransform}
     */
    PublishTransform(): void;
    /**
     * Reset the center of mass of the rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.ResetCenterOfMass.html | Rigidbody.ResetCenterOfMass}
     */
    ResetCenterOfMass(): void;
    /**
     * Reset the inertia tensor value and rotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.ResetInertiaTensor.html | Rigidbody.ResetInertiaTensor}
     */
    ResetInertiaTensor(): void;
    /**
     * Sets the mass based on the attached colliders assuming a constant density.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.SetDensity.html | Rigidbody.SetDensity}
     */
    SetDensity(density: number): void;
    /**
     * Forces a rigidbody to sleep until woken up.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.Sleep.html | Rigidbody.Sleep}
     */
    Sleep(): void;
    /**
     * Like Rigidbody.SweepTest, but returns all hits.
     * @param direction The direction into which to sweep the rigidbody.
     * @param maxDistance The length of the sweep.
     * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.SweepTestAll.html | Rigidbody.SweepTestAll}
     */
    SweepTestAll(direction: Vector3, maxDistance: number, queryTriggerInteraction: QueryTriggerInteraction): Readonly<RaycastHit[]>;
    SweepTestAll(direction: Vector3, maxDistance: number): Readonly<RaycastHit[]>;
    SweepTestAll(direction: Vector3): Readonly<RaycastHit[]>;
    /**
     * Forces a rigidbody to wake up.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody.WakeUp.html | Rigidbody.WakeUp}
     */
    WakeUp(): void;


}
    
    
    
interface RigidbodyConstructor {


    new(): Rigidbody;



}
declare const Rigidbody: RigidbodyConstructor;
    
interface Behaviour extends Component {
    /**
     * Enabled Behaviours are Updated, disabled Behaviours are not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Behaviour-enabled.html | Behaviour.enabled}
     */
    enabled: boolean;
    /**
     * Reports whether a GameObject and its associated Behaviour is active and enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Behaviour-isActiveAndEnabled.html | Behaviour.isActiveAndEnabled}
     */
    readonly isActiveAndEnabled: boolean;





}
    
interface BehaviourConstructor {


    new(): Behaviour;



}
declare const Behaviour: BehaviourConstructor;
    
interface ArticulationBody extends Behaviour {
    /**
     * The type of joint connecting this body to its parent body.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-jointType.html | ArticulationBody.jointType}
     */
    jointType: ArticulationJointType;
    /**
     * Position of the anchor relative to this body.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-anchorPosition.html | ArticulationBody.anchorPosition}
     */
    anchorPosition: Vector3;
    /**
     * Position of the anchor relative to this body's parent.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-parentAnchorPosition.html | ArticulationBody.parentAnchorPosition}
     */
    parentAnchorPosition: Vector3;
    /**
     * Rotation of the anchor relative to this body.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-anchorRotation.html | ArticulationBody.anchorRotation}
     */
    anchorRotation: Quaternion;
    /**
     * Rotation of the anchor relative to this body's parent.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-parentAnchorRotation.html | ArticulationBody.parentAnchorRotation}
     */
    parentAnchorRotation: Quaternion;
    /**
     * Indicates whether this body is the root body of the articulation (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-isRoot.html | ArticulationBody.isRoot}
     */
    readonly isRoot: boolean;
    /**
     * Whether the parent anchor should be computed automatically or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-matchAnchors.html | ArticulationBody.matchAnchors}
     */
    matchAnchors: boolean;
    /**
     * The type of lock along X axis of movement.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-linearLockX.html | ArticulationBody.linearLockX}
     */
    linearLockX: ArticulationDofLock;
    /**
     * The type of lock along Y axis of movement.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-linearLockY.html | ArticulationBody.linearLockY}
     */
    linearLockY: ArticulationDofLock;
    /**
     * The type of lock along Z axis of movement.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-linearLockZ.html | ArticulationBody.linearLockZ}
     */
    linearLockZ: ArticulationDofLock;
    /**
     * The magnitude of the conical swing angle relative to Y axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-swingYLock.html | ArticulationBody.swingYLock}
     */
    swingYLock: ArticulationDofLock;
    /**
     * The magnitude of the conical swing angle relative to Z axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-swingZLock.html | ArticulationBody.swingZLock}
     */
    swingZLock: ArticulationDofLock;
    /**
     * The type of lock for twist movement.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-twistLock.html | ArticulationBody.twistLock}
     */
    twistLock: ArticulationDofLock;
    /**
     * The properties of drive along or around X.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-xDrive.html | ArticulationBody.xDrive}
     */
    xDrive: ArticulationDrive;
    /**
     * The properties of drive along or around Y.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-yDrive.html | ArticulationBody.yDrive}
     */
    yDrive: ArticulationDrive;
    /**
     * The properties of drive along or around Z.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-zDrive.html | ArticulationBody.zDrive}
     */
    zDrive: ArticulationDrive;
    /**
     * Allows you to specify that this body is not movable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-immovable.html | ArticulationBody.immovable}
     */
    immovable: boolean;
    /**
     * Controls whether gravity affects this articulation body.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-useGravity.html | ArticulationBody.useGravity}
     */
    useGravity: boolean;
    /**
     * Damping factor that affects how this body resists linear motion.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-linearDamping.html | ArticulationBody.linearDamping}
     */
    linearDamping: number;
    /**
     * Damping factor that affects how this body resists rotations.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-angularDamping.html | ArticulationBody.angularDamping}
     */
    angularDamping: number;
    /**
     * Allows you to specify the amount of friction that is applied as a result of the parent body moving relative to this body.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-jointFriction.html | ArticulationBody.jointFriction}
     */
    jointFriction: number;
    /**
     * The additional layers that all Colliders attached to this ArticulationBody should exclude when deciding if the Collider can come into contact with another Collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-excludeLayers.html | ArticulationBody.excludeLayers}
     */
    excludeLayers: LayerMask;
    /**
     * The additional layers that all Colliders attached to this ArticulationBody should include when deciding if a the Collider can come into contact with another Collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-includeLayers.html | ArticulationBody.includeLayers}
     */
    includeLayers: LayerMask;
    /**
     * Linear velocity of the body defined in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-linearVelocity.html | ArticulationBody.linearVelocity}
     */
    linearVelocity: Vector3;
    /**
     * The angular velocity of the body defined in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-angularVelocity.html | ArticulationBody.angularVelocity}
     */
    angularVelocity: Vector3;
    /**
     * The mass of this articulation body.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-mass.html | ArticulationBody.mass}
     */
    mass: number;
    /**
     * Whether or not to calculate the center of mass automatically.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-automaticCenterOfMass.html | ArticulationBody.automaticCenterOfMass}
     */
    automaticCenterOfMass: boolean;
    /**
     * The center of mass of the body defined in local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-centerOfMass.html | ArticulationBody.centerOfMass}
     */
    centerOfMass: Vector3;
    /**
     * The center of mass of the body defined in world space (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-worldCenterOfMass.html | ArticulationBody.worldCenterOfMass}
     */
    readonly worldCenterOfMass: Vector3;
    /**
     * Whether or not to calculate the inertia tensor automatically.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-automaticInertiaTensor.html | ArticulationBody.automaticInertiaTensor}
     */
    automaticInertiaTensor: boolean;
    /**
     * The inertia tensor of this body.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-inertiaTensor.html | ArticulationBody.inertiaTensor}
     */
    inertiaTensor: Vector3;
    /**
     * The rotation of the inertia tensor.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-inertiaTensorRotation.html | ArticulationBody.inertiaTensorRotation}
     */
    inertiaTensorRotation: Quaternion;
    /**
     * The mass-normalized energy threshold, below which objects start going to sleep.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-sleepThreshold.html | ArticulationBody.sleepThreshold}
     */
    sleepThreshold: number;
    /**
     * The solverIterations determines how accurately articulation body joints and collision contacts are resolved.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-solverIterations.html | ArticulationBody.solverIterations}
     */
    solverIterations: number;
    /**
     * The solverVelocityIterations affects how accurately articulation body joints and collision contacts are resolved during bounce.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-solverVelocityIterations.html | ArticulationBody.solverVelocityIterations}
     */
    solverVelocityIterations: number;
    /**
     * The maximum angular velocity of the articulation body measured in radians per second.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-maxAngularVelocity.html | ArticulationBody.maxAngularVelocity}
     */
    maxAngularVelocity: number;
    /**
     * The maximum linear velocity of the articulation body measured in meters per second.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-maxLinearVelocity.html | ArticulationBody.maxLinearVelocity}
     */
    maxLinearVelocity: number;
    /**
     * The maximum joint velocity of the articulation body joint in reduced coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-maxJointVelocity.html | ArticulationBody.maxJointVelocity}
     */
    maxJointVelocity: number;
    /**
     * The maximum velocity of an articulation body when moving out of penetrating state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-maxDepenetrationVelocity.html | ArticulationBody.maxDepenetrationVelocity}
     */
    maxDepenetrationVelocity: number;
    /**
     * The joint position in reduced coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-jointPosition.html | ArticulationBody.jointPosition}
     */
    jointPosition: ArticulationReducedSpace;
    /**
     * The joint velocity in reduced coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-jointVelocity.html | ArticulationBody.jointVelocity}
     */
    jointVelocity: ArticulationReducedSpace;
    /**
     * The joint acceleration in reduced coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-jointAcceleration.html | ArticulationBody.jointAcceleration}
     */
    jointAcceleration: ArticulationReducedSpace;
    /**
     * The joint force in reduced coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-jointForce.html | ArticulationBody.jointForce}
     */
    jointForce: ArticulationReducedSpace;
    /**
     * The drive force in reduced coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-driveForce.html | ArticulationBody.driveForce}
     */
    readonly driveForce: ArticulationReducedSpace;
    /**
     * The amount of degrees of freedom of a body.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-dofCount.html | ArticulationBody.dofCount}
     */
    readonly dofCount: number;
    /**
     * The index of the body in the hierarchy of articulation bodies.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-index.html | ArticulationBody.index}
     */
    readonly index: number;
    /**
     * The ArticulationBody's collision detection mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody-collisionDetectionMode.html | ArticulationBody.collisionDetectionMode}
     */
    collisionDetectionMode: CollisionDetectionMode;



    /**
     * Applies a force to the ArticulationBody.
     * @param force The force vector to apply.
     * @param mode The type of force to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.AddForce.html | ArticulationBody.AddForce}
     */
    AddForce(force: Vector3, mode: ForceMode): void;
    /**
     * Applies a force to the ArticulationBody.
     * @param force The force vector to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.AddForce.html | ArticulationBody.AddForce}
     */
    AddForce(force: Vector3): void;
    /**
     * Applies a force at a specific position, resulting in applying a torque and force on the object.
     * @param force The force vector in world coordinates.
     * @param position A position in world coordinates.
     * @param mode The type of force to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.AddForceAtPosition.html | ArticulationBody.AddForceAtPosition}
     */
    AddForceAtPosition(force: Vector3, position: Vector3, mode: ForceMode): void;
    /**
     * Applies a force at a specific position, resulting in applying a torque and force on the object.
     * @param force The force vector in world coordinates.
     * @param position A position in world coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.AddForceAtPosition.html | ArticulationBody.AddForceAtPosition}
     */
    AddForceAtPosition(force: Vector3, position: Vector3): void;
    /**
     * Applies a force to the Articulation Body, relative to its local coordinate system.
     * @param force The force vector in local coordinates.
     * @param mode The type of force to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.AddRelativeForce.html | ArticulationBody.AddRelativeForce}
     */
    AddRelativeForce(force: Vector3, mode: ForceMode): void;
    /**
     * Applies a force to the Articulation Body, relative to its local coordinate system.
     * @param force The force vector in local coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.AddRelativeForce.html | ArticulationBody.AddRelativeForce}
     */
    AddRelativeForce(force: Vector3): void;
    /**
     * Applies a torque to the articulation body, relative to its local coordinate system.
     * @param torque The torque vector in local coordinates.
     * @param mode The type of torque to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.AddRelativeTorque.html | ArticulationBody.AddRelativeTorque}
     */
    AddRelativeTorque(torque: Vector3, mode: ForceMode): void;
    /**
     * Applies a torque to the articulation body, relative to its local coordinate system.
     * @param torque The torque vector in local coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.AddRelativeTorque.html | ArticulationBody.AddRelativeTorque}
     */
    AddRelativeTorque(torque: Vector3): void;
    /**
     * Add torque to the articulation body.
     * @param torque The torque to apply.
     * @param mode The type of torque to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.AddTorque.html | ArticulationBody.AddTorque}
     */
    AddTorque(torque: Vector3, mode: ForceMode): void;
    /**
     * Add torque to the articulation body.
     * @param torque The torque to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.AddTorque.html | ArticulationBody.AddTorque}
     */
    AddTorque(torque: Vector3): void;
    /**
     * Returns the force that the ArticulationBody has accumulated before the simulation step.
     * @param step The timestep of the next physics simulation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.GetAccumulatedForce.html | ArticulationBody.GetAccumulatedForce}
     */
    GetAccumulatedForce(step: number): Vector3;
    GetAccumulatedForce(): Vector3;
    /**
     * Returns the torque that the ArticulationBody has accumulated before the simulation step.
     * @param step The timestep of the next physics simulation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.GetAccumulatedTorque.html | ArticulationBody.GetAccumulatedTorque}
     */
    GetAccumulatedTorque(step: number): Vector3;
    GetAccumulatedTorque(): Vector3;
    /**
     * Return the point on the articulation body that is closest to a given one.
     * @param point The point of interest.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.GetClosestPoint.html | ArticulationBody.GetClosestPoint}
     */
    GetClosestPoint(point: Vector3): Vector3;
    /**
     * Calculates and writes dense Jacobian matrix of the articulation body hierarchy to the supplied struct.
     * @param jacobian Supplied struct to read back and store Jacobian matrix values.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.GetDenseJacobian.html | ArticulationBody.GetDenseJacobian}
     */
    GetDenseJacobian(jacobian: ArticulationJacobian): number;
    GetDofStartIndices(dofStartIndices: Readonly<number[]>): number;
    GetDriveForces(forces: Readonly<number[]>): number;
    GetDriveTargets(targets: Readonly<number[]>): number;
    GetDriveTargetVelocities(targetVelocities: Readonly<number[]>): number;
    GetJointAccelerations(accelerations: Readonly<number[]>): number;
    GetJointCoriolisCentrifugalForces(forces: Readonly<number[]>): number;
    GetJointExternalForces(forces: Readonly<number[]>, step: number): number;
    GetJointForces(forces: Readonly<number[]>): number;
    /**
     * Returns the forces required for the body to reach the provided acceleration in reduced space.
     * @param acceleration The desired acceleration in reduced space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.GetJointForcesForAcceleration.html | ArticulationBody.GetJointForcesForAcceleration}
     */
    GetJointForcesForAcceleration(acceleration: ArticulationReducedSpace): ArticulationReducedSpace;
    GetJointGravityForces(forces: Readonly<number[]>): number;
    GetJointPositions(positions: Readonly<number[]>): number;
    GetJointVelocities(velocities: Readonly<number[]>): number;
    /**
     * Gets the velocity of the articulation body at the specified worldPoint in global space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.GetPointVelocity.html | ArticulationBody.GetPointVelocity}
     */
    GetPointVelocity(worldPoint: Vector3): Vector3;
    /**
     * The velocity relative to the articulation body at the point relativePoint.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.GetRelativePointVelocity.html | ArticulationBody.GetRelativePointVelocity}
     */
    GetRelativePointVelocity(relativePoint: Vector3): Vector3;
    /**
     * Indicates whether the articulation body is sleeping.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.IsSleeping.html | ArticulationBody.IsSleeping}
     */
    IsSleeping(): boolean;
    /**
     * Reads the position and rotation of the Articulation Body from the physics system and applies it to the corresponding Transform component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.PublishTransform.html | ArticulationBody.PublishTransform}
     */
    PublishTransform(): void;
    /**
     * Resets the center of mass of the articulation body.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.ResetCenterOfMass.html | ArticulationBody.ResetCenterOfMass}
     */
    ResetCenterOfMass(): void;
    /**
     * Resets the inertia tensor value and rotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.ResetInertiaTensor.html | ArticulationBody.ResetInertiaTensor}
     */
    ResetInertiaTensor(): void;
    /**
     * Sets the damping value of the specified drive.
     * @param axis The drive axis.
     * @param value The value to set the damping to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.SetDriveDamping.html | ArticulationBody.SetDriveDamping}
     */
    SetDriveDamping(axis: ArticulationDriveAxis, value: number): void;
    /**
     * Sets the force limit of the specified drive.
     * @param axis The drive axis.
     * @param value The value to set the force limit to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.SetDriveForceLimit.html | ArticulationBody.SetDriveForceLimit}
     */
    SetDriveForceLimit(axis: ArticulationDriveAxis, value: number): void;
    /**
     * Sets the lower and upper limits of the drive.
     * @param axis The drive axis.
     * @param lower The lower limit of the drive.
     * @param upper The upper limit of the drive.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.SetDriveLimits.html | ArticulationBody.SetDriveLimits}
     */
    SetDriveLimits(axis: ArticulationDriveAxis, lower: number, upper: number): void;
    /**
     * Sets the stiffness value of the specified drive.
     * @param axis The drive axis.
     * @param value The value to set the stiffness to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.SetDriveStiffness.html | ArticulationBody.SetDriveStiffness}
     */
    SetDriveStiffness(axis: ArticulationDriveAxis, value: number): void;
    /**
     * Sets the target value of the specified drive.
     * @param axis The drive axis.
     * @param value The value to set the target to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.SetDriveTarget.html | ArticulationBody.SetDriveTarget}
     */
    SetDriveTarget(axis: ArticulationDriveAxis, value: number): void;
    SetDriveTargets(targets: Readonly<number[]>): void;
    SetDriveTargetVelocities(targetVelocities: Readonly<number[]>): void;
    /**
     * Sets the target velocity value of the specified drive.
     * @param axis The drive axis.
     * @param value The value to set the target velocity to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.SetDriveTargetVelocity.html | ArticulationBody.SetDriveTargetVelocity}
     */
    SetDriveTargetVelocity(axis: ArticulationDriveAxis, value: number): void;
    SetJointForces(forces: Readonly<number[]>): void;
    SetJointPositions(positions: Readonly<number[]>): void;
    SetJointVelocities(velocities: Readonly<number[]>): void;
    /**
     * Forces an articulation body to sleep.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.Sleep.html | ArticulationBody.Sleep}
     */
    Sleep(): void;
    /**
     * Snap the anchor to the closest contact between the connected bodies.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.SnapAnchorToClosestContact.html | ArticulationBody.SnapAnchorToClosestContact}
     */
    SnapAnchorToClosestContact(): void;
    /**
     * Teleport the root body of the articulation to a new pose.
     * @param position The new position of the root articulation body.
     * @param rotation The new orientation of the root articulation body.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.TeleportRoot.html | ArticulationBody.TeleportRoot}
     */
    TeleportRoot(position: Vector3, rotation: Quaternion): void;
    /**
     * Forces an articulation body to wake up.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ArticulationBody.WakeUp.html | ArticulationBody.WakeUp}
     */
    WakeUp(): void;


}
    
interface ArticulationDrive {
    lowerLimit: number;
    upperLimit: number;
    stiffness: number;
    damping: number;
    forceLimit: number;
    target: number;
    targetVelocity: number;
    driveType: ArticulationDriveType;





}
    
interface ArticulationReducedSpace {
    dofCount: number;
    Item: number;





}
    
interface ArticulationReducedSpaceConstructor {


    new(a: number): ArticulationReducedSpace;
    new(a: number, b: number): ArticulationReducedSpace;
    new(a: number, b: number, c: number): ArticulationReducedSpace;



}
declare const ArticulationReducedSpace: ArticulationReducedSpaceConstructor;
    
interface ArticulationBodyConstructor {


    new(): ArticulationBody;



}
declare const ArticulationBody: ArticulationBodyConstructor;
    
interface Bounds {
    /**
     * The center of the bounding box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds-center.html | Bounds.center}
     */
    center: Vector3;
    /**
     * The total size of the box. This is always twice as large as the extents.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds-size.html | Bounds.size}
     */
    size: Vector3;
    /**
     * The extents of the Bounding Box. This is always half of the size of the Bounds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds-extents.html | Bounds.extents}
     */
    extents: Vector3;
    /**
     * The minimal point of the box. This is always equal to center-extents.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds-min.html | Bounds.min}
     */
    min: Vector3;
    /**
     * The maximal point of the box. This is always equal to center+extents.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds-max.html | Bounds.max}
     */
    max: Vector3;



    /**
     * The closest point on the bounding box.
     * @param point Arbitrary point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.ClosestPoint.html | Bounds.ClosestPoint}
     */
    ClosestPoint(point: Vector3): Vector3;
    /**
     * Is point contained in the bounding box?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.Contains.html | Bounds.Contains}
     */
    Contains(point: Vector3): boolean;
    /**
     * Grows the Bounds to include the point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.Encapsulate.html | Bounds.Encapsulate}
     */
    Encapsulate(point: Vector3): void;
    /**
     * Grow the bounds to encapsulate the bounds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.Encapsulate.html | Bounds.Encapsulate}
     */
    Encapsulate(bounds: Bounds): void;
    Equals(other: unknown): boolean;
    Equals(other: Bounds): boolean;
    /**
     * Expand the bounds by increasing its size by amount along each side.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.Expand.html | Bounds.Expand}
     */
    Expand(amount: number): void;
    /**
     * Expand the bounds by increasing its size by amount along each side.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.Expand.html | Bounds.Expand}
     */
    Expand(amount: Vector3): void;
    GetHashCode(): number;
    /**
     * Does ray intersect this bounding box?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.IntersectRay.html | Bounds.IntersectRay}
     */
    IntersectRay(ray: Ray): boolean;
    /**
     * Does another bounding box intersect with this bounding box?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.Intersects.html | Bounds.Intersects}
     */
    Intersects(bounds: Bounds): boolean;
    /**
     * Sets the bounds to the min and max value of the box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.SetMinMax.html | Bounds.SetMinMax}
     */
    SetMinMax(min: Vector3, max: Vector3): void;
    /**
     * The smallest squared distance between the point and this bounding box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.SqrDistance.html | Bounds.SqrDistance}
     */
    SqrDistance(point: Vector3): number;
    /**
     * Returns a formatted string for the bounds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.ToString.html | Bounds.ToString}
     */
    ToString(): string;
    /**
     * Returns a formatted string for the bounds.
     * @param format A numeric format string.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.ToString.html | Bounds.ToString}
     */
    ToString(format: string): string;
    /**
     * Returns a formatted string for the bounds.
     * @param format A numeric format string.
     * @param formatProvider An object that specifies culture-specific formatting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Bounds.ToString.html | Bounds.ToString}
     */
    ToString(format: string, formatProvider: IFormatProvider): string;


}
    
    
    
interface BoundsConstructor {


    new(center: Vector3, size: Vector3): Bounds;



}
declare const Bounds: BoundsConstructor;
    
interface GeometryHolder {
    /**
     * Returns the type of the geometry shape that was saved previously.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LowLevelPhysics.GeometryHolder-Type.html | LowLevelPhysics.GeometryHolder.Type}
     */
    readonly Type: GeometryType;



    /**
     * Return the specified geometric shape stored inside this Geometry Holder object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LowLevelPhysics.GeometryHolder.As.html | LowLevelPhysics.GeometryHolder.As}
     */
    As<T extends IGeometry>(): T;


}
    
interface IGeometry {
    /**
     * Return the geometry type of the shape that implemented this interface.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LowLevelPhysics.IGeometry-GeometryType.html | LowLevelPhysics.IGeometry.GeometryType}
     */
    readonly GeometryType: GeometryType;





}
    
interface GeometryHolderConstructor {




    Create<T extends IGeometry>(geometry: T): GeometryHolder;

}
declare const GeometryHolder: GeometryHolderConstructor;
    
interface PhysicsMaterial extends Object {
    /**
     * How bouncy is the surface? A value of 0 will not bounce. A value of 1 will bounce without any loss of energy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsMaterial-bounciness.html | PhysicsMaterial.bounciness}
     */
    bounciness: number;
    /**
     * The friction used when already moving.  This value is usually between 0 and 1.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsMaterial-dynamicFriction.html | PhysicsMaterial.dynamicFriction}
     */
    dynamicFriction: number;
    /**
     * The friction coefficient used when an object is lying on a surface.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsMaterial-staticFriction.html | PhysicsMaterial.staticFriction}
     */
    staticFriction: number;
    /**
     * Determines how the friction is combined.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsMaterial-frictionCombine.html | PhysicsMaterial.frictionCombine}
     */
    frictionCombine: PhysicsMaterialCombine;
    /**
     * Determines how the bounciness is combined.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsMaterial-bounceCombine.html | PhysicsMaterial.bounceCombine}
     */
    bounceCombine: PhysicsMaterialCombine;





}
    
interface PhysicsMaterialConstructor {


    new(): PhysicsMaterial;
    new(name: string): PhysicsMaterial;



}
declare const PhysicsMaterial: PhysicsMaterialConstructor;
    
    
    
    
    
interface PhysicsScene {



    /**
     * Casts the box along a ray and returns detailed information on what was hit.
     * @param center Center of the box.
     * @param halfExtents Half the size of the box in each dimension.
     * @param direction The direction in which to cast the box.
     * @param results The buffer to store the results in.
     * @param orientation Rotation of the box.
     * @param maxDistance The max length of the cast.
     * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
     * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.BoxCast.html | PhysicsScene.BoxCast}
     */
    BoxCast(center: Vector3, halfExtents: Vector3, direction: Vector3, results: Readonly<RaycastHit[]>, orientation: Quaternion, maxDistance: number, layerMask: number, queryTriggerInteraction: QueryTriggerInteraction): number;
    BoxCast(center: Vector3, halfExtents: Vector3, direction: Vector3, results: Readonly<RaycastHit[]>): number;
    /**
     * Casts a capsule against all colliders in this physics scene and returns detailed information on what was hit.
     * @param point1 The center of the sphere at the start of the capsule.
     * @param point2 The center of the sphere at the end of the capsule.
     * @param radius The radius of the capsule.
     * @param direction The direction into which to sweep the capsule.
     * @param results The buffer to store the results in.
     * @param maxDistance The max length of the sweep.
     * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
     * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.CapsuleCast.html | PhysicsScene.CapsuleCast}
     */
    CapsuleCast(point1: Vector3, point2: Vector3, radius: number, direction: Vector3, results: Readonly<RaycastHit[]>, maxDistance: number, layerMask: number, queryTriggerInteraction: QueryTriggerInteraction): number;
    Equals(other: unknown): boolean;
    Equals(other: PhysicsScene): boolean;
    GetHashCode(): number;
    /**
     * Interpolates Rigidbodies in this PhysicsScene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.InterpolateBodies.html | PhysicsScene.InterpolateBodies}
     */
    InterpolateBodies(): void;
    /**
     * Gets whether the physics Scene is empty or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.IsEmpty.html | PhysicsScene.IsEmpty}
     */
    IsEmpty(): boolean;
    /**
     * Gets whether the physics Scene is valid or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.IsValid.html | PhysicsScene.IsValid}
     */
    IsValid(): boolean;
    /**
     * Find all colliders touching or inside of the given box, and store them into the buffer.
     * @param center Center of the box.
     * @param halfExtents Half of the size of the box in each dimension.
     * @param results The buffer to store the results in.
     * @param orientation Rotation of the box.
     * @param layerMask A that is used to selectively ignore colliders when casting a ray.
     * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.OverlapBox.html | PhysicsScene.OverlapBox}
     */
    OverlapBox(center: Vector3, halfExtents: Vector3, results: Readonly<Collider[]>, orientation: Quaternion, layerMask: number, queryTriggerInteraction: QueryTriggerInteraction): number;
    OverlapBox(center: Vector3, halfExtents: Vector3, results: Readonly<Collider[]>): number;
    /**
     * Check the given capsule against the physics world and return all overlapping colliders in the user-provided buffer.
     * @param point0 The center of the sphere at the start of the capsule.
     * @param point1 The center of the sphere at the end of the capsule.
     * @param radius The radius of the capsule.
     * @param results The buffer to store the results into.
     * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
     * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.OverlapCapsule.html | PhysicsScene.OverlapCapsule}
     */
    OverlapCapsule(point0: Vector3, point1: Vector3, radius: number, results: Readonly<Collider[]>, layerMask: number, queryTriggerInteraction: QueryTriggerInteraction): number;
    /**
     * Computes and stores colliders touching or inside the sphere into the provided buffer.
     * @param position Center of the sphere.
     * @param radius Radius of the sphere.
     * @param results The buffer to store the results into.
     * @param layerMask A that is used to selectively ignore colliders when casting a ray.
     * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.OverlapSphere.html | PhysicsScene.OverlapSphere}
     */
    OverlapSphere(position: Vector3, radius: number, results: Readonly<Collider[]>, layerMask: number, queryTriggerInteraction: QueryTriggerInteraction): number;
    /**
     * Casts a ray, from point origin, in direction direction, of length maxDistance, against all colliders in the Scene.
     * @param origin The starting point of the ray in world coordinates.
     * @param direction The direction of the ray.
     * @param maxDistance The max distance the ray should check for collisions.
     * @param layerMask A that is used to selectively ignore Colliders when casting a ray.
     * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.Raycast.html | PhysicsScene.Raycast}
     */
    Raycast(origin: Vector3, direction: Vector3, maxDistance: number, layerMask: number, queryTriggerInteraction: QueryTriggerInteraction): boolean;
    /**
     * Casts a ray, from point origin, in direction direction, of length maxDistance, against all colliders in the Scene.
     * @param origin The starting point and direction of the ray.
     * @param direction The direction of the ray.
     * @param raycastHits The buffer to store the hits into.
     * @param maxDistance The max distance the rayhit is allowed to be from the start of the ray.
     * @param layerMask A that is used to selectively ignore colliders when casting a ray.
     * @param queryTriggerInteraction The amount of hits stored into the results buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.Raycast.html | PhysicsScene.Raycast}
     */
    Raycast(origin: Vector3, direction: Vector3, raycastHits: Readonly<RaycastHit[]>, maxDistance: number, layerMask: number, queryTriggerInteraction: QueryTriggerInteraction): number;
    /**
     * Resets the Transform positions of interpolated and extrapolated Rigidbodies in this PhysicsScene to Rigidbody.position and Transform rotations to Rigidbody.rotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.ResetInterpolationPoses.html | PhysicsScene.ResetInterpolationPoses}
     */
    ResetInterpolationPoses(): void;
    /**
     * Runs specified physics simulation stages on this physics scene.
     * @param step The time to advance physics by.
     * @param stages An enum to specify which stages to run.
     * @param options A flag enum to specify any additional simulation options.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.RunSimulationStages.html | PhysicsScene.RunSimulationStages}
     */
    RunSimulationStages(step: number, stages: SimulationStage, options: SimulationOption): void;
    /**
     * Simulate physics associated with this PhysicsScene.
     * @param step The time to advance physics by.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.Simulate.html | PhysicsScene.Simulate}
     */
    Simulate(step: number): void;
    /**
     * Cast sphere along the direction and store the results into buffer.
     * @param origin The center of the sphere at the start of the sweep.
     * @param radius The radius of the sphere.
     * @param direction The direction into which to sweep the sphere.
     * @param results The buffer to save the results to.
     * @param maxDistance The max length of the cast.
     * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
     * @param queryTriggerInteraction A that is used to selectively ignore colliders when casting a capsule.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene.SphereCast.html | PhysicsScene.SphereCast}
     */
    SphereCast(origin: Vector3, radius: number, direction: Vector3, results: Readonly<RaycastHit[]>, maxDistance: number, layerMask: number, queryTriggerInteraction: QueryTriggerInteraction): number;
    ToString(): string;


}
    
interface ModifiableContactPair {
    rotation: Quaternion;
    position: Vector3;
    otherRotation: Quaternion;
    otherPosition: Vector3;
    /**
     * Instance ID of the first Collider in this contact pair.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair-colliderInstanceID.html | ModifiableContactPair.colliderInstanceID}
     */
    readonly colliderInstanceID: number;
    /**
     * Instance ID of the second collider in this contact pair.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair-otherColliderInstanceID.html | ModifiableContactPair.otherColliderInstanceID}
     */
    readonly otherColliderInstanceID: number;
    /**
     * Instance ID of the first body in this contact pair.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair-bodyInstanceID.html | ModifiableContactPair.bodyInstanceID}
     */
    readonly bodyInstanceID: number;
    /**
     * Instance ID of the second body in this contact pair.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair-otherBodyInstanceID.html | ModifiableContactPair.otherBodyInstanceID}
     */
    readonly otherBodyInstanceID: number;
    /**
     * Linear velocity of the first body in the contact pair.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair-bodyVelocity.html | ModifiableContactPair.bodyVelocity}
     */
    readonly bodyVelocity: Vector3;
    /**
     * Angular velocity of the first body in the contact pair.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair-bodyAngularVelocity.html | ModifiableContactPair.bodyAngularVelocity}
     */
    readonly bodyAngularVelocity: Vector3;
    /**
     * Linear velocity of the second body in the contact pair.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair-otherBodyVelocity.html | ModifiableContactPair.otherBodyVelocity}
     */
    readonly otherBodyVelocity: Vector3;
    /**
     * Angular velocity of the second body in the contact pair.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair-otherBodyAngularVelocity.html | ModifiableContactPair.otherBodyAngularVelocity}
     */
    readonly otherBodyAngularVelocity: Vector3;
    /**
     * The amount of the contact points generated for this contact pair.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair-contactCount.html | ModifiableContactPair.contactCount}
     */
    readonly contactCount: number;
    /**
     * Mass-related properties of this contact pair, such as the mass ratio.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair-massProperties.html | ModifiableContactPair.massProperties}
     */
    massProperties: ModifiableMassProperties;



    /**
     * Get the restitution value for the specified contact point in this contact pair.
     * @param i Index of the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.GetBounciness.html | ModifiableContactPair.GetBounciness}
     */
    GetBounciness(i: number): number;
    /**
     * Get the value of the dynamic friction for a specified contact point in this contact pair.
     * @param i Index of the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.GetDynamicFriction.html | ModifiableContactPair.GetDynamicFriction}
     */
    GetDynamicFriction(i: number): number;
    /**
     * Get the index of a face a particular contact point belongs to in this contact pair. Use this with Mesh.triangles.
     * @param i Index of the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.GetFaceIndex.html | ModifiableContactPair.GetFaceIndex}
     */
    GetFaceIndex(i: number): number;
    /**
     * Get the maximum impulse that the solver can apply at a particular contact point in this contact pair.
     * @param i Index of the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.GetMaxImpulse.html | ModifiableContactPair.GetMaxImpulse}
     */
    GetMaxImpulse(i: number): number;
    /**
     * Get the normal at a particular contact point in this contact pair.
     * @param i Index of the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.GetNormal.html | ModifiableContactPair.GetNormal}
     */
    GetNormal(i: number): Vector3;
    /**
     * Get the location of a particular contact point in this contact pair.
     * @param i Index of the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.GetPoint.html | ModifiableContactPair.GetPoint}
     */
    GetPoint(i: number): Vector3;
    /**
     * Get the separation value at a particular contact point in this contact pair.
     * @param i Index of the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.GetSeparation.html | ModifiableContactPair.GetSeparation}
     */
    GetSeparation(i: number): number;
    /**
     * Get the static friction coefficient at a particular point of the contact pair.
     * @param i Index of the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.GetStaticFriction.html | ModifiableContactPair.GetStaticFriction}
     */
    GetStaticFriction(i: number): number;
    /**
     * Get the target velocity the solver should aim reaching at a particular contact point in this contact pair.
     * @param i Index of the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.GetTargetVelocity.html | ModifiableContactPair.GetTargetVelocity}
     */
    GetTargetVelocity(i: number): Vector3;
    /**
     * Ignore the specified contact point in this contact pair.
     * @param i Index of the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.IgnoreContact.html | ModifiableContactPair.IgnoreContact}
     */
    IgnoreContact(i: number): void;
    /**
     * Set the restitution value for the specified contact point in this contact pair.
     * @param i Index of the contact point.
     * @param bounciness Bounciness value for the specified contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.SetBounciness.html | ModifiableContactPair.SetBounciness}
     */
    SetBounciness(i: number, bounciness: number): void;
    /**
     * Set the value of the dynamic friction for a specified contact point in this contact pair.
     * @param i Index of the contact point.
     * @param dynamicFriction Dynamic friction coefficient.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.SetDynamicFriction.html | ModifiableContactPair.SetDynamicFriction}
     */
    SetDynamicFriction(i: number, dynamicFriction: number): void;
    /**
     * Set the maximum impulse that the solver can apply at a particular contact point in this contact pair.
     * @param i Index of the contact point.
     * @param value The maximum impulse that can be applied.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.SetMaxImpulse.html | ModifiableContactPair.SetMaxImpulse}
     */
    SetMaxImpulse(i: number, value: number): void;
    /**
     * Set the normal at a particular contact point in this contact pair.
     * @param i Index of the contact point.
     * @param normal Normal at the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.SetNormal.html | ModifiableContactPair.SetNormal}
     */
    SetNormal(i: number, normal: Vector3): void;
    /**
     * Set the location of a particular contact point in this contact pair.
     * @param i Index of the contact point.
     * @param v The location of a contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.SetPoint.html | ModifiableContactPair.SetPoint}
     */
    SetPoint(i: number, v: Vector3): void;
    /**
     * Set the separation value at a particular contact point in this contact pair.
     * @param i Index of the contact point.
     * @param separation The separation at a contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.SetSeparation.html | ModifiableContactPair.SetSeparation}
     */
    SetSeparation(i: number, separation: number): void;
    /**
     * Set the static friction coefficient at a particular point of the contact pair.
     * @param i Index of the contact point.
     * @param staticFriction The static friction coefficient at a contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.SetStaticFriction.html | ModifiableContactPair.SetStaticFriction}
     */
    SetStaticFriction(i: number, staticFriction: number): void;
    /**
     * Set the target velocity the solver should aim reaching at a particular contact point in this contact pair.
     * @param i Index of the contact point.
     * @param velocity The target velocity at a contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ModifiableContactPair.SetTargetVelocity.html | ModifiableContactPair.SetTargetVelocity}
     */
    SetTargetVelocity(i: number, velocity: Vector3): void;


}
    
interface ModifiableMassProperties {
    inverseMassScale: number;
    inverseInertiaScale: number;
    otherInverseMassScale: number;
    otherInverseInertiaScale: number;





}
    
    
interface Physics2D {





}
    
interface PhysicsScene2D {
    /**
     * The number of simulation sub-steps that occurred  during the last simulation step.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D-subStepCount.html | PhysicsScene2D.subStepCount}
     */
    readonly subStepCount: number;
    /**
     * The amount of simulation time that has been &quot;lost&quot; due to simulation sub-stepping hitting the maximum number of allowed sub-steps.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D-subStepLostTime.html | PhysicsScene2D.subStepLostTime}
     */
    readonly subStepLostTime: number;



    /**
     * Casts a box against colliders in the PhysicsScene2D, returning the first intersection only.
     * @param origin The point in 2D space where the box originates.
     * @param size The size of the box.
     * @param angle The angle of the box (in degrees).
     * @param direction Vector representing the direction to cast the box.
     * @param distance Maximum distance over which to cast the box.
     * @param layerMask Filter to detect colliders only on certain layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.BoxCast.html | PhysicsScene2D.BoxCast}
     */
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number, layerMask: number): RaycastHit2D;
    /**
     * Casts a box against colliders in the PhysicsScene2D, returning the first intersection only.
     * @param origin The point in 2D space where the box originates.
     * @param size The size of the box.
     * @param angle The angle of the box (in degrees).
     * @param direction Vector representing the direction to cast the box.
     * @param distance Maximum distance over which to cast the box.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.BoxCast.html | PhysicsScene2D.BoxCast}
     */
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number, contactFilter: ContactFilter2D): RaycastHit2D;
    /**
     * Casts a box against the colliders in the PhysicsScene2D, returning all intersections.
     * @param origin The point in 2D space where the box originates.
     * @param size The size of the box.
     * @param angle The angle of the box (in degrees).
     * @param direction Vector representing the direction to cast the box.
     * @param distance Maximum distance over which to cast the box.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * @param layerMask Filter to detect colliders only on certain layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.BoxCast.html | PhysicsScene2D.BoxCast}
     */
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number, results: Readonly<RaycastHit2D[]>, layerMask: number): number;
    /**
     * Casts a box against the colliders in the PhysicsScene2D, returning all intersections.
     * @param origin The point in 2D space where the box originates.
     * @param size The size of the box.
     * @param angle The angle of the box (in degrees).
     * @param direction Vector representing the direction to cast the box.
     * @param distance Maximum distance over which to cast the box.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.BoxCast.html | PhysicsScene2D.BoxCast}
     */
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    /**
     * Casts a capsule against colliders in the PhysicsScene2D, returning the first intersection only.
     * @param origin The point in 2D space where the capsule originates.
     * @param size The size of the capsule.
     * @param capsuleDirection The direction of the capsule.
     * @param angle The angle of the capsule (in degrees).
     * @param direction Vector representing the direction to cast the capsule.
     * @param distance Maximum distance over which to cast the capsule.
     * @param layerMask The filter used to detect Colliders only on certain layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.CapsuleCast.html | PhysicsScene2D.CapsuleCast}
     */
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number, layerMask: number): RaycastHit2D;
    /**
     * Casts a capsule against colliders in the PhysicsScene2D, returning the first intersection only.
     * @param origin The point in 2D space where the capsule originates.
     * @param size The size of the capsule.
     * @param capsuleDirection The direction of the capsule.
     * @param angle The angle of the capsule (in degrees).
     * @param direction Vector representing the direction to cast the capsule.
     * @param distance Maximum distance over which to cast the capsule.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.CapsuleCast.html | PhysicsScene2D.CapsuleCast}
     */
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number, contactFilter: ContactFilter2D): RaycastHit2D;
    /**
     * Casts a capsule against the Colliders in the PhysicsScene2D, returning all intersections.
     * @param origin The point in 2D space where the capsule originates.
     * @param size The size of the capsule.
     * @param capsuleDirection The direction of the capsule.
     * @param angle The angle of the capsule (in degrees).
     * @param direction Vector representing the direction to cast the capsule.
     * @param distance Maximum distance over which to cast the capsule.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * @param layerMask The filter used to detect Colliders only on certain layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.CapsuleCast.html | PhysicsScene2D.CapsuleCast}
     */
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number, results: Readonly<RaycastHit2D[]>, layerMask: number): number;
    /**
     * Casts a capsule against the Colliders in the PhysicsScene2D, returning all intersections.
     * @param origin The point in 2D space where the capsule originates.
     * @param size The size of the capsule.
     * @param capsuleDirection The direction of the capsule.
     * @param angle The angle of the capsule (in degrees).
     * @param direction Vector representing the direction to cast the capsule.
     * @param distance Maximum distance over which to cast the capsule.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.CapsuleCast.html | PhysicsScene2D.CapsuleCast}
     */
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    /**
     * Casts a circle against colliders in the PhysicsScene2D, returning the first intersection only.
     * @param origin The point in 2D space where the circle originates.
     * @param radius The radius of the circle.
     * @param direction Vector representing the direction to cast the circle.
     * @param distance Maximum distance over which to cast the circle.
     * @param layerMask The filter used to detect Colliders only on certain layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.CircleCast.html | PhysicsScene2D.CircleCast}
     */
    CircleCast(origin: Vector2, radius: number, direction: Vector2, distance: number, layerMask: number): RaycastHit2D;
    /**
     * Casts a circle against colliders in the PhysicsScene2D, returning the first intersection only.
     * @param origin The point in 2D space where the circle originates.
     * @param radius The radius of the circle.
     * @param direction Vector representing the direction to cast the circle.
     * @param distance Maximum distance over which to cast the circle.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.CircleCast.html | PhysicsScene2D.CircleCast}
     */
    CircleCast(origin: Vector2, radius: number, direction: Vector2, distance: number, contactFilter: ContactFilter2D): RaycastHit2D;
    /**
     * Casts a circle against the colliders in the PhysicsScene2D, returning all intersections.
     * @param origin The point in 2D space where the circle originates.
     * @param radius The radius of the circle.
     * @param direction Vector representing the direction to cast the circle.
     * @param distance Maximum distance over which to cast the circle.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * @param layerMask The filter used to detect Colliders only on certain layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.CircleCast.html | PhysicsScene2D.CircleCast}
     */
    CircleCast(origin: Vector2, radius: number, direction: Vector2, distance: number, results: Readonly<RaycastHit2D[]>, layerMask: number): number;
    /**
     * Casts a circle against the colliders in the PhysicsScene2D, returning all intersections.
     * @param origin The point in 2D space where the circle originates.
     * @param radius The radius of the circle.
     * @param direction Vector representing the direction to cast the circle.
     * @param distance Maximum distance over which to cast the circle.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.CircleCast.html | PhysicsScene2D.CircleCast}
     */
    CircleCast(origin: Vector2, radius: number, direction: Vector2, distance: number, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    CircleCast(origin: Vector2, radius: number, direction: Vector2, distance: number, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    Equals(other: unknown): boolean;
    Equals(other: PhysicsScene2D): boolean;
    GetHashCode(): number;
    /**
     * Cast a 3D ray against the 2D Colliders in the Scene.
     * @param ray The 3D ray defining origin and direction to test.
     * @param distance The maximum distance over which to cast the ray.
     * @param layerMask The LayerMask filter used to select which layers to detect Colliders for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.GetRayIntersection.html | PhysicsScene2D.GetRayIntersection}
     */
    GetRayIntersection(ray: Ray, distance: number, layerMask: number): RaycastHit2D;
    /**
     * Cast a 3D ray against the 2D Colliders in the Scene.
     * @param ray The 3D ray defining origin and direction to test.
     * @param distance The maximum distance over which to cast the ray.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * @param layerMask The LayerMask filter used to select which layers to detect Colliders for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.GetRayIntersection.html | PhysicsScene2D.GetRayIntersection}
     */
    GetRayIntersection(ray: Ray, distance: number, results: Readonly<RaycastHit2D[]>, layerMask: number): number;
    GetRayIntersection(ray: Ray, distance: number, results: Readonly<RaycastHit2D[]>, layerMask: number): number;
    /**
     * Determines whether the physics Scene is empty or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.IsEmpty.html | PhysicsScene2D.IsEmpty}
     */
    IsEmpty(): boolean;
    /**
     * Determines whether the physics Scene is valid or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.IsValid.html | PhysicsScene2D.IsValid}
     */
    IsValid(): boolean;
    /**
     * Casts a line segment against colliders in the PhysicsScene2D, returning the first intersection only.
     * @param start The start point of the line in world space.
     * @param end The end point of the line in world space.
     * @param layerMask The filter used to detect Colliders only on certain layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.Linecast.html | PhysicsScene2D.Linecast}
     */
    Linecast(start: Vector2, end: Vector2, layerMask: number): RaycastHit2D;
    /**
     * Casts a line segment against colliders in the PhysicsScene2D, returning the first intersection only.
     * @param start The start point of the line in world space.
     * @param end The end point of the line in world space.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.Linecast.html | PhysicsScene2D.Linecast}
     */
    Linecast(start: Vector2, end: Vector2, contactFilter: ContactFilter2D): RaycastHit2D;
    /**
     * Casts a line segment against colliders in the PhysicsScene2D.
     * @param start The start point of the line in world space.
     * @param end The end point of the line in world space.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * @param layerMask The filter used to detect Colliders only on certain layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.Linecast.html | PhysicsScene2D.Linecast}
     */
    Linecast(start: Vector2, end: Vector2, results: Readonly<RaycastHit2D[]>, layerMask: number): number;
    /**
     * Casts a line segment against colliders in the PhysicsScene2D.
     * @param start The start point of the line in world space.
     * @param end The end point of the line in world space.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.Linecast.html | PhysicsScene2D.Linecast}
     */
    Linecast(start: Vector2, end: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    Linecast(start: Vector2, end: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    /**
     * Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning the first intersection only.
     * @param pointA One corner of the rectangle.
     * @param pointB The corner of the rectangle diagonally opposite the pointA corner.
     * @param layerMask Filter to check objects only on specific layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapArea.html | PhysicsScene2D.OverlapArea}
     */
    OverlapArea(pointA: Vector2, pointB: Vector2, layerMask: number): Collider2D;
    /**
     * Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning the first intersection only.
     * @param pointA One corner of the rectangle.
     * @param pointB The corner of the rectangle diagonally opposite the pointA corner.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapArea.html | PhysicsScene2D.OverlapArea}
     */
    OverlapArea(pointA: Vector2, pointB: Vector2, contactFilter: ContactFilter2D): Collider2D;
    /**
     * Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning all intersections.
     * @param pointA One corner of the rectangle.
     * @param pointB The corner of the rectangle diagonally opposite the pointA corner.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * @param layerMask Filter to check objects only on specific layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapArea.html | PhysicsScene2D.OverlapArea}
     */
    OverlapArea(pointA: Vector2, pointB: Vector2, results: Readonly<Collider2D[]>, layerMask: number): number;
    /**
     * Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning all intersections.
     * @param pointA One corner of the rectangle.
     * @param pointB The corner of the rectangle diagonally opposite the pointA corner.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapArea.html | PhysicsScene2D.OverlapArea}
     */
    OverlapArea(pointA: Vector2, pointB: Vector2, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapArea(pointA: Vector2, pointB: Vector2, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    /**
     * Checks a box against Colliders in the PhysicsScene2D, returning the first intersection only.
     * @param point The center of the box.
     * @param size The size of the box.
     * @param angle The angle of the box.
     * @param layerMask Filter to check objects only on specific layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapBox.html | PhysicsScene2D.OverlapBox}
     */
    OverlapBox(point: Vector2, size: Vector2, angle: number, layerMask: number): Collider2D;
    /**
     * Checks a box against Colliders in the PhysicsScene2D, returning the first intersection only.
     * @param point The center of the box.
     * @param size The size of the box.
     * @param angle The angle of the box.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapBox.html | PhysicsScene2D.OverlapBox}
     */
    OverlapBox(point: Vector2, size: Vector2, angle: number, contactFilter: ContactFilter2D): Collider2D;
    /**
     * Checks a box against Colliders in the PhysicsScene2D, returning all intersections.
     * @param point The center of the box.
     * @param size The size of the box.
     * @param angle The angle of the box.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * @param layerMask Filter to check objects only on specific layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapBox.html | PhysicsScene2D.OverlapBox}
     */
    OverlapBox(point: Vector2, size: Vector2, angle: number, results: Readonly<Collider2D[]>, layerMask: number): number;
    /**
     * Checks a box against Colliders in the PhysicsScene2D, returning all intersections.
     * @param point The center of the box.
     * @param size The size of the box.
     * @param angle The angle of the box.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapBox.html | PhysicsScene2D.OverlapBox}
     */
    OverlapBox(point: Vector2, size: Vector2, angle: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapBox(point: Vector2, size: Vector2, angle: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    /**
     * Checks a capsule against Colliders in the PhysicsScene2D, returning the first intersection only.
     * @param point The center of the capsule.
     * @param size The size of the capsule.
     * @param direction The direction of the capsule.
     * @param angle The angle of the capsule.
     * @param layerMask Filter to check objects only on specific layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapCapsule.html | PhysicsScene2D.OverlapCapsule}
     */
    OverlapCapsule(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, layerMask: number): Collider2D;
    /**
     * Checks a capsule against Colliders in the PhysicsScene2D, returning the first intersection only.
     * @param point The center of the capsule.
     * @param size The size of the capsule.
     * @param direction The direction of the capsule.
     * @param angle The angle of the capsule.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapCapsule.html | PhysicsScene2D.OverlapCapsule}
     */
    OverlapCapsule(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, contactFilter: ContactFilter2D): Collider2D;
    /**
     * Checks a capsule against Colliders in the PhysicsScene2D, returning all intersections.
     * @param point The center of the capsule.
     * @param size The size of the capsule.
     * @param direction The direction of the capsule.
     * @param angle The angle of the capsule.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * @param layerMask Filter to check objects only on specific layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapCapsule.html | PhysicsScene2D.OverlapCapsule}
     */
    OverlapCapsule(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, results: Readonly<Collider2D[]>, layerMask: number): number;
    /**
     * Checks a capsule against Colliders in the PhysicsScene2D, returning all intersections.
     * @param point The center of the capsule.
     * @param size The size of the capsule.
     * @param direction The direction of the capsule.
     * @param angle The angle of the capsule.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapCapsule.html | PhysicsScene2D.OverlapCapsule}
     */
    OverlapCapsule(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapCapsule(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    /**
     * Checks a circle against Colliders in the PhysicsScene2D, returning the first intersection only.
     * @param point The centre of the circle.
     * @param radius The radius of the circle.
     * @param layerMask Filter to check objects only on specific layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapCircle.html | PhysicsScene2D.OverlapCircle}
     */
    OverlapCircle(point: Vector2, radius: number, layerMask: number): Collider2D;
    /**
     * Checks a circle against Colliders in the PhysicsScene2D, returning the first intersection only.
     * @param point The centre of the circle.
     * @param radius The radius of the circle.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapCircle.html | PhysicsScene2D.OverlapCircle}
     */
    OverlapCircle(point: Vector2, radius: number, contactFilter: ContactFilter2D): Collider2D;
    /**
     * Checks a circle against Colliders in the PhysicsScene2D, returning all intersections.
     * @param point The centre of the circle.
     * @param radius The radius of the circle.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * @param layerMask Filter to check objects only on specific layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapCircle.html | PhysicsScene2D.OverlapCircle}
     */
    OverlapCircle(point: Vector2, radius: number, results: Readonly<Collider2D[]>, layerMask: number): number;
    /**
     * Checks a circle against Colliders in the PhysicsScene2D, returning all intersections.
     * @param point The centre of the circle.
     * @param radius The radius of the circle.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapCircle.html | PhysicsScene2D.OverlapCircle}
     */
    OverlapCircle(point: Vector2, radius: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapCircle(point: Vector2, radius: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    /**
     * Checks a point against Colliders in the PhysicsScene2D, returning the first intersection only.
     * @param point A point in world space.
     * @param layerMask Filter to check objects only on specific layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapPoint.html | PhysicsScene2D.OverlapPoint}
     */
    OverlapPoint(point: Vector2, layerMask: number): Collider2D;
    /**
     * Checks a point against Colliders in the PhysicsScene2D, returning the first intersection only.
     * @param point A point in world space.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapPoint.html | PhysicsScene2D.OverlapPoint}
     */
    OverlapPoint(point: Vector2, contactFilter: ContactFilter2D): Collider2D;
    /**
     * Checks a point against Colliders in the PhysicsScene2D, returning all intersections.
     * @param point A point in world space.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * @param layerMask Filter to check objects only on specific layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapPoint.html | PhysicsScene2D.OverlapPoint}
     */
    OverlapPoint(point: Vector2, results: Readonly<Collider2D[]>, layerMask: number): number;
    /**
     * Checks a point against Colliders in the PhysicsScene2D, returning all intersections.
     * @param point A point in world space.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.OverlapPoint.html | PhysicsScene2D.OverlapPoint}
     */
    OverlapPoint(point: Vector2, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapPoint(point: Vector2, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    /**
     * Casts a ray against colliders in the PhysicsScene2D, returning the first intersection only.
     * @param origin The point in 2D space where the ray originates.
     * @param direction The vector representing the direction of the ray.
     * @param distance Maximum distance over which to cast the ray.
     * @param layerMask The filter used to detect Colliders only on certain layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.Raycast.html | PhysicsScene2D.Raycast}
     */
    Raycast(origin: Vector2, direction: Vector2, distance: number, layerMask: number): RaycastHit2D;
    /**
     * Casts a ray against colliders in the PhysicsScene2D, returning the first intersection only.
     * @param origin The point in 2D space where the ray originates.
     * @param direction The vector representing the direction of the ray.
     * @param distance Maximum distance over which to cast the ray.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth, or normal angle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.Raycast.html | PhysicsScene2D.Raycast}
     */
    Raycast(origin: Vector2, direction: Vector2, distance: number, contactFilter: ContactFilter2D): RaycastHit2D;
    /**
     * Casts a ray against colliders the PhysicsScene2D, returning all intersections.
     * @param origin The point in 2D space where the ray originates.
     * @param direction The vector representing the direction of the ray.
     * @param distance Maximum distance over which to cast the ray.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * @param layerMask The filter used to detect Colliders only on certain layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.Raycast.html | PhysicsScene2D.Raycast}
     */
    Raycast(origin: Vector2, direction: Vector2, distance: number, results: Readonly<RaycastHit2D[]>, layerMask: number): number;
    /**
     * Casts a ray against colliders the PhysicsScene2D, returning all intersections.
     * @param origin The point in 2D space where the ray originates.
     * @param direction The vector representing the direction of the ray.
     * @param distance Maximum distance over which to cast the ray.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth, or normal angle.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.Raycast.html | PhysicsScene2D.Raycast}
     */
    Raycast(origin: Vector2, direction: Vector2, distance: number, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    Raycast(origin: Vector2, direction: Vector2, distance: number, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    Simulate(deltaTime: number): boolean;
    /**
     * Simulate physics associated with this PhysicsScene.
     * @param deltaTime The time to advance physics by.
     * @param simulationLayers The Rigidbody2D and Collider2D layers to simulate.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsScene2D.Simulate.html | PhysicsScene2D.Simulate}
     */
    Simulate(deltaTime: number, simulationLayers: number): boolean;
    ToString(): string;


}
    
interface RaycastHit2D {
    /**
     * The world space centroid (center) of the physics query shape when it intersects.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit2D-centroid.html | RaycastHit2D.centroid}
     */
    centroid: Vector2;
    /**
     * The world space position where the physics query shape intersected with the detected Collider2D surface.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit2D-point.html | RaycastHit2D.point}
     */
    point: Vector2;
    /**
     * The surface normal of the detected Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit2D-normal.html | RaycastHit2D.normal}
     */
    normal: Vector2;
    /**
     * The distance the physics query traversed before it detected a Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit2D-distance.html | RaycastHit2D.distance}
     */
    distance: number;
    /**
     * The fraction of the distance specified to the physics query before it detected a Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit2D-fraction.html | RaycastHit2D.fraction}
     */
    fraction: number;
    /**
     * The Collider2D detected by the physics query.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit2D-collider.html | RaycastHit2D.collider}
     */
    readonly collider: Collider2D;
    /**
     * The Rigidbody2D that the Collider2D detected by the physics query is attached to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit2D-rigidbody.html | RaycastHit2D.rigidbody}
     */
    readonly rigidbody: Rigidbody2D;
    /**
     * The Transform on the GameObject that the Collider2D is attached to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RaycastHit2D-transform.html | RaycastHit2D.transform}
     */
    readonly transform: Transform;



    CompareTo(other: RaycastHit2D): number;


}
    
interface Collider2D extends Behaviour {
    /**
     * The density of the collider used to calculate its mass (when auto mass is enabled).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-density.html | Collider2D.density}
     */
    density: number;
    /**
     * Is this collider configured as a trigger?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-isTrigger.html | Collider2D.isTrigger}
     */
    isTrigger: boolean;
    /**
     * Whether the collider is used by an attached effector or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-usedByEffector.html | Collider2D.usedByEffector}
     */
    usedByEffector: boolean;
    /**
     * The composite operation to be used by a CompositeCollider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-compositeOperation.html | Collider2D.compositeOperation}
     */
    compositeOperation: CompositeOperation;
    /**
     * The composite operation order to be used when a CompositeCollider2D is used.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-compositeOrder.html | Collider2D.compositeOrder}
     */
    compositeOrder: number;
    /**
     * Get the CompositeCollider2D that is available to be attached to the collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-composite.html | Collider2D.composite}
     */
    readonly composite: CompositeCollider2D;
    /**
     * The local offset of the collider geometry.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-offset.html | Collider2D.offset}
     */
    offset: Vector2;
    /**
     * The Rigidbody2D attached to the Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-attachedRigidbody.html | Collider2D.attachedRigidbody}
     */
    readonly attachedRigidbody: Rigidbody2D;
    /**
     * The transformation matrix used to transform the Collider physics shapes to world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-localToWorldMatrix.html | Collider2D.localToWorldMatrix}
     */
    readonly localToWorldMatrix: Matrix4x4;
    /**
     * The number of active PhysicsShape2D the Collider2D is currently using.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-shapeCount.html | Collider2D.shapeCount}
     */
    readonly shapeCount: number;
    /**
     * The world space bounding area of the collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-bounds.html | Collider2D.bounds}
     */
    readonly bounds: Bounds;
    /**
     * The error state that indicates the state of the physics shapes the 2D Collider tried to create. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-errorState.html | Collider2D.errorState}
     */
    readonly errorState: ColliderErrorState2D;
    /**
     * Indicates if this Collider2D is capable of being composited by the CompositeCollider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-compositeCapable.html | Collider2D.compositeCapable}
     */
    readonly compositeCapable: boolean;
    /**
     * The PhysicsMaterial2D that is applied to this collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-sharedMaterial.html | Collider2D.sharedMaterial}
     */
    sharedMaterial: PhysicsMaterial2D;
    /**
     * A decision priority assigned to this Collider2D used when there is a conflicting decision on whether a contact between itself and another Collision2D should happen or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-layerOverridePriority.html | Collider2D.layerOverridePriority}
     */
    layerOverridePriority: number;
    /**
     * The additional Layers that this Collider2D should exclude when deciding if a contact with another Collider2D should happen or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-excludeLayers.html | Collider2D.excludeLayers}
     */
    excludeLayers: LayerMask;
    /**
     * The additional Layers that this Collider2D should include when deciding if a contact with another Collider2D should happen or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-includeLayers.html | Collider2D.includeLayers}
     */
    includeLayers: LayerMask;
    /**
     * The Layers that this Collider2D is allowed to send forces to during a Collision contact with another Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-forceSendLayers.html | Collider2D.forceSendLayers}
     */
    forceSendLayers: LayerMask;
    /**
     * The Layers that this Collider2D can receive forces from during a Collision contact with another Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-forceReceiveLayers.html | Collider2D.forceReceiveLayers}
     */
    forceReceiveLayers: LayerMask;
    /**
     * The layers of other Collider2D involved in contacts with this Collider2D that will be captured.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-contactCaptureLayers.html | Collider2D.contactCaptureLayers}
     */
    contactCaptureLayers: LayerMask;
    /**
     * The Layers that this Collider2D will report collision or trigger callbacks for during a contact with another Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-callbackLayers.html | Collider2D.callbackLayers}
     */
    callbackLayers: LayerMask;
    /**
     * The friction used by the Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-friction.html | Collider2D.friction}
     */
    readonly friction: number;
    /**
     * The bounciness used by the Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-bounciness.html | Collider2D.bounciness}
     */
    readonly bounciness: number;
    /**
     * The friction combine mode used by the Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-frictionCombine.html | Collider2D.frictionCombine}
     */
    readonly frictionCombine: PhysicsMaterialCombine2D;
    /**
     * The bounciness combine mode used by the Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D-bounceCombine.html | Collider2D.bounceCombine}
     */
    readonly bounceCombine: PhysicsMaterialCombine2D;



    Cast(direction: Vector2, results: Readonly<RaycastHit2D[]>): number;
    Cast(direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number): number;
    /**
     * Casts the Collider shape into the Scene starting at the Collider position ignoring the Collider itself.
     * @param direction Vector representing the direction to cast the shape.
     * @param results Array to receive results.
     * @param distance Maximum distance over which to cast the shape.
     * @param ignoreSiblingColliders Determines whether the cast should ignore Colliders attached to the same Rigidbody2D (known as sibling Colliders).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.Cast.html | Collider2D.Cast}
     */
    Cast(direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number, ignoreSiblingColliders: boolean): number;
    Cast(direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    Cast(direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    /**
     * Casts the Collider shape into the Scene starting at the Collider position ignoring the Collider itself.
     * @param direction Vector representing the direction to cast the shape.
     * @param contactFilter Filter results defined by the contact filter.
     * @param results Array to receive results.
     * @param distance Maximum distance over which to cast the shape.
     * @param ignoreSiblingColliders Determines whether the cast should ignore Colliders attached to the same Rigidbody2D (known as sibling Colliders).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.Cast.html | Collider2D.Cast}
     */
    Cast(direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number, ignoreSiblingColliders: boolean): number;
    Cast(direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number, ignoreSiblingColliders: boolean): number;
    Cast(direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number, ignoreSiblingColliders: boolean): number;
    Cast(position: Vector2, angle: number, direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number, ignoreSiblingColliders: boolean): number;
    Cast(position: Vector2, angle: number, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number, ignoreSiblingColliders: boolean): number;
    /**
     * Returns a point on the perimeter of this Collider that is closest to the specified position.
     * @param position The position from which to find the closest point on this Collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.ClosestPoint.html | Collider2D.ClosestPoint}
     */
    ClosestPoint(position: Vector2): Vector2;
    CreateMesh(useBodyPosition: boolean, useBodyRotation: boolean): Mesh;
    /**
     * Creates a planar Mesh that is identical to the area defined by the Collider2D geometry.
     * @param useBodyPosition Should the mesh be transformed by the position of the attached Rigidbody2D?
     * @param useBodyRotation Should the mesh be transformed by the rotation of the attached Rigidbody2D?
     * @param useDelaunay When true, Delaunay triangulation is used to generate the mesh. This can reduce the number of vertices created in the Collider mesh and reduce the number of small triangle fans produced, both of which can improve overall mesh size and performance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.CreateMesh.html | Collider2D.CreateMesh}
     */
    CreateMesh(useBodyPosition: boolean, useBodyRotation: boolean, useDelaunay: boolean): Mesh;
    /**
     * Calculates the minimum separation of this collider against another collider.
     * @param collider A collider used to calculate the minimum separation against this collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.Distance.html | Collider2D.Distance}
     */
    Distance(collider: Collider2D): ColliderDistance2D;
    /**
     * A valid collider must be provided for the ColliderDistance2D to be valid.  If there are any problems with collider or this Collider2D such as they are disabled or do not contain any collision shapes then the separation will be invalid as indicated by ColliderDistance2D.isValid.
     * @param thisPosition The position to use for this Collider.
     * @param thisAngle The rotation to use for this Collider.
     * @param collider A collider used to calculate the minimum separation against this Collider.
     * @param position The position to use for the specified collider.
     * @param angle The rotation to use for the specified collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.Distance.html | Collider2D.Distance}
     */
    Distance(thisPosition: Vector2, thisAngle: number, collider: Collider2D, position: Vector2, angle: number): ColliderDistance2D;
    /**
     * Retrieves all contact points for this Collider.
     * @param contacts An array of ContactPoint2D used to receive the results.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.GetContacts.html | Collider2D.GetContacts}
     */
    GetContacts(contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(contacts: Readonly<ContactPoint2D[]>): number;
    /**
     * Retrieves all contact points for this Collider, with the results filtered by the contactFilter.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * @param contacts An array of ContactPoint2D used to receive the results.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.GetContacts.html | Collider2D.GetContacts}
     */
    GetContacts(contactFilter: ContactFilter2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(contactFilter: ContactFilter2D, contacts: Readonly<ContactPoint2D[]>): number;
    /**
     * Retrieves all colliders in contact with this Collider.
     * @param colliders An array of Collider2D used to receive the results.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.GetContacts.html | Collider2D.GetContacts}
     */
    GetContacts(colliders: Readonly<Collider2D[]>): number;
    GetContacts(colliders: Readonly<Collider2D[]>): number;
    /**
     * Retrieves all colliders in contact with this Collider, with the results filtered by the contactFilter.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * @param colliders An array of Collider2D used to receive the results.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.GetContacts.html | Collider2D.GetContacts}
     */
    GetContacts(contactFilter: ContactFilter2D, colliders: Readonly<Collider2D[]>): number;
    GetContacts(contactFilter: ContactFilter2D, colliders: Readonly<Collider2D[]>): number;
    GetShapeBounds(bounds: Readonly<Bounds[]>, useRadii: boolean, useWorldSpace: boolean): Bounds;
    /**
     * Generates a simple hash value based upon the geometry of the Collider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.GetShapeHash.html | Collider2D.GetShapeHash}
     */
    GetShapeHash(): number;
    /**
     * Gets all the PhysicsShape2D used by the Collider2D.
     * @param physicsShapeGroup The PhysicsShapeGroup2D to store the retrieved PhysicsShape2D in.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.GetShapes.html | Collider2D.GetShapes}
     */
    GetShapes(physicsShapeGroup: PhysicsShapeGroup2D): number;
    /**
     * Gets the specified range of the PhysicsShape2D used by the Collider2D.
     * @param physicsShapeGroup The PhysicsShapeGroup2D to store the retrieved PhysicsShape2D in.
     * @param shapeIndex The index of the first shape to retrieve. This should be in the range of 0 to Collider2D.shapeCount-1.
     * @param shapeCount The number of shapes to retrieve. The shapeIndex + shapeCount must be less than or equal to Collider2D.shapeCount.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.GetShapes.html | Collider2D.GetShapes}
     */
    GetShapes(physicsShapeGroup: PhysicsShapeGroup2D, shapeIndex: number, shapeCount: number): number;
    /**
     * Check whether this collider is touching the collider or not.
     * @param collider The collider to check if it is touching this collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.IsTouching.html | Collider2D.IsTouching}
     */
    IsTouching(collider: Collider2D): boolean;
    /**
     * Check whether this collider is touching the collider or not with the results filtered by the contactFilter.
     * @param collider The collider to check if it is touching this collider.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.IsTouching.html | Collider2D.IsTouching}
     */
    IsTouching(collider: Collider2D, contactFilter: ContactFilter2D): boolean;
    /**
     * Check whether this collider is touching other colliders or not with the results filtered by the contactFilter.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.IsTouching.html | Collider2D.IsTouching}
     */
    IsTouching(contactFilter: ContactFilter2D): boolean;
    IsTouchingLayers(): boolean;
    /**
     * Checks whether this collider is touching any colliders on the specified layerMask or not.
     * @param layerMask Any colliders on any of these layers count as touching.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.IsTouchingLayers.html | Collider2D.IsTouchingLayers}
     */
    IsTouchingLayers(layerMask: number): boolean;
    /**
     * Get a list of all colliders that overlap this collider.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
     * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.Overlap.html | Collider2D.Overlap}
     */
    Overlap(contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    Overlap(results: Readonly<Collider2D[]>): number;
    Overlap(contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    Overlap(position: Vector2, angle: number, results: Readonly<Collider2D[]>): number;
    Overlap(position: Vector2, angle: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    /**
     * Check if a collider overlaps a point in space.
     * @param point A point in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.OverlapPoint.html | Collider2D.OverlapPoint}
     */
    OverlapPoint(point: Vector2): boolean;
    Raycast(direction: Vector2, results: Readonly<RaycastHit2D[]>): number;
    Raycast(direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number): number;
    Raycast(direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number, layerMask: number): number;
    Raycast(direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number, layerMask: number, minDepth: number): number;
    /**
     * Casts a ray into the Scene that starts at the Collider position and ignores the Collider itself.
     * @param direction Vector representing the direction of the ray.
     * @param results Array to receive results.
     * @param distance Maximum distance over which to cast the ray.
     * @param layerMask Filter to check objects only on specific layers.
     * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
     * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.Raycast.html | Collider2D.Raycast}
     */
    Raycast(direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
    Raycast(direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    /**
     * Casts a ray into the Scene that starts at the Collider position and ignores the Collider itself.
     * @param direction Vector representing the direction of the ray.
     * @param contactFilter Filter results defined by the contact filter.
     * @param results Array to receive results.
     * @param distance Maximum distance over which to cast the ray.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collider2D.Raycast.html | Collider2D.Raycast}
     */
    Raycast(direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    Raycast(direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;


}
    
interface CompositeCollider2D extends Collider2D {
    /**
     * Specifies the type of geometry the Composite Collider should generate.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CompositeCollider2D-geometryType.html | CompositeCollider2D.geometryType}
     */
    geometryType: GeometryType;
    /**
     * Specifies when to generate the Composite Collider geometry.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CompositeCollider2D-generationType.html | CompositeCollider2D.generationType}
     */
    generationType: GenerationType;
    /**
     * When the value is true, the Collider uses an additional Delaunay triangulation step to produce the Collider mesh. When the value is false, this additional step does not occur.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CompositeCollider2D-useDelaunayMesh.html | CompositeCollider2D.useDelaunayMesh}
     */
    useDelaunayMesh: boolean;
    /**
     * Controls the minimum distance allowed between generated vertices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CompositeCollider2D-vertexDistance.html | CompositeCollider2D.vertexDistance}
     */
    vertexDistance: number;
    /**
     * Controls the radius of all edges created by the Collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CompositeCollider2D-edgeRadius.html | CompositeCollider2D.edgeRadius}
     */
    edgeRadius: number;
    /**
     * Vertices are offset by this distance when compositing multiple physic shapes. Any vertices between shapes within this distance are combined.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CompositeCollider2D-offsetDistance.html | CompositeCollider2D.offsetDistance}
     */
    offsetDistance: number;
    /**
     * The number of paths in the Collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CompositeCollider2D-pathCount.html | CompositeCollider2D.pathCount}
     */
    readonly pathCount: number;
    /**
     * Gets the total number of points in all the paths within the Collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CompositeCollider2D-pointCount.html | CompositeCollider2D.pointCount}
     */
    readonly pointCount: number;



    /**
     * Regenerates the Composite Collider geometry.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CompositeCollider2D.GenerateGeometry.html | CompositeCollider2D.GenerateGeometry}
     */
    GenerateGeometry(): void;
    GetCompositedColliders(colliders: Readonly<Collider2D[]>): number;
    /**
     * Gets a path from the Collider by its index.
     * @param index The index of the path from 0 to pathCount minus 1.
     * @param points An ordered array of the vertices (points) in the selected path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CompositeCollider2D.GetPath.html | CompositeCollider2D.GetPath}
     */
    GetPath(index: number, points: Readonly<Vector2[]>): number;
    GetPath(index: number, points: Readonly<Vector2[]>): number;
    /**
     * Gets the number of points in the specified path from the Collider by its index.
     * @param index The index of the path from 0 to pathCount minus 1.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CompositeCollider2D.GetPathPointCount.html | CompositeCollider2D.GetPathPointCount}
     */
    GetPathPointCount(index: number): number;


}
    
interface CompositeCollider2DConstructor {


    new(): CompositeCollider2D;



}
declare const CompositeCollider2D: CompositeCollider2DConstructor;
    
interface Rigidbody2D extends Component {
    /**
     * The position of the rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-position.html | Rigidbody2D.position}
     */
    position: Vector2;
    /**
     * The rotation of the rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-rotation.html | Rigidbody2D.rotation}
     */
    rotation: number;
    /**
     * The linear velocity of the Rigidbody2D represents the rate of change over time of the Rigidbody2D position in world-units.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-linearVelocity.html | Rigidbody2D.linearVelocity}
     */
    linearVelocity: Vector2;
    /**
     * The X component of the linear velocity of the Rigidbody2D in world-units per second.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-linearVelocityX.html | Rigidbody2D.linearVelocityX}
     */
    linearVelocityX: number;
    /**
     * The Y component of the linear velocity of the Rigidbody2D in world-units per second.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-linearVelocityY.html | Rigidbody2D.linearVelocityY}
     */
    linearVelocityY: number;
    /**
     * Angular velocity in degrees per second.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-angularVelocity.html | Rigidbody2D.angularVelocity}
     */
    angularVelocity: number;
    /**
     * Should the total rigid-body mass be automatically calculated from the Collider2D.density of attached colliders?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-useAutoMass.html | Rigidbody2D.useAutoMass}
     */
    useAutoMass: boolean;
    /**
     * Mass of the Rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-mass.html | Rigidbody2D.mass}
     */
    mass: number;
    /**
     * The PhysicsMaterial2D that is applied to all Collider2D attached to this Rigidbody2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-sharedMaterial.html | Rigidbody2D.sharedMaterial}
     */
    sharedMaterial: PhysicsMaterial2D;
    /**
     * The center of mass of the rigidBody in local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-centerOfMass.html | Rigidbody2D.centerOfMass}
     */
    centerOfMass: Vector2;
    /**
     * Gets the center of mass of the rigidBody in global space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-worldCenterOfMass.html | Rigidbody2D.worldCenterOfMass}
     */
    readonly worldCenterOfMass: Vector2;
    /**
     * The Rigidbody's resistance to changes in angular velocity (rotation).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-inertia.html | Rigidbody2D.inertia}
     */
    inertia: number;
    /**
     * The linear damping of the Rigidbody2D linear velocity.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-linearDamping.html | Rigidbody2D.linearDamping}
     */
    linearDamping: number;
    /**
     * The angular damping of the Rigidbody2D angular velocity.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-angularDamping.html | Rigidbody2D.angularDamping}
     */
    angularDamping: number;
    /**
     * The degree to which this object is affected by gravity.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-gravityScale.html | Rigidbody2D.gravityScale}
     */
    gravityScale: number;
    /**
     * The physical behaviour type of the Rigidbody2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-bodyType.html | Rigidbody2D.bodyType}
     */
    bodyType: RigidbodyType2D;
    /**
     * Should kinematickinematic and kinematicstatic collisions be allowed?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-useFullKinematicContacts.html | Rigidbody2D.useFullKinematicContacts}
     */
    useFullKinematicContacts: boolean;
    /**
     * Controls whether physics will change the rotation of the object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-freezeRotation.html | Rigidbody2D.freezeRotation}
     */
    freezeRotation: boolean;
    /**
     * Controls which degrees of freedom are allowed for the simulation of this Rigidbody2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-constraints.html | Rigidbody2D.constraints}
     */
    constraints: RigidbodyConstraints2D;
    /**
     * Indicates whether the rigid body should be simulated or not by the physics system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-simulated.html | Rigidbody2D.simulated}
     */
    simulated: boolean;
    /**
     * Physics interpolation used between updates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-interpolation.html | Rigidbody2D.interpolation}
     */
    interpolation: RigidbodyInterpolation2D;
    /**
     * The sleep state that the rigidbody will initially be in.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-sleepMode.html | Rigidbody2D.sleepMode}
     */
    sleepMode: RigidbodySleepMode2D;
    /**
     * The method used by the physics engine to check if two objects have collided.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-collisionDetectionMode.html | Rigidbody2D.collisionDetectionMode}
     */
    collisionDetectionMode: CollisionDetectionMode2D;
    /**
     * Returns the number of Collider2D attached to this Rigidbody2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-attachedColliderCount.html | Rigidbody2D.attachedColliderCount}
     */
    readonly attachedColliderCount: number;
    /**
     * The total amount of force that has been explicitly applied to this Rigidbody2D since the last physics simulation step.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-totalForce.html | Rigidbody2D.totalForce}
     */
    totalForce: Vector2;
    /**
     * The total amount of torque that has been explicitly applied to this Rigidbody2D since the last physics simulation step.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-totalTorque.html | Rigidbody2D.totalTorque}
     */
    totalTorque: number;
    /**
     * The additional Layers that all Collider2D attached to this Rigidbody2D should exclude when deciding if a contact with another Collider2D should happen or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-excludeLayers.html | Rigidbody2D.excludeLayers}
     */
    excludeLayers: LayerMask;
    /**
     * The additional Layers that all Collider2D attached to this Rigidbody2D should include when deciding if a contact with another Collider2D should happen or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-includeLayers.html | Rigidbody2D.includeLayers}
     */
    includeLayers: LayerMask;
    /**
     * The transformation matrix used to transform the Rigidbody2D to world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D-localToWorldMatrix.html | Rigidbody2D.localToWorldMatrix}
     */
    readonly localToWorldMatrix: Matrix4x4;



    AddForce(force: Vector2): void;
    /**
     * Apply a force to the rigidbody.
     * @param force Components of the force in the X and Y axes.
     * @param mode The method used to apply the specified force.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddForce.html | Rigidbody2D.AddForce}
     */
    AddForce(force: Vector2, mode: ForceMode2D): void;
    AddForceAtPosition(force: Vector2, position: Vector2): void;
    /**
     * Apply a force at a given position in space.
     * @param force Components of the force in the X and Y axes.
     * @param position Position in world space to apply the force.
     * @param mode The method used to apply the specified force.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddForceAtPosition.html | Rigidbody2D.AddForceAtPosition}
     */
    AddForceAtPosition(force: Vector2, position: Vector2, mode: ForceMode2D): void;
    /**
     * Adds a force to the X component of the Rigidbody2D.linearVelocity only leaving the Y component of the world space Rigidbody2D.linearVelocity untouched.
     * @param force The force to add to the X component of the Linear Velocity in the world space of the Rigidbody2D.
     * @param mode The method used to apply the specified force.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddForceX.html | Rigidbody2D.AddForceX}
     */
    AddForceX(force: number, mode: ForceMode2D): void;
    /**
     * Adds a force to the Y component of the Rigidbody2D.linearVelocity only leaving the X component of the world space Rigidbody2D.linearVelocity untouched.
     * @param force The force to add to the Y component of the Linear Velocity in the world space of the Rigidbody2D.
     * @param mode The method used to apply the specified force.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddForceY.html | Rigidbody2D.AddForceY}
     */
    AddForceY(force: number, mode: ForceMode2D): void;
    AddRelativeForce(relativeForce: Vector2): void;
    /**
     * Adds a force to the local space Rigidbody2D.linearVelocity. In other words, the force is applied in the rotated coordinate space of the Rigidbody2D.
     * @param relativeForce Components of the force in the X and Y axes.
     * @param mode The method used to apply the specified force.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddRelativeForce.html | Rigidbody2D.AddRelativeForce}
     */
    AddRelativeForce(relativeForce: Vector2, mode: ForceMode2D): void;
    /**
     * Adds a force to the X component of the Rigidbody2D.linearVelocity in the local space of the Rigidbody2D only leaving the Y component of the local space Rigidbody2D.linearVelocity untouched.
     * @param force The force to add to the X component of the Linear Velocity in the local space of the Rigidbody2D.
     * @param mode The method used to apply the specified force.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddRelativeForceX.html | Rigidbody2D.AddRelativeForceX}
     */
    AddRelativeForceX(force: number, mode: ForceMode2D): void;
    /**
     * Adds a force to the Y component of the Rigidbody2D.linearVelocity in the local space of the Rigidbody2D only leaving the X component of the local space Rigidbody2D.linearVelocity untouched.
     * @param force The force to add to the Y component of the Linear Velocity in the local space of the Rigidbody2D.
     * @param mode The method used to apply the specified force.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddRelativeForceY.html | Rigidbody2D.AddRelativeForceY}
     */
    AddRelativeForceY(force: number, mode: ForceMode2D): void;
    AddTorque(torque: number): void;
    /**
     * Apply a torque at the rigidbody's centre of mass.
     * @param torque Torque to apply.
     * @param mode The force mode to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddTorque.html | Rigidbody2D.AddTorque}
     */
    AddTorque(torque: number, mode: ForceMode2D): void;
    Cast(direction: Vector2, results: Readonly<RaycastHit2D[]>): number;
    /**
     * All the Collider2D shapes attached to the Rigidbody2D are cast into the Scene starting at each Collider position ignoring the Colliders attached to the same Rigidbody2D.
     * @param direction Vector representing the direction to cast each Collider2D shape.
     * @param results Array to receive results.
     * @param distance Maximum distance over which to cast the Collider(s).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.Cast.html | Rigidbody2D.Cast}
     */
    Cast(direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number): number;
    Cast(direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number): number;
    Cast(direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    /**
     * All the Collider2D shapes attached to the Rigidbody2D are cast into the Scene starting at each Collider position ignoring the Colliders attached to the same Rigidbody2D.
     * @param direction Vector representing the direction to cast each Collider2D shape.
     * @param contactFilter Filter results defined by the contact filter.
     * @param results Array to receive results.
     * @param distance Maximum distance over which to cast the Collider(s).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.Cast.html | Rigidbody2D.Cast}
     */
    Cast(direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    Cast(direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    Cast(position: Vector2, angle: number, direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number): number;
    Cast(position: Vector2, angle: number, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    /**
     * Returns a point on the perimeter of all enabled Colliders attached to this Rigidbody that is closest to the specified position.
     * @param position The position from which to find the closest point on this Rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.ClosestPoint.html | Rigidbody2D.ClosestPoint}
     */
    ClosestPoint(position: Vector2): Vector2;
    /**
     * Calculates the minimum distance of this collider against all Collider2D attached to this Rigidbody2D.
     * @param collider A collider used to calculate the minimum distance against all colliders attached to this Rigidbody2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.Distance.html | Rigidbody2D.Distance}
     */
    Distance(collider: Collider2D): ColliderDistance2D;
    /**
     * Calculates the minimum distance of this collider against all Collider2D attached to this Rigidbody2D.
     * @param thisPosition The position to use for this Rigidbody.
     * @param thisAngle The rotation to use for this Rigidbody.
     * @param collider A collider used to calculate the minimum separation against this Rigidbody.
     * @param position The position to use for the specified collider.
     * @param angle The rotation to use for the specified collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.Distance.html | Rigidbody2D.Distance}
     */
    Distance(thisPosition: Vector2, thisAngle: number, collider: Collider2D, position: Vector2, angle: number): ColliderDistance2D;
    GetAttachedColliders(results: Readonly<Collider2D[]>): number;
    GetAttachedColliders(results: Readonly<Collider2D[]>, findTriggers: boolean): number;
    /**
     * Retrieves all contact points for all of the Collider(s) attached to this Rigidbody.
     * @param contacts An array of ContactPoint2D used to receive the results.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.GetContacts.html | Rigidbody2D.GetContacts}
     */
    GetContacts(contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(contacts: Readonly<ContactPoint2D[]>): number;
    /**
     * Retrieves all contact points for all of the Collider(s) attached to this Rigidbody, with the results filtered by the ContactFilter2D.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * @param contacts An array of ContactPoint2D used to receive the results.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.GetContacts.html | Rigidbody2D.GetContacts}
     */
    GetContacts(contactFilter: ContactFilter2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(contactFilter: ContactFilter2D, contacts: Readonly<ContactPoint2D[]>): number;
    /**
     * Retrieves all Colliders in contact with any of the Collider(s) attached to this Rigidbody.
     * @param colliders An array of Collider2D used to receive the results.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.GetContacts.html | Rigidbody2D.GetContacts}
     */
    GetContacts(colliders: Readonly<Collider2D[]>): number;
    GetContacts(colliders: Readonly<Collider2D[]>): number;
    /**
     * Retrieves all Colliders in contact with any of the Collider(s) attached to this rigidbody, with the results filtered by the ContactFilter2D.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * @param colliders An array of Collider2D used to receive the results.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.GetContacts.html | Rigidbody2D.GetContacts}
     */
    GetContacts(contactFilter: ContactFilter2D, colliders: Readonly<Collider2D[]>): number;
    GetContacts(contactFilter: ContactFilter2D, colliders: Readonly<Collider2D[]>): number;
    /**
     * Get a local space point given the point point in rigidBody global space.
     * @param point The global space point to transform into local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.GetPoint.html | Rigidbody2D.GetPoint}
     */
    GetPoint(point: Vector2): Vector2;
    /**
     * The velocity of the rigidbody at the point Point in global space.
     * @param point The global space point to calculate velocity for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.GetPointVelocity.html | Rigidbody2D.GetPointVelocity}
     */
    GetPointVelocity(point: Vector2): Vector2;
    /**
     * Get a global space point given the point relativePoint in rigidBody local space.
     * @param relativePoint The local space point to transform into global space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.GetRelativePoint.html | Rigidbody2D.GetRelativePoint}
     */
    GetRelativePoint(relativePoint: Vector2): Vector2;
    /**
     * The velocity of the rigidbody at the point Point in local space.
     * @param relativePoint The local space point to calculate velocity for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.GetRelativePointVelocity.html | Rigidbody2D.GetRelativePointVelocity}
     */
    GetRelativePointVelocity(relativePoint: Vector2): Vector2;
    /**
     * Get a global space vector given the vector relativeVector in rigidBody local space.
     * @param relativeVector The local space vector to transform into a global space vector.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.GetRelativeVector.html | Rigidbody2D.GetRelativeVector}
     */
    GetRelativeVector(relativeVector: Vector2): Vector2;
    /**
     * Gets all the PhysicsShape2D used by all Collider2D attached to the Rigidbody2D.
     * @param physicsShapeGroup The PhysicsShapeGroup2D to store the retrieved PhysicsShape2D in.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.GetShapes.html | Rigidbody2D.GetShapes}
     */
    GetShapes(physicsShapeGroup: PhysicsShapeGroup2D): number;
    /**
     * Get a local space vector given the vector vector in rigidBody global space.
     * @param vector The global space vector to transform into a local space vector.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.GetVector.html | Rigidbody2D.GetVector}
     */
    GetVector(vector: Vector2): Vector2;
    /**
     * Is the rigidbody &quot;awake&quot;?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.IsAwake.html | Rigidbody2D.IsAwake}
     */
    IsAwake(): boolean;
    /**
     * Is the rigidbody &quot;sleeping&quot;?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.IsSleeping.html | Rigidbody2D.IsSleeping}
     */
    IsSleeping(): boolean;
    /**
     * Checks whether the collider  is touching any of the collider(s) attached to this rigidbody or not.
     * @param collider The collider to check if it is touching any of the collider(s) attached to this rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.IsTouching.html | Rigidbody2D.IsTouching}
     */
    IsTouching(collider: Collider2D): boolean;
    /**
     * Checks whether the collider  is touching any of the collider(s) attached to this rigidbody or not with the results filtered by the ContactFilter2D.
     * @param collider The collider to check if it is touching any of the collider(s) attached to this rigidbody.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.IsTouching.html | Rigidbody2D.IsTouching}
     */
    IsTouching(collider: Collider2D, contactFilter: ContactFilter2D): boolean;
    /**
     * Checks whether any collider is touching any of the collider(s) attached to this rigidbody or not with the results filtered by the ContactFilter2D.
     * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.IsTouching.html | Rigidbody2D.IsTouching}
     */
    IsTouching(contactFilter: ContactFilter2D): boolean;
    IsTouchingLayers(): boolean;
    /**
     * Checks whether any of the collider(s) attached to this rigidbody are touching any colliders on the specified layerMask or not.
     * @param layerMask Any colliders on any of these layers count as touching.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.IsTouchingLayers.html | Rigidbody2D.IsTouchingLayers}
     */
    IsTouchingLayers(layerMask: number): boolean;
    /**
     * Moves the rigidbody to position.
     * @param position The new position for the Rigidbody object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.MovePosition.html | Rigidbody2D.MovePosition}
     */
    MovePosition(position: Vector2): void;
    /**
     * Moves the rigidbody position to position and the rigidbody angle to angle.
     * @param position The position to move the rigidbody to.
     * @param angle The angle to move the rigidbody to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.MovePositionAndRotation.html | Rigidbody2D.MovePositionAndRotation}
     */
    MovePositionAndRotation(position: Vector2, angle: number): void;
    /**
     * Moves the rigidbody position to position and the rigidbody angle to rotation.
     * @param position The position to move the rigidbody to.
     * @param rotation The rotation to move the rigidbody to. Only the Z-Axis rotation is used from the full 3D Quaternion rotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.MovePositionAndRotation.html | Rigidbody2D.MovePositionAndRotation}
     */
    MovePositionAndRotation(position: Vector2, rotation: Quaternion): void;
    /**
     * Rotates the Rigidbody to angle (given in degrees).
     * @param angle The new rotation angle for the Rigidbody object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.MoveRotation.html | Rigidbody2D.MoveRotation}
     */
    MoveRotation(angle: number): void;
    /**
     * An overload of MoveRotation that allows a full 3D rotation as an argument.
     * @param rotation Full 3D rotation used to extract only the z-axis rotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.MoveRotation.html | Rigidbody2D.MoveRotation}
     */
    MoveRotation(rotation: Quaternion): void;
    Overlap(results: Readonly<Collider2D[]>): number;
    Overlap(contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    Overlap(position: Vector2, angle: number, results: Readonly<Collider2D[]>): number;
    Overlap(position: Vector2, angle: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    /**
     * Check if any of the Rigidbody2D colliders overlap a point in space.
     * @param point A point in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.OverlapPoint.html | Rigidbody2D.OverlapPoint}
     */
    OverlapPoint(point: Vector2): boolean;
    /**
     * Sets the rotation of the Rigidbody2D to angle (given in degrees).
     * @param angle The rotation of the Rigidbody (in degrees).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.SetRotation.html | Rigidbody2D.SetRotation}
     */
    SetRotation(angle: number): void;
    /**
     * Sets the rotation of the Rigidbody2D to the z-axis rotation extracted from the full 3D rotation.
     * @param rotation Full 3D rotation used to extract only the z-axis rotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.SetRotation.html | Rigidbody2D.SetRotation}
     */
    SetRotation(rotation: Quaternion): void;
    /**
     * Make the rigidbody &quot;sleep&quot;.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.Sleep.html | Rigidbody2D.Sleep}
     */
    Sleep(): void;
    Slide(velocity: Vector2, deltaTime: number, slideMovement: SlideMovement): SlideResults;
    /**
     * Disables the &quot;sleeping&quot; state of a rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rigidbody2D.WakeUp.html | Rigidbody2D.WakeUp}
     */
    WakeUp(): void;


}
    
interface PhysicsMaterial2D extends Object {
    /**
     * Coefficient of restitution.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsMaterial2D-bounciness.html | PhysicsMaterial2D.bounciness}
     */
    bounciness: number;
    /**
     * Coefficient of friction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsMaterial2D-friction.html | PhysicsMaterial2D.friction}
     */
    friction: number;
    /**
     * Determines how the effective friction is calculated when two Collider2D come into contact.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsMaterial2D-frictionCombine.html | PhysicsMaterial2D.frictionCombine}
     */
    frictionCombine: PhysicsMaterialCombine2D;
    /**
     * Determines how the effective bounciness is calculated when two Collider2D come into contact.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsMaterial2D-bounceCombine.html | PhysicsMaterial2D.bounceCombine}
     */
    bounceCombine: PhysicsMaterialCombine2D;





}
    
interface PhysicsMaterial2DConstructor {


    new(): PhysicsMaterial2D;
    new(name: string): PhysicsMaterial2D;


    GetCombinedValues(valueA: number, valueB: number, materialCombineA: PhysicsMaterialCombine2D, materialCombineB: PhysicsMaterialCombine2D): number;

}
declare const PhysicsMaterial2D: PhysicsMaterial2DConstructor;
    
interface ContactFilter2D {
    useTriggers: boolean;
    useLayerMask: boolean;
    useDepth: boolean;
    useOutsideDepth: boolean;
    useNormalAngle: boolean;
    useOutsideNormalAngle: boolean;
    layerMask: LayerMask;
    minDepth: number;
    maxDepth: number;
    minNormalAngle: number;
    maxNormalAngle: number;
    /**
     * Given the current state of the contact filter, determine whether it would filter anything.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D-isFiltering.html | ContactFilter2D.isFiltering}
     */
    readonly isFiltering: boolean;



    /**
     * Turns off depth filtering by setting useDepth to false.  The associated values of minDepth and maxDepth are not changed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.ClearDepth.html | ContactFilter2D.ClearDepth}
     */
    ClearDepth(): void;
    /**
     * Turns off layer mask filtering by setting useLayerMask to false.  The associated value of layerMask is not changed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.ClearLayerMask.html | ContactFilter2D.ClearLayerMask}
     */
    ClearLayerMask(): void;
    /**
     * Turns off normal angle filtering by setting useNormalAngle to false. The associated values of minNormalAngle and maxNormalAngle are not changed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.ClearNormalAngle.html | ContactFilter2D.ClearNormalAngle}
     */
    ClearNormalAngle(): void;
    /**
     * Checks if the Transform for obj is within the depth range to be filtered.
     * @param obj The GameObject used to check the z-position (depth) of Transform.position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.IsFilteringDepth.html | ContactFilter2D.IsFilteringDepth}
     */
    IsFilteringDepth(obj: GameObject): boolean;
    /**
     * Checks if the GameObject.layer for obj is included in the layerMask to be filtered.
     * @param obj The GameObject used to check the GameObject.layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.IsFilteringLayerMask.html | ContactFilter2D.IsFilteringLayerMask}
     */
    IsFilteringLayerMask(obj: GameObject): boolean;
    /**
     * Checks if the angle of normal is within the normal angle range to be filtered.
     * @param normal The normal used to calculate an angle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.IsFilteringNormalAngle.html | ContactFilter2D.IsFilteringNormalAngle}
     */
    IsFilteringNormalAngle(normal: Vector2): boolean;
    /**
     * Checks if the angle is within the normal angle range to be filtered.
     * @param angle The angle used for comparison in the filter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.IsFilteringNormalAngle.html | ContactFilter2D.IsFilteringNormalAngle}
     */
    IsFilteringNormalAngle(angle: number): boolean;
    /**
     * Checks if the collider is a trigger and should be filtered by the useTriggers to be filtered.
     * @param collider The Collider2D used to check for a trigger.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.IsFilteringTrigger.html | ContactFilter2D.IsFilteringTrigger}
     */
    IsFilteringTrigger(collider: Collider2D): boolean;
    /**
     * Sets the contact filter to not filter any ContactPoint2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.NoFilter.html | ContactFilter2D.NoFilter}
     */
    NoFilter(): ContactFilter2D;
    /**
     * Sets the minDepth and maxDepth filter properties and turns on depth filtering by setting useDepth to true.
     * @param minDepth The value used to set minDepth.
     * @param maxDepth The value used to set maxDepth.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.SetDepth.html | ContactFilter2D.SetDepth}
     */
    SetDepth(minDepth: number, maxDepth: number): void;
    /**
     * Sets the layerMask filter property using the layerMask parameter provided and also enables layer mask filtering by setting useLayerMask to true.
     * @param layerMask The value used to set the layerMask.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.SetLayerMask.html | ContactFilter2D.SetLayerMask}
     */
    SetLayerMask(layerMask: LayerMask): void;
    /**
     * Sets the minNormalAngle and maxNormalAngle filter properties and turns on normal angle filtering by setting useNormalAngle to true.
     * @param minNormalAngle The value used to set the minNormalAngle.
     * @param maxNormalAngle The value used to set the maxNormalAngle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactFilter2D.SetNormalAngle.html | ContactFilter2D.SetNormalAngle}
     */
    SetNormalAngle(minNormalAngle: number, maxNormalAngle: number): void;


}
    
interface ContactFilter2DConstructor {
    NormalAngleUpperLimit: number;





}
declare const ContactFilter2D: ContactFilter2DConstructor;
    
interface ColliderDistance2D {
    /**
     * A point on a Collider2D that is a specific distance away from pointB.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ColliderDistance2D-pointA.html | ColliderDistance2D.pointA}
     */
    pointA: Vector2;
    /**
     * A point on a Collider2D that is a specific distance away from pointA.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ColliderDistance2D-pointB.html | ColliderDistance2D.pointB}
     */
    pointB: Vector2;
    /**
     * A normalized vector that points from pointB to pointA.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ColliderDistance2D-normal.html | ColliderDistance2D.normal}
     */
    readonly normal: Vector2;
    /**
     * Gets the distance between two colliders.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ColliderDistance2D-distance.html | ColliderDistance2D.distance}
     */
    distance: number;
    /**
     * Gets whether the distance represents an overlap or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ColliderDistance2D-isOverlapped.html | ColliderDistance2D.isOverlapped}
     */
    readonly isOverlapped: boolean;
    /**
     * Gets whether the distance is valid or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ColliderDistance2D-isValid.html | ColliderDistance2D.isValid}
     */
    isValid: boolean;





}
    
interface ContactPoint2D {
    /**
     * The point of contact between the two colliders in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-point.html | ContactPoint2D.point}
     */
    readonly point: Vector2;
    /**
     * Surface normal at the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-normal.html | ContactPoint2D.normal}
     */
    readonly normal: Vector2;
    /**
     * Gets the distance between the colliders at the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-separation.html | ContactPoint2D.separation}
     */
    readonly separation: number;
    /**
     * Gets the impulse applied at the contact point along the ContactPoint2D.normal.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-normalImpulse.html | ContactPoint2D.normalImpulse}
     */
    readonly normalImpulse: number;
    /**
     * Gets the impulse applied at the contact point which is perpendicular to the ContactPoint2D.normal.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-tangentImpulse.html | ContactPoint2D.tangentImpulse}
     */
    readonly tangentImpulse: number;
    /**
     * Gets the relative velocity of the two colliders at the contact point (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-relativeVelocity.html | ContactPoint2D.relativeVelocity}
     */
    readonly relativeVelocity: Vector2;
    /**
     * The effective friction used for the ContactPoint2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-friction.html | ContactPoint2D.friction}
     */
    readonly friction: number;
    /**
     * The effective bounciness used for the ContactPoint2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-bounciness.html | ContactPoint2D.bounciness}
     */
    readonly bounciness: number;
    /**
     * The incoming Collider2D involved in the collision with the otherCollider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-collider.html | ContactPoint2D.collider}
     */
    readonly collider: Collider2D;
    /**
     * The other Collider2D involved in the collision with the collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-otherCollider.html | ContactPoint2D.otherCollider}
     */
    readonly otherCollider: Collider2D;
    /**
     * The incoming Rigidbody2D involved in the collision with the otherRigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-rigidbody.html | ContactPoint2D.rigidbody}
     */
    readonly rigidbody: Rigidbody2D;
    /**
     * The other Rigidbody2D involved in the collision with the rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-otherRigidbody.html | ContactPoint2D.otherRigidbody}
     */
    readonly otherRigidbody: Rigidbody2D;
    /**
     * Indicates whether the collision response or reaction is enabled or disabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint2D-enabled.html | ContactPoint2D.enabled}
     */
    readonly enabled: boolean;





}
    
interface PhysicsShapeGroup2D {
    /**
     * The total number of  PhysicsShape2D in the shape group. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D-shapeCount.html | PhysicsShapeGroup2D.shapeCount}
     */
    readonly shapeCount: number;
    /**
     * The total number of vertices in the shape group used to represent all PhysicsShape2D within it. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D-vertexCount.html | PhysicsShapeGroup2D.vertexCount}
     */
    readonly vertexCount: number;
    /**
     * Gets or sets a matrix that transforms the PhysicsShapeGroup2D vertices from local space into world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D-localToWorldMatrix.html | PhysicsShapeGroup2D.localToWorldMatrix}
     */
    localToWorldMatrix: Matrix4x4;



    /**
     * Adds a copy of all the PhysicsShape2D and their geometry from the specified physicsShapeGroup into this shape group. The specified physicsShapeGroup is not modified.
     * @param physicsShapeGroup The PhysicsShapeGroup2D to add to this shape group. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D.Add.html | PhysicsShapeGroup2D.Add}
     */
    Add(physicsShapeGroup: PhysicsShapeGroup2D): void;
    /**
     * Adds a box shape (PhysicsShapeType2D.Polygon) to the shape group.
     * @param center The center point of the box shape. This is analogous to Collider2D.offset.
     * @param size The size of the box. This is identical to BoxCollider2D.size.
     * @param angle The angle in degrees the box should be rotated around the center.
     * @param edgeRadius The radius extending around the edges of the box. This is identical to BoxCollider2D.edgeRadius.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D.AddBox.html | PhysicsShapeGroup2D.AddBox}
     */
    AddBox(center: Vector2, size: Vector2, angle: number, edgeRadius: number): number;
    /**
     * Adds a capsule shape (PhysicsShapeType2D.Capsule) to the shape group.
     * @param vertex0 The position of one end of a capsule shape. This point represents the center point of a logical circle at the end of a capsule.
     * @param vertex1 The position of the opposite end of a capsule shape. This point represents the  center point of a logical circle at the opposite end of a capsule.
     * @param radius The radius of the capsule defining a radius around the vertex0 and vertex1 and the area between them.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D.AddCapsule.html | PhysicsShapeGroup2D.AddCapsule}
     */
    AddCapsule(vertex0: Vector2, vertex1: Vector2, radius: number): number;
    /**
     * Adds a circle shape (PhysicsShapeType2D.Circle) to the shape group.
     * @param center The center point of the circle shape. This is analogous to Collider2D.offset.
     * @param radius The radius of the circle defining a radius around the center. This is identical to CircleCollider2D.radius.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D.AddCircle.html | PhysicsShapeGroup2D.AddCircle}
     */
    AddCircle(center: Vector2, radius: number): number;
    AddEdges(vertices: Readonly<Vector2[]>, edgeRadius: number): number;
    AddEdges(vertices: Readonly<Vector2[]>, useAdjacentStart: boolean, useAdjacentEnd: boolean, adjacentStart: Vector2, adjacentEnd: Vector2, edgeRadius: number): number;
    AddPolygon(vertices: Readonly<Vector2[]>): number;
    /**
     * Clears all the vertices and shapes from the PhysicsShapeGroup.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D.Clear.html | PhysicsShapeGroup2D.Clear}
     */
    Clear(): void;
    /**
     * When destroying a shape at the specified shapeIndex, all other shapes that exist above the specified shapeIndex will have their shape indices updated appropriately.
     * @param shapeIndex The index of the shape stored the PhysicsShapeGroup2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D.DeleteShape.html | PhysicsShapeGroup2D.DeleteShape}
     */
    DeleteShape(shapeIndex: number): void;
    /**
     * Gets the PhysicsShape2D stored at the specified shapeIndex.
     * @param shapeIndex The index of the shape stored the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D.GetShape.html | PhysicsShapeGroup2D.GetShape}
     */
    GetShape(shapeIndex: number): PhysicsShape2D;
    GetShapeData(shapes: Readonly<PhysicsShape2D[]>, vertices: Readonly<Vector2[]>): void;
    GetShapeData(shapes: Readonly<PhysicsShape2D[]>, vertices: Readonly<Vector2[]>): void;
    /**
     * Gets a single vertex of a shape. The vertex index is zero-based with the shape having a quantity of vertex specified by PhysicsShape2D.vertexCount.
     * @param shapeIndex The index of the shape stored in the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.
     * @param vertexIndex The index of the shape vertex stored in the PhysicsShapeGroup2D. The vertex index is zero-based with the shape having a quantity of vertex specified by PhysicsShape2D.vertexCount.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D.GetShapeVertex.html | PhysicsShapeGroup2D.GetShapeVertex}
     */
    GetShapeVertex(shapeIndex: number, vertexIndex: number): Vector2;
    GetShapeVertices(shapeIndex: number, vertices: Readonly<Vector2[]>): void;
    /**
     * Sets the adjacent vertices of a shape.
     * @param shapeIndex The index of the shape to be modified that is stored the PhysicsShapeGroup2D.
     * @param useAdjacentStart Sets the PhysicsShape2D.useAdjacentStart property of the selected shape.
     * @param useAdjacentEnd Sets the PhysicsShape2D.useAdjacentEnd property of the selected shape.
     * @param adjacentStart Sets the PhysicsShape2D.adjacentStart property of the selected shape.
     * @param adjacentEnd Sets the PhysicsShape2D.adjacentEnd property of the selected shape.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D.SetShapeAdjacentVertices.html | PhysicsShapeGroup2D.SetShapeAdjacentVertices}
     */
    SetShapeAdjacentVertices(shapeIndex: number, useAdjacentStart: boolean, useAdjacentEnd: boolean, adjacentStart: Vector2, adjacentEnd: Vector2): void;
    /**
     * Sets the radius of a shape.
     * @param shapeIndex The index of the shape stored in the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.
     * @param radius The value to set the shape radius to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D.SetShapeRadius.html | PhysicsShapeGroup2D.SetShapeRadius}
     */
    SetShapeRadius(shapeIndex: number, radius: number): void;
    /**
     * Sets a single vertex of a shape.
     * @param shapeIndex The index of the shape stored in the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.
     * @param vertexIndex The index of the shape vertex stored in the PhysicsShapeGroup2D. The vertex index is zero-based with the shape having a quantity of vertex specified by PhysicsShape2D.vertexCount.
     * @param vertex The value to set the shape vertex to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShapeGroup2D.SetShapeVertex.html | PhysicsShapeGroup2D.SetShapeVertex}
     */
    SetShapeVertex(shapeIndex: number, vertexIndex: number, vertex: Vector2): void;


}
    
interface PhysicsShape2D {
    /**
     * The shape type determines how the vertices and radius are used by this PhysicsShape2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShape2D-shapeType.html | PhysicsShape2D.shapeType}
     */
    shapeType: PhysicsShapeType2D;
    /**
     * The radius of the shape.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShape2D-radius.html | PhysicsShape2D.radius}
     */
    radius: number;
    /**
     * The start index for the geometry of this shape within the PhysicsShapeGroup2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShape2D-vertexStartIndex.html | PhysicsShape2D.vertexStartIndex}
     */
    vertexStartIndex: number;
    /**
     * The total number of vertices used to represent the PhysicsShape2D.shapeType|shape type.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShape2D-vertexCount.html | PhysicsShape2D.vertexCount}
     */
    vertexCount: number;
    /**
     * When the value is true, then the shape will use the PhysicsShape2D.adjacentStart|adjacentStart feature. When the value is false, then the shape will not use the PhysicsShape2D.adjacentEnd|adjacentStart feature.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShape2D-useAdjacentStart.html | PhysicsShape2D.useAdjacentStart}
     */
    useAdjacentStart: boolean;
    /**
     * When the value is true, then the shape will use the PhysicsShape2D.adjacentEnd|adjacentEnd feature. When the value is false, then the shape will not use the PhysicsShape2D.adjacentEnd|adjacentEnd feature.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShape2D-useAdjacentEnd.html | PhysicsShape2D.useAdjacentEnd}
     */
    useAdjacentEnd: boolean;
    /**
     * Defines the position of a virtual point adjacent to the start vertex of an edge shape.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShape2D-adjacentStart.html | PhysicsShape2D.adjacentStart}
     */
    adjacentStart: Vector2;
    /**
     * Defines the position of a virtual point adjacent to the end vertex of an edge shape.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsShape2D-adjacentEnd.html | PhysicsShape2D.adjacentEnd}
     */
    adjacentEnd: Vector2;





}
    
interface PhysicsShapeGroup2DConstructor {


    new(shapeCapacity: number, vertexCapacity: number): PhysicsShapeGroup2D;



}
declare const PhysicsShapeGroup2D: PhysicsShapeGroup2DConstructor;
    
interface SlideResults {
    remainingVelocity: Vector2;
    position: Vector2;
    iterationsUsed: number;
    slideHit: RaycastHit2D;
    surfaceHit: RaycastHit2D;





}
    
interface SlideMovement {
    maxIterations: number;
    surfaceSlideAngle: number;
    gravitySlipAngle: number;
    surfaceUp: Vector2;
    surfaceAnchor: Vector2;
    gravity: Vector2;
    startPosition: Vector2;
    selectedCollider: Collider2D;
    layerMask: LayerMask;
    useLayerMask: boolean;
    useStartPosition: boolean;
    useNoMove: boolean;
    useSimulationMove: boolean;
    useAttachedTriggers: boolean;



    SetLayerMask(mask: LayerMask): void;
    SetStartPosition(position: Vector2): void;


}
    
interface SlideMovementConstructor {


    new(): SlideMovement;



}
declare const SlideMovement: SlideMovementConstructor;
    
interface Rigidbody2DConstructor {


    new(): Rigidbody2D;



}
declare const Rigidbody2D: Rigidbody2DConstructor;
    
interface Mesh extends Object {
    /**
     * Format of the mesh index buffer data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-indexFormat.html | Mesh.indexFormat}
     */
    indexFormat: IndexFormat;
    /**
     * Gets the number of vertex buffers present in the Mesh. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-vertexBufferCount.html | Mesh.vertexBufferCount}
     */
    readonly vertexBufferCount: number;
    /**
     * The intended target usage of the Mesh GPU vertex buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-vertexBufferTarget.html | Mesh.vertexBufferTarget}
     */
    vertexBufferTarget: Target;
    /**
     * The intended target usage of the Mesh GPU index buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-indexBufferTarget.html | Mesh.indexBufferTarget}
     */
    indexBufferTarget: Target;
    /**
     * Returns BlendShape count on this mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-blendShapeCount.html | Mesh.blendShapeCount}
     */
    readonly blendShapeCount: number;
    /**
     * The number of bind poses in the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-bindposeCount.html | Mesh.bindposeCount}
     */
    readonly bindposeCount: number;
    /**
     * The bind poses. The bind pose at each index refers to the bone with the same index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-bindposes.html | Mesh.bindposes}
     */
    bindposes: Readonly<Matrix4x4[]>;
    /**
     * Returns true if the Mesh is read/write enabled, or false if it is not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-isReadable.html | Mesh.isReadable}
     */
    readonly isReadable: boolean;
    /**
     * Returns the number of vertices in the Mesh (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-vertexCount.html | Mesh.vertexCount}
     */
    readonly vertexCount: number;
    /**
     * The number of sub-meshes inside the Mesh object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-subMeshCount.html | Mesh.subMeshCount}
     */
    subMeshCount: number;
    /**
     * The bounding volume of the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-bounds.html | Mesh.bounds}
     */
    bounds: Bounds;
    /**
     * Returns a copy of the vertex positions or assigns a new vertex positions array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-vertices.html | Mesh.vertices}
     */
    vertices: Readonly<Vector3[]>;
    /**
     * The normals of the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-normals.html | Mesh.normals}
     */
    normals: Readonly<Vector3[]>;
    /**
     * The tangents of the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-tangents.html | Mesh.tangents}
     */
    tangents: Readonly<Vector4[]>;
    /**
     * The texture coordinates (UVs) in the first channel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-uv.html | Mesh.uv}
     */
    uv: Readonly<Vector2[]>;
    /**
     * The texture coordinates (UVs) in the second channel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-uv2.html | Mesh.uv2}
     */
    uv2: Readonly<Vector2[]>;
    /**
     * The texture coordinates (UVs) in the third channel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-uv3.html | Mesh.uv3}
     */
    uv3: Readonly<Vector2[]>;
    /**
     * The texture coordinates (UVs) in the fourth channel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-uv4.html | Mesh.uv4}
     */
    uv4: Readonly<Vector2[]>;
    /**
     * The texture coordinates (UVs) in the fifth channel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-uv5.html | Mesh.uv5}
     */
    uv5: Readonly<Vector2[]>;
    /**
     * The texture coordinates (UVs) in the sixth channel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-uv6.html | Mesh.uv6}
     */
    uv6: Readonly<Vector2[]>;
    /**
     * The texture coordinates (UVs) in the seventh channel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-uv7.html | Mesh.uv7}
     */
    uv7: Readonly<Vector2[]>;
    /**
     * The texture coordinates (UVs) in the eighth channel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-uv8.html | Mesh.uv8}
     */
    uv8: Readonly<Vector2[]>;
    /**
     * Vertex colors of the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-colors.html | Mesh.colors}
     */
    colors: Readonly<Color[]>;
    /**
     * Vertex colors of the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-colors32.html | Mesh.colors32}
     */
    colors32: Readonly<Color32[]>;
    /**
     * Returns the number of vertex attributes that the mesh has. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-vertexAttributeCount.html | Mesh.vertexAttributeCount}
     */
    readonly vertexAttributeCount: number;
    /**
     * An array containing all triangles in the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-triangles.html | Mesh.triangles}
     */
    triangles: Readonly<number[]>;
    /**
     * The BoneWeight for each vertex in the Mesh, which represents 4 bones per vertex.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-boneWeights.html | Mesh.boneWeights}
     */
    boneWeights: Readonly<BoneWeight[]>;
    /**
     * The dimension of data in the bone weight buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh-skinWeightBufferLayout.html | Mesh.skinWeightBufferLayout}
     */
    readonly skinWeightBufferLayout: SkinWeights;



    /**
     * Adds a new blend shape frame.
     * @param shapeName Name of the blend shape to add a frame to.
     * @param frameWeight Weight for the frame being added.
     * @param deltaVertices Delta vertices for the frame being added.
     * @param deltaNormals Delta normals for the frame being added.
     * @param deltaTangents Delta tangents for the frame being added.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.AddBlendShapeFrame.html | Mesh.AddBlendShapeFrame}
     */
    AddBlendShapeFrame(shapeName: string, frameWeight: number, deltaVertices: Readonly<Vector3[]>, deltaNormals: Readonly<Vector3[]>, deltaTangents: Readonly<Vector3[]>): void;
    /**
     * Clears all vertex data and all triangle indices.
     * @param keepVertexLayout True if the existing Mesh data layout should be preserved.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.Clear.html | Mesh.Clear}
     */
    Clear(keepVertexLayout: boolean): void;
    /**
     * Clears all vertex data and all triangle indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.Clear.html | Mesh.Clear}
     */
    Clear(): void;
    /**
     * Clears all blend shapes from Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.ClearBlendShapes.html | Mesh.ClearBlendShapes}
     */
    ClearBlendShapes(): void;
    /**
     * Combines several Meshes into this Mesh.
     * @param combine Descriptions of the Meshes to combine.
     * @param mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
     * @param useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
     * @param hasLightmapData Defines whether to transform the input Mesh lightmap UV data using the lightmap scale offset data in CombineInstance structs.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.CombineMeshes.html | Mesh.CombineMeshes}
     */
    CombineMeshes(combine: Readonly<CombineInstance[]>, mergeSubMeshes: boolean, useMatrices: boolean, hasLightmapData: boolean): void;
    /**
     * Combines several Meshes into this Mesh.
     * @param combine Descriptions of the Meshes to combine.
     * @param mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
     * @param useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.CombineMeshes.html | Mesh.CombineMeshes}
     */
    CombineMeshes(combine: Readonly<CombineInstance[]>, mergeSubMeshes: boolean, useMatrices: boolean): void;
    /**
     * Combines several Meshes into this Mesh.
     * @param combine Descriptions of the Meshes to combine.
     * @param mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.CombineMeshes.html | Mesh.CombineMeshes}
     */
    CombineMeshes(combine: Readonly<CombineInstance[]>, mergeSubMeshes: boolean): void;
    /**
     * Combines several Meshes into this Mesh.
     * @param combine Descriptions of the Meshes to combine.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.CombineMeshes.html | Mesh.CombineMeshes}
     */
    CombineMeshes(combine: Readonly<CombineInstance[]>): void;
    /**
     * Gets the bone weights for the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetAllBoneWeights.html | Mesh.GetAllBoneWeights}
     */
    GetAllBoneWeights(): Readonly<BoneWeight1[]>;
    /**
     * Gets the base vertex index of the given sub-mesh.
     * @param submesh The sub-mesh index. See subMeshCount.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBaseVertex.html | Mesh.GetBaseVertex}
     */
    GetBaseVertex(submesh: number): number;
    /**
     * Gets the bind poses of the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBindposes.html | Mesh.GetBindposes}
     */
    GetBindposes(): Readonly<Matrix4x4[]>;
    GetBindposes(bindposes: Readonly<Matrix4x4[]>): void;
    /**
     * Retrieves a GraphicsBuffer that provides direct read and write access to GPU blend shape vertex data.
     * @param layout Which buffer to access. The default value is Rendering.BlendShapeBufferLayout.PerShape.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBlendShapeBuffer.html | Mesh.GetBlendShapeBuffer}
     */
    GetBlendShapeBuffer(layout: BlendShapeBufferLayout): GraphicsBuffer;
    /**
     * Retrieves a GraphicsBuffer that provides direct read and write access to GPU blend shape vertex data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBlendShapeBuffer.html | Mesh.GetBlendShapeBuffer}
     */
    GetBlendShapeBuffer(): GraphicsBuffer;
    /**
     * Get the location of blend shape vertex data for a given blend shape.
     * @param blendShapeIndex Which blend shape to locate the data for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBlendShapeBufferRange.html | Mesh.GetBlendShapeBufferRange}
     */
    GetBlendShapeBufferRange(blendShapeIndex: number): BlendShapeBufferRange;
    /**
     * Returns the frame count for a blend shape.
     * @param shapeIndex The shape index to get frame count from.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBlendShapeFrameCount.html | Mesh.GetBlendShapeFrameCount}
     */
    GetBlendShapeFrameCount(shapeIndex: number): number;
    /**
     * Retreives deltaVertices, deltaNormals and deltaTangents of a blend shape frame.
     * @param shapeIndex The shape index of the frame.
     * @param frameIndex The frame index to get the weight from.
     * @param deltaVertices Delta vertices output array for the frame being retreived.
     * @param deltaNormals Delta normals output array for the frame being retreived.
     * @param deltaTangents Delta tangents output array for the frame being retreived.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBlendShapeFrameVertices.html | Mesh.GetBlendShapeFrameVertices}
     */
    GetBlendShapeFrameVertices(shapeIndex: number, frameIndex: number, deltaVertices: Readonly<Vector3[]>, deltaNormals: Readonly<Vector3[]>, deltaTangents: Readonly<Vector3[]>): void;
    /**
     * Returns the weight of a blend shape frame.
     * @param shapeIndex The shape index of the frame.
     * @param frameIndex The frame index to get the weight from.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBlendShapeFrameWeight.html | Mesh.GetBlendShapeFrameWeight}
     */
    GetBlendShapeFrameWeight(shapeIndex: number, frameIndex: number): number;
    /**
     * Returns index of BlendShape by given name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBlendShapeIndex.html | Mesh.GetBlendShapeIndex}
     */
    GetBlendShapeIndex(blendShapeName: string): number;
    /**
     * Returns name of BlendShape by given index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBlendShapeName.html | Mesh.GetBlendShapeName}
     */
    GetBlendShapeName(shapeIndex: number): string;
    /**
     * The number of non-zero bone weights for each vertex.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBonesPerVertex.html | Mesh.GetBonesPerVertex}
     */
    GetBonesPerVertex(): Readonly<number[]>;
    /**
     * Retrieves a GraphicsBuffer that provides direct read and write access to GPU bone weight data.
     * @param layout Which buffer to access, based on maximum bones per vertex.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetBoneWeightBuffer.html | Mesh.GetBoneWeightBuffer}
     */
    GetBoneWeightBuffer(layout: SkinWeights): GraphicsBuffer;
    GetBoneWeights(boneWeights: Readonly<BoneWeight[]>): void;
    GetColors(colors: Readonly<Color[]>): void;
    GetColors(colors: Readonly<Color32[]>): void;
    /**
     * Retrieves a GraphicsBuffer to the GPU index buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetIndexBuffer.html | Mesh.GetIndexBuffer}
     */
    GetIndexBuffer(): GraphicsBuffer;
    /**
     * Gets the index count of the given sub-mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetIndexCount.html | Mesh.GetIndexCount}
     */
    GetIndexCount(submesh: number): number;
    /**
     * Gets the starting index location within the Mesh's index buffer, for the given sub-mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetIndexStart.html | Mesh.GetIndexStart}
     */
    GetIndexStart(submesh: number): number;
    /**
     * Fetches the index list for the specified sub-mesh.
     * @param submesh The sub-mesh index. See subMeshCount.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetIndices.html | Mesh.GetIndices}
     */
    GetIndices(submesh: number): Readonly<number[]>;
    /**
     * Fetches the index list for the specified sub-mesh.
     * @param submesh The sub-mesh index. See subMeshCount.
     * @param applyBaseVertex True (default value) will apply base vertex offset to returned indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetIndices.html | Mesh.GetIndices}
     */
    GetIndices(submesh: number, applyBaseVertex: boolean): Readonly<number[]>;
    GetIndices(indices: Readonly<number[]>, submesh: number): void;
    GetIndices(indices: Readonly<number[]>, submesh: number, applyBaseVertex: boolean): void;
    GetIndices(indices: Readonly<number[]>, submesh: number, applyBaseVertex: boolean): void;
    /**
     * Retrieves a native (underlying graphics API) pointer to the index buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetNativeIndexBufferPtr.html | Mesh.GetNativeIndexBufferPtr}
     */
    GetNativeIndexBufferPtr(): IntPtr;
    /**
     * Retrieves a native (underlying graphics API) pointer to the vertex buffer.
     * @param index Which vertex buffer to get (some Meshes might have more than one). See vertexBufferCount.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetNativeVertexBufferPtr.html | Mesh.GetNativeVertexBufferPtr}
     */
    GetNativeVertexBufferPtr(index: number): IntPtr;
    GetNormals(normals: Readonly<Vector3[]>): void;
    /**
     * Get information about a sub-mesh of the Mesh.
     * @param index Sub-mesh index. See subMeshCount. Out of range indices throw an exception.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetSubMesh.html | Mesh.GetSubMesh}
     */
    GetSubMesh(index: number): SubMeshDescriptor;
    GetTangents(tangents: Readonly<Vector4[]>): void;
    /**
     * Gets the topology of a sub-mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetTopology.html | Mesh.GetTopology}
     */
    GetTopology(submesh: number): MeshTopology;
    /**
     * Fetches the triangle list for the specified sub-mesh on this object.
     * @param submesh The sub-mesh index. See subMeshCount.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetTriangles.html | Mesh.GetTriangles}
     */
    GetTriangles(submesh: number): Readonly<number[]>;
    /**
     * Fetches the triangle list for the specified sub-mesh on this object.
     * @param submesh The sub-mesh index. See subMeshCount.
     * @param applyBaseVertex True (default value) will apply base vertex offset to returned indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetTriangles.html | Mesh.GetTriangles}
     */
    GetTriangles(submesh: number, applyBaseVertex: boolean): Readonly<number[]>;
    GetTriangles(triangles: Readonly<number[]>, submesh: number): void;
    GetTriangles(triangles: Readonly<number[]>, submesh: number, applyBaseVertex: boolean): void;
    GetTriangles(triangles: Readonly<number[]>, submesh: number, applyBaseVertex: boolean): void;
    /**
     * The UV distribution metric can be used to calculate the desired mipmap level based on the position of the camera.
     * @param uvSetIndex UV set index to return the UV distibution metric for. 0 for first.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetUVDistributionMetric.html | Mesh.GetUVDistributionMetric}
     */
    GetUVDistributionMetric(uvSetIndex: number): number;
    GetUVs(channel: number, uvs: Readonly<Vector2[]>): void;
    GetUVs(channel: number, uvs: Readonly<Vector3[]>): void;
    GetUVs(channel: number, uvs: Readonly<Vector4[]>): void;
    /**
     * Returns information about a vertex attribute based on its index.
     * @param index The vertex attribute index (0 to vertexAttributeCount-1).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetVertexAttribute.html | Mesh.GetVertexAttribute}
     */
    GetVertexAttribute(index: number): VertexAttributeDescriptor;
    /**
     * Get dimension of a specific vertex data attribute on this Mesh.
     * @param attr Vertex data attribute to check for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetVertexAttributeDimension.html | Mesh.GetVertexAttributeDimension}
     */
    GetVertexAttributeDimension(attr: VertexAttribute): number;
    /**
     * Get format of a specific vertex data attribute on this Mesh.
     * @param attr Vertex data attribute to check for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetVertexAttributeFormat.html | Mesh.GetVertexAttributeFormat}
     */
    GetVertexAttributeFormat(attr: VertexAttribute): VertexAttributeFormat;
    /**
     * Get offset within a vertex buffer stream of a specific vertex data attribute on this Mesh.
     * @param attr The vertex data attribute to check for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetVertexAttributeOffset.html | Mesh.GetVertexAttributeOffset}
     */
    GetVertexAttributeOffset(attr: VertexAttribute): number;
    /**
     * Get information about vertex attributes of a Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetVertexAttributes.html | Mesh.GetVertexAttributes}
     */
    GetVertexAttributes(): Readonly<VertexAttributeDescriptor[]>;
    /**
     * Get information about vertex attributes of a Mesh, without memory allocations.
     * @param attributes Collection of vertex attributes to receive the results.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetVertexAttributes.html | Mesh.GetVertexAttributes}
     */
    GetVertexAttributes(attributes: Readonly<VertexAttributeDescriptor[]>): number;
    GetVertexAttributes(attributes: Readonly<VertexAttributeDescriptor[]>): number;
    /**
     * Gets the vertex buffer stream index of a specific vertex data attribute on this Mesh.
     * @param attr The vertex data attribute to check for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetVertexAttributeStream.html | Mesh.GetVertexAttributeStream}
     */
    GetVertexAttributeStream(attr: VertexAttribute): number;
    /**
     * Retrieves a GraphicsBuffer that provides direct acces to the GPU vertex buffer.
     * @param index Vertex data stream index to get the buffer for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetVertexBuffer.html | Mesh.GetVertexBuffer}
     */
    GetVertexBuffer(index: number): GraphicsBuffer;
    /**
     * Get vertex buffer stream stride in bytes.
     * @param stream Vertex data stream index to check for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.GetVertexBufferStride.html | Mesh.GetVertexBufferStride}
     */
    GetVertexBufferStride(stream: number): number;
    GetVertices(vertices: Readonly<Vector3[]>): void;
    /**
     * Checks if a specific vertex data attribute exists on this Mesh.
     * @param attr Vertex data attribute to check for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.HasVertexAttribute.html | Mesh.HasVertexAttribute}
     */
    HasVertexAttribute(attr: VertexAttribute): boolean;
    /**
     * Optimize mesh for frequent updates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.MarkDynamic.html | Mesh.MarkDynamic}
     */
    MarkDynamic(): void;
    /**
     * Notify Renderer components of mesh geometry change.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.MarkModified.html | Mesh.MarkModified}
     */
    MarkModified(): void;
    /**
     * Optimizes the Mesh data to improve rendering performance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.Optimize.html | Mesh.Optimize}
     */
    Optimize(): void;
    /**
     * Optimizes the geometry of the Mesh to improve rendering performance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.OptimizeIndexBuffers.html | Mesh.OptimizeIndexBuffers}
     */
    OptimizeIndexBuffers(): void;
    /**
     * Optimizes the vertices of the Mesh to improve rendering performance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.OptimizeReorderVertexBuffer.html | Mesh.OptimizeReorderVertexBuffer}
     */
    OptimizeReorderVertexBuffer(): void;
    /**
     * Recalculate the bounding volume of the Mesh and all of its sub-meshes with the vertex data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.RecalculateBounds.html | Mesh.RecalculateBounds}
     */
    RecalculateBounds(): void;
    /**
     * Recalculate the bounding volume of the Mesh and all of its sub-meshes with the vertex data.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.RecalculateBounds.html | Mesh.RecalculateBounds}
     */
    RecalculateBounds(flags: MeshUpdateFlags): void;
    /**
     * Recalculates the normals of the Mesh from the triangles and vertices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.RecalculateNormals.html | Mesh.RecalculateNormals}
     */
    RecalculateNormals(): void;
    /**
     * Recalculates the normals of the Mesh from the triangles and vertices.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.RecalculateNormals.html | Mesh.RecalculateNormals}
     */
    RecalculateNormals(flags: MeshUpdateFlags): void;
    /**
     * Recalculates the tangents of the Mesh from the normals and texture coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.RecalculateTangents.html | Mesh.RecalculateTangents}
     */
    RecalculateTangents(): void;
    /**
     * Recalculates the tangents of the Mesh from the normals and texture coordinates.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.RecalculateTangents.html | Mesh.RecalculateTangents}
     */
    RecalculateTangents(flags: MeshUpdateFlags): void;
    /**
     * Recalculates the UV distribution metric of the Mesh from the vertices and uv coordinates.
     * @param uvSetIndex The UV set index to set the UV distibution metric for. Use 0 for first index.
     * @param uvAreaThreshold The minimum UV area to consider. The default value is 1e-9f.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.RecalculateUVDistributionMetric.html | Mesh.RecalculateUVDistributionMetric}
     */
    RecalculateUVDistributionMetric(uvSetIndex: number, uvAreaThreshold: number): void;
    /**
     * Recalculates the UV distribution metrics of the Mesh from the vertices and uv coordinates.
     * @param uvAreaThreshold The minimum UV area to consider. The default value is 1e-9f.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.RecalculateUVDistributionMetrics.html | Mesh.RecalculateUVDistributionMetrics}
     */
    RecalculateUVDistributionMetrics(uvAreaThreshold: number): void;
    SetBindposes(poses: Readonly<Matrix4x4[]>): void;
    SetBoneWeights(bonesPerVertex: Readonly<number[]>, weights: Readonly<BoneWeight1[]>): void;
    SetColors(inColors: Readonly<Color[]>): void;
    SetColors(inColors: Readonly<Color[]>, start: number, length: number): void;
    SetColors(inColors: Readonly<Color[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    /**
     * Set the per-vertex colors of the Mesh.
     * @param inColors Per-vertex colors.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetColors.html | Mesh.SetColors}
     */
    SetColors(inColors: Readonly<Color[]>): void;
    /**
     * Sets the per-vertex colors of the Mesh, using a part of the input array.
     * @param inColors Per-vertex colors.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetColors.html | Mesh.SetColors}
     */
    SetColors(inColors: Readonly<Color[]>, start: number, length: number): void;
    /**
     * Sets the per-vertex colors of the Mesh, using a part of the input array.
     * @param inColors Per-vertex colors.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetColors.html | Mesh.SetColors}
     */
    SetColors(inColors: Readonly<Color[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    SetColors(inColors: Readonly<Color32[]>): void;
    SetColors(inColors: Readonly<Color32[]>, start: number, length: number): void;
    SetColors(inColors: Readonly<Color32[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    /**
     * Set the per-vertex colors of the Mesh.
     * @param inColors Per-vertex colors.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetColors.html | Mesh.SetColors}
     */
    SetColors(inColors: Readonly<Color32[]>): void;
    /**
     * Sets the per-vertex colors of the Mesh, using a part of the input array.
     * @param inColors Per-vertex colors.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetColors.html | Mesh.SetColors}
     */
    SetColors(inColors: Readonly<Color32[]>, start: number, length: number): void;
    /**
     * Sets the per-vertex colors of the Mesh, using a part of the input array.
     * @param inColors Per-vertex colors.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetColors.html | Mesh.SetColors}
     */
    SetColors(inColors: Readonly<Color32[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    SetColors<T>(inColors: Readonly<T[]>): void;
    SetColors<T>(inColors: Readonly<T[]>, start: number, length: number): void;
    SetColors<T>(inColors: Readonly<T[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    SetIndexBufferData<T>(data: Readonly<T[]>, dataStart: number, meshBufferStart: number, count: number, flags: MeshUpdateFlags): void;
    SetIndexBufferData<T>(data: Readonly<T[]>, dataStart: number, meshBufferStart: number, count: number, flags: MeshUpdateFlags): void;
    SetIndexBufferData<T>(data: Readonly<T[]>, dataStart: number, meshBufferStart: number, count: number, flags: MeshUpdateFlags): void;
    /**
     * Sets the index buffer size and format.
     * @param indexCount Size of index buffer.
     * @param format Format of the indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetIndexBufferParams.html | Mesh.SetIndexBufferParams}
     */
    SetIndexBufferParams(indexCount: number, format: IndexFormat): void;
    /**
     * Sets the index buffer for the sub-mesh.
     * @param indices The array of indices that define the mesh faces.
     * @param topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
     * @param submesh The sub-mesh to modify.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetIndices.html | Mesh.SetIndices}
     */
    SetIndices(indices: Readonly<number[]>, topology: MeshTopology, submesh: number): void;
    /**
     * Sets the index buffer for the sub-mesh.
     * @param indices The array of indices that define the mesh faces.
     * @param topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
     * @param submesh The sub-mesh to modify.
     * @param calculateBounds Calculate the bounding box of the sub-mesh after setting the indices. Unity does this by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetIndices.html | Mesh.SetIndices}
     */
    SetIndices(indices: Readonly<number[]>, topology: MeshTopology, submesh: number, calculateBounds: boolean): void;
    /**
     * Sets the index buffer for the sub-mesh.
     * @param indices The array of indices that define the mesh faces.
     * @param topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
     * @param submesh The sub-mesh to modify.
     * @param calculateBounds Calculate the bounding box of the sub-mesh after setting the indices. Unity does this by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
     * @param baseVertex Optional vertex offset that is added to all vertex indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetIndices.html | Mesh.SetIndices}
     */
    SetIndices(indices: Readonly<number[]>, topology: MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    /**
     * Sets the index buffer of a sub-mesh, using a part of the input array.
     * @param indices The array of indices that define the mesh faces.
     * @param indicesStart Index of the first element to take from the input array.
     * @param indicesLength Number of elements to take from the input array.
     * @param topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
     * @param submesh The sub-mesh to modify.
     * @param calculateBounds Calculate the bounding box of the sub-mesh after setting the indices. Unity does this by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
     * @param baseVertex Optional vertex offset that is added to all vertex indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetIndices.html | Mesh.SetIndices}
     */
    SetIndices(indices: Readonly<number[]>, indicesStart: number, indicesLength: number, topology: MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    /**
     * Sets the index buffer for the sub-mesh.
     * @param indices The array of indices that define the mesh faces.
     * @param topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
     * @param submesh The sub-mesh to modify.
     * @param calculateBounds Calculate the bounding box of the sub-mesh after setting the indices. Unity does this by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
     * @param baseVertex Optional vertex offset that is added to all vertex indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetIndices.html | Mesh.SetIndices}
     */
    SetIndices(indices: Readonly<number[]>, topology: MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    /**
     * Sets the index buffer of a sub-mesh, using a part of the input array.
     * @param indices The array of indices that define the mesh faces.
     * @param indicesStart Index of the first element to take from the input array.
     * @param indicesLength Number of elements to take from the input array.
     * @param topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
     * @param submesh The sub-mesh to modify.
     * @param calculateBounds Calculate the bounding box of the sub-mesh after setting the indices. Unity does this by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
     * @param baseVertex Optional vertex offset that is added to all vertex indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetIndices.html | Mesh.SetIndices}
     */
    SetIndices(indices: Readonly<number[]>, indicesStart: number, indicesLength: number, topology: MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetIndices<T>(indices: Readonly<T[]>, topology: MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetIndices<T>(indices: Readonly<T[]>, indicesStart: number, indicesLength: number, topology: MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetIndices(indices: Readonly<number[]>, topology: MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetIndices(indices: Readonly<number[]>, indicesStart: number, indicesLength: number, topology: MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetIndices(indices: Readonly<number[]>, topology: MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetIndices(indices: Readonly<number[]>, indicesStart: number, indicesLength: number, topology: MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetNormals(inNormals: Readonly<Vector3[]>): void;
    SetNormals(inNormals: Readonly<Vector3[]>, start: number, length: number): void;
    SetNormals(inNormals: Readonly<Vector3[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    /**
     * Set the normals of the Mesh.
     * @param inNormals Per-vertex normals.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetNormals.html | Mesh.SetNormals}
     */
    SetNormals(inNormals: Readonly<Vector3[]>): void;
    /**
     * Sets the vertex normals of the Mesh, using a part of the input array.
     * @param inNormals Per-vertex normals.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetNormals.html | Mesh.SetNormals}
     */
    SetNormals(inNormals: Readonly<Vector3[]>, start: number, length: number): void;
    /**
     * Sets the vertex normals of the Mesh, using a part of the input array.
     * @param inNormals Per-vertex normals.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetNormals.html | Mesh.SetNormals}
     */
    SetNormals(inNormals: Readonly<Vector3[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    SetNormals<T>(inNormals: Readonly<T[]>): void;
    SetNormals<T>(inNormals: Readonly<T[]>, start: number, length: number): void;
    SetNormals<T>(inNormals: Readonly<T[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    /**
     * Sets the information about a sub-mesh of the Mesh.
     * @param index Sub-mesh index. See subMeshCount. Out of range indices throw an exception.
     * @param desc Sub-mesh data.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetSubMesh.html | Mesh.SetSubMesh}
     */
    SetSubMesh(index: number, desc: SubMeshDescriptor, flags: MeshUpdateFlags): void;
    /**
     * Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.
     * @param desc An array or list of sub-mesh data descriptors.
     * @param start Index of the first element to take from the array or list in desc.
     * @param count Number of elements to take from the array or list in desc.
     * @param flags (Optional) Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetSubMeshes.html | Mesh.SetSubMeshes}
     */
    SetSubMeshes(desc: Readonly<SubMeshDescriptor[]>, start: number, count: number, flags: MeshUpdateFlags): void;
    /**
     * Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.
     * @param desc An array or list of sub-mesh data descriptors.
     * @param flags (Optional) Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetSubMeshes.html | Mesh.SetSubMeshes}
     */
    SetSubMeshes(desc: Readonly<SubMeshDescriptor[]>, flags: MeshUpdateFlags): void;
    SetSubMeshes(desc: Readonly<SubMeshDescriptor[]>, start: number, count: number, flags: MeshUpdateFlags): void;
    SetSubMeshes(desc: Readonly<SubMeshDescriptor[]>, flags: MeshUpdateFlags): void;
    SetSubMeshes<T>(desc: Readonly<T[]>, start: number, count: number, flags: MeshUpdateFlags): void;
    SetSubMeshes<T>(desc: Readonly<T[]>, flags: MeshUpdateFlags): void;
    SetTangents(inTangents: Readonly<Vector4[]>): void;
    SetTangents(inTangents: Readonly<Vector4[]>, start: number, length: number): void;
    SetTangents(inTangents: Readonly<Vector4[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    /**
     * Set the tangents of the Mesh.
     * @param inTangents Per-vertex tangents.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetTangents.html | Mesh.SetTangents}
     */
    SetTangents(inTangents: Readonly<Vector4[]>): void;
    /**
     * Sets the tangents of the Mesh, using a part of the input array.
     * @param inTangents Per-vertex tangents.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetTangents.html | Mesh.SetTangents}
     */
    SetTangents(inTangents: Readonly<Vector4[]>, start: number, length: number): void;
    /**
     * Sets the tangents of the Mesh, using a part of the input array.
     * @param inTangents Per-vertex tangents.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetTangents.html | Mesh.SetTangents}
     */
    SetTangents(inTangents: Readonly<Vector4[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    SetTangents<T>(inTangents: Readonly<T[]>): void;
    SetTangents<T>(inTangents: Readonly<T[]>, start: number, length: number): void;
    SetTangents<T>(inTangents: Readonly<T[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    /**
     * Sets the triangle list for the sub-mesh.
     * @param triangles The list of indices that define the triangles.
     * @param submesh The sub-mesh to modify.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetTriangles.html | Mesh.SetTriangles}
     */
    SetTriangles(triangles: Readonly<number[]>, submesh: number): void;
    /**
     * Sets the triangle list for the sub-mesh.
     * @param triangles The list of indices that define the triangles.
     * @param submesh The sub-mesh to modify.
     * @param calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetTriangles.html | Mesh.SetTriangles}
     */
    SetTriangles(triangles: Readonly<number[]>, submesh: number, calculateBounds: boolean): void;
    /**
     * Sets the triangle list for the sub-mesh.
     * @param triangles The list of indices that define the triangles.
     * @param submesh The sub-mesh to modify.
     * @param calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
     * @param baseVertex Optional vertex offset that is added to all triangle vertex indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetTriangles.html | Mesh.SetTriangles}
     */
    SetTriangles(triangles: Readonly<number[]>, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    /**
     * Sets the triangle list of the Mesh, using a part of the input array.
     * @param triangles The list of indices that define the triangles.
     * @param trianglesStart Index of the first element to take from the input array.
     * @param trianglesLength Number of elements to take from the input array.
     * @param submesh The sub-mesh to modify.
     * @param calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
     * @param baseVertex Optional vertex offset that is added to all triangle vertex indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetTriangles.html | Mesh.SetTriangles}
     */
    SetTriangles(triangles: Readonly<number[]>, trianglesStart: number, trianglesLength: number, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    /**
     * Sets the triangle list for the sub-mesh.
     * @param triangles The list of indices that define the triangles.
     * @param submesh The sub-mesh to modify.
     * @param calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
     * @param baseVertex Optional vertex offset that is added to all triangle vertex indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetTriangles.html | Mesh.SetTriangles}
     */
    SetTriangles(triangles: Readonly<number[]>, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    /**
     * Sets the triangle list of the Mesh, using a part of the input array.
     * @param triangles The list of indices that define the triangles.
     * @param trianglesStart Index of the first element to take from the input array.
     * @param trianglesLength Number of elements to take from the input array.
     * @param submesh The sub-mesh to modify.
     * @param calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
     * @param baseVertex Optional vertex offset that is added to all triangle vertex indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetTriangles.html | Mesh.SetTriangles}
     */
    SetTriangles(triangles: Readonly<number[]>, trianglesStart: number, trianglesLength: number, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetTriangles(triangles: Readonly<number[]>, submesh: number): void;
    SetTriangles(triangles: Readonly<number[]>, submesh: number, calculateBounds: boolean): void;
    SetTriangles(triangles: Readonly<number[]>, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetTriangles(triangles: Readonly<number[]>, trianglesStart: number, trianglesLength: number, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetTriangles(triangles: Readonly<number[]>, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetTriangles(triangles: Readonly<number[]>, trianglesStart: number, trianglesLength: number, submesh: number, calculateBounds: boolean, baseVertex: number): void;
    SetUVs(channel: number, uvs: Readonly<Vector2[]>): void;
    SetUVs(channel: number, uvs: Readonly<Vector3[]>): void;
    SetUVs(channel: number, uvs: Readonly<Vector4[]>): void;
    SetUVs(channel: number, uvs: Readonly<Vector2[]>, start: number, length: number): void;
    SetUVs(channel: number, uvs: Readonly<Vector2[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    SetUVs(channel: number, uvs: Readonly<Vector3[]>, start: number, length: number): void;
    SetUVs(channel: number, uvs: Readonly<Vector3[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    SetUVs(channel: number, uvs: Readonly<Vector4[]>, start: number, length: number): void;
    SetUVs(channel: number, uvs: Readonly<Vector4[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    /**
     * Sets the texture coordinates (UVs) stored in a given channel.
     * @param channel The channel, in [0..7] range.
     * @param uvs The UV data to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetUVs.html | Mesh.SetUVs}
     */
    SetUVs(channel: number, uvs: Readonly<Vector2[]>): void;
    /**
     * Sets the texture coordinates (UVs) stored in a given channel.
     * @param channel The channel, in [0..7] range.
     * @param uvs The UV data to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetUVs.html | Mesh.SetUVs}
     */
    SetUVs(channel: number, uvs: Readonly<Vector3[]>): void;
    /**
     * Sets the texture coordinates (UVs) stored in a given channel.
     * @param channel The channel, in [0..7] range.
     * @param uvs The UV data to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetUVs.html | Mesh.SetUVs}
     */
    SetUVs(channel: number, uvs: Readonly<Vector4[]>): void;
    /**
     * Sets the UVs of the Mesh, using a part of the input array.
     * @param channel The UV channel, in [0..7] range.
     * @param uvs UVs to set for the given index.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetUVs.html | Mesh.SetUVs}
     */
    SetUVs(channel: number, uvs: Readonly<Vector2[]>, start: number, length: number): void;
    /**
     * Sets the UVs of the Mesh, using a part of the input array.
     * @param channel The UV channel, in [0..7] range.
     * @param uvs UVs to set for the given index.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetUVs.html | Mesh.SetUVs}
     */
    SetUVs(channel: number, uvs: Readonly<Vector2[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    /**
     * Sets the UVs of the Mesh, using a part of the input array.
     * @param channel The UV channel, in [0..7] range.
     * @param uvs UVs to set for the given index.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetUVs.html | Mesh.SetUVs}
     */
    SetUVs(channel: number, uvs: Readonly<Vector3[]>, start: number, length: number): void;
    /**
     * Sets the UVs of the Mesh, using a part of the input array.
     * @param channel The UV channel, in [0..7] range.
     * @param uvs UVs to set for the given index.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetUVs.html | Mesh.SetUVs}
     */
    SetUVs(channel: number, uvs: Readonly<Vector3[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    /**
     * Sets the UVs of the Mesh, using a part of the input array.
     * @param channel The UV channel, in [0..7] range.
     * @param uvs UVs to set for the given index.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetUVs.html | Mesh.SetUVs}
     */
    SetUVs(channel: number, uvs: Readonly<Vector4[]>, start: number, length: number): void;
    /**
     * Sets the UVs of the Mesh, using a part of the input array.
     * @param channel The UV channel, in [0..7] range.
     * @param uvs UVs to set for the given index.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetUVs.html | Mesh.SetUVs}
     */
    SetUVs(channel: number, uvs: Readonly<Vector4[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    SetUVs<T>(channel: number, uvs: Readonly<T[]>): void;
    SetUVs<T>(channel: number, uvs: Readonly<T[]>, start: number, length: number): void;
    SetUVs<T>(channel: number, uvs: Readonly<T[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    SetVertexBufferData<T>(data: Readonly<T[]>, dataStart: number, meshBufferStart: number, count: number, stream: number, flags: MeshUpdateFlags): void;
    SetVertexBufferData<T>(data: Readonly<T[]>, dataStart: number, meshBufferStart: number, count: number, stream: number, flags: MeshUpdateFlags): void;
    SetVertexBufferData<T>(data: Readonly<T[]>, dataStart: number, meshBufferStart: number, count: number, stream: number, flags: MeshUpdateFlags): void;
    /**
     * Sets the vertex buffer size and layout.
     * @param vertexCount The number of vertices in the Mesh.
     * @param attributes Layout of the vertex data -- which attributes are present, their data types and so on.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetVertexBufferParams.html | Mesh.SetVertexBufferParams}
     */
    SetVertexBufferParams(vertexCount: number, attributes: Readonly<VertexAttributeDescriptor[]>): void;
    SetVertexBufferParams(vertexCount: number, attributes: Readonly<VertexAttributeDescriptor[]>): void;
    SetVertices(inVertices: Readonly<Vector3[]>): void;
    SetVertices(inVertices: Readonly<Vector3[]>, start: number, length: number): void;
    SetVertices(inVertices: Readonly<Vector3[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    /**
     * Assigns a new vertex positions array.
     * @param inVertices Per-vertex positions.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetVertices.html | Mesh.SetVertices}
     */
    SetVertices(inVertices: Readonly<Vector3[]>): void;
    /**
     * Sets the vertex positions of the Mesh, using a part of the input array.
     * @param inVertices Per-vertex positions.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetVertices.html | Mesh.SetVertices}
     */
    SetVertices(inVertices: Readonly<Vector3[]>, start: number, length: number): void;
    /**
     * Sets the vertex positions of the Mesh, using a part of the input array.
     * @param inVertices Per-vertex positions.
     * @param start Index of the first element to take from the input array.
     * @param length Number of elements to take from the input array.
     * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.SetVertices.html | Mesh.SetVertices}
     */
    SetVertices(inVertices: Readonly<Vector3[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    SetVertices<T>(inVertices: Readonly<T[]>): void;
    SetVertices<T>(inVertices: Readonly<T[]>, start: number, length: number): void;
    SetVertices<T>(inVertices: Readonly<T[]>, start: number, length: number, flags: MeshUpdateFlags): void;
    /**
     * Upload previously done Mesh modifications to the graphics API.
     * @param markNoLongerReadable Frees up system memory copy of mesh data when set to true.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Mesh.UploadMeshData.html | Mesh.UploadMeshData}
     */
    UploadMeshData(markNoLongerReadable: boolean): void;


}
    
    
    
interface Color32 {
    r: number;
    g: number;
    b: number;
    a: number;
    Item: number;



    Equals(other: unknown): boolean;
    Equals(other: Color32): boolean;
    GetHashCode(): number;
    /**
     * Returns a formatted string for this color.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Color32.ToString.html | Color32.ToString}
     */
    ToString(): string;
    /**
     * Returns a formatted string for this color.
     * @param format A numeric format string.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Color32.ToString.html | Color32.ToString}
     */
    ToString(format: string): string;
    /**
     * Returns a formatted string for this color.
     * @param format A numeric format string.
     * @param formatProvider An object that specifies culture-specific formatting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Color32.ToString.html | Color32.ToString}
     */
    ToString(format: string, formatProvider: IFormatProvider): string;


}
    
interface Color32Constructor {


    new(r: number, g: number, b: number, a: number): Color32;


    Lerp(a: Color32, b: Color32, t: number): Color32;
    LerpUnclamped(a: Color32, b: Color32, t: number): Color32;

}
declare const Color32: Color32Constructor;
    
interface BoneWeight {
    /**
     * Skinning weight for first bone.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoneWeight-weight0.html | BoneWeight.weight0}
     */
    weight0: number;
    /**
     * Skinning weight for second bone.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoneWeight-weight1.html | BoneWeight.weight1}
     */
    weight1: number;
    /**
     * Skinning weight for third bone.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoneWeight-weight2.html | BoneWeight.weight2}
     */
    weight2: number;
    /**
     * Skinning weight for fourth bone.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoneWeight-weight3.html | BoneWeight.weight3}
     */
    weight3: number;
    /**
     * Index of first bone.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoneWeight-boneIndex0.html | BoneWeight.boneIndex0}
     */
    boneIndex0: number;
    /**
     * Index of second bone.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoneWeight-boneIndex1.html | BoneWeight.boneIndex1}
     */
    boneIndex1: number;
    /**
     * Index of third bone.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoneWeight-boneIndex2.html | BoneWeight.boneIndex2}
     */
    boneIndex2: number;
    /**
     * Index of fourth bone.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoneWeight-boneIndex3.html | BoneWeight.boneIndex3}
     */
    boneIndex3: number;



    Equals(other: unknown): boolean;
    Equals(other: BoneWeight): boolean;
    GetHashCode(): number;


}
    
interface CombineInstance {
    /**
     * Mesh to combine.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CombineInstance-mesh.html | CombineInstance.mesh}
     */
    mesh: Mesh;
    /**
     * Sub-Mesh index of the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CombineInstance-subMeshIndex.html | CombineInstance.subMeshIndex}
     */
    subMeshIndex: number;
    /**
     * Matrix to transform the Mesh with before combining. Refer to Mesh.CombineMeshes for an example.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CombineInstance-transform.html | CombineInstance.transform}
     */
    transform: Matrix4x4;
    /**
     * The baked lightmap UV scale and offset applied to the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CombineInstance-lightmapScaleOffset.html | CombineInstance.lightmapScaleOffset}
     */
    lightmapScaleOffset: Vector4;
    /**
     * The real-time lightmap UV scale and offset applied to the Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CombineInstance-realtimeLightmapScaleOffset.html | CombineInstance.realtimeLightmapScaleOffset}
     */
    realtimeLightmapScaleOffset: Vector4;





}
    
interface BoneWeight1 {
    /**
     * Skinning weight for bone.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoneWeight1-weight.html | BoneWeight1.weight}
     */
    weight: number;
    /**
     * Index of bone.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoneWeight1-boneIndex.html | BoneWeight1.boneIndex}
     */
    boneIndex: number;



    Equals(other: unknown): boolean;
    Equals(other: BoneWeight1): boolean;
    GetHashCode(): number;


}
    
interface GraphicsBuffer {
    /**
     * Number of elements in the buffer (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer-count.html | GraphicsBuffer.count}
     */
    readonly count: number;
    /**
     * Size of one element in the buffer. For index buffers, this must be either 2 or 4 bytes (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer-stride.html | GraphicsBuffer.stride}
     */
    readonly stride: number;
    /**
     * Target, which specifies the intended target(s) of this GraphicsBuffer (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer-target.html | GraphicsBuffer.target}
     */
    readonly target: Target;
    /**
     * The flags that specify how this GraphicsBuffer can be used or updated (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer-usageFlags.html | GraphicsBuffer.usageFlags}
     */
    readonly usageFlags: UsageFlags;
    /**
     * The internal handle of this GraphicsBuffer. Only valid until the buffer is disposed of. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer-bufferHandle.html | GraphicsBuffer.bufferHandle}
     */
    readonly bufferHandle: GraphicsBufferHandle;
    /**
     * The debug label for the graphics buffer (setter only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer-name.html | GraphicsBuffer.name}
     */
    name: string;



    Dispose(): void;
    /**
     * Read data values from the buffer into an array. The array can only use &lt;a href=&quot;https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types&quot;&gt;blittable&lt;a&gt; types.
     * @param data An array to receive the data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer.GetData.html | GraphicsBuffer.GetData}
     */
    GetData(data: Array): void;
    /**
     * Read data values from the buffer into an array. The array can only use &lt;a href=&quot;https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types&quot;&gt;blittable&lt;a&gt; types.
     * @param data An array to receive the data.
     * @param managedBufferStartIndex The first element index in data where retrieved elements are copied.
     * @param computeBufferStartIndex The first element index of the buffer from which elements are read.
     * @param count The number of elements to retrieve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer.GetData.html | GraphicsBuffer.GetData}
     */
    GetData(data: Array, managedBufferStartIndex: number, computeBufferStartIndex: number, count: number): void;
    /**
     * Retrieve a native (underlying graphics API) pointer to the buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer.GetNativeBufferPtr.html | GraphicsBuffer.GetNativeBufferPtr}
     */
    GetNativeBufferPtr(): IntPtr;
    /**
     * Returns true if this graphics buffer is valid, or false otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer.IsValid.html | GraphicsBuffer.IsValid}
     */
    IsValid(): boolean;
    /**
     * Begins a write operation to the buffer
     * @param bufferStartIndex The index of an element where the write operation begins.
     * @param count Maximum number of elements which will be written
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer.LockBufferForWrite.html | GraphicsBuffer.LockBufferForWrite}
     */
    LockBufferForWrite<T>(bufferStartIndex: number, count: number): Readonly<T[]>;
    /**
     * Release a Graphics Buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer.Release.html | GraphicsBuffer.Release}
     */
    Release(): void;
    /**
     * Sets counter value of append/consume buffer.
     * @param counterValue Value of the append/consume counter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer.SetCounterValue.html | GraphicsBuffer.SetCounterValue}
     */
    SetCounterValue(counterValue: number): void;
    /**
     * Set the buffer with values from an array.
     * @param data Array of values to fill the buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer.SetData.html | GraphicsBuffer.SetData}
     */
    SetData(data: Array): void;
    SetData<T>(data: Readonly<T[]>): void;
    SetData<T>(data: Readonly<T[]>): void;
    /**
     * Partial copy of data values from an array into the buffer.
     * @param data Array of values to fill the buffer.
     * @param managedBufferStartIndex The first element index in data to copy to the graphics buffer.
     * @param graphicsBufferStartIndex The first element index in the graphics buffer to receive the data.
     * @param count The number of elements to copy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer.SetData.html | GraphicsBuffer.SetData}
     */
    SetData(data: Array, managedBufferStartIndex: number, graphicsBufferStartIndex: number, count: number): void;
    SetData<T>(data: Readonly<T[]>, managedBufferStartIndex: number, graphicsBufferStartIndex: number, count: number): void;
    SetData<T>(data: Readonly<T[]>, nativeBufferStartIndex: number, graphicsBufferStartIndex: number, count: number): void;
    /**
     * Ends a write operation to the buffer
     * @param countWritten Number of elements written to the buffer. Counted from the first element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GraphicsBuffer.UnlockBufferAfterWrite.html | GraphicsBuffer.UnlockBufferAfterWrite}
     */
    UnlockBufferAfterWrite<T>(countWritten: number): void;


}
    
interface GraphicsBufferHandle {
    readonly value: number;



    CompareTo(other: GraphicsBufferHandle): number;
    Equals(obj: unknown): boolean;
    Equals(other: GraphicsBufferHandle): boolean;
    GetHashCode(): number;


}
    
interface ComputeBuffer {
    /**
     * Number of elements in the buffer (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer-count.html | ComputeBuffer.count}
     */
    readonly count: number;
    /**
     * Size of one element in the buffer in bytes (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer-stride.html | ComputeBuffer.stride}
     */
    readonly stride: number;
    /**
     * The debug label for the compute buffer (setter only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer-name.html | ComputeBuffer.name}
     */
    name: string;



    /**
     * Begins a write operation to the buffer
     * @param computeBufferStartIndex Offset in number of elements to which the write operation will occur
     * @param count Maximum number of elements which will be written
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer.BeginWrite.html | ComputeBuffer.BeginWrite}
     */
    BeginWrite<T>(computeBufferStartIndex: number, count: number): Readonly<T[]>;
    Dispose(): void;
    /**
     * Ends a write operation to the buffer
     * @param countWritten Number of elements written to the buffer. Counted from the first element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer.EndWrite.html | ComputeBuffer.EndWrite}
     */
    EndWrite<T>(countWritten: number): void;
    /**
     * Read data values from the buffer into an array. The array can only use &lt;a href=&quot;https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types&quot;&gt;blittable&lt;a&gt; types.
     * @param data An array to receive the data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer.GetData.html | ComputeBuffer.GetData}
     */
    GetData(data: Array): void;
    /**
     * Partial read of data values from the buffer into an array.
     * @param data An array to receive the data.
     * @param managedBufferStartIndex The first element index in data where retrieved elements are copied.
     * @param computeBufferStartIndex The first element index of the compute buffer from which elements are read.
     * @param count The number of elements to retrieve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer.GetData.html | ComputeBuffer.GetData}
     */
    GetData(data: Array, managedBufferStartIndex: number, computeBufferStartIndex: number, count: number): void;
    /**
     * Retrieve a native (underlying graphics API) pointer to the buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer.GetNativeBufferPtr.html | ComputeBuffer.GetNativeBufferPtr}
     */
    GetNativeBufferPtr(): IntPtr;
    /**
     * Returns true if this compute buffer is valid and false otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer.IsValid.html | ComputeBuffer.IsValid}
     */
    IsValid(): boolean;
    /**
     * Release a Compute Buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer.Release.html | ComputeBuffer.Release}
     */
    Release(): void;
    /**
     * Sets counter value of append/consume buffer.
     * @param counterValue Value of the append/consume counter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer.SetCounterValue.html | ComputeBuffer.SetCounterValue}
     */
    SetCounterValue(counterValue: number): void;
    /**
     * Set the buffer with values from an array.
     * @param data Array of values to fill the buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer.SetData.html | ComputeBuffer.SetData}
     */
    SetData(data: Array): void;
    SetData<T>(data: Readonly<T[]>): void;
    SetData<T>(data: Readonly<T[]>): void;
    /**
     * Partial copy of data values from an array into the buffer.
     * @param data Array of values to fill the buffer.
     * @param managedBufferStartIndex The first element index in data to copy to the compute buffer.
     * @param computeBufferStartIndex The first element index in compute buffer to receive the data.
     * @param count The number of elements to copy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeBuffer.SetData.html | ComputeBuffer.SetData}
     */
    SetData(data: Array, managedBufferStartIndex: number, computeBufferStartIndex: number, count: number): void;
    SetData<T>(data: Readonly<T[]>, managedBufferStartIndex: number, computeBufferStartIndex: number, count: number): void;
    SetData<T>(data: Readonly<T[]>, nativeBufferStartIndex: number, computeBufferStartIndex: number, count: number): void;


}
    
interface ComputeBufferConstructor {


    new(count: number, stride: number): ComputeBuffer;
    new(count: number, stride: number, type: ComputeBufferType): ComputeBuffer;
    new(count: number, stride: number, type: ComputeBufferType, usage: ComputeBufferMode): ComputeBuffer;


    CopyCount(src: ComputeBuffer, dst: ComputeBuffer, dstOffsetBytes: number): void;

}
declare const ComputeBuffer: ComputeBufferConstructor;
    
interface GraphicsBufferConstructor {


    new(target: Target, count: number, stride: number): GraphicsBuffer;
    new(target: Target, usageFlags: UsageFlags, count: number, stride: number): GraphicsBuffer;


    CopyCount(src: ComputeBuffer, dst: ComputeBuffer, dstOffsetBytes: number): void;
    CopyCount(src: GraphicsBuffer, dst: ComputeBuffer, dstOffsetBytes: number): void;
    CopyCount(src: ComputeBuffer, dst: GraphicsBuffer, dstOffsetBytes: number): void;
    CopyCount(src: GraphicsBuffer, dst: GraphicsBuffer, dstOffsetBytes: number): void;

}
declare const GraphicsBuffer: GraphicsBufferConstructor;
    
interface BlendShapeBufferRange {
    /**
     * The index of the first blend shape vertex for the requested blend shape.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BlendShapeBufferRange-startIndex.html | BlendShapeBufferRange.startIndex}
     */
    readonly startIndex: number;
    /**
     * The index of the last blend shape vertex for the requested blend shape.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BlendShapeBufferRange-endIndex.html | BlendShapeBufferRange.endIndex}
     */
    readonly endIndex: number;





}
    
interface SubMeshDescriptor {
    /**
     * Bounding box of vertices in local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SubMeshDescriptor-bounds.html | Rendering.SubMeshDescriptor.bounds}
     */
    bounds: Bounds;
    /**
     * Face topology of this sub-mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SubMeshDescriptor-topology.html | Rendering.SubMeshDescriptor.topology}
     */
    topology: MeshTopology;
    /**
     * Starting point inside the whole Mesh index buffer where the face index data is found.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SubMeshDescriptor-indexStart.html | Rendering.SubMeshDescriptor.indexStart}
     */
    indexStart: number;
    /**
     * Index count for this sub-mesh face data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SubMeshDescriptor-indexCount.html | Rendering.SubMeshDescriptor.indexCount}
     */
    indexCount: number;
    /**
     * Offset that is added to each value in the index buffer, to compute the final vertex index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SubMeshDescriptor-baseVertex.html | Rendering.SubMeshDescriptor.baseVertex}
     */
    baseVertex: number;
    /**
     * First vertex in the index buffer for this sub-mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SubMeshDescriptor-firstVertex.html | Rendering.SubMeshDescriptor.firstVertex}
     */
    firstVertex: number;
    /**
     * Number of vertices used by the index buffer of this sub-mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SubMeshDescriptor-vertexCount.html | Rendering.SubMeshDescriptor.vertexCount}
     */
    vertexCount: number;



    ToString(): string;


}
    
interface SubMeshDescriptorConstructor {


    new(indexStart: number, indexCount: number, topology: MeshTopology): SubMeshDescriptor;



}
declare const SubMeshDescriptor: SubMeshDescriptorConstructor;
    
interface VertexAttributeDescriptor {
    /**
     * The vertex attribute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VertexAttributeDescriptor-attribute.html | Rendering.VertexAttributeDescriptor.attribute}
     */
    attribute: VertexAttribute;
    /**
     * Format of the vertex attribute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VertexAttributeDescriptor-format.html | Rendering.VertexAttributeDescriptor.format}
     */
    format: VertexAttributeFormat;
    /**
     * Dimensionality of the vertex attribute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VertexAttributeDescriptor-dimension.html | Rendering.VertexAttributeDescriptor.dimension}
     */
    dimension: number;
    /**
     * Which vertex buffer stream the attribute should be in.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VertexAttributeDescriptor-stream.html | Rendering.VertexAttributeDescriptor.stream}
     */
    stream: number;



    Equals(other: unknown): boolean;
    Equals(other: VertexAttributeDescriptor): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface VertexAttributeDescriptorConstructor {


    new(attribute: VertexAttribute, format: VertexAttributeFormat, dimension: number, stream: number): VertexAttributeDescriptor;



}
declare const VertexAttributeDescriptor: VertexAttributeDescriptorConstructor;
    
interface MeshDataArray {
    readonly Length: number;
    readonly Item: MeshData;



    Dispose(): void;


}
    
interface MeshData {
    readonly vertexCount: number;
    readonly vertexBufferCount: number;
    readonly indexFormat: IndexFormat;
    subMeshCount: number;



    GetColors(outColors: Readonly<Color[]>): void;
    GetColors(outColors: Readonly<Color32[]>): void;
    GetIndexData<T>(): Readonly<T[]>;
    GetIndices(outIndices: Readonly<number[]>, submesh: number, applyBaseVertex: boolean): void;
    GetIndices(outIndices: Readonly<number[]>, submesh: number, applyBaseVertex: boolean): void;
    GetNormals(outNormals: Readonly<Vector3[]>): void;
    GetSubMesh(index: number): SubMeshDescriptor;
    GetTangents(outTangents: Readonly<Vector4[]>): void;
    GetUVs(channel: number, outUVs: Readonly<Vector2[]>): void;
    GetUVs(channel: number, outUVs: Readonly<Vector3[]>): void;
    GetUVs(channel: number, outUVs: Readonly<Vector4[]>): void;
    GetVertexAttributeDimension(attr: VertexAttribute): number;
    GetVertexAttributeFormat(attr: VertexAttribute): VertexAttributeFormat;
    GetVertexAttributeOffset(attr: VertexAttribute): number;
    GetVertexAttributeStream(attr: VertexAttribute): number;
    GetVertexBufferStride(stream: number): number;
    GetVertexData<T>(stream: number): Readonly<T[]>;
    GetVertices(outVertices: Readonly<Vector3[]>): void;
    HasVertexAttribute(attr: VertexAttribute): boolean;
    SetIndexBufferParams(indexCount: number, format: IndexFormat): void;
    SetSubMesh(index: number, desc: SubMeshDescriptor, flags: MeshUpdateFlags): void;
    SetVertexBufferParams(vertexCount: number, attributes: Readonly<VertexAttributeDescriptor[]>): void;
    SetVertexBufferParams(vertexCount: number, attributes: Readonly<VertexAttributeDescriptor[]>): void;


}
    
interface MeshConstructor {


    new(): Mesh;


    AcquireReadOnlyMeshData(mesh: Mesh): MeshDataArray;
    AcquireReadOnlyMeshData(meshes: Readonly<Mesh[]>): MeshDataArray;
    AcquireReadOnlyMeshData(meshes: Readonly<Mesh[]>): MeshDataArray;
    AllocateWritableMeshData(meshCount: number): MeshDataArray;
    AllocateWritableMeshData(mesh: Mesh): MeshDataArray;
    AllocateWritableMeshData(meshes: Readonly<Mesh[]>): MeshDataArray;
    AllocateWritableMeshData(meshes: Readonly<Mesh[]>): MeshDataArray;
    ApplyAndDisposeWritableMeshData(data: MeshDataArray, mesh: Mesh, flags: MeshUpdateFlags): void;
    ApplyAndDisposeWritableMeshData(data: MeshDataArray, meshes: Readonly<Mesh[]>, flags: MeshUpdateFlags): void;
    ApplyAndDisposeWritableMeshData(data: MeshDataArray, meshes: Readonly<Mesh[]>, flags: MeshUpdateFlags): void;

}
declare const Mesh: MeshConstructor;
    
interface Collider2DConstructor {


    new(): Collider2D;



}
declare const Collider2D: Collider2DConstructor;
    
interface PhysicsScene2DConstructor {




    OverlapCollider(collider: Collider2D, results: Readonly<Collider2D[]>, layerMask: number): number;
    OverlapCollider(collider: Collider2D, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapCollider(collider: Collider2D, results: Readonly<Collider2D[]>): number;
    OverlapCollider(collider: Collider2D, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapCollider(position: Vector2, angle: number, collider: Collider2D, results: Readonly<Collider2D[]>): number;
    OverlapCollider(position: Vector2, angle: number, collider: Collider2D, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;

}
declare const PhysicsScene2D: PhysicsScene2DConstructor;
    
interface PhysicsJobOptions2D {
    /**
     * Should physics simulation use multithreading?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-useMultithreading.html | PhysicsJobOptions2D.useMultithreading}
     */
    useMultithreading: boolean;
    /**
     * Should physics simulation sort multi-threaded results to maintain processing order consistency?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-useConsistencySorting.html | PhysicsJobOptions2D.useConsistencySorting}
     */
    useConsistencySorting: boolean;
    /**
     * Controls the minimum number of Rigidbody2D being interpolated in each simulation job.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-interpolationPosesPerJob.html | PhysicsJobOptions2D.interpolationPosesPerJob}
     */
    interpolationPosesPerJob: number;
    /**
     * Controls the minimum number of new contacts to find in each simulation job.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-newContactsPerJob.html | PhysicsJobOptions2D.newContactsPerJob}
     */
    newContactsPerJob: number;
    /**
     * Controls the minimum number of contacts to collide in each simulation job.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-collideContactsPerJob.html | PhysicsJobOptions2D.collideContactsPerJob}
     */
    collideContactsPerJob: number;
    /**
     * Controls the minimum number of flags to be cleared in each simulation job.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-clearFlagsPerJob.html | PhysicsJobOptions2D.clearFlagsPerJob}
     */
    clearFlagsPerJob: number;
    /**
     * Controls the minimum number of bodies to be cleared in each simulation job.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-clearBodyForcesPerJob.html | PhysicsJobOptions2D.clearBodyForcesPerJob}
     */
    clearBodyForcesPerJob: number;
    /**
     * Controls the minimum number of fixtures to synchronize in the broadphase during discrete island solving in each simulation job.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-syncDiscreteFixturesPerJob.html | PhysicsJobOptions2D.syncDiscreteFixturesPerJob}
     */
    syncDiscreteFixturesPerJob: number;
    /**
     * Controls the minimum number of fixtures to synchronize in the broadphase during continuous island solving in each simulation job.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-syncContinuousFixturesPerJob.html | PhysicsJobOptions2D.syncContinuousFixturesPerJob}
     */
    syncContinuousFixturesPerJob: number;
    /**
     * Controls the minimum number of nearest contacts to find in each simulation job.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-findNearestContactsPerJob.html | PhysicsJobOptions2D.findNearestContactsPerJob}
     */
    findNearestContactsPerJob: number;
    /**
     * Controls the minimum number of trigger contacts to update in each simulation job.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-updateTriggerContactsPerJob.html | PhysicsJobOptions2D.updateTriggerContactsPerJob}
     */
    updateTriggerContactsPerJob: number;
    /**
     * The minimum threshold cost of all bodies, contacts and joints in an island during discrete island solving.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-islandSolverCostThreshold.html | PhysicsJobOptions2D.islandSolverCostThreshold}
     */
    islandSolverCostThreshold: number;
    /**
     * Scales the cost of each body during discrete island solving.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-islandSolverBodyCostScale.html | PhysicsJobOptions2D.islandSolverBodyCostScale}
     */
    islandSolverBodyCostScale: number;
    /**
     * Scales the cost of each contact during discrete island solving.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-islandSolverContactCostScale.html | PhysicsJobOptions2D.islandSolverContactCostScale}
     */
    islandSolverContactCostScale: number;
    /**
     * Scales the cost of each joint during discrete island solving.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-islandSolverJointCostScale.html | PhysicsJobOptions2D.islandSolverJointCostScale}
     */
    islandSolverJointCostScale: number;
    /**
     * Controls the minimum number of bodies to solve in each simulation job when performing island solving.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-islandSolverBodiesPerJob.html | PhysicsJobOptions2D.islandSolverBodiesPerJob}
     */
    islandSolverBodiesPerJob: number;
    /**
     * Controls the minimum number of contacts to solve in each simulation job when performing island solving.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PhysicsJobOptions2D-islandSolverContactsPerJob.html | PhysicsJobOptions2D.islandSolverContactsPerJob}
     */
    islandSolverContactsPerJob: number;





}
    
interface Physics2DConstructor {
    IgnoreRaycastLayer: number;
    DefaultRaycastLayers: number;
    AllLayers: number;
    MaxPolygonShapeVertices: number;
    /**
     * The PhysicsScene2D automatically created when Unity starts.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-defaultPhysicsScene.html | Physics2D.defaultPhysicsScene}
     */
    readonly defaultPhysicsScene: PhysicsScene2D;
    /**
     * The number of iterations of the physics solver when considering objects' velocities.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-velocityIterations.html | Physics2D.velocityIterations}
     */
    velocityIterations: number;
    /**
     * The number of iterations of the physics solver when considering objects' positions.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-positionIterations.html | Physics2D.positionIterations}
     */
    positionIterations: number;
    /**
     * Acceleration due to gravity.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-gravity.html | Physics2D.gravity}
     */
    gravity: Vector2;
    /**
     * Do raycasts detect Colliders configured as triggers?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-queriesHitTriggers.html | Physics2D.queriesHitTriggers}
     */
    queriesHitTriggers: boolean;
    /**
     * Set the raycasts or linecasts that start inside Colliders to detect or not detect those Colliders.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-queriesStartInColliders.html | Physics2D.queriesStartInColliders}
     */
    queriesStartInColliders: boolean;
    /**
     * Use this to control whether or not the appropriate OnCollisionExit2D or OnTriggerExit2D callbacks should be called when a Collider2D is disabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-callbacksOnDisable.html | Physics2D.callbacksOnDisable}
     */
    callbacksOnDisable: boolean;
    /**
     * Determines whether the garbage collector should reuse only a single instance of a Collision2D type for all collision callbacks.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-reuseCollisionCallbacks.html | Physics2D.reuseCollisionCallbacks}
     */
    reuseCollisionCallbacks: boolean;
    /**
     * Set whether to automatically sync changes to the Transform component with the physics engine.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-autoSyncTransforms.html | Physics2D.autoSyncTransforms}
     */
    autoSyncTransforms: boolean;
    /**
     * Controls when Unity executes the 2D physics simulation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-simulationMode.html | Physics2D.simulationMode}
     */
    simulationMode: SimulationMode2D;
    /**
     * The Rigidbody2D and Collider2D layers to simulate.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-simulationLayers.html | Physics2D.simulationLayers}
     */
    simulationLayers: LayerMask;
    /**
     * Whether to use simulation sub-stepping during a simulation step.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-useSubStepping.html | Physics2D.useSubStepping}
     */
    useSubStepping: boolean;
    /**
     * Whether to calculate contacts for all simulation sub-steps or only the first sub-step.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-useSubStepContacts.html | Physics2D.useSubStepContacts}
     */
    useSubStepContacts: boolean;
    /**
     * The minimum FPS allowed for a simulation step before sub-stepping will be used.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-minSubStepFPS.html | Physics2D.minSubStepFPS}
     */
    minSubStepFPS: number;
    /**
     * The maximum number of simulation sub-steps allowed per-frame when simulation sub-stepping is enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-maxSubStepCount.html | Physics2D.maxSubStepCount}
     */
    maxSubStepCount: number;
    /**
     * A set of options that control how physics operates when using the job system to multithread the physics simulation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-jobOptions.html | Physics2D.jobOptions}
     */
    jobOptions: PhysicsJobOptions2D;
    /**
     * Any collisions with a relative linear velocity below this threshold will be treated as inelastic so no bounce will occur.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-bounceThreshold.html | Physics2D.bounceThreshold}
     */
    bounceThreshold: number;
    /**
     * A threshold below which a contact is automatically disabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-contactThreshold.html | Physics2D.contactThreshold}
     */
    contactThreshold: number;
    /**
     * The maximum linear position correction used when solving constraints.  This helps to prevent overshoot.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-maxLinearCorrection.html | Physics2D.maxLinearCorrection}
     */
    maxLinearCorrection: number;
    /**
     * The maximum angular position correction used when solving constraints.  This helps to prevent overshoot.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-maxAngularCorrection.html | Physics2D.maxAngularCorrection}
     */
    maxAngularCorrection: number;
    /**
     * The maximum linear speed of a rigid-body per physics update.  Increasing this can cause numerical problems.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-maxTranslationSpeed.html | Physics2D.maxTranslationSpeed}
     */
    maxTranslationSpeed: number;
    /**
     * The maximum angular speed of a rigid-body per physics update.  Increasing this can cause numerical problems.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-maxRotationSpeed.html | Physics2D.maxRotationSpeed}
     */
    maxRotationSpeed: number;
    /**
     * The default contact offset of the newly created Colliders.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-defaultContactOffset.html | Physics2D.defaultContactOffset}
     */
    defaultContactOffset: number;
    /**
     * The scale factor that controls how fast overlaps are resolved.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-baumgarteScale.html | Physics2D.baumgarteScale}
     */
    baumgarteScale: number;
    /**
     * The scale factor that controls how fast TOI overlaps are resolved.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-baumgarteTOIScale.html | Physics2D.baumgarteTOIScale}
     */
    baumgarteTOIScale: number;
    /**
     * The time in seconds that a rigid-body must be still before it will go to sleep.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-timeToSleep.html | Physics2D.timeToSleep}
     */
    timeToSleep: number;
    /**
     * A rigid-body cannot sleep if its linear velocity is above this tolerance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-linearSleepTolerance.html | Physics2D.linearSleepTolerance}
     */
    linearSleepTolerance: number;
    /**
     * A Rigidbody cannot sleep if its angular velocity is above this tolerance threshold.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Physics2D-angularSleepTolerance.html | Physics2D.angularSleepTolerance}
     */
    angularSleepTolerance: number;


    new(): Physics2D;


    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2): RaycastHit2D;
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number): RaycastHit2D;
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number, layerMask: number): RaycastHit2D;
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number, layerMask: number, minDepth: number): RaycastHit2D;
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): RaycastHit2D;
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    BoxCast(origin: Vector2, size: Vector2, angle: number, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    BoxCastAll(origin: Vector2, size: Vector2, angle: number, direction: Vector2): Readonly<RaycastHit2D[]>;
    BoxCastAll(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number): Readonly<RaycastHit2D[]>;
    BoxCastAll(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number, layerMask: number): Readonly<RaycastHit2D[]>;
    BoxCastAll(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number, layerMask: number, minDepth: number): Readonly<RaycastHit2D[]>;
    BoxCastAll(origin: Vector2, size: Vector2, angle: number, direction: Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): Readonly<RaycastHit2D[]>;
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2): RaycastHit2D;
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number): RaycastHit2D;
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number, layerMask: number): RaycastHit2D;
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number, layerMask: number, minDepth: number): RaycastHit2D;
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): RaycastHit2D;
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    CapsuleCast(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    CapsuleCastAll(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2): Readonly<RaycastHit2D[]>;
    CapsuleCastAll(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number): Readonly<RaycastHit2D[]>;
    CapsuleCastAll(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number, layerMask: number): Readonly<RaycastHit2D[]>;
    CapsuleCastAll(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number, layerMask: number, minDepth: number): Readonly<RaycastHit2D[]>;
    CapsuleCastAll(origin: Vector2, size: Vector2, capsuleDirection: CapsuleDirection2D, angle: number, direction: Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): Readonly<RaycastHit2D[]>;
    CircleCast(origin: Vector2, radius: number, direction: Vector2): RaycastHit2D;
    CircleCast(origin: Vector2, radius: number, direction: Vector2, distance: number): RaycastHit2D;
    CircleCast(origin: Vector2, radius: number, direction: Vector2, distance: number, layerMask: number): RaycastHit2D;
    CircleCast(origin: Vector2, radius: number, direction: Vector2, distance: number, layerMask: number, minDepth: number): RaycastHit2D;
    CircleCast(origin: Vector2, radius: number, direction: Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): RaycastHit2D;
    CircleCast(origin: Vector2, radius: number, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    CircleCast(origin: Vector2, radius: number, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    CircleCast(origin: Vector2, radius: number, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    CircleCastAll(origin: Vector2, radius: number, direction: Vector2): Readonly<RaycastHit2D[]>;
    CircleCastAll(origin: Vector2, radius: number, direction: Vector2, distance: number): Readonly<RaycastHit2D[]>;
    CircleCastAll(origin: Vector2, radius: number, direction: Vector2, distance: number, layerMask: number): Readonly<RaycastHit2D[]>;
    CircleCastAll(origin: Vector2, radius: number, direction: Vector2, distance: number, layerMask: number, minDepth: number): Readonly<RaycastHit2D[]>;
    CircleCastAll(origin: Vector2, radius: number, direction: Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): Readonly<RaycastHit2D[]>;
    ClosestPoint(position: Vector2, collider: Collider2D): Vector2;
    ClosestPoint(position: Vector2, rigidbody: Rigidbody2D): Vector2;
    Distance(colliderA: Collider2D, colliderB: Collider2D): ColliderDistance2D;
    Distance(colliderA: Collider2D, positionA: Vector2, angleA: number, colliderB: Collider2D, positionB: Vector2, angleB: number): ColliderDistance2D;
    GetContacts(collider1: Collider2D, collider2: Collider2D, contactFilter: ContactFilter2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(collider: Collider2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(collider: Collider2D, contactFilter: ContactFilter2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(collider: Collider2D, colliders: Readonly<Collider2D[]>): number;
    GetContacts(collider: Collider2D, contactFilter: ContactFilter2D, colliders: Readonly<Collider2D[]>): number;
    GetContacts(rigidbody: Rigidbody2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(rigidbody: Rigidbody2D, contactFilter: ContactFilter2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(rigidbody: Rigidbody2D, colliders: Readonly<Collider2D[]>): number;
    GetContacts(rigidbody: Rigidbody2D, contactFilter: ContactFilter2D, colliders: Readonly<Collider2D[]>): number;
    GetContacts(collider1: Collider2D, collider2: Collider2D, contactFilter: ContactFilter2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(collider: Collider2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(collider: Collider2D, contactFilter: ContactFilter2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(collider: Collider2D, colliders: Readonly<Collider2D[]>): number;
    GetContacts(collider: Collider2D, contactFilter: ContactFilter2D, colliders: Readonly<Collider2D[]>): number;
    GetContacts(rigidbody: Rigidbody2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(rigidbody: Rigidbody2D, contactFilter: ContactFilter2D, contacts: Readonly<ContactPoint2D[]>): number;
    GetContacts(rigidbody: Rigidbody2D, colliders: Readonly<Collider2D[]>): number;
    GetContacts(rigidbody: Rigidbody2D, contactFilter: ContactFilter2D, colliders: Readonly<Collider2D[]>): number;
    GetIgnoreCollision(collider1: Collider2D, collider2: Collider2D): boolean;
    GetIgnoreLayerCollision(layer1: number, layer2: number): boolean;
    GetLayerCollisionMask(layer: number): number;
    GetRayIntersection(ray: Ray): RaycastHit2D;
    GetRayIntersection(ray: Ray, distance: number): RaycastHit2D;
    GetRayIntersection(ray: Ray, distance: number, layerMask: number): RaycastHit2D;
    GetRayIntersection(ray: Ray, distance: number, results: Readonly<RaycastHit2D[]>, layerMask: number): number;
    GetRayIntersectionAll(ray: Ray): Readonly<RaycastHit2D[]>;
    GetRayIntersectionAll(ray: Ray, distance: number): Readonly<RaycastHit2D[]>;
    GetRayIntersectionAll(ray: Ray, distance: number, layerMask: number): Readonly<RaycastHit2D[]>;
    GetRayIntersectionNonAlloc(ray: Ray, results: Readonly<RaycastHit2D[]>, distance: number, layerMask: number): number;
    IgnoreCollision(collider1: Collider2D, collider2: Collider2D): void;
    IgnoreCollision(collider1: Collider2D, collider2: Collider2D, ignore: boolean): void;
    IgnoreLayerCollision(layer1: number, layer2: number): void;
    IgnoreLayerCollision(layer1: number, layer2: number, ignore: boolean): void;
    IsTouching(collider1: Collider2D, collider2: Collider2D): boolean;
    IsTouching(collider1: Collider2D, collider2: Collider2D, contactFilter: ContactFilter2D): boolean;
    IsTouching(collider: Collider2D, contactFilter: ContactFilter2D): boolean;
    IsTouchingLayers(collider: Collider2D): boolean;
    IsTouchingLayers(collider: Collider2D, layerMask: number): boolean;
    Linecast(start: Vector2, end: Vector2): RaycastHit2D;
    Linecast(start: Vector2, end: Vector2, layerMask: number): RaycastHit2D;
    Linecast(start: Vector2, end: Vector2, layerMask: number, minDepth: number): RaycastHit2D;
    Linecast(start: Vector2, end: Vector2, layerMask: number, minDepth: number, maxDepth: number): RaycastHit2D;
    Linecast(start: Vector2, end: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    Linecast(start: Vector2, end: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    LinecastAll(start: Vector2, end: Vector2): Readonly<RaycastHit2D[]>;
    LinecastAll(start: Vector2, end: Vector2, layerMask: number): Readonly<RaycastHit2D[]>;
    LinecastAll(start: Vector2, end: Vector2, layerMask: number, minDepth: number): Readonly<RaycastHit2D[]>;
    LinecastAll(start: Vector2, end: Vector2, layerMask: number, minDepth: number, maxDepth: number): Readonly<RaycastHit2D[]>;
    OverlapArea(pointA: Vector2, pointB: Vector2): Collider2D;
    OverlapArea(pointA: Vector2, pointB: Vector2, layerMask: number): Collider2D;
    OverlapArea(pointA: Vector2, pointB: Vector2, layerMask: number, minDepth: number): Collider2D;
    OverlapArea(pointA: Vector2, pointB: Vector2, layerMask: number, minDepth: number, maxDepth: number): Collider2D;
    OverlapArea(pointA: Vector2, pointB: Vector2, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapArea(pointA: Vector2, pointB: Vector2, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapAreaAll(pointA: Vector2, pointB: Vector2): Readonly<Collider2D[]>;
    OverlapAreaAll(pointA: Vector2, pointB: Vector2, layerMask: number): Readonly<Collider2D[]>;
    OverlapAreaAll(pointA: Vector2, pointB: Vector2, layerMask: number, minDepth: number): Readonly<Collider2D[]>;
    OverlapAreaAll(pointA: Vector2, pointB: Vector2, layerMask: number, minDepth: number, maxDepth: number): Readonly<Collider2D[]>;
    OverlapBox(point: Vector2, size: Vector2, angle: number): Collider2D;
    OverlapBox(point: Vector2, size: Vector2, angle: number, layerMask: number): Collider2D;
    OverlapBox(point: Vector2, size: Vector2, angle: number, layerMask: number, minDepth: number): Collider2D;
    OverlapBox(point: Vector2, size: Vector2, angle: number, layerMask: number, minDepth: number, maxDepth: number): Collider2D;
    OverlapBox(point: Vector2, size: Vector2, angle: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapBox(point: Vector2, size: Vector2, angle: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapBoxAll(point: Vector2, size: Vector2, angle: number): Readonly<Collider2D[]>;
    OverlapBoxAll(point: Vector2, size: Vector2, angle: number, layerMask: number): Readonly<Collider2D[]>;
    OverlapBoxAll(point: Vector2, size: Vector2, angle: number, layerMask: number, minDepth: number): Readonly<Collider2D[]>;
    OverlapBoxAll(point: Vector2, size: Vector2, angle: number, layerMask: number, minDepth: number, maxDepth: number): Readonly<Collider2D[]>;
    OverlapCapsule(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number): Collider2D;
    OverlapCapsule(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, layerMask: number): Collider2D;
    OverlapCapsule(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, layerMask: number, minDepth: number): Collider2D;
    OverlapCapsule(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, layerMask: number, minDepth: number, maxDepth: number): Collider2D;
    OverlapCapsule(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapCapsule(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapCapsuleAll(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number): Readonly<Collider2D[]>;
    OverlapCapsuleAll(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, layerMask: number): Readonly<Collider2D[]>;
    OverlapCapsuleAll(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, layerMask: number, minDepth: number): Readonly<Collider2D[]>;
    OverlapCapsuleAll(point: Vector2, size: Vector2, direction: CapsuleDirection2D, angle: number, layerMask: number, minDepth: number, maxDepth: number): Readonly<Collider2D[]>;
    OverlapCircle(point: Vector2, radius: number): Collider2D;
    OverlapCircle(point: Vector2, radius: number, layerMask: number): Collider2D;
    OverlapCircle(point: Vector2, radius: number, layerMask: number, minDepth: number): Collider2D;
    OverlapCircle(point: Vector2, radius: number, layerMask: number, minDepth: number, maxDepth: number): Collider2D;
    OverlapCircle(point: Vector2, radius: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapCircle(point: Vector2, radius: number, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapCircleAll(point: Vector2, radius: number): Readonly<Collider2D[]>;
    OverlapCircleAll(point: Vector2, radius: number, layerMask: number): Readonly<Collider2D[]>;
    OverlapCircleAll(point: Vector2, radius: number, layerMask: number, minDepth: number): Readonly<Collider2D[]>;
    OverlapCircleAll(point: Vector2, radius: number, layerMask: number, minDepth: number, maxDepth: number): Readonly<Collider2D[]>;
    OverlapCollider(collider: Collider2D, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapCollider(collider: Collider2D, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapCollider(collider: Collider2D, results: Readonly<Collider2D[]>): number;
    OverlapPoint(point: Vector2): Collider2D;
    OverlapPoint(point: Vector2, layerMask: number): Collider2D;
    OverlapPoint(point: Vector2, layerMask: number, minDepth: number): Collider2D;
    OverlapPoint(point: Vector2, layerMask: number, minDepth: number, maxDepth: number): Collider2D;
    OverlapPoint(point: Vector2, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapPoint(point: Vector2, contactFilter: ContactFilter2D, results: Readonly<Collider2D[]>): number;
    OverlapPointAll(point: Vector2): Readonly<Collider2D[]>;
    OverlapPointAll(point: Vector2, layerMask: number): Readonly<Collider2D[]>;
    OverlapPointAll(point: Vector2, layerMask: number, minDepth: number): Readonly<Collider2D[]>;
    OverlapPointAll(point: Vector2, layerMask: number, minDepth: number, maxDepth: number): Readonly<Collider2D[]>;
    Raycast(origin: Vector2, direction: Vector2): RaycastHit2D;
    Raycast(origin: Vector2, direction: Vector2, distance: number): RaycastHit2D;
    Raycast(origin: Vector2, direction: Vector2, distance: number, layerMask: number): RaycastHit2D;
    Raycast(origin: Vector2, direction: Vector2, distance: number, layerMask: number, minDepth: number): RaycastHit2D;
    Raycast(origin: Vector2, direction: Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): RaycastHit2D;
    Raycast(origin: Vector2, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>): number;
    Raycast(origin: Vector2, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    Raycast(origin: Vector2, direction: Vector2, contactFilter: ContactFilter2D, results: Readonly<RaycastHit2D[]>, distance: number): number;
    RaycastAll(origin: Vector2, direction: Vector2): Readonly<RaycastHit2D[]>;
    RaycastAll(origin: Vector2, direction: Vector2, distance: number): Readonly<RaycastHit2D[]>;
    RaycastAll(origin: Vector2, direction: Vector2, distance: number, layerMask: number): Readonly<RaycastHit2D[]>;
    RaycastAll(origin: Vector2, direction: Vector2, distance: number, layerMask: number, minDepth: number): Readonly<RaycastHit2D[]>;
    RaycastAll(origin: Vector2, direction: Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): Readonly<RaycastHit2D[]>;
    RaycastNonAlloc(origin: Vector2, direction: Vector2, results: Readonly<RaycastHit2D[]>, distance: number, layerMask: number): number;
    SetLayerCollisionMask(layer: number, layerMask: number): void;
    Simulate(deltaTime: number): boolean;
    Simulate(deltaTime: number, simulationLayers: number): boolean;
    SyncTransforms(): void;

}
declare const Physics2D: Physics2DConstructor;
    
    
interface Coroutine extends YieldInstruction {





}
    
    
interface Debug {





}
    
interface StartupLog {
    timestamp: number;
    logType: LogType;
    message: string;





}
    
interface DebugConstructor {
    /**
     * Get default debug logger.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Debug-unityLogger.html | Debug.unityLogger}
     */
    readonly unityLogger: ILogger;
    /**
     * Allows you to enable or disable the developer console.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Debug-developerConsoleEnabled.html | Debug.developerConsoleEnabled}
     */
    developerConsoleEnabled: boolean;
    /**
     * Controls whether the development console is visible.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Debug-developerConsoleVisible.html | Debug.developerConsoleVisible}
     */
    developerConsoleVisible: boolean;
    /**
     * In the Build Settings dialog there is a check box called &quot;Development Build&quot;.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Debug-isDebugBuild.html | Debug.isDebugBuild}
     */
    readonly isDebugBuild: boolean;


    new(): Debug;


    Assert(condition: boolean): void;
    Assert(condition: boolean, context: Object): void;
    Assert(condition: boolean, message: unknown): void;
    Assert(condition: boolean, message: string): void;
    Assert(condition: boolean, message: unknown, context: Object): void;
    Assert(condition: boolean, message: string, context: Object): void;
    AssertFormat(condition: boolean, format: string, args: Readonly<unknown[]>): void;
    AssertFormat(condition: boolean, context: Object, format: string, args: Readonly<unknown[]>): void;
    Break(): void;
    CheckIntegrity(level: IntegrityCheckLevel): string;
    ClearDeveloperConsole(): void;
    DebugBreak(): void;
    DrawLine(start: Vector3, end: Vector3, color: Color, duration: number): void;
    DrawLine(start: Vector3, end: Vector3, color: Color): void;
    DrawLine(start: Vector3, end: Vector3): void;
    DrawLine(start: Vector3, end: Vector3, color: Color, duration: number, depthTest: boolean): void;
    DrawRay(start: Vector3, dir: Vector3, color: Color, duration: number): void;
    DrawRay(start: Vector3, dir: Vector3, color: Color): void;
    DrawRay(start: Vector3, dir: Vector3): void;
    DrawRay(start: Vector3, dir: Vector3, color: Color, duration: number, depthTest: boolean): void;
    ExtractStackTraceNoAlloc(buffer: Byte, bufferMax: number, projectFolder: string): number;
    IsValidationLevelEnabled(level: ValidationLevel): boolean;
    Log(message: unknown): void;
    Log(message: unknown, context: Object): void;
    LogAssertion(message: unknown): void;
    LogAssertion(message: unknown, context: Object): void;
    LogAssertionFormat(format: string, args: Readonly<unknown[]>): void;
    LogAssertionFormat(context: Object, format: string, args: Readonly<unknown[]>): void;
    LogError(message: unknown): void;
    LogError(message: unknown, context: Object): void;
    LogErrorFormat(format: string, args: Readonly<unknown[]>): void;
    LogErrorFormat(context: Object, format: string, args: Readonly<unknown[]>): void;
    LogException(exception: Exception): void;
    LogException(exception: Exception, context: Object): void;
    LogFormat(format: string, args: Readonly<unknown[]>): void;
    LogFormat(context: Object, format: string, args: Readonly<unknown[]>): void;
    LogFormat(logType: LogType, logOptions: LogOption, context: Object, format: string, args: Readonly<unknown[]>): void;
    LogWarning(message: unknown): void;
    LogWarning(message: unknown, context: Object): void;
    LogWarningFormat(format: string, args: Readonly<unknown[]>): void;
    LogWarningFormat(context: Object, format: string, args: Readonly<unknown[]>): void;
    RetrieveStartupLogs(): Readonly<StartupLog[]>;

}
declare const Debug: DebugConstructor;
    
interface Sprite extends Object {
    /**
     * Bounds of the Sprite, specified by its center and extents in world space units.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-bounds.html | Sprite.bounds}
     */
    readonly bounds: Bounds;
    /**
     * Location of the Sprite on the original Texture, specified in pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-rect.html | Sprite.rect}
     */
    readonly rect: Rect;
    /**
     * Returns the border sizes of the Sprite.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-border.html | Sprite.border}
     */
    readonly border: Vector4;
    /**
     * Get the reference to the used Texture. If packed this will point to the atlas, if not packed will point to the source Sprite.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-texture.html | Sprite.texture}
     */
    readonly texture: Texture2D;
    /**
     * The number of pixels in the Sprite that correspond to one unit in world space. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-pixelsPerUnit.html | Sprite.pixelsPerUnit}
     */
    readonly pixelsPerUnit: number;
    /**
     * The Variant scale of Texture used by the Sprite. This is useful to check when a Variant SpriteAtlas is being used by Sprites.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-spriteAtlasTextureScale.html | Sprite.spriteAtlasTextureScale}
     */
    readonly spriteAtlasTextureScale: number;
    /**
     * Returns the Texture that contains the alpha channel from the source Texture. Unity generates this Texture under the hood for Sprites that have alpha in the source, and need to be compressed using techniques like ETC1.

Returns NULL if there is no associated alpha Texture for the source Sprite. This is the case if the Sprite has not been setup to use ETC1 compression.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-associatedAlphaSplitTexture.html | Sprite.associatedAlphaSplitTexture}
     */
    readonly associatedAlphaSplitTexture: Texture2D;
    /**
     * Location of the Sprite's pivot point in the Rect on the original Texture, specified in pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-pivot.html | Sprite.pivot}
     */
    readonly pivot: Vector2;
    /**
     * Returns true if this Sprite is packed in an atlas.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-packed.html | Sprite.packed}
     */
    readonly packed: boolean;
    /**
     * If Sprite is packed (see Sprite.packed), returns its SpritePackingMode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-packingMode.html | Sprite.packingMode}
     */
    readonly packingMode: SpritePackingMode;
    /**
     * If Sprite is packed (see Sprite.packed), returns its SpritePackingRotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-packingRotation.html | Sprite.packingRotation}
     */
    readonly packingRotation: SpritePackingRotation;
    /**
     * Get the rectangle this Sprite uses on its Texture. Raises an exception if this Sprite is tightly packed in an atlas.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-textureRect.html | Sprite.textureRect}
     */
    readonly textureRect: Rect;
    /**
     * Gets the offset of the rectangle this Sprite uses on its Texture to the original Sprite bounds. If Sprite mesh type is FullRect, offset is zero.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-textureRectOffset.html | Sprite.textureRectOffset}
     */
    readonly textureRectOffset: Vector2;
    /**
     * Returns a copy of the array containing Sprite mesh vertex positions.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-vertices.html | Sprite.vertices}
     */
    readonly vertices: Readonly<Vector2[]>;
    /**
     * Returns a copy of the array containing Sprite mesh triangles.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-triangles.html | Sprite.triangles}
     */
    readonly triangles: Readonly<number[]>;
    /**
     * The base Texture coordinates of the Sprite mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite-uv.html | Sprite.uv}
     */
    readonly uv: Readonly<Vector2[]>;



    /**
     * Adds a ScriptableObject reference to the sprite.
     * @param obj The ScriptableObject reference to add.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite.AddScriptableObject.html | Sprite.AddScriptableObject}
     */
    AddScriptableObject(obj: ScriptableObject): boolean;
    GetPhysicsShape(shapeIdx: number, physicsShape: Readonly<Vector2[]>): number;
    /**
     * The number of physics shapes for the Sprite.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite.GetPhysicsShapeCount.html | Sprite.GetPhysicsShapeCount}
     */
    GetPhysicsShapeCount(): number;
    /**
     * Retrieves the number of points in the selected physics shape for the sprite.
     * @param shapeIdx The index of the physics shape to retrieve the number of points from.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite.GetPhysicsShapePointCount.html | Sprite.GetPhysicsShapePointCount}
     */
    GetPhysicsShapePointCount(shapeIdx: number): number;
    /**
     * Retrieves an array of ScriptableObject referenced by the sprite.
     * @param scriptableObjects The array of ScriptableObject to contain the ScriptableObjects referenced by the sprite.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite.GetScriptableObjects.html | Sprite.GetScriptableObjects}
     */
    GetScriptableObjects(scriptableObjects: Readonly<ScriptableObject[]>): number;
    /**
     * Gets the number of ScriptableObject that the sprite references.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite.GetScriptableObjectsCount.html | Sprite.GetScriptableObjectsCount}
     */
    GetScriptableObjectsCount(): number;
    /**
     * Gets the number of Secondary Textures that the Sprite is using.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite.GetSecondaryTextureCount.html | Sprite.GetSecondaryTextureCount}
     */
    GetSecondaryTextureCount(): number;
    /**
     * Retrieves an array of SecondarySpriteTexture used by the Sprite.
     * @param secondaryTexture The array of SecondarySpriteTexture to contain the Secondary Textures properties used by the Sprite.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite.GetSecondaryTextures.html | Sprite.GetSecondaryTextures}
     */
    GetSecondaryTextures(secondaryTexture: Readonly<SecondarySpriteTexture[]>): number;
    /**
     * Sets up new Sprite geometry.
     * @param vertices Array of vertex positions in Sprite Rect space.
     * @param triangles Array of sprite mesh triangle indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite.OverrideGeometry.html | Sprite.OverrideGeometry}
     */
    OverrideGeometry(vertices: Readonly<Vector2[]>, triangles: Readonly<number[]>): void;
    OverridePhysicsShape(physicsShapes: Readonly<Readonly<Vector2[]>[]>): void;
    /**
     * Removes the ScriptableObject reference from the sprite.
     * @param i The index of the ScriptableObject reference to remove.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite.RemoveScriptableObjectAt.html | Sprite.RemoveScriptableObjectAt}
     */
    RemoveScriptableObjectAt(i: number): boolean;
    /**
     * Replace the ScriptableObject reference from the sprite.
     * @param obj The new ScriptableObject to reference.
     * @param i The index of the ScriptableObject reference to be replaced.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Sprite.SetScriptableObjectAt.html | Sprite.SetScriptableObjectAt}
     */
    SetScriptableObjectAt(obj: ScriptableObject, i: number): boolean;


}
    
interface Rect {
    /**
     * The X coordinate of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-x.html | Rect.x}
     */
    x: number;
    /**
     * The Y coordinate of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-y.html | Rect.y}
     */
    y: number;
    /**
     * The X and Y position of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-position.html | Rect.position}
     */
    position: Vector2;
    /**
     * The position of the center of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-center.html | Rect.center}
     */
    center: Vector2;
    /**
     * The position of the minimum corner of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-min.html | Rect.min}
     */
    min: Vector2;
    /**
     * The position of the maximum corner of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-max.html | Rect.max}
     */
    max: Vector2;
    /**
     * The width of the rectangle, measured from the X position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-width.html | Rect.width}
     */
    width: number;
    /**
     * The height of the rectangle, measured from the Y position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-height.html | Rect.height}
     */
    height: number;
    /**
     * The width and height of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-size.html | Rect.size}
     */
    size: Vector2;
    /**
     * The minimum X coordinate of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-xMin.html | Rect.xMin}
     */
    xMin: number;
    /**
     * The minimum Y coordinate of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-yMin.html | Rect.yMin}
     */
    yMin: number;
    /**
     * The maximum X coordinate of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-xMax.html | Rect.xMax}
     */
    xMax: number;
    /**
     * The maximum Y coordinate of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-yMax.html | Rect.yMax}
     */
    yMax: number;



    /**
     * Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
     * @param point Point to test.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect.Contains.html | Rect.Contains}
     */
    Contains(point: Vector2): boolean;
    /**
     * Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
     * @param point Point to test.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect.Contains.html | Rect.Contains}
     */
    Contains(point: Vector3): boolean;
    /**
     * Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
     * @param point Point to test.
     * @param allowInverse Does the test allow the Rect's width and height to be negative?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect.Contains.html | Rect.Contains}
     */
    Contains(point: Vector3, allowInverse: boolean): boolean;
    Equals(other: unknown): boolean;
    Equals(other: Rect): boolean;
    GetHashCode(): number;
    /**
     * Returns true if the other rectangle overlaps this one. If allowInverse is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
     * @param other Other rectangle to test overlapping with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect.Overlaps.html | Rect.Overlaps}
     */
    Overlaps(other: Rect): boolean;
    /**
     * Returns true if the other rectangle overlaps this one. If allowInverse is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
     * @param other Other rectangle to test overlapping with.
     * @param allowInverse Does the test allow the widths and heights of the Rects to be negative?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect.Overlaps.html | Rect.Overlaps}
     */
    Overlaps(other: Rect, allowInverse: boolean): boolean;
    /**
     * Set components of an existing Rect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect.Set.html | Rect.Set}
     */
    Set(x: number, y: number, width: number, height: number): void;
    /**
     * Returns a formatted string for this Rect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect.ToString.html | Rect.ToString}
     */
    ToString(): string;
    /**
     * Returns a formatted string for this Rect.
     * @param format A numeric format string.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect.ToString.html | Rect.ToString}
     */
    ToString(format: string): string;
    /**
     * Returns a formatted string for this Rect.
     * @param format A numeric format string.
     * @param formatProvider An object that specifies culture-specific formatting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect.ToString.html | Rect.ToString}
     */
    ToString(format: string, formatProvider: IFormatProvider): string;


}
    
interface RectConstructor {
    /**
     * Shorthand for writing new Rect(0,0,0,0).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rect-zero.html | Rect.zero}
     */
    readonly zero: Rect;


    new(x: number, y: number, width: number, height: number): Rect;
    new(position: Vector2, size: Vector2): Rect;
    new(source: Rect): Rect;


    MinMaxRect(xmin: number, ymin: number, xmax: number, ymax: number): Rect;
    NormalizedToPoint(rectangle: Rect, normalizedRectCoordinates: Vector2): Vector2;
    PointToNormalized(rectangle: Rect, point: Vector2): Vector2;

}
declare const Rect: RectConstructor;
    
interface Texture extends Object {
    /**
     * How many mipmap levels are in this Texture (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-mipmapCount.html | Texture.mipmapCount}
     */
    readonly mipmapCount: number;
    /**
     * Returns the GraphicsFormat format or color format of a Texture object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-graphicsFormat.html | Texture.graphicsFormat}
     */
    readonly graphicsFormat: GraphicsFormat;
    /**
     * Width of the Texture in pixels (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-width.html | Texture.width}
     */
    width: number;
    /**
     * Height of the Texture in pixels (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-height.html | Texture.height}
     */
    height: number;
    /**
     * Dimensionality (type) of the Texture (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-dimension.html | Texture.dimension}
     */
    dimension: TextureDimension;
    /**
     * Whether Unity stores an additional copy of this texture's pixel data in CPU-addressable memory.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-isReadable.html | Texture.isReadable}
     */
    readonly isReadable: boolean;
    /**
     * Texture coordinate wrapping mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-wrapMode.html | Texture.wrapMode}
     */
    wrapMode: TextureWrapMode;
    /**
     * Texture U coordinate wrapping mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-wrapModeU.html | Texture.wrapModeU}
     */
    wrapModeU: TextureWrapMode;
    /**
     * Texture V coordinate wrapping mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-wrapModeV.html | Texture.wrapModeV}
     */
    wrapModeV: TextureWrapMode;
    /**
     * Texture W coordinate wrapping mode for Texture3D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-wrapModeW.html | Texture.wrapModeW}
     */
    wrapModeW: TextureWrapMode;
    /**
     * Filtering mode of the Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-filterMode.html | Texture.filterMode}
     */
    filterMode: FilterMode;
    /**
     * Defines the anisotropic filtering level of the Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-anisoLevel.html | Texture.anisoLevel}
     */
    anisoLevel: number;
    /**
     * The mipmap bias of the Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html | Texture.mipMapBias}
     */
    mipMapBias: number;
    readonly texelSize: Vector2;
    /**
     * This counter is incremented when the Texture is updated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-updateCount.html | Texture.updateCount}
     */
    readonly updateCount: number;
    /**
     * Returns true if the texture pixel data is in sRGB color space (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-isDataSRGB.html | Texture.isDataSRGB}
     */
    readonly isDataSRGB: boolean;
    /**
     * The hash value of the Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-imageContentsHash.html | Texture.imageContentsHash}
     */
    imageContentsHash: Hash128;
    /**
     * GraphicsTexture that represents the texture resource uploaded to the graphics device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-graphicsTexture.html | Texture.graphicsTexture}
     */
    readonly graphicsTexture: GraphicsTexture;



    /**
     * Retrieve a native (underlying graphics API) pointer to the Texture resource.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture.GetNativeTexturePtr.html | Texture.GetNativeTexturePtr}
     */
    GetNativeTexturePtr(): IntPtr;
    /**
     * Increment the update counter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture.IncrementUpdateCount.html | Texture.IncrementUpdateCount}
     */
    IncrementUpdateCount(): void;


}
    
interface Hash128 {
    /**
     * Returns true is the hash value is valid. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Hash128-isValid.html | Hash128.isValid}
     */
    readonly isValid: boolean;



    /**
     * Hash new input string and combine with the current hash value.
     * @param data Input data string. Note that Unity interprets the string as UTF-8 data, even if internally in C# strings are UTF-16.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Hash128.Append.html | Hash128.Append}
     */
    Append(data: string): void;
    Append<T>(data: Readonly<T[]>): void;
    Append<T>(data: Readonly<T[]>, start: number, count: number): void;
    Append<T>(data: Readonly<T[]>): void;
    Append<T>(data: Readonly<T[]>, start: number, count: number): void;
    Append<T>(data: Readonly<T[]>): void;
    Append<T>(data: Readonly<T[]>, start: number, count: number): void;
    Append<T>(val: T): void;
    /**
     * Hash new input data and combine with the current hash value.
     * @param val Input value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Hash128.Append.html | Hash128.Append}
     */
    Append(val: number): void;
    /**
     * Hash new input data and combine with the current hash value.
     * @param val Input value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Hash128.Append.html | Hash128.Append}
     */
    Append(val: number): void;
    /**
     * Hash new input data and combine with the current hash value.
     * @param data Raw data pointer, usually used with C# stackalloc data.
     * @param size Data size in bytes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Hash128.Append.html | Hash128.Append}
     */
    Append(data: Void, size: number): void;
    CompareTo(rhs: Hash128): number;
    CompareTo(obj: unknown): number;
    Equals(obj: unknown): boolean;
    Equals(obj: Hash128): boolean;
    GetHashCode(): number;
    /**
     * Convert a Hash128 to string.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Hash128.ToString.html | Hash128.ToString}
     */
    ToString(): string;


}
    
interface Hash128Constructor {


    new(u32_0: number, u32_1: number, u32_2: number, u32_3: number): Hash128;
    new(u64_0: number, u64_1: number): Hash128;


    Compute(data: string): Hash128;
    Compute<T>(data: Readonly<T[]>): Hash128;
    Compute<T>(data: Readonly<T[]>, start: number, count: number): Hash128;
    Compute<T>(data: Readonly<T[]>): Hash128;
    Compute<T>(data: Readonly<T[]>, start: number, count: number): Hash128;
    Compute<T>(data: Readonly<T[]>): Hash128;
    Compute<T>(data: Readonly<T[]>, start: number, count: number): Hash128;
    Compute<T>(val: T): Hash128;
    Compute(val: number): Hash128;
    Compute(val: number): Hash128;
    Compute(data: Void, size: number): Hash128;
    Parse(hashString: string): Hash128;

}
declare const Hash128: Hash128Constructor;
    
interface GraphicsTexture {
    /**
     * Contains all the information Unity uses to create a GraphicsTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsTexture-descriptor.html | Rendering.GraphicsTexture.descriptor}
     */
    readonly descriptor: GraphicsTextureDescriptor;
    /**
     * The current state of a GraphicsTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsTexture-state.html | Rendering.GraphicsTexture.state}
     */
    readonly state: GraphicsTextureState;



    Dispose(): void;


}
    
interface GraphicsTextureDescriptor {
    width: number;
    height: number;
    depth: number;
    arrayLength: number;
    format: GraphicsFormat;
    dimension: TextureDimension;
    mipCount: number;
    numSamples: number;
    flags: GraphicsTextureDescriptorFlags;





}
    
interface GraphicsTextureDescriptorConstructor {


    new(): GraphicsTextureDescriptor;



}
declare const GraphicsTextureDescriptor: GraphicsTextureDescriptorConstructor;
    
interface GraphicsTextureConstructor {
    /**
     * Currently active graphics texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsTexture-active.html | Rendering.GraphicsTexture.active}
     */
    active: GraphicsTexture;


    new(desc: GraphicsTextureDescriptor): GraphicsTexture;



}
declare const GraphicsTexture: GraphicsTextureConstructor;
    
interface TextureConstructor {
    readonly GenerateAllMips: number;
    anisotropicFiltering: AnisotropicFiltering;
    /**
     * The total amount of Texture memory that Unity would use if it loads all Textures at mipmap level 0.

This is a theoretical value that does not take into account any input from the streaming system or any other input, for example when you set the`Texture2D.requestedMipmapLevel` manually.

To see a Texture memory value that takes inputs into account, use `desiredTextureMemory`.

`totalTextureMemory` only includes instances of Texture2D and CubeMap Textures. This value does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-totalTextureMemory.html | Texture.totalTextureMemory}
     */
    readonly totalTextureMemory: number;
    /**
     * The total size of the Textures, in bytes, that Unity loads if there were no other constraints. Before Unity loads any Textures, it applies the which reduces the loaded Texture resolution if the Texture sizes exceed its value. The desiredTextureMemory value takes into account the mipmap levels that Unity has requested or that you have set manually.

For example, if Unity does not load a Texture at full resolution because it is far away or its requested mipmap level is greater than 0,  Unity reduces the desiredTextureMemory value to match the total memory needed.

The desiredTextureMemory value can be greater than the Texture.targetTextureMemory value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-desiredTextureMemory.html | Texture.desiredTextureMemory}
     */
    readonly desiredTextureMemory: number;
    /**
     * The total amount of Texture memory that Unity allocates to the Textures in the scene after it applies the and finishes loading Textures. `targetTextureMemory`also takes mipmap streaming settings into account. This value only includes instances of Texture2D and CubeMap Textures. This value does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-targetTextureMemory.html | Texture.targetTextureMemory}
     */
    readonly targetTextureMemory: number;
    /**
     * The amount of memory that all Textures in the scene use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-currentTextureMemory.html | Texture.currentTextureMemory}
     */
    readonly currentTextureMemory: number;
    /**
     * The amount of memory Unity allocates for non-streaming Textures in the scene. This only includes instances of Texture2D and CubeMap Textures. This does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-nonStreamingTextureMemory.html | Texture.nonStreamingTextureMemory}
     */
    readonly nonStreamingTextureMemory: number;
    /**
     * How many times has a Texture been uploaded due to Texture mipmap streaming.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-streamingMipmapUploadCount.html | Texture.streamingMipmapUploadCount}
     */
    readonly streamingMipmapUploadCount: number;
    /**
     * Number of renderers registered with the Texture streaming system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-streamingRendererCount.html | Texture.streamingRendererCount}
     */
    readonly streamingRendererCount: number;
    /**
     * Number of streaming Textures.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-streamingTextureCount.html | Texture.streamingTextureCount}
     */
    readonly streamingTextureCount: number;
    /**
     * The number of non-streaming Textures in the scene. This includes instances of Texture2D and CubeMap Textures. This does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-nonStreamingTextureCount.html | Texture.nonStreamingTextureCount}
     */
    readonly nonStreamingTextureCount: number;
    /**
     * Number of streaming Textures with outstanding mipmaps to be loaded.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-streamingTexturePendingLoadCount.html | Texture.streamingTexturePendingLoadCount}
     */
    readonly streamingTexturePendingLoadCount: number;
    /**
     * Number of streaming Textures with mipmaps currently loading.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-streamingTextureLoadingCount.html | Texture.streamingTextureLoadingCount}
     */
    readonly streamingTextureLoadingCount: number;
    /**
     * Force streaming Textures to load all mipmap levels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-streamingTextureForceLoadAll.html | Texture.streamingTextureForceLoadAll}
     */
    streamingTextureForceLoadAll: boolean;
    /**
     * This property forces the streaming Texture system to discard all unused mipmaps instead of caching them until the Texture is exceeded. This is useful when you profile or write tests to keep a predictable set of Textures in memory.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-streamingTextureDiscardUnusedMips.html | Texture.streamingTextureDiscardUnusedMips}
     */
    streamingTextureDiscardUnusedMips: boolean;
    /**
     * Allow Unity internals to perform Texture creation on any thread (rather than the dedicated render thread).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture-allowThreadedTextureCreation.html | Texture.allowThreadedTextureCreation}
     */
    allowThreadedTextureCreation: boolean;




    SetGlobalAnisotropicFilteringLimits(forcedMin: number, globalMax: number): void;
    SetStreamingTextureMaterialDebugProperties(): void;
    SetStreamingTextureMaterialDebugProperties(materialTextureSlot: number): void;

}
declare const Texture: TextureConstructor;
    
interface Texture2D extends Texture {
    /**
     * The format of the pixel data in the texture (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-format.html | Texture2D.format}
     */
    readonly format: TextureFormat;
    /**
     * The name of the texture mipmap limit group that this texture is associated with. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-mipmapLimitGroup.html | Texture2D.mipmapLimitGroup}
     */
    readonly mipmapLimitGroup: string;
    /**
     * The number of high resolution mipmap levels from the texture that Unity doesn't upload to the GPU. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-activeMipmapLimit.html | Texture2D.activeMipmapLimit}
     */
    readonly activeMipmapLimit: number;
    readonly isReadable: boolean;
    /**
     * Returns true if the VTOnly checkbox was checked when the texture was imported; otherwise returns false. For additional information, see TextureImporter.vtOnly.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-vtOnly.html | Texture2D.vtOnly}
     */
    readonly vtOnly: boolean;
    /**
     * Determines whether mipmap streaming is enabled for this Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-streamingMipmaps.html | Texture2D.streamingMipmaps}
     */
    readonly streamingMipmaps: boolean;
    /**
     * Sets the relative priority for this Texture when reducing memory size to fit within the memory budget.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-streamingMipmapsPriority.html | Texture2D.streamingMipmapsPriority}
     */
    readonly streamingMipmapsPriority: number;
    /**
     * The mipmap level to load.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-requestedMipmapLevel.html | Texture2D.requestedMipmapLevel}
     */
    requestedMipmapLevel: number;
    /**
     * Restricts the mipmap streaming system to a minimum mip level for this Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-minimumMipmapLevel.html | Texture2D.minimumMipmapLevel}
     */
    minimumMipmapLevel: number;
    /**
     * The mipmap level calculated by the streaming system, which takes into account the streaming Cameras and the location of the objects containing this Texture. This is unaffected by requestedMipmapLevel or minimumMipmapLevel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-calculatedMipmapLevel.html | Texture2D.calculatedMipmapLevel}
     */
    readonly calculatedMipmapLevel: number;
    /**
     * The mipmap level that the streaming system would load before memory budgets are applied.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-desiredMipmapLevel.html | Texture2D.desiredMipmapLevel}
     */
    readonly desiredMipmapLevel: number;
    /**
     * The mipmap level that the mipmap streaming system is in the process of loading.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-loadingMipmapLevel.html | Texture2D.loadingMipmapLevel}
     */
    readonly loadingMipmapLevel: number;
    /**
     * The mipmap level that is currently loaded by the streaming system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-loadedMipmapLevel.html | Texture2D.loadedMipmapLevel}
     */
    readonly loadedMipmapLevel: number;
    /**
     * Indicates whether this texture was imported with TextureImporter.alphaIsTransparency enabled. This setting is available only in the Editor scripts. Note that changing this setting will have no effect; it must be enabled in TextureImporter instead.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-alphaIsTransparency.html | Texture2D.alphaIsTransparency}
     */
    alphaIsTransparency: boolean;
    /**
     * This property causes a texture to ignore all texture mipmap limit settings.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-ignoreMipmapLimit.html | Texture2D.ignoreMipmapLimit}
     */
    ignoreMipmapLimit: boolean;



    /**
     * Copies changes you've made in a CPU texture to the GPU.
     * @param updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
     * @param makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.Apply.html | Texture2D.Apply}
     */
    Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
    Apply(updateMipmaps: boolean): void;
    Apply(): void;
    /**
     * Resets the minimumMipmapLevel field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.ClearMinimumMipmapLevel.html | Texture2D.ClearMinimumMipmapLevel}
     */
    ClearMinimumMipmapLevel(): void;
    /**
     * Resets the requestedMipmapLevel field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.ClearRequestedMipmapLevel.html | Texture2D.ClearRequestedMipmapLevel}
     */
    ClearRequestedMipmapLevel(): void;
    /**
     * Compress texture at runtime to DXT/BCn or ETC formats.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.Compress.html | Texture2D.Compress}
     */
    Compress(highQuality: boolean): void;
    /**
     * Copies pixel data from another texture on the CPU.
     * @param src The source texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.CopyPixels.html | Texture2D.CopyPixels}
     */
    CopyPixels(src: Texture): void;
    /**
     * Copies pixel data from another texture on the CPU.
     * @param src The source texture.
     * @param srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
     * @param srcMip The mipmap level to copy from. The range is 0 through the source texture's Texture.mipmapCount. The default value is 0.
     * @param dstMip The mipmap level to write to. The range is 0 through this texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.CopyPixels.html | Texture2D.CopyPixels}
     */
    CopyPixels(src: Texture, srcElement: number, srcMip: number, dstMip: number): void;
    /**
     * Copies pixel data from another texture on the CPU.
     * @param src The source texture.
     * @param srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
     * @param srcMip The mipmap level to copy from. The range is 0 through the source texture's Texture.mipmapCount. The default value is 0.
     * @param srcX The starting x coordinate of src to copy from. 0 is the left of the texture.
     * @param srcY The starting y coordinate of src to copy from. 0 is the bottom of the texture.
     * @param srcWidth The width of src to copy.
     * @param srcHeight The height of src to copy.
     * @param dstMip The mipmap level to write to. The range is 0 through this texture's Texture.mipmapCount. The default value is 0.
     * @param dstX The x coordinate of this texture to copy to.
     * @param dstY The y coordinate to this texture to copy to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.CopyPixels.html | Texture2D.CopyPixels}
     */
    CopyPixels(src: Texture, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dstMip: number, dstX: number, dstY: number): void;
    /**
     * Gets the pixel color at coordinates (x, y).
     * @param x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
     * @param y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetPixel.html | Texture2D.GetPixel}
     */
    GetPixel(x: number, y: number): Color;
    /**
     * Gets the pixel color at coordinates (x, y).
     * @param x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
     * @param y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
     * @param mipLevel The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetPixel.html | Texture2D.GetPixel}
     */
    GetPixel(x: number, y: number, mipLevel: number): Color;
    /**
     * Gets the filtered pixel color at the normalized coordinates (u, v).
     * @param u The u coordinate of the pixel to get.
     * @param v The v coordinate of the pixel to get.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetPixelBilinear.html | Texture2D.GetPixelBilinear}
     */
    GetPixelBilinear(u: number, v: number): Color;
    /**
     * Gets the filtered pixel color at the normalized coordinates (u, v).
     * @param u The u coordinate of the pixel to get.
     * @param v The v coordinate of the pixel to get.
     * @param mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetPixelBilinear.html | Texture2D.GetPixelBilinear}
     */
    GetPixelBilinear(u: number, v: number, mipLevel: number): Color;
    /**
     * Gets the raw data from a texture.
     * @param mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetPixelData.html | Texture2D.GetPixelData}
     */
    GetPixelData<T>(mipLevel: number): Readonly<T[]>;
    /**
     * Gets the pixel color data for part of a mipmap level as Color structs.
     * @param x The starting x position of the section to fetch.
     * @param y The starting y position of the section to fetch.
     * @param blockWidth The width of the section to fetch.
     * @param blockHeight The height of the section to fetch.
     * @param miplevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetPixels.html | Texture2D.GetPixels}
     */
    GetPixels(x: number, y: number, blockWidth: number, blockHeight: number, miplevel: number): Readonly<Color[]>;
    /**
     * Gets the pixel color data for part of a mipmap level as Color structs.
     * @param x The starting x position of the section to fetch.
     * @param y The starting y position of the section to fetch.
     * @param blockWidth The width of the section to fetch.
     * @param blockHeight The height of the section to fetch.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetPixels.html | Texture2D.GetPixels}
     */
    GetPixels(x: number, y: number, blockWidth: number, blockHeight: number): Readonly<Color[]>;
    /**
     * Gets the pixel color data for a mipmap level as Color structs.
     * @param miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetPixels.html | Texture2D.GetPixels}
     */
    GetPixels(miplevel: number): Readonly<Color[]>;
    /**
     * Gets the pixel color data for a mipmap level as Color structs.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetPixels.html | Texture2D.GetPixels}
     */
    GetPixels(): Readonly<Color[]>;
    /**
     * Gets the pixel color data for a mipmap level as Color32 structs.
     * @param miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetPixels32.html | Texture2D.GetPixels32}
     */
    GetPixels32(miplevel: number): Readonly<Color32[]>;
    /**
     * Gets the pixel color data for a mipmap level as Color32 structs.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetPixels32.html | Texture2D.GetPixels32}
     */
    GetPixels32(): Readonly<Color32[]>;
    /**
     * Gets the raw data from a texture, as a copy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetRawTextureData.html | Texture2D.GetRawTextureData}
     */
    GetRawTextureData(): Readonly<number[]>;
    /**
     * Gets the raw data from a texture, as a copy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.GetRawTextureData.html | Texture2D.GetRawTextureData}
     */
    GetRawTextureData<T>(): Readonly<T[]>;
    /**
     * Checks to see whether the mipmap level set by requestedMipmapLevel has finished loading.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.IsRequestedMipmapLevelLoaded.html | Texture2D.IsRequestedMipmapLevelLoaded}
     */
    IsRequestedMipmapLevelLoaded(): boolean;
    /**
     * Sets the raw data of an entire texture in CPU memory.
     * @param data The array of data to use.
     * @param size The size of the data in bytes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.LoadRawTextureData.html | Texture2D.LoadRawTextureData}
     */
    LoadRawTextureData(data: IntPtr, size: number): void;
    /**
     * Sets the raw data of an entire texture in CPU memory.
     * @param data The array of data to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.LoadRawTextureData.html | Texture2D.LoadRawTextureData}
     */
    LoadRawTextureData(data: Readonly<number[]>): void;
    LoadRawTextureData<T>(data: Readonly<T[]>): void;
    /**
     * Packs multiple Textures into a texture atlas.
     * @param textures Array of textures to pack into the atlas.
     * @param padding Padding in pixels between the packed textures.
     * @param maximumAtlasSize Maximum size of the resulting texture.
     * @param makeNoLongerReadable Should the texture be marked as no longer readable?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.PackTextures.html | Texture2D.PackTextures}
     */
    PackTextures(textures: Readonly<Texture2D[]>, padding: number, maximumAtlasSize: number, makeNoLongerReadable: boolean): Readonly<Rect[]>;
    PackTextures(textures: Readonly<Texture2D[]>, padding: number, maximumAtlasSize: number): Readonly<Rect[]>;
    PackTextures(textures: Readonly<Texture2D[]>, padding: number): Readonly<Rect[]>;
    /**
     * Reads pixels from the current render target and writes them to a texture.
     * @param source The region of the render target to read from.
     * @param destX The x position in the texture to write the pixels to.
     * @param destY The y position in the texture to write the pixels to.
     * @param recalculateMipMaps When the value is true, Unity automatically recalculates the mipmap for the texture after it writes the pixel data. Otherwise, Unity doesn't do this automatically.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.ReadPixels.html | Texture2D.ReadPixels}
     */
    ReadPixels(source: Rect, destX: number, destY: number, recalculateMipMaps: boolean): void;
    ReadPixels(source: Rect, destX: number, destY: number): void;
    /**
     * Reinitializes a Texture2D, making it possible for you to replace width, height, textureformat, and graphicsformat data for that texture.
     * @param width The new width of the texture.
     * @param height The new height of the texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.Reinitialize.html | Texture2D.Reinitialize}
     */
    Reinitialize(width: number, height: number): boolean;
    /**
     * Reinitializes a Texture2D, making it possible for you to replace width, height, textureformat, and graphicsformat data for that texture.
     * @param width The new width of the texture.
     * @param height The new height of the texture.
     * @param format The new format of the texture.
     * @param hasMipMap Whether the texture reserves memory for a full mipmap chain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.Reinitialize.html | Texture2D.Reinitialize}
     */
    Reinitialize(width: number, height: number, format: TextureFormat, hasMipMap: boolean): boolean;
    /**
     * Reinitializes a Texture2D, making it possible for you to replace width, height, textureformat, and graphicsformat data for that texture.
     * @param width The new width of the texture.
     * @param height The new height of the texture.
     * @param format The new format of the texture.
     * @param hasMipMap Whether the texture reserves memory for a full mipmap chain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.Reinitialize.html | Texture2D.Reinitialize}
     */
    Reinitialize(width: number, height: number, format: GraphicsFormat, hasMipMap: boolean): boolean;
    /**
     * Sets the pixel color at coordinates (x,y).
     * @param x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
     * @param y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
     * @param color The color to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.SetPixel.html | Texture2D.SetPixel}
     */
    SetPixel(x: number, y: number, color: Color): void;
    /**
     * Sets the pixel color at coordinates (x,y).
     * @param x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
     * @param y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
     * @param color The color to set.
     * @param mipLevel The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.SetPixel.html | Texture2D.SetPixel}
     */
    SetPixel(x: number, y: number, color: Color, mipLevel: number): void;
    SetPixelData<T>(data: Readonly<T[]>, mipLevel: number, sourceDataStartIndex: number): void;
    SetPixelData<T>(data: Readonly<T[]>, mipLevel: number, sourceDataStartIndex: number): void;
    /**
     * Sets the pixel colors of part of a mipmap level.
     * @param x The x coordinate to place the block of pixels at. The range is 0 through (texture width - 1).
     * @param y The y coordinate to place the block of pixels at. The range is 0 through (texture height - 1).
     * @param blockWidth The width of the block of pixels to set.
     * @param blockHeight The height of the block of pixels to set.
     * @param colors The array of pixel colours to use. This is a 2D image flattened to a 1D array. Must be blockWidth x blockHeight in length.
     * @param miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.SetPixels.html | Texture2D.SetPixels}
     */
    SetPixels(x: number, y: number, blockWidth: number, blockHeight: number, colors: Readonly<Color[]>, miplevel: number): void;
    SetPixels(x: number, y: number, blockWidth: number, blockHeight: number, colors: Readonly<Color[]>): void;
    /**
     * Sets the pixel colors of an entire mipmap level.
     * @param colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
     * @param miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.SetPixels.html | Texture2D.SetPixels}
     */
    SetPixels(colors: Readonly<Color[]>, miplevel: number): void;
    SetPixels(colors: Readonly<Color[]>): void;
    /**
     * Sets the pixel colors of an entire mipmap level.
     * @param colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
     * @param miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.SetPixels32.html | Texture2D.SetPixels32}
     */
    SetPixels32(colors: Readonly<Color32[]>, miplevel: number): void;
    /**
     * Sets the pixel colors of an entire mipmap level.
     * @param colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.SetPixels32.html | Texture2D.SetPixels32}
     */
    SetPixels32(colors: Readonly<Color32[]>): void;
    /**
     * Sets the pixel colors of part of a mipmap level.
     * @param x The x coordinate to place the block of pixels at. The range is 0 through (texture width - 1).
     * @param y The y coordinate to place the block of pixels at. The range is 0 through (texture height - 1).
     * @param blockWidth The width of the block of pixels to set.
     * @param blockHeight The height of the block of pixels to set.
     * @param colors The array of pixel colours to use. This is a 2D image flattened to a 1D array. Must be blockWidth x blockHeight in length.
     * @param miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.SetPixels32.html | Texture2D.SetPixels32}
     */
    SetPixels32(x: number, y: number, blockWidth: number, blockHeight: number, colors: Readonly<Color32[]>, miplevel: number): void;
    /**
     * Sets the pixel colors of part of a mipmap level.
     * @param x The x coordinate to place the block of pixels at. The range is 0 through (texture width - 1).
     * @param y The y coordinate to place the block of pixels at. The range is 0 through (texture height - 1).
     * @param blockWidth The width of the block of pixels to set.
     * @param blockHeight The height of the block of pixels to set.
     * @param colors The array of pixel colours to use. This is a 2D image flattened to a 1D array. Must be blockWidth x blockHeight in length.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.SetPixels32.html | Texture2D.SetPixels32}
     */
    SetPixels32(x: number, y: number, blockWidth: number, blockHeight: number, colors: Readonly<Color32[]>): void;
    /**
     * Updates Unity texture to use different native texture object.
     * @param nativeTex Native 2D texture object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D.UpdateExternalTexture.html | Texture2D.UpdateExternalTexture}
     */
    UpdateExternalTexture(nativeTex: IntPtr): void;


}
    
interface Texture2DConstructor {
    /**
     * Gets a small Texture with all white pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-whiteTexture.html | Texture2D.whiteTexture}
     */
    readonly whiteTexture: Texture2D;
    /**
     * Gets a small Texture with all black pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-blackTexture.html | Texture2D.blackTexture}
     */
    readonly blackTexture: Texture2D;
    /**
     * Gets a small Texture with all red pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-redTexture.html | Texture2D.redTexture}
     */
    readonly redTexture: Texture2D;
    /**
     * Gets a small Texture with all gray pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-grayTexture.html | Texture2D.grayTexture}
     */
    readonly grayTexture: Texture2D;
    /**
     * Gets a small Texture with all gray pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-linearGrayTexture.html | Texture2D.linearGrayTexture}
     */
    readonly linearGrayTexture: Texture2D;
    /**
     * Gets a small Texture with pixels that represent surface normal vectors at a neutral position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture2D-normalTexture.html | Texture2D.normalTexture}
     */
    readonly normalTexture: Texture2D;


    new(width: number, height: number, format: DefaultFormat, flags: TextureCreationFlags): Texture2D;
    new(width: number, height: number, format: DefaultFormat, mipCount: number, flags: TextureCreationFlags): Texture2D;
    new(width: number, height: number, format: DefaultFormat, mipCount: number, mipmapLimitGroupName: string, flags: TextureCreationFlags): Texture2D;
    new(width: number, height: number, format: DefaultFormat, mipCount: number, flags: TextureCreationFlags, mipmapLimitDescriptor: MipmapLimitDescriptor): Texture2D;
    new(width: number, height: number, format: GraphicsFormat, flags: TextureCreationFlags): Texture2D;
    new(width: number, height: number, format: GraphicsFormat, mipCount: number, flags: TextureCreationFlags): Texture2D;
    new(width: number, height: number, format: GraphicsFormat, mipCount: number, mipmapLimitGroupName: string, flags: TextureCreationFlags): Texture2D;
    new(width: number, height: number, format: GraphicsFormat, mipCount: number, flags: TextureCreationFlags, mipmapLimitDescriptor: MipmapLimitDescriptor): Texture2D;
    new(width: number, height: number, textureFormat: TextureFormat, mipCount: number, linear: boolean): Texture2D;
    new(width: number, height: number, textureFormat: TextureFormat, mipCount: number, linear: boolean, createUninitialized: boolean): Texture2D;
    new(width: number, height: number, textureFormat: TextureFormat, mipCount: number, linear: boolean, createUninitialized: boolean, mipmapLimitDescriptor: MipmapLimitDescriptor): Texture2D;
    new(width: number, height: number, textureFormat: TextureFormat, mipCount: number, linear: boolean, createUninitialized: boolean, ignoreMipmapLimit: boolean, mipmapLimitGroupName: string): Texture2D;
    new(width: number, height: number, textureFormat: TextureFormat, mipChain: boolean, linear: boolean): Texture2D;
    new(width: number, height: number, textureFormat: TextureFormat, mipChain: boolean, linear: boolean, createUninitialized: boolean): Texture2D;
    new(width: number, height: number, textureFormat: TextureFormat, mipChain: boolean): Texture2D;
    new(width: number, height: number): Texture2D;


    CreateExternalTexture(width: number, height: number, format: TextureFormat, mipChain: boolean, linear: boolean, nativeTex: IntPtr): Texture2D;
    GenerateAtlas(sizes: Readonly<Vector2[]>, padding: number, atlasSize: number, results: Readonly<Rect[]>): boolean;

}
declare const Texture2D: Texture2DConstructor;
    
interface ScriptableObject extends Object {





}
    
interface ScriptableObjectConstructor {


    new(): ScriptableObject;


    CreateInstance(className: string): ScriptableObject;
    CreateInstance(type: Type): ScriptableObject;
    CreateInstance<T extends ScriptableObject>(): T;

}
declare const ScriptableObject: ScriptableObjectConstructor;
    
interface SecondarySpriteTexture {
    name: string;
    texture: Texture2D;





}
    
interface SpriteConstructor {




    Create(texture: Texture2D, rect: Rect, pivot: Vector2, pixelsPerUnit: number, extrude: number, meshType: SpriteMeshType, border: Vector4, generateFallbackPhysicsShape: boolean): Sprite;
    Create(texture: Texture2D, rect: Rect, pivot: Vector2, pixelsPerUnit: number, extrude: number, meshType: SpriteMeshType, border: Vector4, generateFallbackPhysicsShape: boolean, secondaryTextures: Readonly<SecondarySpriteTexture[]>): Sprite;
    Create(texture: Texture2D, rect: Rect, pivot: Vector2, pixelsPerUnit: number, extrude: number, meshType: SpriteMeshType, border: Vector4): Sprite;
    Create(texture: Texture2D, rect: Rect, pivot: Vector2, pixelsPerUnit: number, extrude: number, meshType: SpriteMeshType): Sprite;
    Create(texture: Texture2D, rect: Rect, pivot: Vector2, pixelsPerUnit: number, extrude: number): Sprite;
    Create(texture: Texture2D, rect: Rect, pivot: Vector2, pixelsPerUnit: number): Sprite;
    Create(texture: Texture2D, rect: Rect, pivot: Vector2): Sprite;

}
declare const Sprite: SpriteConstructor;
    
interface TextAsset extends Object {
    /**
     * The raw bytes of the text asset. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextAsset-bytes.html | TextAsset.bytes}
     */
    readonly bytes: Readonly<number[]>;
    /**
     * The text contents of the file as a string. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextAsset-text.html | TextAsset.text}
     */
    readonly text: string;
    /**
     * The size of the text asset data in bytes. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextAsset-dataSize.html | TextAsset.dataSize}
     */
    readonly dataSize: number;



    /**
     * Gets raw text asset data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextAsset.GetData.html | TextAsset.GetData}
     */
    GetData<T>(): Readonly<T[]>;
    /**
     * Returns the contents of the TextAsset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextAsset.ToString.html | TextAsset.ToString}
     */
    ToString(): string;


}
    
interface TextAssetConstructor {


    new(): TextAsset;
    new(text: string): TextAsset;
    new(bytes: ReadOnlySpan<number>): TextAsset;



}
declare const TextAsset: TextAssetConstructor;
    
interface Resources {





}
    
interface ResourceRequest extends AsyncOperation {
    /**
     * Asset object being loaded (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ResourceRequest-asset.html | ResourceRequest.asset}
     */
    readonly asset: Object;





}
    
interface ResourceRequestConstructor {


    new(): ResourceRequest;



}
declare const ResourceRequest: ResourceRequestConstructor;
    
interface ResourcesConstructor {


    new(): Resources;


    FindObjectsOfTypeAll(type: Type): Readonly<Object[]>;
    FindObjectsOfTypeAll<T extends Object>(): Readonly<T[]>;
    GetBuiltinResource(type: Type, path: string): Object;
    GetBuiltinResource<T extends Object>(path: string): T;
    InstanceIDIsValid(instanceId: number): boolean;
    InstanceIDsToValidArray(instanceIDs: Readonly<number[]>, validArray: Readonly<boolean[]>): void;
    InstanceIDsToValidArray(instanceIDs: ReadOnlySpan<number>, validArray: Span<boolean>): void;
    InstanceIDToObject(instanceID: number): Object;
    InstanceIDToObjectList(instanceIDs: Readonly<number[]>, objects: Readonly<Object[]>): void;
    Load(path: string): Object;
    Load<T extends Object>(path: string): T;
    Load(path: string, systemTypeInstance: Type): Object;
    LoadAll(path: string, systemTypeInstance: Type): Readonly<Object[]>;
    LoadAll(path: string): Readonly<Object[]>;
    LoadAll<T extends Object>(path: string): Readonly<T[]>;
    LoadAsync(path: string): ResourceRequest;
    LoadAsync<T extends Object>(path: string): ResourceRequest;
    LoadAsync(path: string, type: Type): ResourceRequest;
    UnloadAsset(assetToUnload: Object): void;
    UnloadUnusedAssets(): AsyncOperation;

}
declare const Resources: ResourcesConstructor;
    
interface AgonesCore {





}
    
interface AgonesProxy extends MonoBehaviour {

    readonly connected: MonoSignal<void>;
    readonly ready: MonoSignal<void>;
    readonly test: MonoSignal<void>;


    AppendListValue(list: string, value: string): boolean;
    Connect(): void;
    DeleteListValue(list: string, value: string): boolean;
    GetListValues(list: string): Readonly<string[]>;
    ListContains(list: string, value: string): boolean;
    Ready(): void;
    SetAnnotation(key: string, value: string): boolean;
    SetLabel(key: string, value: string): boolean;
    Shutdown(): void;


}
    
interface AgonesProxyConstructor {


    new(): AgonesProxy;



}
declare const AgonesProxy: AgonesProxyConstructor;
    
interface AgonesCoreConstructor {
    Agones: AgonesProxy;


    new(): AgonesCore;


    SetAgonesProxy(agones: AgonesProxy): void;

}
declare const AgonesCore: AgonesCoreConstructor;
    
interface RunCore {





}
    
interface RunCoreConstructor {
    launchInDedicatedServerMode: boolean;


    new(): RunCore;


    IsClient(): boolean;
    IsClone(): boolean;
    IsEditor(): boolean;
    IsInternal(): boolean;
    IsServer(): boolean;
    OnLoad(): void;

}
declare const RunCore: RunCoreConstructor;
    
interface NetworkCore {





}
    
interface Net extends MonoBehaviour {

    readonly broadcastFromServerAction: MonoSignal<void>;
    readonly broadcastFromClientAction: MonoSignal<void>;


    BroadcastToAllClients(blob: BinaryBlob, reliable: number): void;
    BroadcastToAllExceptClient(ignoredClientId: number, blob: BinaryBlob, reliable: number): void;
    BroadcastToClient(clientId: number, blob: BinaryBlob, reliable: number): void;
    BroadcastToClients(clientIds: Readonly<number[]>, blob: BinaryBlob, reliable: number): void;
    BroadcastToServer(blob: BinaryBlob, reliable: number): void;
    OnStartClient(): void;
    OnStartServer(): void;


}
    
interface BinaryBlob {
    dataSize: number;
    data: Readonly<number[]>;



    ApplyDiff(bytes: Readonly<number[]>): BinaryBlob;
    CreateDiff(other: BinaryBlob): Readonly<number[]>;
    Equals(other: BinaryBlob): boolean;


}
    
interface BinaryBlobConstructor {


    new(): BinaryBlob;
    new(bytes: Readonly<number[]>): BinaryBlob;



}
declare const BinaryBlob: BinaryBlobConstructor;
    
interface NetConstructor {


    new(): Net;



}
declare const Net: NetConstructor;
    
interface NetworkCoreConstructor {
    Net: Net;


    new(): NetworkCore;


    SetNet(net: Net): void;

}
declare const NetworkCore: NetworkCoreConstructor;
    
interface Camera extends Behaviour {
    /**
     * The distance of the near clipping plane from the the Camera, in world units.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-nearClipPlane.html | Camera.nearClipPlane}
     */
    nearClipPlane: number;
    /**
     * The distance of the far clipping plane from the Camera, in world units.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-farClipPlane.html | Camera.farClipPlane}
     */
    farClipPlane: number;
    /**
     * The vertical field of view of the Camera, in degrees.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-fieldOfView.html | Camera.fieldOfView}
     */
    fieldOfView: number;
    /**
     * The rendering path that should be used, if possible.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-renderingPath.html | Camera.renderingPath}
     */
    renderingPath: RenderingPath;
    /**
     * The rendering path that is currently being used (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-actualRenderingPath.html | Camera.actualRenderingPath}
     */
    readonly actualRenderingPath: RenderingPath;
    /**
     * High dynamic range rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-allowHDR.html | Camera.allowHDR}
     */
    allowHDR: boolean;
    /**
     * MSAA rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-allowMSAA.html | Camera.allowMSAA}
     */
    allowMSAA: boolean;
    /**
     * Dynamic Resolution Scaling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-allowDynamicResolution.html | Camera.allowDynamicResolution}
     */
    allowDynamicResolution: boolean;
    /**
     * Should camera rendering be forced into a RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-forceIntoRenderTexture.html | Camera.forceIntoRenderTexture}
     */
    forceIntoRenderTexture: boolean;
    /**
     * Camera's half-size when in orthographic mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-orthographicSize.html | Camera.orthographicSize}
     */
    orthographicSize: number;
    /**
     * Is the camera orthographic (true) or perspective (false)?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-orthographic.html | Camera.orthographic}
     */
    orthographic: boolean;
    /**
     * Opaque object sorting mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-opaqueSortMode.html | Camera.opaqueSortMode}
     */
    opaqueSortMode: OpaqueSortMode;
    /**
     * Transparent object sorting mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-transparencySortMode.html | Camera.transparencySortMode}
     */
    transparencySortMode: TransparencySortMode;
    /**
     * An axis that describes the direction along which the distances of objects are measured for the purpose of sorting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-transparencySortAxis.html | Camera.transparencySortAxis}
     */
    transparencySortAxis: Vector3;
    /**
     * Camera's depth in the camera rendering order.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-depth.html | Camera.depth}
     */
    depth: number;
    /**
     * The aspect ratio (width divided by height).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-aspect.html | Camera.aspect}
     */
    aspect: number;
    /**
     * Get the world-space speed of the camera (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-velocity.html | Camera.velocity}
     */
    readonly velocity: Vector3;
    /**
     * This is used to render parts of the Scene selectively.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-cullingMask.html | Camera.cullingMask}
     */
    cullingMask: number;
    /**
     * Mask to select which layers can trigger events on the camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-eventMask.html | Camera.eventMask}
     */
    eventMask: number;
    /**
     * How to perform per-layer culling for a Camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-layerCullSpherical.html | Camera.layerCullSpherical}
     */
    layerCullSpherical: boolean;
    /**
     * Identifies what kind of camera this is, using the CameraType enum.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-cameraType.html | Camera.cameraType}
     */
    cameraType: CameraType;
    /**
     * Sets the culling mask used to determine which objects from which Scenes to draw.
See EditorSceneManager.SetSceneCullingMask.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-overrideSceneCullingMask.html | Camera.overrideSceneCullingMask}
     */
    overrideSceneCullingMask: number;
    /**
     * Per-layer culling distances.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-layerCullDistances.html | Camera.layerCullDistances}
     */
    layerCullDistances: Readonly<number[]>;
    /**
     * Whether or not the Camera will use occlusion culling during rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-useOcclusionCulling.html | Camera.useOcclusionCulling}
     */
    useOcclusionCulling: boolean;
    /**
     * Sets a custom matrix for the camera to use for all culling queries.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-cullingMatrix.html | Camera.cullingMatrix}
     */
    cullingMatrix: Matrix4x4;
    /**
     * The color with which the screen will be cleared.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-backgroundColor.html | Camera.backgroundColor}
     */
    backgroundColor: Color;
    /**
     * How the camera clears the background.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-clearFlags.html | Camera.clearFlags}
     */
    clearFlags: CameraClearFlags;
    /**
     * How and if camera generates a depth texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-depthTextureMode.html | Camera.depthTextureMode}
     */
    depthTextureMode: DepthTextureMode;
    /**
     * Should the camera clear the stencil buffer after the deferred light pass?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-clearStencilAfterLightingPass.html | Camera.clearStencilAfterLightingPass}
     */
    clearStencilAfterLightingPass: boolean;
    /**
     * Enable usePhysicalProperties to use physical camera properties to compute the field of view and the frustum.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-usePhysicalProperties.html | Camera.usePhysicalProperties}
     */
    usePhysicalProperties: boolean;
    /**
     * The sensor sensitivity of the camera. To use this property, enable UsePhysicalProperties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-iso.html | Camera.iso}
     */
    iso: number;
    /**
     * The exposure time of the camera, in seconts. To use this property, enable UsePhysicalProperties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-shutterSpeed.html | Camera.shutterSpeed}
     */
    shutterSpeed: number;
    /**
     * The camera aperture. To use this property, enable UsePhysicalProperties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-aperture.html | Camera.aperture}
     */
    aperture: number;
    /**
     * The focus distance of the lens. To use this property, enable UsePhysicalProperties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-focusDistance.html | Camera.focusDistance}
     */
    focusDistance: number;
    /**
     * The camera focal length, expressed in millimeters. To use this property, enable UsePhysicalProperties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-focalLength.html | Camera.focalLength}
     */
    focalLength: number;
    /**
     * The blade count in the lens of the camera. To use this property, enable UsePhysicalProperties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-bladeCount.html | Camera.bladeCount}
     */
    bladeCount: number;
    /**
     * The curvature of the blades. To use this property, enable UsePhysicalProperties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-curvature.html | Camera.curvature}
     */
    curvature: Vector2;
    /**
     * The camera barrel clipping. To use this property, enable UsePhysicalProperties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-barrelClipping.html | Camera.barrelClipping}
     */
    barrelClipping: number;
    /**
     * The camera anamorphism. To use this property, enable UsePhysicalProperties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-anamorphism.html | Camera.anamorphism}
     */
    anamorphism: number;
    /**
     * The size of the camera sensor, expressed in millimeters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-sensorSize.html | Camera.sensorSize}
     */
    sensorSize: Vector2;
    /**
     * The lens offset of the camera. The lens shift is relative to the sensor size. For example, a lens shift of 0.5 offsets the sensor by half its horizontal size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-lensShift.html | Camera.lensShift}
     */
    lensShift: Vector2;
    /**
     * There are two gates for a camera, the sensor gate and the resolution gate. The physical camera sensor gate is defined by the sensorSize property, the resolution gate is defined by the render target area.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-gateFit.html | Camera.gateFit}
     */
    gateFit: GateFitMode;
    /**
     * Where on the screen is the camera rendered in normalized coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-rect.html | Camera.rect}
     */
    rect: Rect;
    /**
     * Where on the screen is the camera rendered in pixel coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-pixelRect.html | Camera.pixelRect}
     */
    pixelRect: Rect;
    /**
     * How wide is the camera in pixels (not accounting for dynamic resolution scaling) (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-pixelWidth.html | Camera.pixelWidth}
     */
    readonly pixelWidth: number;
    /**
     * How tall is the camera in pixels (not accounting for dynamic resolution scaling) (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-pixelHeight.html | Camera.pixelHeight}
     */
    readonly pixelHeight: number;
    /**
     * How wide is the camera in pixels (accounting for dynamic resolution scaling) (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-scaledPixelWidth.html | Camera.scaledPixelWidth}
     */
    readonly scaledPixelWidth: number;
    /**
     * How tall is the camera in pixels (accounting for dynamic resolution scaling) (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-scaledPixelHeight.html | Camera.scaledPixelHeight}
     */
    readonly scaledPixelHeight: number;
    /**
     * Destination render texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-targetTexture.html | Camera.targetTexture}
     */
    targetTexture: RenderTexture;
    /**
     * Gets the temporary RenderTexture target for this Camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-activeTexture.html | Camera.activeTexture}
     */
    readonly activeTexture: RenderTexture;
    /**
     * Set the target display for this Camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-targetDisplay.html | Camera.targetDisplay}
     */
    targetDisplay: number;
    /**
     * Matrix that transforms from camera space to world space (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-cameraToWorldMatrix.html | Camera.cameraToWorldMatrix}
     */
    readonly cameraToWorldMatrix: Matrix4x4;
    /**
     * Matrix that transforms from world to camera space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-worldToCameraMatrix.html | Camera.worldToCameraMatrix}
     */
    worldToCameraMatrix: Matrix4x4;
    /**
     * Set a custom projection matrix.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-projectionMatrix.html | Camera.projectionMatrix}
     */
    projectionMatrix: Matrix4x4;
    /**
     * Get or set the raw projection matrix with no camera offset (no jittering).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-nonJitteredProjectionMatrix.html | Camera.nonJitteredProjectionMatrix}
     */
    nonJitteredProjectionMatrix: Matrix4x4;
    /**
     * Should the jittered matrix be used for transparency rendering?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-useJitteredProjectionMatrixForTransparentRendering.html | Camera.useJitteredProjectionMatrixForTransparentRendering}
     */
    useJitteredProjectionMatrixForTransparentRendering: boolean;
    /**
     * Get the view projection matrix used on the last frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-previousViewProjectionMatrix.html | Camera.previousViewProjectionMatrix}
     */
    readonly previousViewProjectionMatrix: Matrix4x4;
    /**
     * If not null, the camera will only render the contents of the specified Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-scene.html | Camera.scene}
     */
    scene: Scene;
    /**
     * Stereoscopic rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-stereoEnabled.html | Camera.stereoEnabled}
     */
    readonly stereoEnabled: boolean;
    /**
     * The distance between the virtual eyes. Use this to query or set the current eye separation. Note that most VR devices provide this value, in which case setting the value will have no effect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-stereoSeparation.html | Camera.stereoSeparation}
     */
    stereoSeparation: number;
    /**
     * Distance to a point where virtual eyes converge.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-stereoConvergence.html | Camera.stereoConvergence}
     */
    stereoConvergence: number;
    /**
     * Determines whether the stereo view matrices are suitable to allow for a single pass cull.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-areVRStereoViewMatricesWithinSingleCullTolerance.html | Camera.areVRStereoViewMatricesWithinSingleCullTolerance}
     */
    readonly areVRStereoViewMatricesWithinSingleCullTolerance: boolean;
    /**
     * Defines which eye of a VR display the Camera renders into.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-stereoTargetEye.html | Camera.stereoTargetEye}
     */
    stereoTargetEye: StereoTargetEyeMask;
    /**
     * Returns the eye that is currently rendering.
If called when stereo is not enabled it will return Camera.MonoOrStereoscopicEye.Mono.

If called during a camera rendering callback such as OnRenderImage it will return the currently rendering eye.

If called outside of a rendering callback and stereo is enabled, it will return the default eye which is Camera.MonoOrStereoscopicEye.Left.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-stereoActiveEye.html | Camera.stereoActiveEye}
     */
    readonly stereoActiveEye: MonoOrStereoscopicEye;
    readonly sceneViewFilterMode: SceneViewFilterMode;
    /**
     * If false, clouds are not rendered in the scene view of this camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-renderCloudsInSceneView.html | Camera.renderCloudsInSceneView}
     */
    renderCloudsInSceneView: boolean;
    /**
     * Number of command buffers set up on this camera (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-commandBufferCount.html | Camera.commandBufferCount}
     */
    readonly commandBufferCount: number;



    /**
     * Add a command buffer to be executed at a specified place.
     * @param evt When to execute the command buffer during rendering.
     * @param buffer The buffer to execute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.AddCommandBuffer.html | Camera.AddCommandBuffer}
     */
    AddCommandBuffer(evt: CameraEvent, buffer: CommandBuffer): void;
    /**
     * Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
     * @param evt The point during the graphics processing at which this command buffer should commence on the GPU.
     * @param buffer The buffer to execute.
     * @param queueType The desired async compute queue type to execute the buffer on.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.AddCommandBufferAsync.html | Camera.AddCommandBufferAsync}
     */
    AddCommandBufferAsync(evt: CameraEvent, buffer: CommandBuffer, queueType: ComputeQueueType): void;
    CalculateFrustumCorners(viewport: Rect, z: number, eye: MonoOrStereoscopicEye, outCorners: Readonly<Vector3[]>): void;
    /**
     * Calculates and returns oblique near-plane projection matrix.
     * @param clipPlane Vector4 that describes a clip plane.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.CalculateObliqueMatrix.html | Camera.CalculateObliqueMatrix}
     */
    CalculateObliqueMatrix(clipPlane: Vector4): Matrix4x4;
    /**
     * Makes this camera's settings match other camera.
     * @param other Copy camera settings to the other camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.CopyFrom.html | Camera.CopyFrom}
     */
    CopyFrom(other: Camera): void;
    CopyStereoDeviceProjectionMatrixToNonJittered(eye: StereoscopicEye): void;
    /**
     * Get command buffers to be executed at a specified place. This API is only available with the Built-in renderer.
     * @param evt When to execute the command buffer during rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.GetCommandBuffers.html | Camera.GetCommandBuffers}
     */
    GetCommandBuffers(evt: CameraEvent): Readonly<CommandBuffer[]>;
    /**
     * Retrieves the effective vertical field of view of the camera, including GateFit.
                    Fitting the sensor gate and the resolution gate has an impact on the final field of view. If the sensor gate aspect ratio is the same as the resolution gate aspect ratio or if the camera is not in physical mode, then this method returns the same value as the fieldofview property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.GetGateFittedFieldOfView.html | Camera.GetGateFittedFieldOfView}
     */
    GetGateFittedFieldOfView(): number;
    /**
     * Retrieves the effective lens offset of the camera, including GateFit.
                    Fitting the sensor gate and the resolution gate has an impact on the final obliqueness of the projection. If the sensor gate aspect ratio is the same as the resolution gate aspect ratio, then this method returns the same value as the lenshift property. If the camera is not in physical mode, then this methods returns Vector2.zero.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.GetGateFittedLensShift.html | Camera.GetGateFittedLensShift}
     */
    GetGateFittedLensShift(): Vector2;
    GetStereoNonJitteredProjectionMatrix(eye: StereoscopicEye): Matrix4x4;
    GetStereoProjectionMatrix(eye: StereoscopicEye): Matrix4x4;
    GetStereoViewMatrix(eye: StereoscopicEye): Matrix4x4;
    /**
     * Remove all command buffers set on this camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.RemoveAllCommandBuffers.html | Camera.RemoveAllCommandBuffers}
     */
    RemoveAllCommandBuffers(): void;
    /**
     * Remove command buffer from execution at a specified place.
     * @param evt When to execute the command buffer during rendering.
     * @param buffer The buffer to execute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.RemoveCommandBuffer.html | Camera.RemoveCommandBuffer}
     */
    RemoveCommandBuffer(evt: CameraEvent, buffer: CommandBuffer): void;
    /**
     * Remove command buffers from execution at a specified place.
     * @param evt When to execute the command buffer during rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.RemoveCommandBuffers.html | Camera.RemoveCommandBuffers}
     */
    RemoveCommandBuffers(evt: CameraEvent): void;
    /**
     * Render the camera manually.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.Render.html | Camera.Render}
     */
    Render(): void;
    RenderDontRestore(): void;
    /**
     * Render into a static cubemap from this camera.
     * @param cubemap The cube map to render to.
     * @param faceMask A bitmask which determines which of the six faces are rendered to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.RenderToCubemap.html | Camera.RenderToCubemap}
     */
    RenderToCubemap(cubemap: Cubemap, faceMask: number): boolean;
    RenderToCubemap(cubemap: Cubemap): boolean;
    /**
     * Render into a cubemap from this camera.
     * @param cubemap The texture to render to.
     * @param faceMask A bitfield indicating which cubemap faces should be rendered into.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.RenderToCubemap.html | Camera.RenderToCubemap}
     */
    RenderToCubemap(cubemap: RenderTexture, faceMask: number): boolean;
    RenderToCubemap(cubemap: RenderTexture): boolean;
    RenderToCubemap(cubemap: RenderTexture, faceMask: number, stereoEye: MonoOrStereoscopicEye): boolean;
    /**
     * Render the camera with shader replacement.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.RenderWithShader.html | Camera.RenderWithShader}
     */
    RenderWithShader(shader: Shader, replacementTag: string): void;
    /**
     * Revert all camera parameters to default.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.Reset.html | Camera.Reset}
     */
    Reset(): void;
    /**
     * Revert the aspect ratio to the screen's aspect ratio.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ResetAspect.html | Camera.ResetAspect}
     */
    ResetAspect(): void;
    /**
     * Make culling queries reflect the camera's built in parameters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ResetCullingMatrix.html | Camera.ResetCullingMatrix}
     */
    ResetCullingMatrix(): void;
    /**
     * Make the projection reflect normal camera's parameters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ResetProjectionMatrix.html | Camera.ResetProjectionMatrix}
     */
    ResetProjectionMatrix(): void;
    /**
     * Remove shader replacement from camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ResetReplacementShader.html | Camera.ResetReplacementShader}
     */
    ResetReplacementShader(): void;
    /**
     * Reset the camera to using the Unity computed projection matrices for all stereoscopic eyes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ResetStereoProjectionMatrices.html | Camera.ResetStereoProjectionMatrices}
     */
    ResetStereoProjectionMatrices(): void;
    /**
     * Reset the camera to using the Unity computed view matrices for all stereoscopic eyes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ResetStereoViewMatrices.html | Camera.ResetStereoViewMatrices}
     */
    ResetStereoViewMatrices(): void;
    /**
     * Resets this Camera's transparency sort settings to the default. Default transparency settings are taken from GraphicsSettings instead of directly from this Camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ResetTransparencySortSettings.html | Camera.ResetTransparencySortSettings}
     */
    ResetTransparencySortSettings(): void;
    /**
     * Make the rendering position reflect the camera's position in the Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ResetWorldToCameraMatrix.html | Camera.ResetWorldToCameraMatrix}
     */
    ResetWorldToCameraMatrix(): void;
    ScreenPointToRay(pos: Vector3, eye: MonoOrStereoscopicEye): Ray;
    /**
     * Returns a ray going from camera through a screen point.
     * @param pos A 3D point, with the x and y coordinates containing a 2D screen space point in pixels. The lower left pixel of the screen is (0,0). The upper right pixel of the screen is (screen width in pixels - 1, screen height in pixels - 1). Unity ignores the z coordinate.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ScreenPointToRay.html | Camera.ScreenPointToRay}
     */
    ScreenPointToRay(pos: Vector3): Ray;
    /**
     * Transforms position from screen space into viewport space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ScreenToViewportPoint.html | Camera.ScreenToViewportPoint}
     */
    ScreenToViewportPoint(position: Vector3): Vector3;
    ScreenToWorldPoint(position: Vector3, eye: MonoOrStereoscopicEye): Vector3;
    /**
     * Transforms a point from screen space into world space, where world space is defined as the coordinate system at the very top of your game's hierarchy.
     * @param position A 2D screen space point in pixels, plus a z coordinate for the distance from the camera in world units. The lower left pixel of the screen is (0,0). The upper right pixel of the screen is (screen width in pixels - 1, screen height in pixels - 1).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ScreenToWorldPoint.html | Camera.ScreenToWorldPoint}
     */
    ScreenToWorldPoint(position: Vector3): Vector3;
    /**
     * Make the camera render with shader replacement.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.SetReplacementShader.html | Camera.SetReplacementShader}
     */
    SetReplacementShader(shader: Shader, replacementTag: string): void;
    SetStereoProjectionMatrix(eye: StereoscopicEye, matrix: Matrix4x4): void;
    SetStereoViewMatrix(eye: StereoscopicEye, matrix: Matrix4x4): void;
    /**
     * Sets the Camera to render to the chosen buffers of one or more RenderTextures.
     * @param colorBuffer The RenderBuffer(s) to which color information will be rendered.
     * @param depthBuffer The RenderBuffer to which depth information will be rendered.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.SetTargetBuffers.html | Camera.SetTargetBuffers}
     */
    SetTargetBuffers(colorBuffer: RenderBuffer, depthBuffer: RenderBuffer): void;
    /**
     * Sets the Camera to render to the chosen buffers of one or more RenderTextures.
     * @param colorBuffer The RenderBuffer(s) to which color information will be rendered.
     * @param depthBuffer The RenderBuffer to which depth information will be rendered.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.SetTargetBuffers.html | Camera.SetTargetBuffers}
     */
    SetTargetBuffers(colorBuffer: Readonly<RenderBuffer[]>, depthBuffer: RenderBuffer): void;
    SubmitRenderRequest<RequestData>(renderRequest: RequestData): void;
    ViewportPointToRay(pos: Vector3, eye: MonoOrStereoscopicEye): Ray;
    /**
     * Returns a ray going from camera through a viewport point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ViewportPointToRay.html | Camera.ViewportPointToRay}
     */
    ViewportPointToRay(pos: Vector3): Ray;
    /**
     * Transforms position from viewport space into screen space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ViewportToScreenPoint.html | Camera.ViewportToScreenPoint}
     */
    ViewportToScreenPoint(position: Vector3): Vector3;
    ViewportToWorldPoint(position: Vector3, eye: MonoOrStereoscopicEye): Vector3;
    /**
     * Transforms position from viewport space into world space.
     * @param position The 3d vector in Viewport space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.ViewportToWorldPoint.html | Camera.ViewportToWorldPoint}
     */
    ViewportToWorldPoint(position: Vector3): Vector3;
    WorldToScreenPoint(position: Vector3, eye: MonoOrStereoscopicEye): Vector3;
    /**
     * Transforms position from world space into screen space.
     * @param position A 3D point in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.WorldToScreenPoint.html | Camera.WorldToScreenPoint}
     */
    WorldToScreenPoint(position: Vector3): Vector3;
    WorldToViewportPoint(position: Vector3, eye: MonoOrStereoscopicEye): Vector3;
    /**
     * Transforms position from world space into viewport space.
     * @param position A 3D point in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera.WorldToViewportPoint.html | Camera.WorldToViewportPoint}
     */
    WorldToViewportPoint(position: Vector3): Vector3;


}
    
interface RenderTexture extends Texture {
    /**
     * The width of the render texture in pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-width.html | RenderTexture.width}
     */
    width: number;
    /**
     * The height of the render texture in pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-height.html | RenderTexture.height}
     */
    height: number;
    /**
     * Dimensionality (type) of the render texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-dimension.html | RenderTexture.dimension}
     */
    dimension: TextureDimension;
    /**
     * The color format of the render texture. You can set the color format to None to achieve depth-only rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-graphicsFormat.html | RenderTexture.graphicsFormat}
     */
    graphicsFormat: GraphicsFormat;
    /**
     * Render texture has mipmaps when this flag is set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-useMipMap.html | RenderTexture.useMipMap}
     */
    useMipMap: boolean;
    /**
     * Does this render texture use sRGB read/write conversions? (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-sRGB.html | RenderTexture.sRGB}
     */
    readonly sRGB: boolean;
    /**
     * If this RenderTexture is a VR eye texture used in stereoscopic rendering, this property decides what special rendering occurs, if any.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-vrUsage.html | RenderTexture.vrUsage}
     */
    vrUsage: VRTextureUsage;
    /**
     * The render texture memoryless mode property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-memorylessMode.html | RenderTexture.memorylessMode}
     */
    memorylessMode: RenderTextureMemoryless;
    format: RenderTextureFormat;
    /**
     * The format of the stencil data that you can encapsulate within a RenderTexture.

Specifying this property creates a stencil element for the RenderTexture and sets its format.
This allows for stencil data to be bound as a Texture to all shader types for the platforms that support it.
This property does not specify the format of the stencil buffer, which is constrained by the depth buffer format specified in RenderTexture.depth.

Currently, most platforms only support R8_UInt (DirectX11, DirectX12).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-stencilFormat.html | RenderTexture.stencilFormat}
     */
    stencilFormat: GraphicsFormat;
    /**
     * The format of the depth/stencil buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-depthStencilFormat.html | RenderTexture.depthStencilFormat}
     */
    depthStencilFormat: GraphicsFormat;
    /**
     * Mipmap levels are generated automatically when this flag is set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-autoGenerateMips.html | RenderTexture.autoGenerateMips}
     */
    autoGenerateMips: boolean;
    /**
     * Volume extent of a 3D render texture or number of slices of array texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-volumeDepth.html | RenderTexture.volumeDepth}
     */
    volumeDepth: number;
    /**
     * The antialiasing level for the RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-antiAliasing.html | RenderTexture.antiAliasing}
     */
    antiAliasing: number;
    /**
     * If true and antiAliasing is greater than 1, the render texture will not be resolved by default.  Use this if the render texture needs to be bound as a multisampled texture in a shader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-bindTextureMS.html | RenderTexture.bindTextureMS}
     */
    bindTextureMS: boolean;
    /**
     * Enable random access write into this render texture on Shader Model 5.0 level shaders.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-enableRandomWrite.html | RenderTexture.enableRandomWrite}
     */
    enableRandomWrite: boolean;
    /**
     * When this flag is set to true, render texture is set to be used by the.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-useDynamicScale.html | RenderTexture.useDynamicScale}
     */
    useDynamicScale: boolean;
    /**
     * When this flag is set to true, render texture is set to be used by the. Scale is applied with an explicit call to ApplyDynamicScale
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-useDynamicScaleExplicit.html | RenderTexture.useDynamicScaleExplicit}
     */
    useDynamicScaleExplicit: boolean;
    isPowerOfTwo: boolean;
    /**
     * Color buffer of the render texture (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-colorBuffer.html | RenderTexture.colorBuffer}
     */
    readonly colorBuffer: RenderBuffer;
    /**
     * Depth/stencil buffer of the render texture (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-depthBuffer.html | RenderTexture.depthBuffer}
     */
    readonly depthBuffer: RenderBuffer;
    /**
     * The precision of the render texture's depth buffer in bits (0, 16, 24 and 32 are supported).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-depth.html | RenderTexture.depth}
     */
    depth: number;
    /**
     * This struct contains all the information required to create a RenderTexture. It can be copied, cached, and reused to easily create RenderTextures that all share the same properties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-descriptor.html | RenderTexture.descriptor}
     */
    descriptor: RenderTextureDescriptor;



    /**
     * Applies the scale.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture.ApplyDynamicScale.html | RenderTexture.ApplyDynamicScale}
     */
    ApplyDynamicScale(): void;
    ConvertToEquirect(equirect: RenderTexture, eye: MonoOrStereoscopicEye): void;
    /**
     * Actually creates the RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture.Create.html | RenderTexture.Create}
     */
    Create(): boolean;
    /**
     * Hint the GPU driver that the contents of the RenderTexture will not be used.
     * @param discardColor Should the colour buffer be discarded?
     * @param discardDepth Should the depth buffer be discarded?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture.DiscardContents.html | RenderTexture.DiscardContents}
     */
    DiscardContents(discardColor: boolean, discardDepth: boolean): void;
    /**
     * Hint the GPU driver that the contents of the RenderTexture will not be used.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture.DiscardContents.html | RenderTexture.DiscardContents}
     */
    DiscardContents(): void;
    /**
     * Generate mipmap levels of a render texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture.GenerateMips.html | RenderTexture.GenerateMips}
     */
    GenerateMips(): void;
    /**
     * Retrieve a native (underlying graphics API) pointer to the depth buffer resource.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture.GetNativeDepthBufferPtr.html | RenderTexture.GetNativeDepthBufferPtr}
     */
    GetNativeDepthBufferPtr(): IntPtr;
    /**
     * Is the render texture actually created?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture.IsCreated.html | RenderTexture.IsCreated}
     */
    IsCreated(): boolean;
    /**
     * Releases the RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture.Release.html | RenderTexture.Release}
     */
    Release(): void;
    /**
     * Force an antialiased render texture to be resolved.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture.ResolveAntiAliasedSurface.html | RenderTexture.ResolveAntiAliasedSurface}
     */
    ResolveAntiAliasedSurface(): void;
    /**
     * Force an antialiased render texture to be resolved.
     * @param target The render texture to resolve into.  If set, the target render texture must have the same dimensions and format as the source.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture.ResolveAntiAliasedSurface.html | RenderTexture.ResolveAntiAliasedSurface}
     */
    ResolveAntiAliasedSurface(target: RenderTexture): void;
    /**
     * Assigns this RenderTexture as a global shader property named propertyName.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture.SetGlobalShaderProperty.html | RenderTexture.SetGlobalShaderProperty}
     */
    SetGlobalShaderProperty(propertyName: string): void;


}
    
interface RenderBuffer {



    /**
     * Returns native RenderBuffer. Be warned this is not native Texture, but rather pointer to unity struct that can be used with native unity API. Currently such API exists only on iOS.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderBuffer.GetNativeRenderBufferPtr.html | RenderBuffer.GetNativeRenderBufferPtr}
     */
    GetNativeRenderBufferPtr(): IntPtr;


}
    
interface RenderTextureDescriptor {
    /**
     * The width of the render texture in pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-width.html | RenderTextureDescriptor.width}
     */
    width: number;
    /**
     * The height of the render texture in pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-height.html | RenderTextureDescriptor.height}
     */
    height: number;
    /**
     * The multisample antialiasing level for the RenderTexture.

Additional resources: RenderTexture.antiAliasing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-msaaSamples.html | RenderTextureDescriptor.msaaSamples}
     */
    msaaSamples: number;
    /**
     * Volume extent of a 3D render texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-volumeDepth.html | RenderTextureDescriptor.volumeDepth}
     */
    volumeDepth: number;
    /**
     * User-defined mipmap count.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-mipCount.html | RenderTextureDescriptor.mipCount}
     */
    mipCount: number;
    /**
     * The color format for the RenderTexture. You can set this format to None to achieve depth-only rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-graphicsFormat.html | RenderTextureDescriptor.graphicsFormat}
     */
    graphicsFormat: GraphicsFormat;
    /**
     * The format of the stencil data that you can encapsulate within a RenderTexture.

Specifying this property creates a stencil element for the RenderTexture and sets its format.
This allows for stencil data to be bound as a Texture to all shader types for the platforms that support it.
This property does not specify the format of the stencil buffer, which is constrained by the depth buffer format specified in RenderTexture.depth.

Currently, most platforms only support R8_UInt (DirectX11, DirectX12).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-stencilFormat.html | RenderTextureDescriptor.stencilFormat}
     */
    stencilFormat: GraphicsFormat;
    /**
     * The desired format of the depth/stencil buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-depthStencilFormat.html | RenderTextureDescriptor.depthStencilFormat}
     */
    depthStencilFormat: GraphicsFormat;
    /**
     * The format of the RenderTarget is expressed as a RenderTextureFormat. Internally, this format is stored as a GraphicsFormat compatible with the current system (see SystemInfo.GetCompatibleFormat). Therefore, if you set a format and immediately get it again, it may return a different result from the one just set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-colorFormat.html | RenderTextureDescriptor.colorFormat}
     */
    colorFormat: RenderTextureFormat;
    /**
     * This flag causes the render texture uses sRGB read/write conversions.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-sRGB.html | RenderTextureDescriptor.sRGB}
     */
    sRGB: boolean;
    /**
     * The precision of the render texture's depth buffer in bits (0, 16, 24 and 32 are supported).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-depthBufferBits.html | RenderTextureDescriptor.depthBufferBits}
     */
    depthBufferBits: number;
    /**
     * Dimensionality (type) of the render texture.

Additional resources: RenderTexture.dimension.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-dimension.html | RenderTextureDescriptor.dimension}
     */
    dimension: TextureDimension;
    /**
     * Determines how the RenderTexture is sampled if it is used as a shadow map.

Additional resources: ShadowSamplingMode for more details.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-shadowSamplingMode.html | RenderTextureDescriptor.shadowSamplingMode}
     */
    shadowSamplingMode: ShadowSamplingMode;
    /**
     * If this RenderTexture is a VR eye texture used in stereoscopic rendering, this property decides what special rendering occurs, if any. Instead of setting this manually, use the value returned by XR.XRSettings.eyeTextureDesc|eyeTextureDesc or other VR functions returning a RenderTextureDescriptor.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-vrUsage.html | RenderTextureDescriptor.vrUsage}
     */
    vrUsage: VRTextureUsage;
    /**
     * A set of RenderTextureCreationFlags that control how the texture is created.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-flags.html | RenderTextureDescriptor.flags}
     */
    readonly flags: RenderTextureCreationFlags;
    /**
     * The render texture memoryless mode property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-memoryless.html | RenderTextureDescriptor.memoryless}
     */
    memoryless: RenderTextureMemoryless;
    /**
     * Render texture has mipmaps when this flag is set.

Additional resources: RenderTexture.useMipMap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-useMipMap.html | RenderTextureDescriptor.useMipMap}
     */
    useMipMap: boolean;
    /**
     * Mipmap levels are generated automatically when this flag is set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-autoGenerateMips.html | RenderTextureDescriptor.autoGenerateMips}
     */
    autoGenerateMips: boolean;
    /**
     * Enable random access write into this render texture on Shader Model 5.0 level shaders.

Additional resources: RenderTexture.enableRandomWrite.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-enableRandomWrite.html | RenderTextureDescriptor.enableRandomWrite}
     */
    enableRandomWrite: boolean;
    /**
     * If true and msaaSamples is greater than 1, the render texture will not be resolved by default.  Use this if the render texture needs to be bound as a multisampled texture in a shader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-bindMS.html | RenderTextureDescriptor.bindMS}
     */
    bindMS: boolean;
    /**
     * Set to true to enable dynamic resolution scaling on this render texture. Mutually exclusive with RenderTextureDescriptor.useDynamicScaleExplicit

Additional resources: RenderTexture.useDynamicScale.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-useDynamicScale.html | RenderTextureDescriptor.useDynamicScale}
     */
    useDynamicScale: boolean;
    /**
     * Set to true to enable dynamic resolution scaling on this render texture and control when this scaling happens. Mutually exclusive with RenderTextureDescriptor.useDynamicScale

Additional resources: RenderTexture.useDynamicScaleExplicit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTextureDescriptor-useDynamicScaleExplicit.html | RenderTextureDescriptor.useDynamicScaleExplicit}
     */
    useDynamicScaleExplicit: boolean;





}
    
interface RenderTextureDescriptorConstructor {


    new(width: number, height: number): RenderTextureDescriptor;
    new(width: number, height: number, colorFormat: RenderTextureFormat): RenderTextureDescriptor;
    new(width: number, height: number, colorFormat: RenderTextureFormat, depthBufferBits: number): RenderTextureDescriptor;
    new(width: number, height: number, colorFormat: GraphicsFormat, depthBufferBits: number): RenderTextureDescriptor;
    new(width: number, height: number, colorFormat: RenderTextureFormat, depthBufferBits: number, mipCount: number): RenderTextureDescriptor;
    new(width: number, height: number, colorFormat: RenderTextureFormat, depthBufferBits: number, mipCount: number, readWrite: RenderTextureReadWrite): RenderTextureDescriptor;
    new(width: number, height: number, colorFormat: GraphicsFormat, depthBufferBits: number, mipCount: number): RenderTextureDescriptor;
    new(width: number, height: number, colorFormat: GraphicsFormat, depthStencilFormat: GraphicsFormat): RenderTextureDescriptor;
    new(width: number, height: number, colorFormat: GraphicsFormat, depthStencilFormat: GraphicsFormat, mipCount: number): RenderTextureDescriptor;



}
declare const RenderTextureDescriptor: RenderTextureDescriptorConstructor;
    
interface RenderTextureConstructor {
    /**
     * Currently active render texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderTexture-active.html | RenderTexture.active}
     */
    active: RenderTexture;


    new(desc: RenderTextureDescriptor): RenderTexture;
    new(textureToCopy: RenderTexture): RenderTexture;
    new(width: number, height: number, depth: number, format: DefaultFormat): RenderTexture;
    new(width: number, height: number, depth: number, format: GraphicsFormat): RenderTexture;
    new(width: number, height: number, depth: number, format: GraphicsFormat, mipCount: number): RenderTexture;
    new(width: number, height: number, colorFormat: GraphicsFormat, depthStencilFormat: GraphicsFormat, mipCount: number): RenderTexture;
    new(width: number, height: number, colorFormat: GraphicsFormat, depthStencilFormat: GraphicsFormat): RenderTexture;
    new(width: number, height: number, depth: number, format: RenderTextureFormat, readWrite: RenderTextureReadWrite): RenderTexture;
    new(width: number, height: number, depth: number, format: RenderTextureFormat): RenderTexture;
    new(width: number, height: number, depth: number): RenderTexture;
    new(width: number, height: number, depth: number, format: RenderTextureFormat, mipCount: number): RenderTexture;


    GetTemporary(desc: RenderTextureDescriptor): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number, format: GraphicsFormat, antiAliasing: number, memorylessMode: RenderTextureMemoryless, vrUsage: VRTextureUsage, useDynamicScale: boolean): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number, format: GraphicsFormat, antiAliasing: number, memorylessMode: RenderTextureMemoryless, vrUsage: VRTextureUsage): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number, format: GraphicsFormat, antiAliasing: number, memorylessMode: RenderTextureMemoryless): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number, format: GraphicsFormat, antiAliasing: number): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number, format: GraphicsFormat): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number, format: RenderTextureFormat, readWrite: RenderTextureReadWrite, antiAliasing: number, memorylessMode: RenderTextureMemoryless, vrUsage: VRTextureUsage, useDynamicScale: boolean): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number, format: RenderTextureFormat, readWrite: RenderTextureReadWrite, antiAliasing: number, memorylessMode: RenderTextureMemoryless, vrUsage: VRTextureUsage): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number, format: RenderTextureFormat, readWrite: RenderTextureReadWrite, antiAliasing: number, memorylessMode: RenderTextureMemoryless): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number, format: RenderTextureFormat, readWrite: RenderTextureReadWrite, antiAliasing: number): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number, format: RenderTextureFormat, readWrite: RenderTextureReadWrite): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number, format: RenderTextureFormat): RenderTexture;
    GetTemporary(width: number, height: number, depthBuffer: number): RenderTexture;
    GetTemporary(width: number, height: number): RenderTexture;
    ReleaseTemporary(temp: RenderTexture): void;
    SupportsStencil(rt: RenderTexture): boolean;

}
declare const RenderTexture: RenderTextureConstructor;
    
interface CommandBuffer {
    /**
     * Name of this command buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer-name.html | Rendering.CommandBuffer.name}
     */
    name: string;
    /**
     * Size of this command buffer in bytes (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer-sizeInBytes.html | Rendering.CommandBuffer.sizeInBytes}
     */
    readonly sizeInBytes: number;



    BeginRenderPass(width: number, height: number, samples: number, attachments: Readonly<AttachmentDescriptor[]>, depthAttachmentIndex: number, subPasses: Readonly<SubPassDescriptor[]>): void;
    BeginRenderPass(width: number, height: number, volumeDepth: number, samples: number, attachments: Readonly<AttachmentDescriptor[]>, depthAttachmentIndex: number, subPasses: Readonly<SubPassDescriptor[]>): void;
    BeginRenderPass(width: number, height: number, samples: number, attachments: Readonly<AttachmentDescriptor[]>, depthAttachmentIndex: number, subPasses: Readonly<SubPassDescriptor[]>, debugNameUtf8: ReadOnlySpan<number>): void;
    BeginRenderPass(width: number, height: number, volumeDepth: number, samples: number, attachments: Readonly<AttachmentDescriptor[]>, depthAttachmentIndex: number, subPasses: Readonly<SubPassDescriptor[]>, debugNameUtf8: ReadOnlySpan<number>): void;
    /**
     * Adds a command to begin profile sampling.
     * @param name Name of the profile information used for sampling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.BeginSample.html | Rendering.CommandBuffer.BeginSample}
     */
    BeginSample(name: string): void;
    /**
     * Adds a command to begin profile sampling.
     * @param sampler The CustomSampler that the CommandBuffer uses for sampling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.BeginSample.html | Rendering.CommandBuffer.BeginSample}
     */
    BeginSample(sampler: CustomSampler): void;
    /**
     * Adds a command to begin profile sampling.
     * @param marker The ProfilerMarker that the CommandBuffer uses for sampling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.BeginSample.html | Rendering.CommandBuffer.BeginSample}
     */
    BeginSample(marker: ProfilerMarker): void;
    /**
     * Adds a command to use a shader to copy the pixel data from a texture into a render texture.
     * @param source The source texture or RenderTargetIdentifier.
     * @param dest The destination RenderTargetIdentifier.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Blit.html | Rendering.CommandBuffer.Blit}
     */
    Blit(source: Texture, dest: RenderTargetIdentifier): void;
    /**
     * Adds a command to use a shader to copy the pixel data from a texture into a render texture.
     * @param source The source texture or RenderTargetIdentifier.
     * @param dest The destination RenderTargetIdentifier.
     * @param scale The scale to apply.
     * @param offset The offset to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Blit.html | Rendering.CommandBuffer.Blit}
     */
    Blit(source: Texture, dest: RenderTargetIdentifier, scale: Vector2, offset: Vector2): void;
    /**
     * Adds a command to use a shader to copy the pixel data from a texture into a render texture.
     * @param source The source texture or RenderTargetIdentifier.
     * @param dest The destination RenderTargetIdentifier.
     * @param mat The material to use. If you don't provide mat, Unity uses a default material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Blit.html | Rendering.CommandBuffer.Blit}
     */
    Blit(source: Texture, dest: RenderTargetIdentifier, mat: Material): void;
    /**
     * Adds a command to use a shader to copy the pixel data from a texture into a render texture.
     * @param source The source texture or RenderTargetIdentifier.
     * @param dest The destination RenderTargetIdentifier.
     * @param mat The material to use. If you don't provide mat, Unity uses a default material.
     * @param pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Blit.html | Rendering.CommandBuffer.Blit}
     */
    Blit(source: Texture, dest: RenderTargetIdentifier, mat: Material, pass: number): void;
    /**
     * Adds a command to use a shader to copy the pixel data from a texture into a render texture.
     * @param source The source texture or RenderTargetIdentifier.
     * @param dest The destination RenderTargetIdentifier.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Blit.html | Rendering.CommandBuffer.Blit}
     */
    Blit(source: RenderTargetIdentifier, dest: RenderTargetIdentifier): void;
    /**
     * Adds a command to use a shader to copy the pixel data from a texture into a render texture.
     * @param source The source texture or RenderTargetIdentifier.
     * @param dest The destination RenderTargetIdentifier.
     * @param scale The scale to apply.
     * @param offset The offset to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Blit.html | Rendering.CommandBuffer.Blit}
     */
    Blit(source: RenderTargetIdentifier, dest: RenderTargetIdentifier, scale: Vector2, offset: Vector2): void;
    /**
     * Adds a command to use a shader to copy the pixel data from a texture into a render texture.
     * @param source The source texture or RenderTargetIdentifier.
     * @param dest The destination RenderTargetIdentifier.
     * @param mat The material to use. If you don't provide mat, Unity uses a default material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Blit.html | Rendering.CommandBuffer.Blit}
     */
    Blit(source: RenderTargetIdentifier, dest: RenderTargetIdentifier, mat: Material): void;
    /**
     * Adds a command to use a shader to copy the pixel data from a texture into a render texture.
     * @param source The source texture or RenderTargetIdentifier.
     * @param dest The destination RenderTargetIdentifier.
     * @param mat The material to use. If you don't provide mat, Unity uses a default material.
     * @param pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Blit.html | Rendering.CommandBuffer.Blit}
     */
    Blit(source: RenderTargetIdentifier, dest: RenderTargetIdentifier, mat: Material, pass: number): void;
    /**
     * Adds a command to use a shader to copy the pixel data from a texture into a render texture.
     * @param source The source texture or RenderTargetIdentifier.
     * @param dest The destination RenderTargetIdentifier.
     * @param sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
     * @param destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Blit.html | Rendering.CommandBuffer.Blit}
     */
    Blit(source: RenderTargetIdentifier, dest: RenderTargetIdentifier, sourceDepthSlice: number, destDepthSlice: number): void;
    /**
     * Adds a command to use a shader to copy the pixel data from a texture into a render texture.
     * @param source The source texture or RenderTargetIdentifier.
     * @param dest The destination RenderTargetIdentifier.
     * @param scale The scale to apply.
     * @param offset The offset to apply.
     * @param sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
     * @param destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Blit.html | Rendering.CommandBuffer.Blit}
     */
    Blit(source: RenderTargetIdentifier, dest: RenderTargetIdentifier, scale: Vector2, offset: Vector2, sourceDepthSlice: number, destDepthSlice: number): void;
    /**
     * Adds a command to use a shader to copy the pixel data from a texture into a render texture.
     * @param source The source texture or RenderTargetIdentifier.
     * @param dest The destination RenderTargetIdentifier.
     * @param mat The material to use. If you don't provide mat, Unity uses a default material.
     * @param pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
     * @param destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Blit.html | Rendering.CommandBuffer.Blit}
     */
    Blit(source: RenderTargetIdentifier, dest: RenderTargetIdentifier, mat: Material, pass: number, destDepthSlice: number): void;
    /**
     * Adds a command to build the RayTracingAccelerationStructure to be used in a ray tracing dispatch or when using inline ray tracing (ray queries).
     * @param accelerationStructure The RayTracingAccelerationStructure to be generated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.BuildRayTracingAccelerationStructure.html | Rendering.CommandBuffer.BuildRayTracingAccelerationStructure}
     */
    BuildRayTracingAccelerationStructure(accelerationStructure: RayTracingAccelerationStructure): void;
    /**
     * Adds a command to build the RayTracingAccelerationStructure to be used in a ray tracing dispatch or when using inline ray tracing (ray queries).
     * @param accelerationStructure The RayTracingAccelerationStructure to be generated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.BuildRayTracingAccelerationStructure.html | Rendering.CommandBuffer.BuildRayTracingAccelerationStructure}
     */
    BuildRayTracingAccelerationStructure(accelerationStructure: RayTracingAccelerationStructure, relativeOrigin: Vector3): void;
    BuildRayTracingAccelerationStructure(accelerationStructure: RayTracingAccelerationStructure, buildSettings: BuildSettings): void;
    /**
     * Clear all commands in the buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.Clear.html | Rendering.CommandBuffer.Clear}
     */
    Clear(): void;
    /**
     * Unset random write targets for level pixel shaders.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.ClearRandomWriteTargets.html | Rendering.CommandBuffer.ClearRandomWriteTargets}
     */
    ClearRandomWriteTargets(): void;
    /**
     * Adds a &quot;clear render target&quot; command.
     * @param clearDepth Whether to clear both the depth buffer and the stencil buffer.
     * @param clearColor Whether to clear the color buffer.
     * @param backgroundColor Color to clear with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.ClearRenderTarget.html | Rendering.CommandBuffer.ClearRenderTarget}
     */
    ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: Color): void;
    /**
     * Adds a &quot;clear render target&quot; command.
     * @param clearDepth Whether to clear both the depth buffer and the stencil buffer.
     * @param clearColor Whether to clear the color buffer.
     * @param backgroundColor Color to clear with.
     * @param depth Depth to clear with (default is 1.0).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.ClearRenderTarget.html | Rendering.CommandBuffer.ClearRenderTarget}
     */
    ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: Color, depth: number): void;
    /**
     * Adds a &quot;clear render target&quot; command.
     * @param clearDepth Whether to clear both the depth buffer and the stencil buffer.
     * @param clearColor Whether to clear the color buffer.
     * @param backgroundColor Color to clear with.
     * @param depth Depth to clear with (default is 1.0).
     * @param stencil Stencil to clear with (default is 0).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.ClearRenderTarget.html | Rendering.CommandBuffer.ClearRenderTarget}
     */
    ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: Color, depth: number, stencil: number): void;
    /**
     * Adds a &quot;clear render target&quot; command.
     * @param clearFlags Which render targets to clear, defined using a bitwise OR combination of RTClearFlags values.
     * @param backgroundColor Color to clear with.
     * @param depth Depth to clear with (default is 1.0).
     * @param stencil Stencil to clear with (default is 0).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.ClearRenderTarget.html | Rendering.CommandBuffer.ClearRenderTarget}
     */
    ClearRenderTarget(clearFlags: RTClearFlags, backgroundColor: Color, depth: number, stencil: number): void;
    /**
     * Adds a &quot;clear render target&quot; command.
     * @param clearFlags Which render targets to clear, defined using a bitwise OR combination of RTClearFlags values.
     * @param backgroundColors Colors to clear with.
     * @param depth Depth to clear with (default is 1.0).
     * @param stencil Stencil to clear with (default is 0).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.ClearRenderTarget.html | Rendering.CommandBuffer.ClearRenderTarget}
     */
    ClearRenderTarget(clearFlags: RTClearFlags, backgroundColors: Readonly<Color[]>, depth: number, stencil: number): void;
    /**
     * Adds a command to configure foveated rendering.
     * @param platformData The native pointer from XR.XRDisplaySubsystem.XRRenderPass.foveatedRenderingInfo.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.ConfigureFoveatedRendering.html | Rendering.CommandBuffer.ConfigureFoveatedRendering}
     */
    ConfigureFoveatedRendering(platformData: IntPtr): void;
    /**
     * Adds a command to copy the pixel data from one texture, convert the data into a different format, and copy it into another texture.
     * @param src The source texture. The texture must be a Texture2D or Cubemap.
     * @param dst The destination texture. The texture must be a Texture2D, Texture2DArray, Cubemap, or CubemapArray. The texture must also be uncompressed and correspond to a supported RenderTextureFormat.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.ConvertTexture.html | Rendering.CommandBuffer.ConvertTexture}
     */
    ConvertTexture(src: RenderTargetIdentifier, dst: RenderTargetIdentifier): void;
    /**
     * Adds a command to copy the pixel data from one texture, convert the data into a different format, and copy it into another texture.
     * @param src The source texture. The texture must be a Texture2D or Cubemap.
     * @param srcElement The element in the source texture to copy from. Use CubemapFace if src is a Cubemap. Set the value to 0 if src is a 2D texture.
     * @param dst The destination texture. The texture must be a Texture2D, Texture2DArray, Cubemap, or CubemapArray. The texture must also be uncompressed and correspond to a supported RenderTextureFormat.
     * @param dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.ConvertTexture.html | Rendering.CommandBuffer.ConvertTexture}
     */
    ConvertTexture(src: RenderTargetIdentifier, srcElement: number, dst: RenderTargetIdentifier, dstElement: number): void;
    /**
     * Adds a command to copy the contents of one GraphicsBuffer into another.
     * @param source The source buffer.
     * @param dest The destination buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CopyBuffer.html | Rendering.CommandBuffer.CopyBuffer}
     */
    CopyBuffer(source: GraphicsBuffer, dest: GraphicsBuffer): void;
    /**
     * Adds a command to copy ComputeBuffer or GraphicsBuffer counter value.
     * @param src Append/consume buffer to copy the counter from.
     * @param dst A buffer to copy the counter to.
     * @param dstOffsetBytes Target byte offset in dst buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CopyCounterValue.html | Rendering.CommandBuffer.CopyCounterValue}
     */
    CopyCounterValue(src: ComputeBuffer, dst: ComputeBuffer, dstOffsetBytes: number): void;
    /**
     * Adds a command to copy ComputeBuffer or GraphicsBuffer counter value.
     * @param src Append/consume buffer to copy the counter from.
     * @param dst A buffer to copy the counter to.
     * @param dstOffsetBytes Target byte offset in dst buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CopyCounterValue.html | Rendering.CommandBuffer.CopyCounterValue}
     */
    CopyCounterValue(src: GraphicsBuffer, dst: ComputeBuffer, dstOffsetBytes: number): void;
    /**
     * Adds a command to copy ComputeBuffer or GraphicsBuffer counter value.
     * @param src Append/consume buffer to copy the counter from.
     * @param dst A buffer to copy the counter to.
     * @param dstOffsetBytes Target byte offset in dst buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CopyCounterValue.html | Rendering.CommandBuffer.CopyCounterValue}
     */
    CopyCounterValue(src: ComputeBuffer, dst: GraphicsBuffer, dstOffsetBytes: number): void;
    /**
     * Adds a command to copy ComputeBuffer or GraphicsBuffer counter value.
     * @param src Append/consume buffer to copy the counter from.
     * @param dst A buffer to copy the counter to.
     * @param dstOffsetBytes Target byte offset in dst buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CopyCounterValue.html | Rendering.CommandBuffer.CopyCounterValue}
     */
    CopyCounterValue(src: GraphicsBuffer, dst: GraphicsBuffer, dstOffsetBytes: number): void;
    /**
     * Adds a command to copy pixel data from one texture to another.
     * @param src The source texture or RenderTargetIdentifier.
     * @param dst The destination texture or RenderTargetIdentifier.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CopyTexture.html | Rendering.CommandBuffer.CopyTexture}
     */
    CopyTexture(src: RenderTargetIdentifier, dst: RenderTargetIdentifier): void;
    /**
     * Adds a command to copy pixel data from one texture to another.
     * @param src The source texture or RenderTargetIdentifier.
     * @param srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
     * @param dst The destination texture or RenderTargetIdentifier.
     * @param dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CopyTexture.html | Rendering.CommandBuffer.CopyTexture}
     */
    CopyTexture(src: RenderTargetIdentifier, srcElement: number, dst: RenderTargetIdentifier, dstElement: number): void;
    /**
     * Adds a command to copy pixel data from one texture to another.
     * @param src The source texture or RenderTargetIdentifier.
     * @param srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
     * @param srcMip The mipmap level to copy from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * @param dst The destination texture or RenderTargetIdentifier.
     * @param dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
     * @param dstMip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CopyTexture.html | Rendering.CommandBuffer.CopyTexture}
     */
    CopyTexture(src: RenderTargetIdentifier, srcElement: number, srcMip: number, dst: RenderTargetIdentifier, dstElement: number, dstMip: number): void;
    /**
     * Adds a command to copy pixel data from one texture to another.
     * @param src The source texture or RenderTargetIdentifier.
     * @param srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
     * @param srcMip The mipmap level to copy from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * @param srcX The starting x coordinate of src to copy from. 0 is the left of the texture.
     * @param srcY The starting y coordinate of src to copy from. 0 is the bottom of the texture.
     * @param srcWidth The width of src to copy.
     * @param srcHeight The height of src to copy.
     * @param dst The destination texture or RenderTargetIdentifier.
     * @param dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
     * @param dstMip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * @param dstX The x coordinate of dst to copy to.
     * @param dstY The y coordinate to dst to copy to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CopyTexture.html | Rendering.CommandBuffer.CopyTexture}
     */
    CopyTexture(src: RenderTargetIdentifier, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dst: RenderTargetIdentifier, dstElement: number, dstMip: number, dstX: number, dstY: number): void;
    /**
     * Shortcut for calling CommandBuffer.CreateGraphicsFence with Rendering.GraphicsFenceType.AsyncQueueSynchronisation as the first parameter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CreateAsyncGraphicsFence.html | Rendering.CommandBuffer.CreateAsyncGraphicsFence}
     */
    CreateAsyncGraphicsFence(): GraphicsFence;
    /**
     * Shortcut for calling CommandBuffer.CreateGraphicsFence with Rendering.GraphicsFenceType.AsyncQueueSynchronisation as the first parameter.
     * @param stage Which SynchronisationStage to insert the fence after.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CreateAsyncGraphicsFence.html | Rendering.CommandBuffer.CreateAsyncGraphicsFence}
     */
    CreateAsyncGraphicsFence(stage: SynchronisationStage): GraphicsFence;
    /**
     * Creates a GraphicsFence.
     * @param fenceType The Rendering.GraphicsFenceType to create. Currently the only supported value is Rendering.GraphicsFenceType.AsyncQueueSynchronisation.
     * @param stage Which SynchronisationStage to insert the fence after.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.CreateGraphicsFence.html | Rendering.CommandBuffer.CreateGraphicsFence}
     */
    CreateGraphicsFence(fenceType: GraphicsFenceType, stage: SynchronisationStageFlags): GraphicsFence;
    /**
     * Adds a command to disable a global or local shader keyword.
     * @param keyword The global or local shader keyword to disable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DisableKeyword.html | Rendering.CommandBuffer.DisableKeyword}
     */
    DisableKeyword(keyword: GlobalKeyword): void;
    /**
     * Adds a command to disable a global or local shader keyword.
     * @param material The material on which to disable the local shader keyword.
     * @param keyword The global or local shader keyword to disable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DisableKeyword.html | Rendering.CommandBuffer.DisableKeyword}
     */
    DisableKeyword(material: Material, keyword: LocalKeyword): void;
    /**
     * Adds a command to disable a global or local shader keyword.
     * @param computeShader The compute shader for which to disable the local shader keyword.
     * @param keyword The global or local shader keyword to disable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DisableKeyword.html | Rendering.CommandBuffer.DisableKeyword}
     */
    DisableKeyword(computeShader: ComputeShader, keyword: LocalKeyword): void;
    /**
     * Add a command to disable the hardware scissor rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DisableScissorRect.html | Rendering.CommandBuffer.DisableScissorRect}
     */
    DisableScissorRect(): void;
    /**
     * Adds a command to disable a global shader keyword with a given name.
     * @param keyword Name of a global keyword to disable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DisableShaderKeyword.html | Rendering.CommandBuffer.DisableShaderKeyword}
     */
    DisableShaderKeyword(keyword: string): void;
    /**
     * Add a command to execute a ComputeShader.
     * @param computeShader ComputeShader to execute.
     * @param kernelIndex Kernel index to execute, see ComputeShader.FindKernel.
     * @param threadGroupsX Number of work groups in the X dimension.
     * @param threadGroupsY Number of work groups in the Y dimension.
     * @param threadGroupsZ Number of work groups in the Z dimension.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DispatchCompute.html | Rendering.CommandBuffer.DispatchCompute}
     */
    DispatchCompute(computeShader: ComputeShader, kernelIndex: number, threadGroupsX: number, threadGroupsY: number, threadGroupsZ: number): void;
    /**
     * Add a command to execute a ComputeShader.
     * @param computeShader ComputeShader to execute.
     * @param kernelIndex Kernel index to execute, see ComputeShader.FindKernel.
     * @param indirectBuffer ComputeBuffer with dispatch arguments.
     * @param argsOffset Byte offset indicating the location of the dispatch arguments in the buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DispatchCompute.html | Rendering.CommandBuffer.DispatchCompute}
     */
    DispatchCompute(computeShader: ComputeShader, kernelIndex: number, indirectBuffer: ComputeBuffer, argsOffset: number): void;
    /**
     * Add a command to execute a ComputeShader.
     * @param computeShader ComputeShader to execute.
     * @param kernelIndex Kernel index to execute, see ComputeShader.FindKernel.
     * @param indirectBuffer ComputeBuffer with dispatch arguments.
     * @param argsOffset Byte offset indicating the location of the dispatch arguments in the buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DispatchCompute.html | Rendering.CommandBuffer.DispatchCompute}
     */
    DispatchCompute(computeShader: ComputeShader, kernelIndex: number, indirectBuffer: GraphicsBuffer, argsOffset: number): void;
    /**
     * Adds a command to execute a RayTracingShader.
     * @param rayTracingShader RayTracingShader to execute.
     * @param rayGenName The name of the ray generation shader.
     * @param width The width of the ray generation shader thread grid.
     * @param height The height of the ray generation shader thread grid.
     * @param depth The depth of the ray generation shader thread grid.
     * @param camera Optional parameter used to setup camera-related built-in shader variables.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DispatchRays.html | Rendering.CommandBuffer.DispatchRays}
     */
    DispatchRays(rayTracingShader: RayTracingShader, rayGenName: string, width: number, height: number, depth: number, camera: Camera): void;
    /**
     * Adds a command to execute a RayTracingShader.
     * @param rayTracingShader RayTracingShader to execute.
     * @param rayGenName The name of the ray generation shader.
     * @param argsBuffer Buffer containing dispatch dimensions for indirect DispatchRays.
     * @param argsOffset The byte offset into argsBuffer where the dispatch dimensions start.
     * @param camera Optional parameter used to setup camera-related built-in shader variables.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DispatchRays.html | Rendering.CommandBuffer.DispatchRays}
     */
    DispatchRays(rayTracingShader: RayTracingShader, rayGenName: string, argsBuffer: GraphicsBuffer, argsOffset: number, camera: Camera): void;
    Dispose(): void;
    /**
     * Add a &quot;draw mesh&quot; command.
     * @param mesh Mesh to draw.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param submeshIndex Which subset of the mesh to render.
     * @param shaderPass Which pass of the shader to use (default is -1, which renders all passes).
     * @param properties Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMesh.html | Rendering.CommandBuffer.DrawMesh}
     */
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number, shaderPass: number, properties: MaterialPropertyBlock): void;
    /**
     * Add a &quot;draw mesh&quot; command.
     * @param mesh Mesh to draw.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param submeshIndex Which subset of the mesh to render.
     * @param shaderPass Which pass of the shader to use (default is -1, which renders all passes).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMesh.html | Rendering.CommandBuffer.DrawMesh}
     */
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number, shaderPass: number): void;
    /**
     * Add a &quot;draw mesh&quot; command.
     * @param mesh Mesh to draw.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param submeshIndex Which subset of the mesh to render.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMesh.html | Rendering.CommandBuffer.DrawMesh}
     */
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number): void;
    /**
     * Add a &quot;draw mesh&quot; command.
     * @param mesh Mesh to draw.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMesh.html | Rendering.CommandBuffer.DrawMesh}
     */
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material): void;
    /**
     * Adds a &quot;draw mesh with instancing&quot; command.

The mesh will be just drawn once, it won't be per-pixel lit and will not cast or receive realtime shadows.

The command will not immediately fail and throw an exception if Material.enableInstancing is false, but it will log an error and skips rendering each time the command is being executed if such a condition is detected.

InvalidOperationException will be thrown if the current platform doesn't support this API (i.e. if GPU instancing is not available). See SystemInfo.supportsInstancing.
     * @param mesh The Mesh to draw.
     * @param submeshIndex Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use, or -1 which renders all passes.
     * @param matrices The array of object transformation matrices.
     * @param count The number of instances to be drawn.
     * @param properties Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMeshInstanced.html | Rendering.CommandBuffer.DrawMeshInstanced}
     */
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, matrices: Readonly<Matrix4x4[]>, count: number, properties: MaterialPropertyBlock): void;
    /**
     * Adds a &quot;draw mesh with instancing&quot; command.

The mesh will be just drawn once, it won't be per-pixel lit and will not cast or receive realtime shadows.

The command will not immediately fail and throw an exception if Material.enableInstancing is false, but it will log an error and skips rendering each time the command is being executed if such a condition is detected.

InvalidOperationException will be thrown if the current platform doesn't support this API (i.e. if GPU instancing is not available). See SystemInfo.supportsInstancing.
     * @param mesh The Mesh to draw.
     * @param submeshIndex Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use, or -1 which renders all passes.
     * @param matrices The array of object transformation matrices.
     * @param count The number of instances to be drawn.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMeshInstanced.html | Rendering.CommandBuffer.DrawMeshInstanced}
     */
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, matrices: Readonly<Matrix4x4[]>, count: number): void;
    /**
     * Adds a &quot;draw mesh with instancing&quot; command.

The mesh will be just drawn once, it won't be per-pixel lit and will not cast or receive realtime shadows.

The command will not immediately fail and throw an exception if Material.enableInstancing is false, but it will log an error and skips rendering each time the command is being executed if such a condition is detected.

InvalidOperationException will be thrown if the current platform doesn't support this API (i.e. if GPU instancing is not available). See SystemInfo.supportsInstancing.
     * @param mesh The Mesh to draw.
     * @param submeshIndex Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use, or -1 which renders all passes.
     * @param matrices The array of object transformation matrices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMeshInstanced.html | Rendering.CommandBuffer.DrawMeshInstanced}
     */
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, matrices: Readonly<Matrix4x4[]>): void;
    /**
     * Add a &quot;draw mesh with indirect instancing&quot; command.
     * @param mesh The Mesh to draw.
     * @param submeshIndex Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use, or -1 which renders all passes.
     * @param bufferWithArgs The GPU buffer containing the arguments for how many instances of this mesh to draw.
     * @param argsOffset The byte offset into the buffer, where the draw arguments start.
     * @param properties Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMeshInstancedIndirect.html | Rendering.CommandBuffer.DrawMeshInstancedIndirect}
     */
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: ComputeBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    /**
     * Add a &quot;draw mesh with indirect instancing&quot; command.
     * @param mesh The Mesh to draw.
     * @param submeshIndex Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use, or -1 which renders all passes.
     * @param bufferWithArgs The GPU buffer containing the arguments for how many instances of this mesh to draw.
     * @param argsOffset The byte offset into the buffer, where the draw arguments start.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMeshInstancedIndirect.html | Rendering.CommandBuffer.DrawMeshInstancedIndirect}
     */
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: ComputeBuffer, argsOffset: number): void;
    /**
     * Add a &quot;draw mesh with indirect instancing&quot; command.
     * @param mesh The Mesh to draw.
     * @param submeshIndex Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use, or -1 which renders all passes.
     * @param bufferWithArgs The GPU buffer containing the arguments for how many instances of this mesh to draw.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMeshInstancedIndirect.html | Rendering.CommandBuffer.DrawMeshInstancedIndirect}
     */
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: ComputeBuffer): void;
    /**
     * Add a &quot;draw mesh with indirect instancing&quot; command.
     * @param mesh The Mesh to draw.
     * @param submeshIndex Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use, or -1 which renders all passes.
     * @param bufferWithArgs The GPU buffer containing the arguments for how many instances of this mesh to draw.
     * @param argsOffset The byte offset into the buffer, where the draw arguments start.
     * @param properties Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMeshInstancedIndirect.html | Rendering.CommandBuffer.DrawMeshInstancedIndirect}
     */
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: GraphicsBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    /**
     * Add a &quot;draw mesh with indirect instancing&quot; command.
     * @param mesh The Mesh to draw.
     * @param submeshIndex Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use, or -1 which renders all passes.
     * @param bufferWithArgs The GPU buffer containing the arguments for how many instances of this mesh to draw.
     * @param argsOffset The byte offset into the buffer, where the draw arguments start.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMeshInstancedIndirect.html | Rendering.CommandBuffer.DrawMeshInstancedIndirect}
     */
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: GraphicsBuffer, argsOffset: number): void;
    /**
     * Add a &quot;draw mesh with indirect instancing&quot; command.
     * @param mesh The Mesh to draw.
     * @param submeshIndex Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use, or -1 which renders all passes.
     * @param bufferWithArgs The GPU buffer containing the arguments for how many instances of this mesh to draw.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMeshInstancedIndirect.html | Rendering.CommandBuffer.DrawMeshInstancedIndirect}
     */
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: GraphicsBuffer): void;
    /**
     * Add a &quot;draw mesh with instancing&quot; command.

Draw a mesh using Procedural Instancing. This is similar to Graphics.DrawMeshInstancedIndirect, except that when the instance count is known from script, it can be supplied directly using this method, rather than via a ComputeBuffer.
If Material.enableInstancing is false, the command logs an error and skips rendering each time the command is executed; the command does not immediately fail and throw an exception.

InvalidOperationException will be thrown if the current platform doesn't support this API (for example, if GPU instancing is not available). See SystemInfo.supportsInstancing.
     * @param mesh The Mesh to draw.
     * @param submeshIndex Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use, or -1 which renders all passes.
     * @param count The number of instances to be drawn.
     * @param properties Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawMeshInstancedProcedural.html | Rendering.CommandBuffer.DrawMeshInstancedProcedural}
     */
    DrawMeshInstancedProcedural(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, count: number, properties: MaterialPropertyBlock): void;
    DrawMultipleMeshes(matrices: Readonly<Matrix4x4[]>, meshes: Readonly<Mesh[]>, subsetIndices: Readonly<number[]>, count: number, material: Material, shaderPass: number, properties: MaterialPropertyBlock): void;
    /**
     * Adds a command onto the commandbuffer to draw the VR Device's occlusion mesh to the current render target.
     * @param normalizedCamViewport The viewport of the camera currently being rendered.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawOcclusionMesh.html | Rendering.CommandBuffer.DrawOcclusionMesh}
     */
    DrawOcclusionMesh(normalizedCamViewport: RectInt): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param vertexCount Vertex count to render.
     * @param instanceCount Instance count to render.
     * @param properties Additional material properties to apply just before rendering. See MaterialPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProcedural.html | Rendering.CommandBuffer.DrawProcedural}
     */
    DrawProcedural(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, vertexCount: number, instanceCount: number, properties: MaterialPropertyBlock): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param vertexCount Vertex count to render.
     * @param instanceCount Instance count to render.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProcedural.html | Rendering.CommandBuffer.DrawProcedural}
     */
    DrawProcedural(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, vertexCount: number, instanceCount: number): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param vertexCount Vertex count to render.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProcedural.html | Rendering.CommandBuffer.DrawProcedural}
     */
    DrawProcedural(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, vertexCount: number): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param indexBuffer The index buffer used to submit vertices to the GPU.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param indexCount Index count to render.
     * @param instanceCount Instance count to render.
     * @param properties Additional material properties to apply just before rendering. See MaterialPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProcedural.html | Rendering.CommandBuffer.DrawProcedural}
     */
    DrawProcedural(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, indexCount: number, instanceCount: number, properties: MaterialPropertyBlock): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param indexBuffer The index buffer used to submit vertices to the GPU.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param indexCount Index count to render.
     * @param instanceCount Instance count to render.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProcedural.html | Rendering.CommandBuffer.DrawProcedural}
     */
    DrawProcedural(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, indexCount: number, instanceCount: number): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param indexBuffer The index buffer used to submit vertices to the GPU.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param indexCount Index count to render.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProcedural.html | Rendering.CommandBuffer.DrawProcedural}
     */
    DrawProcedural(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, indexCount: number): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * @param argsOffset Byte offset where in the buffer the draw arguments are.
     * @param properties Additional material properties to apply just before rendering. See MaterialPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * @param argsOffset Byte offset where in the buffer the draw arguments are.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param indexBuffer Index buffer used to submit vertices to the GPU.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * @param argsOffset Byte offset where in the buffer the draw arguments are.
     * @param properties Additional material properties to apply just before rendering. See MaterialPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param indexBuffer Index buffer used to submit vertices to the GPU.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * @param argsOffset Byte offset where in the buffer the draw arguments are.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param indexBuffer Index buffer used to submit vertices to the GPU.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * @param argsOffset Byte offset where in the buffer the draw arguments are.
     * @param properties Additional material properties to apply just before rendering. See MaterialPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * @param argsOffset Byte offset where in the buffer the draw arguments are.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param indexBuffer Index buffer used to submit vertices to the GPU.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * @param argsOffset Byte offset where in the buffer the draw arguments are.
     * @param properties Additional material properties to apply just before rendering. See MaterialPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param indexBuffer Index buffer used to submit vertices to the GPU.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * @param argsOffset Byte offset where in the buffer the draw arguments are.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number): void;
    /**
     * Add a &quot;draw procedural geometry&quot; command.
     * @param indexBuffer Index buffer used to submit vertices to the GPU.
     * @param matrix Transformation matrix to use.
     * @param material Material to use.
     * @param shaderPass Which pass of the shader to use (or -1 for all passes).
     * @param topology Topology of the procedural geometry.
     * @param bufferWithArgs Buffer with draw arguments.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawProceduralIndirect.html | Rendering.CommandBuffer.DrawProceduralIndirect}
     */
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer): void;
    /**
     * Add a &quot;draw renderer&quot; command.
     * @param renderer Renderer to draw.
     * @param material Material to use.
     * @param submeshIndex Which subset of the mesh to render.
     * @param shaderPass Which pass of the shader to use (default is -1, which renders all passes).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawRenderer.html | Rendering.CommandBuffer.DrawRenderer}
     */
    DrawRenderer(renderer: Renderer, material: Material, submeshIndex: number, shaderPass: number): void;
    /**
     * Add a &quot;draw renderer&quot; command.
     * @param renderer Renderer to draw.
     * @param material Material to use.
     * @param submeshIndex Which subset of the mesh to render.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawRenderer.html | Rendering.CommandBuffer.DrawRenderer}
     */
    DrawRenderer(renderer: Renderer, material: Material, submeshIndex: number): void;
    /**
     * Add a &quot;draw renderer&quot; command.
     * @param renderer Renderer to draw.
     * @param material Material to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawRenderer.html | Rendering.CommandBuffer.DrawRenderer}
     */
    DrawRenderer(renderer: Renderer, material: Material): void;
    /**
     * Adds a &quot;draw renderer list&quot; command.
     * @param rendererList The RendererList to draw.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.DrawRendererList.html | Rendering.CommandBuffer.DrawRendererList}
     */
    DrawRendererList(rendererList: RendererList): void;
    /**
     * Adds a command to enable a global or local shader keyword.
     * @param keyword The global or local shader keyword to enable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.EnableKeyword.html | Rendering.CommandBuffer.EnableKeyword}
     */
    EnableKeyword(keyword: GlobalKeyword): void;
    /**
     * Adds a command to enable a global or local shader keyword.
     * @param material The material on which to enable the local shader keyword.
     * @param keyword The global or local shader keyword to enable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.EnableKeyword.html | Rendering.CommandBuffer.EnableKeyword}
     */
    EnableKeyword(material: Material, keyword: LocalKeyword): void;
    /**
     * Adds a command to enable a global or local shader keyword.
     * @param computeShader The compute shader for which to enable the local shader keyword.
     * @param keyword The global or local shader keyword to enable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.EnableKeyword.html | Rendering.CommandBuffer.EnableKeyword}
     */
    EnableKeyword(computeShader: ComputeShader, keyword: LocalKeyword): void;
    /**
     * Add a command to enable the hardware scissor rectangle.
     * @param scissor Viewport rectangle in pixel coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.EnableScissorRect.html | Rendering.CommandBuffer.EnableScissorRect}
     */
    EnableScissorRect(scissor: Rect): void;
    /**
     * Adds a command to enable a global keyword with a given name.
     * @param keyword Name of a global shader keyword to enable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.EnableShaderKeyword.html | Rendering.CommandBuffer.EnableShaderKeyword}
     */
    EnableShaderKeyword(keyword: string): void;
    /**
     * Terminate the active native renderpass.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.EndRenderPass.html | Rendering.CommandBuffer.EndRenderPass}
     */
    EndRenderPass(): void;
    /**
     * Adds a command to end profile sampling.
     * @param name Name of the profile information used for sampling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.EndSample.html | Rendering.CommandBuffer.EndSample}
     */
    EndSample(name: string): void;
    /**
     * Adds a command to end profile sampling.
     * @param sampler The CustomSampler that the CommandBuffer uses for sampling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.EndSample.html | Rendering.CommandBuffer.EndSample}
     */
    EndSample(sampler: CustomSampler): void;
    /**
     * Adds a command to end profile sampling.
     * @param marker The ProfilerMarker that the CommandBuffer uses for sampling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.EndSample.html | Rendering.CommandBuffer.EndSample}
     */
    EndSample(marker: ProfilerMarker): void;
    /**
     * Generate mipmap levels of a render texture.
     * @param rt The render texture requiring mipmaps generation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GenerateMips.html | Rendering.CommandBuffer.GenerateMips}
     */
    GenerateMips(rt: RenderTargetIdentifier): void;
    /**
     * Generate mipmap levels of a render texture.
     * @param rt The render texture requiring mipmaps generation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GenerateMips.html | Rendering.CommandBuffer.GenerateMips}
     */
    GenerateMips(rt: RenderTexture): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * @param enableRandomWrite Should random-write access into the texture be enabled (default is false).
     * @param memorylessMode Render texture memoryless mode.
     * @param useDynamicScale Whether to enable for the texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode, format: GraphicsFormat, antiAliasing: number, enableRandomWrite: boolean, memorylessMode: RenderTextureMemoryless, useDynamicScale: boolean): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * @param enableRandomWrite Should random-write access into the texture be enabled (default is false).
     * @param memorylessMode Render texture memoryless mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode, format: GraphicsFormat, antiAliasing: number, enableRandomWrite: boolean, memorylessMode: RenderTextureMemoryless): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * @param enableRandomWrite Should random-write access into the texture be enabled (default is false).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode, format: GraphicsFormat, antiAliasing: number, enableRandomWrite: boolean): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode, format: GraphicsFormat, antiAliasing: number): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode, format: GraphicsFormat): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param readWrite Color space conversion mode.
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * @param enableRandomWrite Should random-write access into the texture be enabled (default is false).
     * @param memorylessMode Render texture memoryless mode.
     * @param useDynamicScale Whether to enable for the texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode, format: RenderTextureFormat, readWrite: RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean, memorylessMode: RenderTextureMemoryless, useDynamicScale: boolean): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param readWrite Color space conversion mode.
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * @param enableRandomWrite Should random-write access into the texture be enabled (default is false).
     * @param memorylessMode Render texture memoryless mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode, format: RenderTextureFormat, readWrite: RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean, memorylessMode: RenderTextureMemoryless): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param readWrite Color space conversion mode.
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * @param enableRandomWrite Should random-write access into the texture be enabled (default is false).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode, format: RenderTextureFormat, readWrite: RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param readWrite Color space conversion mode.
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode, format: RenderTextureFormat, readWrite: RenderTextureReadWrite, antiAliasing: number): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param readWrite Color space conversion mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode, format: RenderTextureFormat, readWrite: RenderTextureReadWrite): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode, format: RenderTextureFormat): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: FilterMode): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, width: number, height: number): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param desc Use this RenderTextureDescriptor for the settings when creating the temporary RenderTexture.
     * @param filter Texture filtering mode (default is Point).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, desc: RenderTextureDescriptor, filter: FilterMode): void;
    /**
     * Add a &quot;get a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * @param desc Use this RenderTextureDescriptor for the settings when creating the temporary RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html | Rendering.CommandBuffer.GetTemporaryRT}
     */
    GetTemporaryRT(nameID: number, desc: RenderTextureDescriptor): void;
    /**
     * Add a &quot;get a temporary render texture array&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param slices Number of slices in texture array.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * @param enableRandomWrite Should random-write access into the texture be enabled (default is false).
     * @param useDynamicScale Whether to enable for the texture array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRTArray.html | Rendering.CommandBuffer.GetTemporaryRTArray}
     */
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: FilterMode, format: GraphicsFormat, antiAliasing: number, enableRandomWrite: boolean, useDynamicScale: boolean): void;
    /**
     * Add a &quot;get a temporary render texture array&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param slices Number of slices in texture array.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * @param enableRandomWrite Should random-write access into the texture be enabled (default is false).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRTArray.html | Rendering.CommandBuffer.GetTemporaryRTArray}
     */
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: FilterMode, format: GraphicsFormat, antiAliasing: number, enableRandomWrite: boolean): void;
    /**
     * Add a &quot;get a temporary render texture array&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param slices Number of slices in texture array.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRTArray.html | Rendering.CommandBuffer.GetTemporaryRTArray}
     */
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: FilterMode, format: GraphicsFormat, antiAliasing: number): void;
    /**
     * Add a &quot;get a temporary render texture array&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param slices Number of slices in texture array.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRTArray.html | Rendering.CommandBuffer.GetTemporaryRTArray}
     */
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: FilterMode, format: GraphicsFormat): void;
    /**
     * Add a &quot;get a temporary render texture array&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param slices Number of slices in texture array.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param readWrite Color space conversion mode.
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * @param enableRandomWrite Should random-write access into the texture be enabled (default is false).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRTArray.html | Rendering.CommandBuffer.GetTemporaryRTArray}
     */
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: FilterMode, format: RenderTextureFormat, readWrite: RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean): void;
    /**
     * Add a &quot;get a temporary render texture array&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param slices Number of slices in texture array.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param readWrite Color space conversion mode.
     * @param antiAliasing Anti-aliasing (default is no anti-aliasing).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRTArray.html | Rendering.CommandBuffer.GetTemporaryRTArray}
     */
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: FilterMode, format: RenderTextureFormat, readWrite: RenderTextureReadWrite, antiAliasing: number): void;
    /**
     * Add a &quot;get a temporary render texture array&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param slices Number of slices in texture array.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * @param readWrite Color space conversion mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRTArray.html | Rendering.CommandBuffer.GetTemporaryRTArray}
     */
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: FilterMode, format: RenderTextureFormat, readWrite: RenderTextureReadWrite): void;
    /**
     * Add a &quot;get a temporary render texture array&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param slices Number of slices in texture array.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * @param format Format of the render texture (default is ARGB32).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRTArray.html | Rendering.CommandBuffer.GetTemporaryRTArray}
     */
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: FilterMode, format: RenderTextureFormat): void;
    /**
     * Add a &quot;get a temporary render texture array&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param slices Number of slices in texture array.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * @param filter Texture filtering mode (default is Point).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRTArray.html | Rendering.CommandBuffer.GetTemporaryRTArray}
     */
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: FilterMode): void;
    /**
     * Add a &quot;get a temporary render texture array&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param slices Number of slices in texture array.
     * @param depthBuffer Depth buffer bits (0, 16 or 24).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRTArray.html | Rendering.CommandBuffer.GetTemporaryRTArray}
     */
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number): void;
    /**
     * Add a &quot;get a temporary render texture array&quot; command.
     * @param nameID Shader property name for this texture.
     * @param width Width in pixels, or -1 for &quot;camera pixel width&quot;.
     * @param height Height in pixels, or -1 for &quot;camera pixel height&quot;.
     * @param slices Number of slices in texture array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.GetTemporaryRTArray.html | Rendering.CommandBuffer.GetTemporaryRTArray}
     */
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number): void;
    /**
     * Increments the updateCount property of a Texture.
     * @param dest Increments the updateCount for this Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.IncrementUpdateCount.html | Rendering.CommandBuffer.IncrementUpdateCount}
     */
    IncrementUpdateCount(dest: RenderTargetIdentifier): void;
    /**
     * Schedules an invocation of the OnRenderObject callback for MonoBehaviour scripts.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.InvokeOnRenderObjectCallbacks.html | Rendering.CommandBuffer.InvokeOnRenderObjectCallbacks}
     */
    InvokeOnRenderObjectCallbacks(): void;
    /**
     * Send a user-defined blit event to a native code plugin.
     * @param callback Native code callback to queue for Unity's renderer to invoke.
     * @param command User defined command id to send to the callback.
     * @param source Source render target.
     * @param dest Destination render target.
     * @param commandParam User data command parameters.
     * @param commandFlags User data command flags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.IssuePluginCustomBlit.html | Rendering.CommandBuffer.IssuePluginCustomBlit}
     */
    IssuePluginCustomBlit(callback: IntPtr, command: number, source: RenderTargetIdentifier, dest: RenderTargetIdentifier, commandParam: number, commandFlags: number): void;
    /**
     * Send a texture update event to a native code plugin.
     * @param callback Native code callback to queue for Unity's renderer to invoke.
     * @param targetTexture Texture resource to be updated.
     * @param userData User data to send to the native plugin.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.IssuePluginCustomTextureUpdateV2.html | Rendering.CommandBuffer.IssuePluginCustomTextureUpdateV2}
     */
    IssuePluginCustomTextureUpdateV2(callback: IntPtr, targetTexture: Texture, userData: number): void;
    /**
     * Send a user-defined event to a native code plugin.
     * @param callback Native code callback to queue for Unity's renderer to invoke.
     * @param eventID User defined id to send to the callback.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.IssuePluginEvent.html | Rendering.CommandBuffer.IssuePluginEvent}
     */
    IssuePluginEvent(callback: IntPtr, eventID: number): void;
    /**
     * Send a user-defined event to a native code plugin with custom data.
     * @param callback Native code callback to queue for Unity's renderer to invoke.
     * @param eventID Built in or user defined id to send to the callback.
     * @param data Custom data to pass to the native plugin callback.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.IssuePluginEventAndData.html | Rendering.CommandBuffer.IssuePluginEventAndData}
     */
    IssuePluginEventAndData(callback: IntPtr, eventID: number, data: IntPtr): void;
    /**
     * Send a user-defined event to a native code plugin with custom data and callback flags.
     * @param callback Native code callback to queue for Unity's renderer to invoke.
     * @param eventID Built in or user defined id to send to the callback.
     * @param flags See CustomMarkerCallbackFlags for more details.
     * @param data Custom data to pass to the native plugin callback.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.IssuePluginEventAndDataWithFlags.html | Rendering.CommandBuffer.IssuePluginEventAndDataWithFlags}
     */
    IssuePluginEventAndDataWithFlags(callback: IntPtr, eventID: number, flags: CustomMarkerCallbackFlags, data: IntPtr): void;
    /**
     * Mark a global shader property id to be late latched.  Possible shader properties include view, inverseView, viewProjection, and inverseViewProjection matrices. The Universal Render Pipeline (URP) uses this function to support late latching of shader properties. If you call this function when using built-in Unity rendering or the High-Definition Rendering Pipeline (HDRP), the results are ignored.
     * @param matrixPropertyType Camera matrix property type to be late latched.
     * @param shaderPropertyID Shader property name id.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.MarkLateLatchMatrixShaderPropertyID.html | Rendering.CommandBuffer.MarkLateLatchMatrixShaderPropertyID}
     */
    MarkLateLatchMatrixShaderPropertyID(matrixPropertyType: CameraLateLatchMatrixType, shaderPropertyID: number): void;
    /**
     * Start the next native subpass as discribed by CommandBuffer.BeginRenderPass.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.NextSubPass.html | Rendering.CommandBuffer.NextSubPass}
     */
    NextSubPass(): void;
    ProcessVTFeedback(rt: RenderTargetIdentifier, resolver: IntPtr, slice: number, x: number, width: number, y: number, height: number, mip: number): void;
    Release(): void;
    /**
     * Add a &quot;release a temporary render texture&quot; command.
     * @param nameID Shader property name for this texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.ReleaseTemporaryRT.html | Rendering.CommandBuffer.ReleaseTemporaryRT}
     */
    ReleaseTemporaryRT(nameID: number): void;
    RequestAsyncReadback(src: ComputeBuffer, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadback(src: GraphicsBuffer, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadback(src: ComputeBuffer, size: number, offset: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadback(src: GraphicsBuffer, size: number, offset: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadback(src: Texture, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadback(src: Texture, mipIndex: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadback(src: Texture, mipIndex: number, dstFormat: TextureFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadback(src: Texture, mipIndex: number, dstFormat: GraphicsFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadback(src: Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadback(src: Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, dstFormat: TextureFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadback(src: Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, dstFormat: GraphicsFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeArray<T>(output: Readonly<T[]>, src: ComputeBuffer, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeArray<T>(output: Readonly<T[]>, src: ComputeBuffer, size: number, offset: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeArray<T>(output: Readonly<T[]>, src: GraphicsBuffer, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeArray<T>(output: Readonly<T[]>, src: GraphicsBuffer, size: number, offset: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeArray<T>(output: Readonly<T[]>, src: Texture, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeArray<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeArray<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, dstFormat: TextureFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeArray<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, dstFormat: GraphicsFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeArray<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeArray<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, dstFormat: TextureFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeArray<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, dstFormat: GraphicsFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeSlice<T>(output: Readonly<T[]>, src: ComputeBuffer, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeSlice<T>(output: Readonly<T[]>, src: ComputeBuffer, size: number, offset: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeSlice<T>(output: Readonly<T[]>, src: GraphicsBuffer, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeSlice<T>(output: Readonly<T[]>, src: GraphicsBuffer, size: number, offset: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeSlice<T>(output: Readonly<T[]>, src: Texture, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeSlice<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeSlice<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, dstFormat: TextureFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeSlice<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, dstFormat: GraphicsFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeSlice<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeSlice<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, dstFormat: TextureFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    RequestAsyncReadbackIntoNativeSlice<T>(output: Readonly<T[]>, src: Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, dstFormat: GraphicsFormat, callback: Action<AsyncGPUReadbackRequest>): void;
    /**
     * Force an antialiased render texture to be resolved.
     * @param rt The antialiased render texture to resolve.
     * @param target The render texture to resolve into.  If set, the target render texture must have the same dimensions and format as the source.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.ResolveAntiAliasedSurface.html | Rendering.CommandBuffer.ResolveAntiAliasedSurface}
     */
    ResolveAntiAliasedSurface(rt: RenderTexture, target: RenderTexture): void;
    /**
     * Adds a command to set the counter value of append/consume buffer.
     * @param buffer The destination buffer.
     * @param counterValue Value of the append/consume counter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetBufferCounterValue.html | Rendering.CommandBuffer.SetBufferCounterValue}
     */
    SetBufferCounterValue(buffer: ComputeBuffer, counterValue: number): void;
    /**
     * Adds a command to set the counter value of append/consume buffer.
     * @param buffer The destination buffer.
     * @param counterValue Value of the append/consume counter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetBufferCounterValue.html | Rendering.CommandBuffer.SetBufferCounterValue}
     */
    SetBufferCounterValue(buffer: GraphicsBuffer, counterValue: number): void;
    /**
     * Adds a command to set the buffer with values from an array.
     * @param buffer The destination buffer.
     * @param data Array of values to fill the buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetBufferData.html | Rendering.CommandBuffer.SetBufferData}
     */
    SetBufferData(buffer: ComputeBuffer, data: Array): void;
    SetBufferData<T>(buffer: ComputeBuffer, data: Readonly<T[]>): void;
    SetBufferData<T>(buffer: ComputeBuffer, data: Readonly<T[]>): void;
    /**
     * Adds a command to process a partial copy of data values from an array into the buffer.
     * @param buffer The destination buffer.
     * @param data Array of values to fill the buffer.
     * @param managedBufferStartIndex The first element index in data to copy to the compute buffer.
     * @param graphicsBufferStartIndex The first element index in compute buffer to receive the data.
     * @param count The number of elements to copy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetBufferData.html | Rendering.CommandBuffer.SetBufferData}
     */
    SetBufferData(buffer: ComputeBuffer, data: Array, managedBufferStartIndex: number, graphicsBufferStartIndex: number, count: number): void;
    SetBufferData<T>(buffer: ComputeBuffer, data: Readonly<T[]>, managedBufferStartIndex: number, graphicsBufferStartIndex: number, count: number): void;
    SetBufferData<T>(buffer: ComputeBuffer, data: Readonly<T[]>, nativeBufferStartIndex: number, graphicsBufferStartIndex: number, count: number): void;
    /**
     * Adds a command to set the buffer with values from an array.
     * @param buffer The destination buffer.
     * @param data Array of values to fill the buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetBufferData.html | Rendering.CommandBuffer.SetBufferData}
     */
    SetBufferData(buffer: GraphicsBuffer, data: Array): void;
    SetBufferData<T>(buffer: GraphicsBuffer, data: Readonly<T[]>): void;
    SetBufferData<T>(buffer: GraphicsBuffer, data: Readonly<T[]>): void;
    /**
     * Adds a command to process a partial copy of data values from an array into the buffer.
     * @param buffer The destination buffer.
     * @param data Array of values to fill the buffer.
     * @param managedBufferStartIndex The first element index in data to copy to the compute buffer.
     * @param graphicsBufferStartIndex The first element index in compute buffer to receive the data.
     * @param count The number of elements to copy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetBufferData.html | Rendering.CommandBuffer.SetBufferData}
     */
    SetBufferData(buffer: GraphicsBuffer, data: Array, managedBufferStartIndex: number, graphicsBufferStartIndex: number, count: number): void;
    SetBufferData<T>(buffer: GraphicsBuffer, data: Readonly<T[]>, managedBufferStartIndex: number, graphicsBufferStartIndex: number, count: number): void;
    SetBufferData<T>(buffer: GraphicsBuffer, data: Readonly<T[]>, nativeBufferStartIndex: number, graphicsBufferStartIndex: number, count: number): void;
    /**
     * Adds a command to set an input or output buffer parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the buffer is being set for. See ComputeShader.FindKernel.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param buffer Buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeBufferParam.html | Rendering.CommandBuffer.SetComputeBufferParam}
     */
    SetComputeBufferParam(computeShader: ComputeShader, kernelIndex: number, nameID: number, buffer: ComputeBuffer): void;
    /**
     * Adds a command to set an input or output buffer parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the buffer is being set for. See ComputeShader.FindKernel.
     * @param name Name of the buffer variable in shader code.
     * @param buffer Buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeBufferParam.html | Rendering.CommandBuffer.SetComputeBufferParam}
     */
    SetComputeBufferParam(computeShader: ComputeShader, kernelIndex: number, name: string, buffer: ComputeBuffer): void;
    /**
     * Adds a command to set an input or output buffer parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the buffer is being set for. See ComputeShader.FindKernel.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param bufferHandle The handle of the buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeBufferParam.html | Rendering.CommandBuffer.SetComputeBufferParam}
     */
    SetComputeBufferParam(computeShader: ComputeShader, kernelIndex: number, nameID: number, bufferHandle: GraphicsBufferHandle): void;
    /**
     * Adds a command to set an input or output buffer parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the buffer is being set for. See ComputeShader.FindKernel.
     * @param name Name of the buffer variable in shader code.
     * @param bufferHandle The handle of the buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeBufferParam.html | Rendering.CommandBuffer.SetComputeBufferParam}
     */
    SetComputeBufferParam(computeShader: ComputeShader, kernelIndex: number, name: string, bufferHandle: GraphicsBufferHandle): void;
    /**
     * Adds a command to set an input or output buffer parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the buffer is being set for. See ComputeShader.FindKernel.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param buffer Buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeBufferParam.html | Rendering.CommandBuffer.SetComputeBufferParam}
     */
    SetComputeBufferParam(computeShader: ComputeShader, kernelIndex: number, nameID: number, buffer: GraphicsBuffer): void;
    /**
     * Adds a command to set an input or output buffer parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the buffer is being set for. See ComputeShader.FindKernel.
     * @param name Name of the buffer variable in shader code.
     * @param buffer Buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeBufferParam.html | Rendering.CommandBuffer.SetComputeBufferParam}
     */
    SetComputeBufferParam(computeShader: ComputeShader, kernelIndex: number, name: string, buffer: GraphicsBuffer): void;
    /**
     * Adds a command to set a constant buffer on a ComputeShader.
     * @param computeShader The ComputeShader to set parameter for.
     * @param nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeConstantBufferParam.html | Rendering.CommandBuffer.SetComputeConstantBufferParam}
     */
    SetComputeConstantBufferParam(computeShader: ComputeShader, nameID: number, buffer: ComputeBuffer, offset: number, size: number): void;
    /**
     * Adds a command to set a constant buffer on a ComputeShader.
     * @param computeShader The ComputeShader to set parameter for.
     * @param name The name of the constant buffer in shaders code.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeConstantBufferParam.html | Rendering.CommandBuffer.SetComputeConstantBufferParam}
     */
    SetComputeConstantBufferParam(computeShader: ComputeShader, name: string, buffer: ComputeBuffer, offset: number, size: number): void;
    /**
     * Adds a command to set a constant buffer on a ComputeShader.
     * @param computeShader The ComputeShader to set parameter for.
     * @param nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeConstantBufferParam.html | Rendering.CommandBuffer.SetComputeConstantBufferParam}
     */
    SetComputeConstantBufferParam(computeShader: ComputeShader, nameID: number, buffer: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Adds a command to set a constant buffer on a ComputeShader.
     * @param computeShader The ComputeShader to set parameter for.
     * @param name The name of the constant buffer in shaders code.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeConstantBufferParam.html | Rendering.CommandBuffer.SetComputeConstantBufferParam}
     */
    SetComputeConstantBufferParam(computeShader: ComputeShader, name: string, buffer: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Adds a command to set a float parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeFloatParam.html | Rendering.CommandBuffer.SetComputeFloatParam}
     */
    SetComputeFloatParam(computeShader: ComputeShader, nameID: number, val: number): void;
    /**
     * Adds a command to set a float parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeFloatParam.html | Rendering.CommandBuffer.SetComputeFloatParam}
     */
    SetComputeFloatParam(computeShader: ComputeShader, name: string, val: number): void;
    /**
     * Adds a command to set multiple consecutive float parameters on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param values Values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeFloatParams.html | Rendering.CommandBuffer.SetComputeFloatParams}
     */
    SetComputeFloatParams(computeShader: ComputeShader, name: string, values: Readonly<number[]>): void;
    /**
     * Adds a command to set multiple consecutive float parameters on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param values Values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeFloatParams.html | Rendering.CommandBuffer.SetComputeFloatParams}
     */
    SetComputeFloatParams(computeShader: ComputeShader, nameID: number, values: Readonly<number[]>): void;
    /**
     * Adds a command to set an integer parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeIntParam.html | Rendering.CommandBuffer.SetComputeIntParam}
     */
    SetComputeIntParam(computeShader: ComputeShader, nameID: number, val: number): void;
    /**
     * Adds a command to set an integer parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeIntParam.html | Rendering.CommandBuffer.SetComputeIntParam}
     */
    SetComputeIntParam(computeShader: ComputeShader, name: string, val: number): void;
    /**
     * Adds a command to set multiple consecutive integer parameters on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param values Values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeIntParams.html | Rendering.CommandBuffer.SetComputeIntParams}
     */
    SetComputeIntParams(computeShader: ComputeShader, name: string, values: Readonly<number[]>): void;
    /**
     * Adds a command to set multiple consecutive integer parameters on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param values Values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeIntParams.html | Rendering.CommandBuffer.SetComputeIntParams}
     */
    SetComputeIntParams(computeShader: ComputeShader, nameID: number, values: Readonly<number[]>): void;
    /**
     * Adds a command to set a matrix array parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeMatrixArrayParam.html | Rendering.CommandBuffer.SetComputeMatrixArrayParam}
     */
    SetComputeMatrixArrayParam(computeShader: ComputeShader, nameID: number, values: Readonly<Matrix4x4[]>): void;
    /**
     * Adds a command to set a matrix array parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeMatrixArrayParam.html | Rendering.CommandBuffer.SetComputeMatrixArrayParam}
     */
    SetComputeMatrixArrayParam(computeShader: ComputeShader, name: string, values: Readonly<Matrix4x4[]>): void;
    /**
     * Adds a command to set a matrix parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeMatrixParam.html | Rendering.CommandBuffer.SetComputeMatrixParam}
     */
    SetComputeMatrixParam(computeShader: ComputeShader, nameID: number, val: Matrix4x4): void;
    /**
     * Adds a command to set a matrix parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeMatrixParam.html | Rendering.CommandBuffer.SetComputeMatrixParam}
     */
    SetComputeMatrixParam(computeShader: ComputeShader, name: string, val: Matrix4x4): void;
    /**
     * Sets the parameters for a compute shader kernel from a Material.
     * @param computeShader The ComputeShader to set parameters for.
     * @param kernelIndex The index of the kernel to set the material parameters. See ComputeShader.FindKernel.
     * @param material The material to set the compute parameters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeParamsFromMaterial.html | Rendering.CommandBuffer.SetComputeParamsFromMaterial}
     */
    SetComputeParamsFromMaterial(computeShader: ComputeShader, kernelIndex: number, material: Material): void;
    /**
     * Adds a command to set a texture parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the texture is being set for. See ComputeShader.FindKernel.
     * @param name Name of the texture variable in shader code.
     * @param rt Texture value or identifier to set, see RenderTargetIdentifier.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeTextureParam.html | Rendering.CommandBuffer.SetComputeTextureParam}
     */
    SetComputeTextureParam(computeShader: ComputeShader, kernelIndex: number, name: string, rt: RenderTargetIdentifier): void;
    /**
     * Adds a command to set a texture parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the texture is being set for. See ComputeShader.FindKernel.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param rt Texture value or identifier to set, see RenderTargetIdentifier.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeTextureParam.html | Rendering.CommandBuffer.SetComputeTextureParam}
     */
    SetComputeTextureParam(computeShader: ComputeShader, kernelIndex: number, nameID: number, rt: RenderTargetIdentifier): void;
    /**
     * Adds a command to set a texture parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the texture is being set for. See ComputeShader.FindKernel.
     * @param name Name of the texture variable in shader code.
     * @param rt Texture value or identifier to set, see RenderTargetIdentifier.
     * @param mipLevel Optional mipmap level of the read-write texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeTextureParam.html | Rendering.CommandBuffer.SetComputeTextureParam}
     */
    SetComputeTextureParam(computeShader: ComputeShader, kernelIndex: number, name: string, rt: RenderTargetIdentifier, mipLevel: number): void;
    /**
     * Adds a command to set a texture parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the texture is being set for. See ComputeShader.FindKernel.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param rt Texture value or identifier to set, see RenderTargetIdentifier.
     * @param mipLevel Optional mipmap level of the read-write texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeTextureParam.html | Rendering.CommandBuffer.SetComputeTextureParam}
     */
    SetComputeTextureParam(computeShader: ComputeShader, kernelIndex: number, nameID: number, rt: RenderTargetIdentifier, mipLevel: number): void;
    /**
     * Adds a command to set a texture parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the texture is being set for. See ComputeShader.FindKernel.
     * @param name Name of the texture variable in shader code.
     * @param rt Texture value or identifier to set, see RenderTargetIdentifier.
     * @param mipLevel Optional mipmap level of the read-write texture.
     * @param element Optional parameter that specifies the type of data to set from the RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeTextureParam.html | Rendering.CommandBuffer.SetComputeTextureParam}
     */
    SetComputeTextureParam(computeShader: ComputeShader, kernelIndex: number, name: string, rt: RenderTargetIdentifier, mipLevel: number, element: RenderTextureSubElement): void;
    /**
     * Adds a command to set a texture parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param kernelIndex Which kernel the texture is being set for. See ComputeShader.FindKernel.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param rt Texture value or identifier to set, see RenderTargetIdentifier.
     * @param mipLevel Optional mipmap level of the read-write texture.
     * @param element Optional parameter that specifies the type of data to set from the RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeTextureParam.html | Rendering.CommandBuffer.SetComputeTextureParam}
     */
    SetComputeTextureParam(computeShader: ComputeShader, kernelIndex: number, nameID: number, rt: RenderTargetIdentifier, mipLevel: number, element: RenderTextureSubElement): void;
    /**
     * Adds a command to set a vector array parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeVectorArrayParam.html | Rendering.CommandBuffer.SetComputeVectorArrayParam}
     */
    SetComputeVectorArrayParam(computeShader: ComputeShader, nameID: number, values: Readonly<Vector4[]>): void;
    /**
     * Adds a command to set a vector array parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param name Property name.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeVectorArrayParam.html | Rendering.CommandBuffer.SetComputeVectorArrayParam}
     */
    SetComputeVectorArrayParam(computeShader: ComputeShader, name: string, values: Readonly<Vector4[]>): void;
    /**
     * Adds a command to set a vector parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeVectorParam.html | Rendering.CommandBuffer.SetComputeVectorParam}
     */
    SetComputeVectorParam(computeShader: ComputeShader, nameID: number, val: Vector4): void;
    /**
     * Adds a command to set a vector parameter on a ComputeShader.
     * @param computeShader ComputeShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetComputeVectorParam.html | Rendering.CommandBuffer.SetComputeVectorParam}
     */
    SetComputeVectorParam(computeShader: ComputeShader, name: string, val: Vector4): void;
    /**
     * Set flags describing the intention for how the command buffer will be executed.
     * @param flags The flags to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetExecutionFlags.html | Rendering.CommandBuffer.SetExecutionFlags}
     */
    SetExecutionFlags(flags: CommandBufferExecutionFlags): void;
    /**
     * Adds a command to set the mode to use for foveated rendering.
     * @param foveatedRenderingMode The mode to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetFoveatedRenderingMode.html | Rendering.CommandBuffer.SetFoveatedRenderingMode}
     */
    SetFoveatedRenderingMode(foveatedRenderingMode: FoveatedRenderingMode): void;
    /**
     * Add a &quot;set global shader buffer property&quot; command.
     * @param name The name of the property.
     * @param value The buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalBuffer.html | Rendering.CommandBuffer.SetGlobalBuffer}
     */
    SetGlobalBuffer(name: string, value: ComputeBuffer): void;
    /**
     * Add a &quot;set global shader buffer property&quot; command.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalBuffer.html | Rendering.CommandBuffer.SetGlobalBuffer}
     */
    SetGlobalBuffer(nameID: number, value: ComputeBuffer): void;
    /**
     * Add a &quot;set global shader buffer property&quot; command.
     * @param name The name of the property.
     * @param value The buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalBuffer.html | Rendering.CommandBuffer.SetGlobalBuffer}
     */
    SetGlobalBuffer(name: string, value: GraphicsBuffer): void;
    /**
     * Add a &quot;set global shader buffer property&quot; command.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalBuffer.html | Rendering.CommandBuffer.SetGlobalBuffer}
     */
    SetGlobalBuffer(nameID: number, value: GraphicsBuffer): void;
    /**
     * Add a &quot;set global shader color property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalColor.html | Rendering.CommandBuffer.SetGlobalColor}
     */
    SetGlobalColor(nameID: number, value: Color): void;
    /**
     * Add a &quot;set global shader color property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalColor.html | Rendering.CommandBuffer.SetGlobalColor}
     */
    SetGlobalColor(name: string, value: Color): void;
    /**
     * Add a command to bind a global constant buffer.
     * @param buffer The buffer to bind.
     * @param nameID The name ID of the constant buffer retrieved by Shader.PropertyToID.
     * @param offset Offset from the start of the buffer in bytes.
     * @param size Size in bytes of the area to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalConstantBuffer.html | Rendering.CommandBuffer.SetGlobalConstantBuffer}
     */
    SetGlobalConstantBuffer(buffer: ComputeBuffer, nameID: number, offset: number, size: number): void;
    /**
     * Add a command to bind a global constant buffer.
     * @param buffer The buffer to bind.
     * @param name The name of the constant buffer to override.
     * @param offset Offset from the start of the buffer in bytes.
     * @param size Size in bytes of the area to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalConstantBuffer.html | Rendering.CommandBuffer.SetGlobalConstantBuffer}
     */
    SetGlobalConstantBuffer(buffer: ComputeBuffer, name: string, offset: number, size: number): void;
    /**
     * Add a command to bind a global constant buffer.
     * @param buffer The buffer to bind.
     * @param nameID The name ID of the constant buffer retrieved by Shader.PropertyToID.
     * @param offset Offset from the start of the buffer in bytes.
     * @param size Size in bytes of the area to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalConstantBuffer.html | Rendering.CommandBuffer.SetGlobalConstantBuffer}
     */
    SetGlobalConstantBuffer(buffer: GraphicsBuffer, nameID: number, offset: number, size: number): void;
    /**
     * Add a command to bind a global constant buffer.
     * @param buffer The buffer to bind.
     * @param name The name of the constant buffer to override.
     * @param offset Offset from the start of the buffer in bytes.
     * @param size Size in bytes of the area to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalConstantBuffer.html | Rendering.CommandBuffer.SetGlobalConstantBuffer}
     */
    SetGlobalConstantBuffer(buffer: GraphicsBuffer, name: string, offset: number, size: number): void;
    /**
     * Adds a command to set the global depth bias.
     * @param bias Scales the GPU's minimum resolvable depth buffer value to produce a constant depth offset. The minimum resolvable depth buffer value varies by device.

Set to a negative value to draw geometry closer to the camera, or a positive value to draw geometry further away from the camera.
     * @param slopeBias Scales the maximum Z slope, also called the depth slope, to produce a variable depth offset for each polygon.

Polygons that are not parallel to the near and far clip planes have Z slope. Adjust this value to avoid visual artifacts on such polygons.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalDepthBias.html | Rendering.CommandBuffer.SetGlobalDepthBias}
     */
    SetGlobalDepthBias(bias: number, slopeBias: number): void;
    /**
     * Add a &quot;set global shader float property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalFloat.html | Rendering.CommandBuffer.SetGlobalFloat}
     */
    SetGlobalFloat(nameID: number, value: number): void;
    /**
     * Add a &quot;set global shader float property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalFloat.html | Rendering.CommandBuffer.SetGlobalFloat}
     */
    SetGlobalFloat(name: string, value: number): void;
    /**
     * Add a &quot;set global shader float array property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalFloatArray.html | Rendering.CommandBuffer.SetGlobalFloatArray}
     */
    SetGlobalFloatArray(nameID: number, values: Readonly<number[]>): void;
    SetGlobalFloatArray(propertyName: string, values: Readonly<number[]>): void;
    SetGlobalFloatArray(nameID: number, values: Readonly<number[]>): void;
    /**
     * Add a &quot;set global shader float array property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalFloatArray.html | Rendering.CommandBuffer.SetGlobalFloatArray}
     */
    SetGlobalFloatArray(propertyName: string, values: Readonly<number[]>): void;
    /**
     * Adds a command to set the value of a given property for all Shaders, where the property has a type of Int in ShaderLab code.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalInt.html | Rendering.CommandBuffer.SetGlobalInt}
     */
    SetGlobalInt(nameID: number, value: number): void;
    /**
     * Adds a command to set the value of a given property for all Shaders, where the property has a type of Int in ShaderLab code.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalInt.html | Rendering.CommandBuffer.SetGlobalInt}
     */
    SetGlobalInt(name: string, value: number): void;
    /**
     * Adds a command to set the value of a given property for all Shaders, where the property is an integer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalInteger.html | Rendering.CommandBuffer.SetGlobalInteger}
     */
    SetGlobalInteger(nameID: number, value: number): void;
    /**
     * Adds a command to set the value of a given property for all Shaders, where the property is an integer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalInteger.html | Rendering.CommandBuffer.SetGlobalInteger}
     */
    SetGlobalInteger(name: string, value: number): void;
    /**
     * Add a &quot;set global shader matrix property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalMatrix.html | Rendering.CommandBuffer.SetGlobalMatrix}
     */
    SetGlobalMatrix(nameID: number, value: Matrix4x4): void;
    /**
     * Add a &quot;set global shader matrix property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalMatrix.html | Rendering.CommandBuffer.SetGlobalMatrix}
     */
    SetGlobalMatrix(name: string, value: Matrix4x4): void;
    /**
     * Add a &quot;set global shader matrix array property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalMatrixArray.html | Rendering.CommandBuffer.SetGlobalMatrixArray}
     */
    SetGlobalMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    SetGlobalMatrixArray(propertyName: string, values: Readonly<Matrix4x4[]>): void;
    SetGlobalMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    /**
     * Add a &quot;set global shader matrix array property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalMatrixArray.html | Rendering.CommandBuffer.SetGlobalMatrixArray}
     */
    SetGlobalMatrixArray(propertyName: string, values: Readonly<Matrix4x4[]>): void;
    /**
     * Adds a command to bind the RayTracingAccelerationStructure object to all shader stages.
     * @param name The name of the acceleration structure in shader code.
     * @param accelerationStructure The acceleration structure to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalRayTracingAccelerationStructure.html | Rendering.CommandBuffer.SetGlobalRayTracingAccelerationStructure}
     */
    SetGlobalRayTracingAccelerationStructure(name: string, accelerationStructure: RayTracingAccelerationStructure): void;
    /**
     * Adds a command to bind the RayTracingAccelerationStructure object to all shader stages.
     * @param nameID The name ID of the acceleration structure in shader code. Use Shader.PropertyToID to get this value.
     * @param accelerationStructure The acceleration structure to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalRayTracingAccelerationStructure.html | Rendering.CommandBuffer.SetGlobalRayTracingAccelerationStructure}
     */
    SetGlobalRayTracingAccelerationStructure(nameID: number, accelerationStructure: RayTracingAccelerationStructure): void;
    /**
     * Add a &quot;set global shader texture property&quot; command, referencing a RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalTexture.html | Rendering.CommandBuffer.SetGlobalTexture}
     */
    SetGlobalTexture(name: string, value: RenderTargetIdentifier): void;
    /**
     * Add a &quot;set global shader texture property&quot; command, referencing a RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalTexture.html | Rendering.CommandBuffer.SetGlobalTexture}
     */
    SetGlobalTexture(nameID: number, value: RenderTargetIdentifier): void;
    /**
     * Add a &quot;set global shader texture property&quot; command, referencing a RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalTexture.html | Rendering.CommandBuffer.SetGlobalTexture}
     */
    SetGlobalTexture(name: string, value: RenderTargetIdentifier, element: RenderTextureSubElement): void;
    /**
     * Add a &quot;set global shader texture property&quot; command, referencing a RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalTexture.html | Rendering.CommandBuffer.SetGlobalTexture}
     */
    SetGlobalTexture(nameID: number, value: RenderTargetIdentifier, element: RenderTextureSubElement): void;
    /**
     * Add a &quot;set global shader vector property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalVector.html | Rendering.CommandBuffer.SetGlobalVector}
     */
    SetGlobalVector(nameID: number, value: Vector4): void;
    /**
     * Add a &quot;set global shader vector property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalVector.html | Rendering.CommandBuffer.SetGlobalVector}
     */
    SetGlobalVector(name: string, value: Vector4): void;
    /**
     * Add a &quot;set global shader vector array property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalVectorArray.html | Rendering.CommandBuffer.SetGlobalVectorArray}
     */
    SetGlobalVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    SetGlobalVectorArray(propertyName: string, values: Readonly<Vector4[]>): void;
    SetGlobalVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    /**
     * Add a &quot;set global shader vector array property&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetGlobalVectorArray.html | Rendering.CommandBuffer.SetGlobalVectorArray}
     */
    SetGlobalVectorArray(propertyName: string, values: Readonly<Vector4[]>): void;
    /**
     * Adds a command to multiply the instance count of every draw call by a specific multiplier.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetInstanceMultiplier.html | Rendering.CommandBuffer.SetInstanceMultiplier}
     */
    SetInstanceMultiplier(multiplier: number): void;
    /**
     * Add a &quot;set invert culling&quot; command to the buffer.
     * @param invertCulling A boolean indicating whether to invert the backface culling (true) or not (false).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetInvertCulling.html | Rendering.CommandBuffer.SetInvertCulling}
     */
    SetInvertCulling(invertCulling: boolean): void;
    /**
     * Adds a command to set the state of a global or local shader keyword.
     * @param keyword The local or global shader keyword to set the state for.
     * @param value The state to set the shader keyword state to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetKeyword.html | Rendering.CommandBuffer.SetKeyword}
     */
    SetKeyword(keyword: GlobalKeyword, value: boolean): void;
    /**
     * Adds a command to set the state of a global or local shader keyword.
     * @param material The material for which to set the state of the local shader keyword.
     * @param keyword The local or global shader keyword to set the state for.
     * @param value The state to set the shader keyword state to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetKeyword.html | Rendering.CommandBuffer.SetKeyword}
     */
    SetKeyword(material: Material, keyword: LocalKeyword, value: boolean): void;
    /**
     * Adds a command to set the state of a global or local shader keyword.
     * @param computeShader The compute shader for which to set the state of the local shader keyword.
     * @param keyword The local or global shader keyword to set the state for.
     * @param value The state to set the shader keyword state to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetKeyword.html | Rendering.CommandBuffer.SetKeyword}
     */
    SetKeyword(computeShader: ComputeShader, keyword: LocalKeyword, value: boolean): void;
    /**
     * Set the current stereo projection matrices for late latching. Stereo matrices is passed in as an array of two matrices.
     * @param projectionMat Stereo projection matrices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetLateLatchProjectionMatrices.html | Rendering.CommandBuffer.SetLateLatchProjectionMatrices}
     */
    SetLateLatchProjectionMatrices(projectionMat: Readonly<Matrix4x4[]>): void;
    /**
     * Add a command to set the projection matrix.
     * @param proj Projection (camera to clip space) matrix.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetProjectionMatrix.html | Rendering.CommandBuffer.SetProjectionMatrix}
     */
    SetProjectionMatrix(proj: Matrix4x4): void;
    /**
     * Set random write target for level pixel shaders.
     * @param index Index of the random write target in the shader.
     * @param rt RenderTargetIdentifier to set as the write target.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRandomWriteTarget.html | Rendering.CommandBuffer.SetRandomWriteTarget}
     */
    SetRandomWriteTarget(index: number, rt: RenderTargetIdentifier): void;
    /**
     * Set random write target for level pixel shaders.
     * @param index Index of the random write target in the shader.
     * @param buffer Buffer to set as the write target.
     * @param preserveCounterValue Whether to leave the append/consume counter value unchanged.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRandomWriteTarget.html | Rendering.CommandBuffer.SetRandomWriteTarget}
     */
    SetRandomWriteTarget(index: number, buffer: ComputeBuffer, preserveCounterValue: boolean): void;
    /**
     * Set random write target for level pixel shaders.
     * @param index Index of the random write target in the shader.
     * @param buffer Buffer to set as the write target.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRandomWriteTarget.html | Rendering.CommandBuffer.SetRandomWriteTarget}
     */
    SetRandomWriteTarget(index: number, buffer: ComputeBuffer): void;
    /**
     * Set random write target for level pixel shaders.
     * @param index Index of the random write target in the shader.
     * @param buffer Buffer to set as the write target.
     * @param preserveCounterValue Whether to leave the append/consume counter value unchanged.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRandomWriteTarget.html | Rendering.CommandBuffer.SetRandomWriteTarget}
     */
    SetRandomWriteTarget(index: number, buffer: GraphicsBuffer, preserveCounterValue: boolean): void;
    /**
     * Set random write target for level pixel shaders.
     * @param index Index of the random write target in the shader.
     * @param buffer Buffer to set as the write target.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRandomWriteTarget.html | Rendering.CommandBuffer.SetRandomWriteTarget}
     */
    SetRandomWriteTarget(index: number, buffer: GraphicsBuffer): void;
    /**
     * Adds a command to set the RayTracingAccelerationStructure to be used in a RayTracingShader or a ComputeShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param name The name of the acceleration structure in the shader code.
     * @param rayTracingAccelerationStructure The RayTracingAccelerationStructure object to be set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingAccelerationStructure.html | Rendering.CommandBuffer.SetRayTracingAccelerationStructure}
     */
    SetRayTracingAccelerationStructure(rayTracingShader: RayTracingShader, name: string, rayTracingAccelerationStructure: RayTracingAccelerationStructure): void;
    /**
     * Adds a command to set the RayTracingAccelerationStructure to be used in a RayTracingShader or a ComputeShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param rayTracingAccelerationStructure The RayTracingAccelerationStructure object to be set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingAccelerationStructure.html | Rendering.CommandBuffer.SetRayTracingAccelerationStructure}
     */
    SetRayTracingAccelerationStructure(rayTracingShader: RayTracingShader, nameID: number, rayTracingAccelerationStructure: RayTracingAccelerationStructure): void;
    /**
     * Adds a command to set the RayTracingAccelerationStructure to be used in a RayTracingShader or a ComputeShader.
     * @param computeShader The ComputeShader object to set the parameter for.
     * @param kernelIndex Which kernel the acceleration structure is being set for.
     * @param name The name of the acceleration structure in the shader code.
     * @param rayTracingAccelerationStructure The RayTracingAccelerationStructure object to be set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingAccelerationStructure.html | Rendering.CommandBuffer.SetRayTracingAccelerationStructure}
     */
    SetRayTracingAccelerationStructure(computeShader: ComputeShader, kernelIndex: number, name: string, rayTracingAccelerationStructure: RayTracingAccelerationStructure): void;
    /**
     * Adds a command to set the RayTracingAccelerationStructure to be used in a RayTracingShader or a ComputeShader.
     * @param computeShader The ComputeShader object to set the parameter for.
     * @param kernelIndex Which kernel the acceleration structure is being set for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param rayTracingAccelerationStructure The RayTracingAccelerationStructure object to be set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingAccelerationStructure.html | Rendering.CommandBuffer.SetRayTracingAccelerationStructure}
     */
    SetRayTracingAccelerationStructure(computeShader: ComputeShader, kernelIndex: number, nameID: number, rayTracingAccelerationStructure: RayTracingAccelerationStructure): void;
    /**
     * Adds a command to set an input or output buffer parameter on a RayTracingShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param name The name of the buffer in shader code.
     * @param buffer The buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingBufferParam.html | Rendering.CommandBuffer.SetRayTracingBufferParam}
     */
    SetRayTracingBufferParam(rayTracingShader: RayTracingShader, name: string, buffer: ComputeBuffer): void;
    /**
     * Adds a command to set an input or output buffer parameter on a RayTracingShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param nameID The ID of the property name for the buffer in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingBufferParam.html | Rendering.CommandBuffer.SetRayTracingBufferParam}
     */
    SetRayTracingBufferParam(rayTracingShader: RayTracingShader, nameID: number, buffer: ComputeBuffer): void;
    /**
     * Adds a command to set an input or output buffer parameter on a RayTracingShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param name The name of the buffer in shader code.
     * @param buffer The buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingBufferParam.html | Rendering.CommandBuffer.SetRayTracingBufferParam}
     */
    SetRayTracingBufferParam(rayTracingShader: RayTracingShader, name: string, buffer: GraphicsBuffer): void;
    /**
     * Adds a command to set an input or output buffer parameter on a RayTracingShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param nameID The ID of the property name for the buffer in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingBufferParam.html | Rendering.CommandBuffer.SetRayTracingBufferParam}
     */
    SetRayTracingBufferParam(rayTracingShader: RayTracingShader, nameID: number, buffer: GraphicsBuffer): void;
    /**
     * Adds a command to set an input or output buffer parameter on a RayTracingShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param name The name of the buffer in shader code.
     * @param bufferHandle The handle of the buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingBufferParam.html | Rendering.CommandBuffer.SetRayTracingBufferParam}
     */
    SetRayTracingBufferParam(rayTracingShader: RayTracingShader, name: string, bufferHandle: GraphicsBufferHandle): void;
    /**
     * Adds a command to set an input or output buffer parameter on a RayTracingShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param nameID The ID of the property name for the buffer in shader code. Use Shader.PropertyToID to get this ID.
     * @param bufferHandle The handle of the buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingBufferParam.html | Rendering.CommandBuffer.SetRayTracingBufferParam}
     */
    SetRayTracingBufferParam(rayTracingShader: RayTracingShader, nameID: number, bufferHandle: GraphicsBufferHandle): void;
    /**
     * Adds a command to set a constant buffer on a RayTracingShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingConstantBufferParam.html | Rendering.CommandBuffer.SetRayTracingConstantBufferParam}
     */
    SetRayTracingConstantBufferParam(rayTracingShader: RayTracingShader, nameID: number, buffer: ComputeBuffer, offset: number, size: number): void;
    /**
     * Adds a command to set a constant buffer on a RayTracingShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param name The name of the constant buffer in shader code.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingConstantBufferParam.html | Rendering.CommandBuffer.SetRayTracingConstantBufferParam}
     */
    SetRayTracingConstantBufferParam(rayTracingShader: RayTracingShader, name: string, buffer: ComputeBuffer, offset: number, size: number): void;
    /**
     * Adds a command to set a constant buffer on a RayTracingShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingConstantBufferParam.html | Rendering.CommandBuffer.SetRayTracingConstantBufferParam}
     */
    SetRayTracingConstantBufferParam(rayTracingShader: RayTracingShader, nameID: number, buffer: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Adds a command to set a constant buffer on a RayTracingShader.
     * @param rayTracingShader The RayTracingShader to set parameter for.
     * @param name The name of the constant buffer in shader code.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingConstantBufferParam.html | Rendering.CommandBuffer.SetRayTracingConstantBufferParam}
     */
    SetRayTracingConstantBufferParam(rayTracingShader: RayTracingShader, name: string, buffer: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Adds a command to set a float parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingFloatParam.html | Rendering.CommandBuffer.SetRayTracingFloatParam}
     */
    SetRayTracingFloatParam(rayTracingShader: RayTracingShader, name: string, val: number): void;
    /**
     * Adds a command to set a float parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingFloatParam.html | Rendering.CommandBuffer.SetRayTracingFloatParam}
     */
    SetRayTracingFloatParam(rayTracingShader: RayTracingShader, nameID: number, val: number): void;
    /**
     * Adds a command to set multiple consecutive float parameters on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param values Values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingFloatParams.html | Rendering.CommandBuffer.SetRayTracingFloatParams}
     */
    SetRayTracingFloatParams(rayTracingShader: RayTracingShader, name: string, values: Readonly<number[]>): void;
    /**
     * Adds a command to set multiple consecutive float parameters on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param values Values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingFloatParams.html | Rendering.CommandBuffer.SetRayTracingFloatParams}
     */
    SetRayTracingFloatParams(rayTracingShader: RayTracingShader, nameID: number, values: Readonly<number[]>): void;
    /**
     * Adds a command to set an integer parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingIntParam.html | Rendering.CommandBuffer.SetRayTracingIntParam}
     */
    SetRayTracingIntParam(rayTracingShader: RayTracingShader, name: string, val: number): void;
    /**
     * Adds a command to set an integer parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingIntParam.html | Rendering.CommandBuffer.SetRayTracingIntParam}
     */
    SetRayTracingIntParam(rayTracingShader: RayTracingShader, nameID: number, val: number): void;
    /**
     * Adds a command to set multiple consecutive integer parameters on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param values Values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingIntParams.html | Rendering.CommandBuffer.SetRayTracingIntParams}
     */
    SetRayTracingIntParams(rayTracingShader: RayTracingShader, name: string, values: Readonly<number[]>): void;
    /**
     * Adds a command to set multiple consecutive integer parameters on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param values Values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingIntParams.html | Rendering.CommandBuffer.SetRayTracingIntParams}
     */
    SetRayTracingIntParams(rayTracingShader: RayTracingShader, nameID: number, values: Readonly<number[]>): void;
    /**
     * Adds a command to set a matrix array parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingMatrixArrayParam.html | Rendering.CommandBuffer.SetRayTracingMatrixArrayParam}
     */
    SetRayTracingMatrixArrayParam(rayTracingShader: RayTracingShader, name: string, values: Readonly<Matrix4x4[]>): void;
    /**
     * Adds a command to set a matrix array parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingMatrixArrayParam.html | Rendering.CommandBuffer.SetRayTracingMatrixArrayParam}
     */
    SetRayTracingMatrixArrayParam(rayTracingShader: RayTracingShader, nameID: number, values: Readonly<Matrix4x4[]>): void;
    /**
     * Adds a command to set a matrix parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingMatrixParam.html | Rendering.CommandBuffer.SetRayTracingMatrixParam}
     */
    SetRayTracingMatrixParam(rayTracingShader: RayTracingShader, name: string, val: Matrix4x4): void;
    /**
     * Adds a command to set a matrix parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingMatrixParam.html | Rendering.CommandBuffer.SetRayTracingMatrixParam}
     */
    SetRayTracingMatrixParam(rayTracingShader: RayTracingShader, nameID: number, val: Matrix4x4): void;
    /**
     * Adds a command to select which Shader Pass to use when executing ray/geometry intersection shaders.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param passName The Shader Pass to use when executing ray tracing shaders.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingShaderPass.html | Rendering.CommandBuffer.SetRayTracingShaderPass}
     */
    SetRayTracingShaderPass(rayTracingShader: RayTracingShader, passName: string): void;
    /**
     * Adds a command to set a texture parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param name Name of the texture variable in shader code.
     * @param rt Texture value or identifier to set, see RenderTargetIdentifier.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingTextureParam.html | Rendering.CommandBuffer.SetRayTracingTextureParam}
     */
    SetRayTracingTextureParam(rayTracingShader: RayTracingShader, name: string, rt: RenderTargetIdentifier): void;
    /**
     * Adds a command to set a texture parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param nameID The ID of the property name for the texture in shader code. Use Shader.PropertyToID to get this ID.
     * @param rt Texture value or identifier to set, see RenderTargetIdentifier.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingTextureParam.html | Rendering.CommandBuffer.SetRayTracingTextureParam}
     */
    SetRayTracingTextureParam(rayTracingShader: RayTracingShader, nameID: number, rt: RenderTargetIdentifier): void;
    /**
     * Adds a command to set a vector array parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param name Property name.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingVectorArrayParam.html | Rendering.CommandBuffer.SetRayTracingVectorArrayParam}
     */
    SetRayTracingVectorArrayParam(rayTracingShader: RayTracingShader, name: string, values: Readonly<Vector4[]>): void;
    /**
     * Adds a command to set a vector array parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingVectorArrayParam.html | Rendering.CommandBuffer.SetRayTracingVectorArrayParam}
     */
    SetRayTracingVectorArrayParam(rayTracingShader: RayTracingShader, nameID: number, values: Readonly<Vector4[]>): void;
    /**
     * Adds a command to set a vector parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param name Name of the variable in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingVectorParam.html | Rendering.CommandBuffer.SetRayTracingVectorParam}
     */
    SetRayTracingVectorParam(rayTracingShader: RayTracingShader, name: string, val: Vector4): void;
    /**
     * Adds a command to set a vector parameter on a RayTracingShader.
     * @param rayTracingShader RayTracingShader to set parameter for.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRayTracingVectorParam.html | Rendering.CommandBuffer.SetRayTracingVectorParam}
     */
    SetRayTracingVectorParam(rayTracingShader: RayTracingShader, nameID: number, val: Vector4): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param rt Render target to set for both color &amp; depth buffers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(rt: RenderTargetIdentifier): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param rt Render target to set for both color &amp; depth buffers.
     * @param loadAction Load action that is used for color and depth/stencil buffers.
     * @param storeAction Store action that is used for color and depth/stencil buffers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(rt: RenderTargetIdentifier, loadAction: RenderBufferLoadAction, storeAction: RenderBufferStoreAction): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param rt Render target to set for both color &amp; depth buffers.
     * @param colorLoadAction Load action that is used for the color buffer.
     * @param colorStoreAction Store action that is used for the color buffer.
     * @param depthLoadAction Load action that is used for the depth/stencil buffer.
     * @param depthStoreAction Store action that is used for the depth/stencil buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(rt: RenderTargetIdentifier, colorLoadAction: RenderBufferLoadAction, colorStoreAction: RenderBufferStoreAction, depthLoadAction: RenderBufferLoadAction, depthStoreAction: RenderBufferStoreAction): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param rt Render target to set for both color &amp; depth buffers.
     * @param mipLevel The mip level of the render target to render into.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(rt: RenderTargetIdentifier, mipLevel: number): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param rt Render target to set for both color &amp; depth buffers.
     * @param mipLevel The mip level of the render target to render into.
     * @param cubemapFace The cubemap face of a cubemap render target to render into.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(rt: RenderTargetIdentifier, mipLevel: number, cubemapFace: CubemapFace): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param rt Render target to set for both color &amp; depth buffers.
     * @param mipLevel The mip level of the render target to render into.
     * @param cubemapFace The cubemap face of a cubemap render target to render into.
     * @param depthSlice Slice of a 3D or array render target to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(rt: RenderTargetIdentifier, mipLevel: number, cubemapFace: CubemapFace, depthSlice: number): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param color Render target to set as a color buffer.
     * @param depth Render target to set as a depth buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(color: RenderTargetIdentifier, depth: RenderTargetIdentifier): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param color Render target to set as a color buffer.
     * @param depth Render target to set as a depth buffer.
     * @param mipLevel The mip level of the render target to render into.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(color: RenderTargetIdentifier, depth: RenderTargetIdentifier, mipLevel: number): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param color Render target to set as a color buffer.
     * @param depth Render target to set as a depth buffer.
     * @param mipLevel The mip level of the render target to render into.
     * @param cubemapFace The cubemap face of a cubemap render target to render into.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(color: RenderTargetIdentifier, depth: RenderTargetIdentifier, mipLevel: number, cubemapFace: CubemapFace): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param color Render target to set as a color buffer.
     * @param depth Render target to set as a depth buffer.
     * @param mipLevel The mip level of the render target to render into.
     * @param cubemapFace The cubemap face of a cubemap render target to render into.
     * @param depthSlice Slice of a 3D or array render target to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(color: RenderTargetIdentifier, depth: RenderTargetIdentifier, mipLevel: number, cubemapFace: CubemapFace, depthSlice: number): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param color Render target to set as a color buffer.
     * @param colorLoadAction Load action that is used for the color buffer.
     * @param colorStoreAction Store action that is used for the color buffer.
     * @param depth Render target to set as a depth buffer.
     * @param depthLoadAction Load action that is used for the depth/stencil buffer.
     * @param depthStoreAction Store action that is used for the depth/stencil buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(color: RenderTargetIdentifier, colorLoadAction: RenderBufferLoadAction, colorStoreAction: RenderBufferStoreAction, depth: RenderTargetIdentifier, depthLoadAction: RenderBufferLoadAction, depthStoreAction: RenderBufferStoreAction): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param colors Render targets to set as color buffers (MRT).
     * @param depth Render target to set as a depth buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(colors: Readonly<RenderTargetIdentifier[]>, depth: RenderTargetIdentifier): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param colors Render targets to set as color buffers (MRT).
     * @param depth Render target to set as a depth buffer.
     * @param mipLevel The mip level of the render target to render into.
     * @param cubemapFace The cubemap face of a cubemap render target to render into.
     * @param depthSlice Slice of a 3D or array render target to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(colors: Readonly<RenderTargetIdentifier[]>, depth: RenderTargetIdentifier, mipLevel: number, cubemapFace: CubemapFace, depthSlice: number): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * @param mipLevel The mip level of the render target to render into.
     * @param cubemapFace The cubemap face of a cubemap render target to render into.
     * @param depthSlice Slice of a 3D or array render target to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(binding: RenderTargetBinding, mipLevel: number, cubemapFace: CubemapFace, depthSlice: number): void;
    /**
     * Add a &quot;set active render target&quot; command.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetRenderTarget.html | Rendering.CommandBuffer.SetRenderTarget}
     */
    SetRenderTarget(binding: RenderTargetBinding): void;
    /**
     * Add a &quot;set shadow sampling mode&quot; command.
     * @param shadowmap Shadowmap render target to change the sampling mode on.
     * @param mode New sampling mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetShadowSamplingMode.html | Rendering.CommandBuffer.SetShadowSamplingMode}
     */
    SetShadowSamplingMode(shadowmap: RenderTargetIdentifier, mode: ShadowSamplingMode): void;
    /**
     * Add a command to set single-pass stereo mode for the camera.
     * @param mode Single-pass stereo mode for the camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetSinglePassStereo.html | Rendering.CommandBuffer.SetSinglePassStereo}
     */
    SetSinglePassStereo(mode: SinglePassStereoMode): void;
    /**
     * Schedules the setup of Camera specific global Shader variables.
     * @param camera Camera to setup shader variables for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetupCameraProperties.html | Rendering.CommandBuffer.SetupCameraProperties}
     */
    SetupCameraProperties(camera: Camera): void;
    /**
     * Add a command to set the view matrix.
     * @param view View (world to camera space) matrix.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetViewMatrix.html | Rendering.CommandBuffer.SetViewMatrix}
     */
    SetViewMatrix(view: Matrix4x4): void;
    /**
     * Add a command to set the rendering viewport.
     * @param pixelRect Viewport rectangle in pixel coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetViewport.html | Rendering.CommandBuffer.SetViewport}
     */
    SetViewport(pixelRect: Rect): void;
    /**
     * Add a command to set the view and projection matrices.
     * @param view View (world to camera space) matrix.
     * @param proj Projection (camera to clip space) matrix.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetViewProjectionMatrices.html | Rendering.CommandBuffer.SetViewProjectionMatrices}
     */
    SetViewProjectionMatrices(view: Matrix4x4, proj: Matrix4x4): void;
    /**
     * Add a &quot;set wireframe&quot; command to the buffer.
     * @param enable A boolean indicating whether to enable wireframe mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.SetWireframe.html | Rendering.CommandBuffer.SetWireframe}
     */
    SetWireframe(enable: boolean): void;
    /**
     * Unmark a global shader property for late latching. After unmarking, the shader property will no longer be late latched.  This function is intended for the Universal Render Pipeline (URP) to specify late latched shader properties.
     * @param matrixPropertyType Camera matrix property type to be unmarked for late latching.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.UnmarkLateLatchMatrix.html | Rendering.CommandBuffer.UnmarkLateLatchMatrix}
     */
    UnmarkLateLatchMatrix(matrixPropertyType: CameraLateLatchMatrixType): void;
    /**
     * Adds an &quot;AsyncGPUReadback.WaitAllRequests&quot; command to the CommandBuffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.WaitAllAsyncReadbackRequests.html | Rendering.CommandBuffer.WaitAllAsyncReadbackRequests}
     */
    WaitAllAsyncReadbackRequests(): void;
    /**
     * Instructs the GPU to pause processing of the queue until it passes through the GraphicsFence fence.
     * @param fence The GraphicsFence the GPU waits for. The fenceType of the graphics fence must be Rendering.GraphicsFenceType.AsyncQueueSynchronisation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.WaitOnAsyncGraphicsFence.html | Rendering.CommandBuffer.WaitOnAsyncGraphicsFence}
     */
    WaitOnAsyncGraphicsFence(fence: GraphicsFence): void;
    /**
     * Instructs the GPU to pause processing of the queue until it passes through the GraphicsFence fence.
     * @param fence The GraphicsFence the GPU waits for. The fenceType of the graphics fence must be Rendering.GraphicsFenceType.AsyncQueueSynchronisation.
     * @param stage Which SynchronisationStage to wait for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.WaitOnAsyncGraphicsFence.html | Rendering.CommandBuffer.WaitOnAsyncGraphicsFence}
     */
    WaitOnAsyncGraphicsFence(fence: GraphicsFence, stage: SynchronisationStage): void;
    /**
     * Instructs the GPU to pause processing of the queue until it passes through the GraphicsFence fence.
     * @param fence The GraphicsFence the GPU waits for. The fenceType of the graphics fence must be Rendering.GraphicsFenceType.AsyncQueueSynchronisation.
     * @param stage Which SynchronisationStage to wait for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.WaitOnAsyncGraphicsFence.html | Rendering.CommandBuffer.WaitOnAsyncGraphicsFence}
     */
    WaitOnAsyncGraphicsFence(fence: GraphicsFence, stage: SynchronisationStageFlags): void;


}
    
interface AttachmentDescriptor {
    /**
     * The load action to be used on this attachment when the RenderPass starts.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor-loadAction.html | Rendering.AttachmentDescriptor.loadAction}
     */
    loadAction: RenderBufferLoadAction;
    /**
     * The store action to use with this attachment when the RenderPass ends. Only used when either ConfigureTarget or ConfigureResolveTarget has been called.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor-storeAction.html | Rendering.AttachmentDescriptor.storeAction}
     */
    storeAction: RenderBufferStoreAction;
    /**
     * The GraphicsFormat of this attachment. To use in place of format.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor-graphicsFormat.html | Rendering.AttachmentDescriptor.graphicsFormat}
     */
    graphicsFormat: GraphicsFormat;
    /**
     * The format of this attachment.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor-format.html | Rendering.AttachmentDescriptor.format}
     */
    format: RenderTextureFormat;
    /**
     * The surface to use as the backing storage for this AttachmentDescriptor.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor-loadStoreTarget.html | Rendering.AttachmentDescriptor.loadStoreTarget}
     */
    loadStoreTarget: RenderTargetIdentifier;
    /**
     * When the renderpass that uses this attachment ends, resolve the MSAA surface into the given target.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor-resolveTarget.html | Rendering.AttachmentDescriptor.resolveTarget}
     */
    resolveTarget: RenderTargetIdentifier;
    /**
     * The currently assigned clear color for this attachment. Default is black.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor-clearColor.html | Rendering.AttachmentDescriptor.clearColor}
     */
    clearColor: Color;
    /**
     * Currently assigned depth clear value for this attachment. Default value is 1.0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor-clearDepth.html | Rendering.AttachmentDescriptor.clearDepth}
     */
    clearDepth: number;
    /**
     * Currently assigned stencil clear value for this attachment. Default is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor-clearStencil.html | Rendering.AttachmentDescriptor.clearStencil}
     */
    clearStencil: number;



    /**
     * When the RenderPass starts, clear this attachment into the color or depth/stencil values given (depending on the format of this attachment). Changes loadAction to RenderBufferLoadAction.Clear.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor.ConfigureClear.html | Rendering.AttachmentDescriptor.ConfigureClear}
     */
    ConfigureClear(clearColor: Color, clearDepth: number, clearStencil: number): void;
    /**
     * When the renderpass that uses this attachment ends, resolve the MSAA surface into the given target.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor.ConfigureResolveTarget.html | Rendering.AttachmentDescriptor.ConfigureResolveTarget}
     */
    ConfigureResolveTarget(target: RenderTargetIdentifier): void;
    /**
     * Binds this AttachmentDescriptor to the given target surface.
     * @param loadExistingContents Whether to read in the existing contents of the surface when the RenderPass starts.
     * @param storeResults Whether to store the rendering results of the attachment when the RenderPass ends.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentDescriptor.ConfigureTarget.html | Rendering.AttachmentDescriptor.ConfigureTarget}
     */
    ConfigureTarget(target: RenderTargetIdentifier, loadExistingContents: boolean, storeResults: boolean): void;
    Equals(other: AttachmentDescriptor): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;


}
    
interface RenderTargetIdentifier {



    Equals(rhs: RenderTargetIdentifier): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface RenderTargetIdentifierConstructor {
    AllDepthSlices: number;


    new(type: BuiltinRenderTextureType): RenderTargetIdentifier;
    new(type: BuiltinRenderTextureType, mipLevel: number, cubeFace: CubemapFace, depthSlice: number): RenderTargetIdentifier;
    new(name: string): RenderTargetIdentifier;
    new(name: string, mipLevel: number, cubeFace: CubemapFace, depthSlice: number): RenderTargetIdentifier;
    new(nameID: number): RenderTargetIdentifier;
    new(nameID: number, mipLevel: number, cubeFace: CubemapFace, depthSlice: number): RenderTargetIdentifier;
    new(renderTargetIdentifier: RenderTargetIdentifier, mipLevel: number, cubeFace: CubemapFace, depthSlice: number): RenderTargetIdentifier;
    new(tex: Texture): RenderTargetIdentifier;
    new(tex: Texture, mipLevel: number, cubeFace: CubemapFace, depthSlice: number): RenderTargetIdentifier;
    new(buf: RenderBuffer, mipLevel: number, cubeFace: CubemapFace, depthSlice: number): RenderTargetIdentifier;



}
declare const RenderTargetIdentifier: RenderTargetIdentifierConstructor;
    
interface AttachmentDescriptorConstructor {


    new(format: GraphicsFormat): AttachmentDescriptor;
    new(format: RenderTextureFormat): AttachmentDescriptor;
    new(format: RenderTextureFormat, target: RenderTargetIdentifier, loadExistingContents: boolean, storeResults: boolean, resolve: boolean): AttachmentDescriptor;



}
declare const AttachmentDescriptor: AttachmentDescriptorConstructor;
    
interface SubPassDescriptor {
    inputs: AttachmentIndexArray;
    colorOutputs: AttachmentIndexArray;
    flags: SubPassFlags;





}
    
interface AttachmentIndexArray {
    Item: number;
    /**
     * Number of elements in the AttachmentIndexArrayp.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AttachmentIndexArray-Length.html | Rendering.AttachmentIndexArray.Length}
     */
    readonly Length: number;





}
    
interface AttachmentIndexArrayConstructor {
    Emtpy: AttachmentIndexArray;
    MaxAttachments: number;


    new(numAttachments: number): AttachmentIndexArray;
    new(attachments: Readonly<number[]>): AttachmentIndexArray;
    new(attachments: Readonly<number[]>): AttachmentIndexArray;



}
declare const AttachmentIndexArray: AttachmentIndexArrayConstructor;
    
interface Sampler {
    /**
     * Returns true if Sampler is valid. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Sampler-isValid.html | Profiling.Sampler.isValid}
     */
    readonly isValid: boolean;
    /**
     * Sampler name. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Sampler-name.html | Profiling.Sampler.name}
     */
    readonly name: string;



    /**
     * Returns Recorder associated with the Sampler.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Sampler.GetRecorder.html | Profiling.Sampler.GetRecorder}
     */
    GetRecorder(): Recorder;


}
    
interface Recorder {
    /**
     * Returns true if Recorder is valid and can collect data. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Recorder-isValid.html | Profiling.Recorder.isValid}
     */
    readonly isValid: boolean;
    /**
     * Enables recording.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Recorder-enabled.html | Profiling.Recorder.enabled}
     */
    enabled: boolean;
    /**
     * Accumulated time of Begin/End pairs for the previous frame in nanoseconds. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Recorder-elapsedNanoseconds.html | Profiling.Recorder.elapsedNanoseconds}
     */
    readonly elapsedNanoseconds: number;
    /**
     * Gets the accumulated GPU time, in nanoseconds, for a frame. The Recorder has a three frame delay so this gives the timings for the frame that was three frames before the one that you access this property on. (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Recorder-gpuElapsedNanoseconds.html | Profiling.Recorder.gpuElapsedNanoseconds}
     */
    readonly gpuElapsedNanoseconds: number;
    /**
     * Number of time Begin/End pairs was called during the previous frame. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Recorder-sampleBlockCount.html | Profiling.Recorder.sampleBlockCount}
     */
    readonly sampleBlockCount: number;
    /**
     * Gets the number of Begin/End time pairs that the GPU executed during a frame. The Recorder has a three frame delay so this gives the timings for the frame that was three frames before the one that you access this property on. (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Recorder-gpuSampleBlockCount.html | Profiling.Recorder.gpuSampleBlockCount}
     */
    readonly gpuSampleBlockCount: number;



    /**
     * Configures the recorder to collect samples from all threads.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Recorder.CollectFromAllThreads.html | Profiling.Recorder.CollectFromAllThreads}
     */
    CollectFromAllThreads(): void;
    /**
     * Configures the recorder to only collect data from the current thread.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Recorder.FilterToCurrentThread.html | Profiling.Recorder.FilterToCurrentThread}
     */
    FilterToCurrentThread(): void;


}
    
interface RecorderConstructor {




    Get(samplerName: string): Recorder;

}
declare const Recorder: RecorderConstructor;
    
interface SamplerConstructor {




    Get(name: string): Sampler;
    GetNames(names: Readonly<string[]>): number;

}
declare const Sampler: SamplerConstructor;
    
interface CustomSampler extends Sampler {



    /**
     * Begin profiling a piece of code with a custom label defined by this instance of CustomSampler.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.CustomSampler.Begin.html | Profiling.CustomSampler.Begin}
     */
    Begin(): void;
    /**
     * Begin profiling a piece of code with a custom label defined by this instance of CustomSampler.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.CustomSampler.Begin.html | Profiling.CustomSampler.Begin}
     */
    Begin(targetObject: Object): void;
    /**
     * End profiling a piece of code with a custom label.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.CustomSampler.End.html | Profiling.CustomSampler.End}
     */
    End(): void;


}
    
interface CustomSamplerConstructor {




    Create(name: string, collectGpuData: boolean): CustomSampler;

}
declare const CustomSampler: CustomSamplerConstructor;
    
interface ProfilerMarker {
    /**
     * Gets native handle of the ProfilerMarker.
     */
    readonly Handle: IntPtr;



    /**
     * Creates a helper struct for the scoped using blocks.
     */
    Auto(): AutoScope;
    /**
     * Begin profiling a piece of code marked with a custom name defined by this instance of ProfilerMarker.
     */
    Begin(): void;
    /**
     * Begin profiling a piece of code marked with a custom name defined by this instance of ProfilerMarker.
     * @param contextUnityObject Object associated with the operation.
     */
    Begin(contextUnityObject: Object): void;
    /**
     * End profiling a piece of code marked with a custom name defined by this instance of ProfilerMarker.
     */
    End(): void;


}
    
interface AutoScope {



    Dispose(): void;


}
    
interface ProfilerMarkerConstructor {


    new(name: string): ProfilerMarker;
    new(name: Char, nameLen: number): ProfilerMarker;
    new(category: ProfilerCategory, name: string): ProfilerMarker;
    new(category: ProfilerCategory, name: Char, nameLen: number): ProfilerMarker;
    new(category: ProfilerCategory, name: string, flags: MarkerFlags): ProfilerMarker;
    new(category: ProfilerCategory, name: Char, nameLen: number, flags: MarkerFlags): ProfilerMarker;



}
declare const ProfilerMarker: ProfilerMarkerConstructor;
    
interface Material extends Object {
    /**
     * The shader used by the material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-shader.html | Material.shader}
     */
    shader: Shader;
    /**
     * The main color of the Material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-color.html | Material.color}
     */
    color: Color;
    /**
     * The main texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-mainTexture.html | Material.mainTexture}
     */
    mainTexture: Texture;
    /**
     * The offset of the main texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-mainTextureOffset.html | Material.mainTextureOffset}
     */
    mainTextureOffset: Vector2;
    /**
     * The scale of the main texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-mainTextureScale.html | Material.mainTextureScale}
     */
    mainTextureScale: Vector2;
    /**
     * Render queue of this material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-renderQueue.html | Material.renderQueue}
     */
    renderQueue: number;
    /**
     * Raw render queue of this material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-rawRenderQueue.html | Material.rawRenderQueue}
     */
    readonly rawRenderQueue: number;
    /**
     * An array containing the local shader keywords that are currently enabled for this material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-enabledKeywords.html | Material.enabledKeywords}
     */
    enabledKeywords: Readonly<LocalKeyword[]>;
    /**
     * Defines how the material should interact with lightmaps and lightprobes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-globalIlluminationFlags.html | Material.globalIlluminationFlags}
     */
    globalIlluminationFlags: MaterialGlobalIlluminationFlags;
    /**
     * Gets and sets whether the Double Sided Global Illumination setting is enabled for this material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-doubleSidedGI.html | Material.doubleSidedGI}
     */
    doubleSidedGI: boolean;
    /**
     * Gets and sets whether GPU instancing is enabled for this material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-enableInstancing.html | Material.enableInstancing}
     */
    enableInstancing: boolean;
    /**
     * How many passes are in this material (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-passCount.html | Material.passCount}
     */
    readonly passCount: number;
    /**
     * An array containing names of the local shader keywords that are currently enabled for this material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-shaderKeywords.html | Material.shaderKeywords}
     */
    shaderKeywords: Readonly<string[]>;
    /**
     * Parent of this material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-parent.html | Material.parent}
     */
    parent: Material;
    /**
     * Returns true if this material is a material variant.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material-isVariant.html | Material.isVariant}
     */
    readonly isVariant: boolean;



    /**
     * Applies an override associated with a Material Variant to a target.
     * @param destination The Material to which the Editor applies the override.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param recordUndo Wheter the editor should record an undo operation for this action.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.ApplyPropertyOverride.html | Material.ApplyPropertyOverride}
     */
    ApplyPropertyOverride(destination: Material, nameID: number, recordUndo: boolean): void;
    /**
     * Applies an override associated with a Material Variant to a target.
     * @param destination The Material to which the Editor applies the override.
     * @param name Property name, e.g. &quot;_SrcBlend&quot;.
     * @param recordUndo Wheter the editor should record an undo operation for this action.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.ApplyPropertyOverride.html | Material.ApplyPropertyOverride}
     */
    ApplyPropertyOverride(destination: Material, name: string, recordUndo: boolean): void;
    /**
     * Computes a CRC hash value from the content of the material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.ComputeCRC.html | Material.ComputeCRC}
     */
    ComputeCRC(): number;
    /**
     * Copies properties, keyword states and settings from mat to this material, but only if they exist in both materials.
     * @param mat The Material to copy from.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.CopyMatchingPropertiesFromMaterial.html | Material.CopyMatchingPropertiesFromMaterial}
     */
    CopyMatchingPropertiesFromMaterial(mat: Material): void;
    /**
     * Copy properties from other material into this material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.CopyPropertiesFromMaterial.html | Material.CopyPropertiesFromMaterial}
     */
    CopyPropertiesFromMaterial(mat: Material): void;
    /**
     * Disables a local shader keyword for this material.
     * @param keyword The name of the Rendering.LocalKeyword to disable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.DisableKeyword.html | Material.DisableKeyword}
     */
    DisableKeyword(keyword: string): void;
    /**
     * Disables a local shader keyword for this material.
     * @param keyword The name of the Rendering.LocalKeyword to disable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.DisableKeyword.html | Material.DisableKeyword}
     */
    DisableKeyword(keyword: LocalKeyword): void;
    /**
     * Enables a local shader keyword for this material.
     * @param keyword The name of the Rendering.LocalKeyword to enable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.EnableKeyword.html | Material.EnableKeyword}
     */
    EnableKeyword(keyword: string): void;
    /**
     * Enables a local shader keyword for this material.
     * @param keyword The name of the Rendering.LocalKeyword to enable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.EnableKeyword.html | Material.EnableKeyword}
     */
    EnableKeyword(keyword: LocalKeyword): void;
    /**
     * Returns the index of the pass passName.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.FindPass.html | Material.FindPass}
     */
    FindPass(passName: string): number;
    /**
     * Get a named Graphics Buffer value.
     * @param name The name of the graphics buffer resource property to return.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetBuffer.html | Material.GetBuffer}
     */
    GetBuffer(name: string): GraphicsBufferHandle;
    /**
     * Get a named color value.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetColor.html | Material.GetColor}
     */
    GetColor(name: string): Color;
    /**
     * Get a named color value.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetColor.html | Material.GetColor}
     */
    GetColor(nameID: number): Color;
    /**
     * Get a named color array.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetColorArray.html | Material.GetColorArray}
     */
    GetColorArray(name: string): Readonly<Color[]>;
    /**
     * Get a named color array.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetColorArray.html | Material.GetColorArray}
     */
    GetColorArray(nameID: number): Readonly<Color[]>;
    GetColorArray(name: string, values: Readonly<Color[]>): void;
    GetColorArray(nameID: number, values: Readonly<Color[]>): void;
    /**
     * Get a named Constant Buffer value.
     * @param name The name of the constant buffer property to return.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetConstantBuffer.html | Material.GetConstantBuffer}
     */
    GetConstantBuffer(name: string): GraphicsBufferHandle;
    /**
     * Get a named float value.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetFloat.html | Material.GetFloat}
     */
    GetFloat(name: string): number;
    /**
     * Get a named float value.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetFloat.html | Material.GetFloat}
     */
    GetFloat(nameID: number): number;
    /**
     * Get a named float array.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetFloatArray.html | Material.GetFloatArray}
     */
    GetFloatArray(name: string): Readonly<number[]>;
    /**
     * Get a named float array.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetFloatArray.html | Material.GetFloatArray}
     */
    GetFloatArray(nameID: number): Readonly<number[]>;
    GetFloatArray(name: string, values: Readonly<number[]>): void;
    GetFloatArray(nameID: number, values: Readonly<number[]>): void;
    /**
     * This method is deprecated. Use GetFloat or GetInteger instead.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetInt.html | Material.GetInt}
     */
    GetInt(name: string): number;
    /**
     * This method is deprecated. Use GetFloat or GetInteger instead.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetInt.html | Material.GetInt}
     */
    GetInt(nameID: number): number;
    /**
     * Get a named integer value.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetInteger.html | Material.GetInteger}
     */
    GetInteger(name: string): number;
    /**
     * Get a named integer value.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetInteger.html | Material.GetInteger}
     */
    GetInteger(nameID: number): number;
    /**
     * Get a named matrix value from the shader.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetMatrix.html | Material.GetMatrix}
     */
    GetMatrix(name: string): Matrix4x4;
    /**
     * Get a named matrix value from the shader.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetMatrix.html | Material.GetMatrix}
     */
    GetMatrix(nameID: number): Matrix4x4;
    /**
     * Get a named matrix array.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetMatrixArray.html | Material.GetMatrixArray}
     */
    GetMatrixArray(name: string): Readonly<Matrix4x4[]>;
    /**
     * Get a named matrix array.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetMatrixArray.html | Material.GetMatrixArray}
     */
    GetMatrixArray(nameID: number): Readonly<Matrix4x4[]>;
    GetMatrixArray(name: string, values: Readonly<Matrix4x4[]>): void;
    GetMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    /**
     * Returns the name of the shader pass at index pass.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetPassName.html | Material.GetPassName}
     */
    GetPassName(pass: number): string;
    /**
     * Retrieves a list of the named properties in the material that match the input property type.
     * @param type The type to use to query the material for named properties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetPropertyNames.html | Material.GetPropertyNames}
     */
    GetPropertyNames(type: MaterialPropertyType): Readonly<string[]>;
    /**
     * Checks whether a given Shader pass is enabled on this Material.
     * @param passName Shader pass name (case insensitive).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetShaderPassEnabled.html | Material.GetShaderPassEnabled}
     */
    GetShaderPassEnabled(passName: string): boolean;
    /**
     * Get the value of material's shader tag.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetTag.html | Material.GetTag}
     */
    GetTag(tag: string, searchFallbacks: boolean, defaultValue: string): string;
    /**
     * Get the value of material's shader tag.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetTag.html | Material.GetTag}
     */
    GetTag(tag: string, searchFallbacks: boolean): string;
    /**
     * Get a named texture.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetTexture.html | Material.GetTexture}
     */
    GetTexture(name: string): Texture;
    /**
     * Get a named texture.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetTexture.html | Material.GetTexture}
     */
    GetTexture(nameID: number): Texture;
    /**
     * Gets the placement offset of texture propertyName.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetTextureOffset.html | Material.GetTextureOffset}
     */
    GetTextureOffset(name: string): Vector2;
    /**
     * Gets the placement offset of texture propertyName.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetTextureOffset.html | Material.GetTextureOffset}
     */
    GetTextureOffset(nameID: number): Vector2;
    /**
     * Return the name IDs of all texture properties exposed on this material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetTexturePropertyNameIDs.html | Material.GetTexturePropertyNameIDs}
     */
    GetTexturePropertyNameIDs(): Readonly<number[]>;
    GetTexturePropertyNameIDs(outNames: Readonly<number[]>): void;
    /**
     * Returns the names of all texture properties exposed on this material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetTexturePropertyNames.html | Material.GetTexturePropertyNames}
     */
    GetTexturePropertyNames(): Readonly<string[]>;
    GetTexturePropertyNames(outNames: Readonly<string[]>): void;
    /**
     * Gets the placement scale of texture propertyName.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetTextureScale.html | Material.GetTextureScale}
     */
    GetTextureScale(name: string): Vector2;
    /**
     * Gets the placement scale of texture propertyName.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetTextureScale.html | Material.GetTextureScale}
     */
    GetTextureScale(nameID: number): Vector2;
    /**
     * Get a named vector value.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetVector.html | Material.GetVector}
     */
    GetVector(name: string): Vector4;
    /**
     * Get a named vector value.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetVector.html | Material.GetVector}
     */
    GetVector(nameID: number): Vector4;
    /**
     * Get a named vector array.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetVectorArray.html | Material.GetVectorArray}
     */
    GetVectorArray(name: string): Readonly<Vector4[]>;
    /**
     * Get a named vector array.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.GetVectorArray.html | Material.GetVectorArray}
     */
    GetVectorArray(nameID: number): Readonly<Vector4[]>;
    GetVectorArray(name: string, values: Readonly<Vector4[]>): void;
    GetVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    /**
     * Checks if the ShaderLab file assigned to the Material has a ComputeBuffer property with the given name.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasBuffer.html | Material.HasBuffer}
     */
    HasBuffer(name: string): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a ComputeBuffer property with the given name.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasBuffer.html | Material.HasBuffer}
     */
    HasBuffer(nameID: number): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a Color property with the given name.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasColor.html | Material.HasColor}
     */
    HasColor(name: string): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a Color property with the given name.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasColor.html | Material.HasColor}
     */
    HasColor(nameID: number): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a ConstantBuffer property with the given name.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasConstantBuffer.html | Material.HasConstantBuffer}
     */
    HasConstantBuffer(name: string): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a ConstantBuffer property with the given name.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasConstantBuffer.html | Material.HasConstantBuffer}
     */
    HasConstantBuffer(nameID: number): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a Float property with the given name. This also works with the Float Array property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasFloat.html | Material.HasFloat}
     */
    HasFloat(name: string): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a Float property with the given name. This also works with the Float Array property.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasFloat.html | Material.HasFloat}
     */
    HasFloat(nameID: number): boolean;
    /**
     * This method is deprecated. Use HasFloat or HasInteger instead.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasInt.html | Material.HasInt}
     */
    HasInt(name: string): boolean;
    /**
     * This method is deprecated. Use HasFloat or HasInteger instead.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasInt.html | Material.HasInt}
     */
    HasInt(nameID: number): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has an Integer property with the given name.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasInteger.html | Material.HasInteger}
     */
    HasInteger(name: string): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has an Integer property with the given name.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasInteger.html | Material.HasInteger}
     */
    HasInteger(nameID: number): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a Matrix property with the given name. This also works with the Matrix Array property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasMatrix.html | Material.HasMatrix}
     */
    HasMatrix(name: string): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a Matrix property with the given name. This also works with the Matrix Array property.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasMatrix.html | Material.HasMatrix}
     */
    HasMatrix(nameID: number): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a property with the given name.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasProperty.html | Material.HasProperty}
     */
    HasProperty(nameID: number): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a property with the given name.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasProperty.html | Material.HasProperty}
     */
    HasProperty(name: string): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a Texture property with the given name.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasTexture.html | Material.HasTexture}
     */
    HasTexture(name: string): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a Texture property with the given name.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasTexture.html | Material.HasTexture}
     */
    HasTexture(nameID: number): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a Vector property with the given name. This also works with the Vector Array property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasVector.html | Material.HasVector}
     */
    HasVector(name: string): boolean;
    /**
     * Checks if the ShaderLab file assigned to the Material has a Vector property with the given name. This also works with the Vector Array property.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.HasVector.html | Material.HasVector}
     */
    HasVector(nameID: number): boolean;
    /**
     * Returns True if the given material is an ancestor of this Material.
     * @param ancestor The specific ancestor to find in the hierarchy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.IsChildOf.html | Material.IsChildOf}
     */
    IsChildOf(ancestor: Material): boolean;
    /**
     * Checks whether a local shader keyword is enabled for this material.
     * @param keyword The name of the Rendering.LocalKeyword to check.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.IsKeywordEnabled.html | Material.IsKeywordEnabled}
     */
    IsKeywordEnabled(keyword: string): boolean;
    /**
     * Checks whether a local shader keyword is enabled for this material.
     * @param keyword The name of the Rendering.LocalKeyword to check.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.IsKeywordEnabled.html | Material.IsKeywordEnabled}
     */
    IsKeywordEnabled(keyword: LocalKeyword): boolean;
    /**
     * Checks whether a property is locked by this material.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.IsPropertyLocked.html | Material.IsPropertyLocked}
     */
    IsPropertyLocked(nameID: number): boolean;
    /**
     * Checks whether a property is locked by this material.
     * @param name Property name, e.g. &quot;_SrcBlend&quot;.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.IsPropertyLocked.html | Material.IsPropertyLocked}
     */
    IsPropertyLocked(name: string): boolean;
    /**
     * Checks whether a property is locked by any of ancestor of this material.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.IsPropertyLockedByAncestor.html | Material.IsPropertyLockedByAncestor}
     */
    IsPropertyLockedByAncestor(nameID: number): boolean;
    /**
     * Checks whether a property is locked by any of ancestor of this material.
     * @param name Property name, e.g. &quot;_SrcBlend&quot;.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.IsPropertyLockedByAncestor.html | Material.IsPropertyLockedByAncestor}
     */
    IsPropertyLockedByAncestor(name: string): boolean;
    /**
     * Checks whether a property is overriden by this material.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.IsPropertyOverriden.html | Material.IsPropertyOverriden}
     */
    IsPropertyOverriden(nameID: number): boolean;
    /**
     * Checks whether a property is overriden by this material.
     * @param name Property name, e.g. &quot;_SrcBlend&quot;.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.IsPropertyOverriden.html | Material.IsPropertyOverriden}
     */
    IsPropertyOverriden(name: string): boolean;
    /**
     * Interpolate properties between two materials.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.Lerp.html | Material.Lerp}
     */
    Lerp(start: Material, end: Material, t: number): void;
    /**
     * Removes all property overrides on this material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.RevertAllPropertyOverrides.html | Material.RevertAllPropertyOverrides}
     */
    RevertAllPropertyOverrides(): void;
    /**
     * Removes the override on a property.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.RevertPropertyOverride.html | Material.RevertPropertyOverride}
     */
    RevertPropertyOverride(nameID: number): void;
    /**
     * Removes the override on a property.
     * @param name Property name, e.g. &quot;_SrcBlend&quot;.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.RevertPropertyOverride.html | Material.RevertPropertyOverride}
     */
    RevertPropertyOverride(name: string): void;
    /**
     * Sets a named buffer value.
     * @param name Property name.
     * @param value The ComputeBuffer or GraphicsBuffer value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetBuffer.html | Material.SetBuffer}
     */
    SetBuffer(name: string, value: ComputeBuffer): void;
    /**
     * Sets a named buffer value.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value The ComputeBuffer or GraphicsBuffer value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetBuffer.html | Material.SetBuffer}
     */
    SetBuffer(nameID: number, value: ComputeBuffer): void;
    /**
     * Sets a named buffer value.
     * @param name Property name.
     * @param value The ComputeBuffer or GraphicsBuffer value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetBuffer.html | Material.SetBuffer}
     */
    SetBuffer(name: string, value: GraphicsBuffer): void;
    /**
     * Sets a named buffer value.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value The ComputeBuffer or GraphicsBuffer value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetBuffer.html | Material.SetBuffer}
     */
    SetBuffer(nameID: number, value: GraphicsBuffer): void;
    /**
     * Sets a color value.
     * @param name Property name. For example, &quot;_Color&quot; in Built-in Render Pipeline, &quot;_BaseColor&quot; in URP.
     * @param value Color value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetColor.html | Material.SetColor}
     */
    SetColor(name: string, value: Color): void;
    /**
     * Sets a color value.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value Color value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetColor.html | Material.SetColor}
     */
    SetColor(nameID: number, value: Color): void;
    SetColorArray(name: string, values: Readonly<Color[]>): void;
    SetColorArray(nameID: number, values: Readonly<Color[]>): void;
    /**
     * Sets a color array property.
     * @param name Property name.
     * @param values Array of values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetColorArray.html | Material.SetColorArray}
     */
    SetColorArray(name: string, values: Readonly<Color[]>): void;
    /**
     * Sets a color array property.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param values Array of values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetColorArray.html | Material.SetColorArray}
     */
    SetColorArray(nameID: number, values: Readonly<Color[]>): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
     * @param name The name of the constant buffer to override.
     * @param value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
     * @param offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetConstantBuffer.html | Material.SetConstantBuffer}
     */
    SetConstantBuffer(name: string, value: ComputeBuffer, offset: number, size: number): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
     * @param nameID The shader property ID of the constant buffer to override.
     * @param value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
     * @param offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetConstantBuffer.html | Material.SetConstantBuffer}
     */
    SetConstantBuffer(nameID: number, value: ComputeBuffer, offset: number, size: number): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
     * @param name The name of the constant buffer to override.
     * @param value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
     * @param offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetConstantBuffer.html | Material.SetConstantBuffer}
     */
    SetConstantBuffer(name: string, value: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
     * @param nameID The shader property ID of the constant buffer to override.
     * @param value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
     * @param offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetConstantBuffer.html | Material.SetConstantBuffer}
     */
    SetConstantBuffer(nameID: number, value: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Sets a named float value.
     * @param name Property name, e.g. &quot;_Glossiness&quot;.
     * @param value Float value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetFloat.html | Material.SetFloat}
     */
    SetFloat(name: string, value: number): void;
    /**
     * Sets a named float value.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value Float value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetFloat.html | Material.SetFloat}
     */
    SetFloat(nameID: number, value: number): void;
    SetFloatArray(name: string, values: Readonly<number[]>): void;
    SetFloatArray(nameID: number, values: Readonly<number[]>): void;
    /**
     * Sets a float array property.
     * @param name Property name.
     * @param values Array of values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetFloatArray.html | Material.SetFloatArray}
     */
    SetFloatArray(name: string, values: Readonly<number[]>): void;
    /**
     * Sets a float array property.
     * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
     * @param values Array of values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetFloatArray.html | Material.SetFloatArray}
     */
    SetFloatArray(nameID: number, values: Readonly<number[]>): void;
    /**
     * This method is deprecated. Use SetFloat or SetInteger instead.
     * @param name Property name, e.g. &quot;_SrcBlend&quot;.
     * @param value Integer value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetInt.html | Material.SetInt}
     */
    SetInt(name: string, value: number): void;
    /**
     * This method is deprecated. Use SetFloat or SetInteger instead.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value Integer value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetInt.html | Material.SetInt}
     */
    SetInt(nameID: number, value: number): void;
    /**
     * Sets a named integer value.
     * @param name Property name, e.g. &quot;_SrcBlend&quot;.
     * @param value Integer value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetInteger.html | Material.SetInteger}
     */
    SetInteger(name: string, value: number): void;
    /**
     * Sets a named integer value.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value Integer value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetInteger.html | Material.SetInteger}
     */
    SetInteger(nameID: number, value: number): void;
    /**
     * Sets the state of a local shader keyword for this material.
     * @param keyword The Rendering.LocalKeyword to enable or disable.
     * @param value The desired keyword state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetKeyword.html | Material.SetKeyword}
     */
    SetKeyword(keyword: LocalKeyword, value: boolean): void;
    /**
     * Sets a named matrix for the shader.
     * @param name Property name, e.g. &quot;_CubemapRotation&quot;.
     * @param value Matrix value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetMatrix.html | Material.SetMatrix}
     */
    SetMatrix(name: string, value: Matrix4x4): void;
    /**
     * Sets a named matrix for the shader.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value Matrix value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetMatrix.html | Material.SetMatrix}
     */
    SetMatrix(nameID: number, value: Matrix4x4): void;
    SetMatrixArray(name: string, values: Readonly<Matrix4x4[]>): void;
    SetMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    /**
     * Sets a matrix array property.
     * @param name Property name.
     * @param values Array of values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetMatrixArray.html | Material.SetMatrixArray}
     */
    SetMatrixArray(name: string, values: Readonly<Matrix4x4[]>): void;
    /**
     * Sets a matrix array property.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param values Array of values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetMatrixArray.html | Material.SetMatrixArray}
     */
    SetMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    /**
     * Sets an override tag/value on the material.
     * @param tag Name of the tag to set.
     * @param val Name of the value to set. Empty string to clear the override flag.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetOverrideTag.html | Material.SetOverrideTag}
     */
    SetOverrideTag(tag: string, val: string): void;
    /**
     * Activate the given pass for rendering.
     * @param pass Shader pass number to setup.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetPass.html | Material.SetPass}
     */
    SetPass(pass: number): boolean;
    /**
     * Sets the lock state of a property for this material.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value The desired lock state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetPropertyLock.html | Material.SetPropertyLock}
     */
    SetPropertyLock(nameID: number, value: boolean): void;
    /**
     * Sets the lock state of a property for this material.
     * @param name Property name, e.g. &quot;_SrcBlend&quot;.
     * @param value The desired lock state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetPropertyLock.html | Material.SetPropertyLock}
     */
    SetPropertyLock(name: string, value: boolean): void;
    /**
     * Enables or disables a Shader pass on a per-Material level.
     * @param passName Shader pass name (case insensitive).
     * @param enabled Flag indicating whether this Shader pass should be enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetShaderPassEnabled.html | Material.SetShaderPassEnabled}
     */
    SetShaderPassEnabled(passName: string, enabled: boolean): void;
    /**
     * Sets a named texture.
     * @param name Property name, e.g. &quot;_MainTex&quot;.
     * @param value Texture to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetTexture.html | Material.SetTexture}
     */
    SetTexture(name: string, value: Texture): void;
    /**
     * Sets a named texture.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value Texture to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetTexture.html | Material.SetTexture}
     */
    SetTexture(nameID: number, value: Texture): void;
    /**
     * Sets a named texture.
     * @param name Property name, e.g. &quot;_MainTex&quot;.
     * @param value Texture to set.
     * @param element Optional parameter that specifies the type of data to set from the RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetTexture.html | Material.SetTexture}
     */
    SetTexture(name: string, value: RenderTexture, element: RenderTextureSubElement): void;
    /**
     * Sets a named texture.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value Texture to set.
     * @param element Optional parameter that specifies the type of data to set from the RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetTexture.html | Material.SetTexture}
     */
    SetTexture(nameID: number, value: RenderTexture, element: RenderTextureSubElement): void;
    /**
     * Sets the placement offset of a given texture. The name parameter is defined in the shader. This method creates a new Material instance.
     * @param name The name of the texture property as defined in the shader. For example: &quot;_MainTex&quot;.
     * @param value Texture placement offset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetTextureOffset.html | Material.SetTextureOffset}
     */
    SetTextureOffset(name: string, value: Vector2): void;
    /**
     * Sets the placement offset of a given texture. The name parameter is defined in the shader. This method creates a new Material instance.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value Texture placement offset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetTextureOffset.html | Material.SetTextureOffset}
     */
    SetTextureOffset(nameID: number, value: Vector2): void;
    /**
     * Sets the placement scale of texture propertyName.
     * @param name Property name, e.g. &quot;_MainTex&quot;.
     * @param value Texture placement scale.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetTextureScale.html | Material.SetTextureScale}
     */
    SetTextureScale(name: string, value: Vector2): void;
    /**
     * Sets the placement scale of texture propertyName.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value Texture placement scale.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetTextureScale.html | Material.SetTextureScale}
     */
    SetTextureScale(nameID: number, value: Vector2): void;
    /**
     * Sets a named vector value.
     * @param name Property name, e.g. &quot;_WaveAndDistance&quot;.
     * @param value Vector value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetVector.html | Material.SetVector}
     */
    SetVector(name: string, value: Vector4): void;
    /**
     * Sets a named vector value.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param value Vector value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetVector.html | Material.SetVector}
     */
    SetVector(nameID: number, value: Vector4): void;
    SetVectorArray(name: string, values: Readonly<Vector4[]>): void;
    SetVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    /**
     * Sets a vector array property.
     * @param name Property name.
     * @param values Array of values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetVectorArray.html | Material.SetVectorArray}
     */
    SetVectorArray(name: string, values: Readonly<Vector4[]>): void;
    /**
     * Sets a vector array property.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param values Array of values to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Material.SetVectorArray.html | Material.SetVectorArray}
     */
    SetVectorArray(nameID: number, values: Readonly<Vector4[]>): void;


}
    
interface Shader extends Object {
    /**
     * Shader LOD level for this shader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader-maximumLOD.html | Shader.maximumLOD}
     */
    maximumLOD: number;
    /**
     * Can this shader run on the end-users graphics card? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader-isSupported.html | Shader.isSupported}
     */
    readonly isSupported: boolean;
    /**
     * The local keyword space of this shader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader-keywordSpace.html | Shader.keywordSpace}
     */
    readonly keywordSpace: LocalKeywordSpace;
    /**
     * Render queue of this shader. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader-renderQueue.html | Shader.renderQueue}
     */
    readonly renderQueue: number;
    /**
     * Returns the number of shader passes on the active SubShader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader-passCount.html | Shader.passCount}
     */
    readonly passCount: number;
    /**
     * Returns the number of SubShaders in this shader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader-subshaderCount.html | Shader.subshaderCount}
     */
    readonly subshaderCount: number;



    /**
     * Searches for the tag specified by tagName on the shader's active SubShader and returns the value of the tag.
     * @param passIndex The index of the pass.
     * @param tagName The name of the tag.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.FindPassTagValue.html | Shader.FindPassTagValue}
     */
    FindPassTagValue(passIndex: number, tagName: ShaderTagId): ShaderTagId;
    /**
     * Searches for the tag specified by tagName on the SubShader specified by subshaderIndex and returns the value of the tag.
     * @param subshaderIndex The index of the SubShader.
     * @param passIndex The index of the pass.
     * @param tagName The name of the tag.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.FindPassTagValue.html | Shader.FindPassTagValue}
     */
    FindPassTagValue(subshaderIndex: number, passIndex: number, tagName: ShaderTagId): ShaderTagId;
    /**
     * Finds the index of a shader property by its name.
     * @param propertyName The name of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.FindPropertyIndex.html | Shader.FindPropertyIndex}
     */
    FindPropertyIndex(propertyName: string): number;
    /**
     * Searches for the tag specified by tagName on the SubShader specified by subshaderIndex and returns the value of the tag.
     * @param subshaderIndex The index of the SubShader.
     * @param tagName The name of the tag.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.FindSubshaderTagValue.html | Shader.FindSubshaderTagValue}
     */
    FindSubshaderTagValue(subshaderIndex: number, tagName: ShaderTagId): ShaderTagId;
    /**
     * Returns the dependency shader.
     * @param name The name of the dependency to query.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetDependency.html | Shader.GetDependency}
     */
    GetDependency(name: string): Shader;
    /**
     * Returns the number of passes in the given SubShader.
     * @param subshaderIndex The index of the SubShader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPassCountInSubshader.html | Shader.GetPassCountInSubshader}
     */
    GetPassCountInSubshader(subshaderIndex: number): number;
    /**
     * Returns an array of strings containing attributes of the shader property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyAttributes.html | Shader.GetPropertyAttributes}
     */
    GetPropertyAttributes(propertyIndex: number): Readonly<string[]>;
    /**
     * Returns the number of properties in this Shader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyCount.html | Shader.GetPropertyCount}
     */
    GetPropertyCount(): number;
    /**
     * Returns the default float value of the shader property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyDefaultFloatValue.html | Shader.GetPropertyDefaultFloatValue}
     */
    GetPropertyDefaultFloatValue(propertyIndex: number): number;
    /**
     * Returns the default int value of the shader property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyDefaultIntValue.html | Shader.GetPropertyDefaultIntValue}
     */
    GetPropertyDefaultIntValue(propertyIndex: number): number;
    /**
     * Returns the default Vector4 value of the shader property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyDefaultVectorValue.html | Shader.GetPropertyDefaultVectorValue}
     */
    GetPropertyDefaultVectorValue(propertyIndex: number): Vector4;
    /**
     * Returns the description string of the shader property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyDescription.html | Shader.GetPropertyDescription}
     */
    GetPropertyDescription(propertyIndex: number): string;
    /**
     * Returns the ShaderPropertyFlags of the shader property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyFlags.html | Shader.GetPropertyFlags}
     */
    GetPropertyFlags(propertyIndex: number): ShaderPropertyFlags;
    /**
     * Returns the name of the shader property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyName.html | Shader.GetPropertyName}
     */
    GetPropertyName(propertyIndex: number): string;
    /**
     * Returns the nameId of the shader property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyNameId.html | Shader.GetPropertyNameId}
     */
    GetPropertyNameId(propertyIndex: number): number;
    /**
     * Returns the min and max limits for a &lt;a href=&quot;Rendering.ShaderPropertyType.Range.html&quot;&gt;Range&lt;/a&gt; property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyRangeLimits.html | Shader.GetPropertyRangeLimits}
     */
    GetPropertyRangeLimits(propertyIndex: number): Vector2;
    /**
     * Returns the default Texture name of a &lt;a href=&quot;Rendering.ShaderPropertyType.Texture.html&quot;&gt;Texture&lt;/a&gt; shader property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyTextureDefaultName.html | Shader.GetPropertyTextureDefaultName}
     */
    GetPropertyTextureDefaultName(propertyIndex: number): string;
    /**
     * Returns the TextureDimension of a &lt;a href=&quot;Rendering.ShaderPropertyType.Texture.html&quot;&gt;Texture&lt;/a&gt; shader property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyTextureDimension.html | Shader.GetPropertyTextureDimension}
     */
    GetPropertyTextureDimension(propertyIndex: number): TextureDimension;
    /**
     * Returns the ShaderPropertyType of the property at the specified index.
     * @param propertyIndex The index of the shader property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader.GetPropertyType.html | Shader.GetPropertyType}
     */
    GetPropertyType(propertyIndex: number): ShaderPropertyType;


}
    
interface LocalKeywordSpace {
    /**
     * An array containing all Rendering.LocalKeyword structs in this local keyword space. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LocalKeywordSpace-keywords.html | Rendering.LocalKeywordSpace.keywords}
     */
    readonly keywords: Readonly<LocalKeyword[]>;
    /**
     * An array containing the names of all local shader keywords in this local keyword space. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LocalKeywordSpace-keywordNames.html | Rendering.LocalKeywordSpace.keywordNames}
     */
    readonly keywordNames: Readonly<string[]>;
    /**
     * The number of local shader keywords in this local keyword space. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LocalKeywordSpace-keywordCount.html | Rendering.LocalKeywordSpace.keywordCount}
     */
    readonly keywordCount: number;



    Equals(o: unknown): boolean;
    Equals(rhs: LocalKeywordSpace): boolean;
    /**
     * Searches for a local shader keyword with a given name in the keyword space.
     * @param name The name of the shader keyword to search for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LocalKeywordSpace.FindKeyword.html | Rendering.LocalKeywordSpace.FindKeyword}
     */
    FindKeyword(name: string): LocalKeyword;
    GetHashCode(): number;


}
    
interface LocalKeyword {
    /**
     * The name of the shader keyword (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LocalKeyword-name.html | Rendering.LocalKeyword.name}
     */
    readonly name: string;
    /**
     * Specifies whether this local shader keyword is used for dynamic branching (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LocalKeyword-isDynamic.html | Rendering.LocalKeyword.isDynamic}
     */
    readonly isDynamic: boolean;
    /**
     * Whether this local shader keyword can be overridden by a global shader keyword. (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LocalKeyword-isOverridable.html | Rendering.LocalKeyword.isOverridable}
     */
    readonly isOverridable: boolean;
    /**
     * Specifies whether this local shader keyword is valid (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LocalKeyword-isValid.html | Rendering.LocalKeyword.isValid}
     */
    readonly isValid: boolean;
    /**
     * The type of the shader keyword (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LocalKeyword-type.html | Rendering.LocalKeyword.type}
     */
    readonly type: ShaderKeywordType;



    Equals(o: unknown): boolean;
    Equals(rhs: LocalKeyword): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface LocalKeywordConstructor {


    new(shader: Shader, name: string): LocalKeyword;
    new(shader: ComputeShader, name: string): LocalKeyword;



}
declare const LocalKeyword: LocalKeywordConstructor;
    
interface ShaderTagId {
    /**
     * Gets the name of the tag referred to by the shader tag id.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ShaderTagId-name.html | Rendering.ShaderTagId.name}
     */
    readonly name: string;



    Equals(obj: unknown): boolean;
    Equals(other: ShaderTagId): boolean;
    GetHashCode(): number;


}
    
interface ShaderTagIdConstructor {
    readonly none: ShaderTagId;


    new(name: string): ShaderTagId;



}
declare const ShaderTagId: ShaderTagIdConstructor;
    
interface GlobalKeyword {
    /**
     * The name of the shader keyword. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GlobalKeyword-name.html | Rendering.GlobalKeyword.name}
     */
    readonly name: string;



    ToString(): string;


}
    
interface GlobalKeywordConstructor {


    new(name: string): GlobalKeyword;


    Create(name: string): GlobalKeyword;

}
declare const GlobalKeyword: GlobalKeywordConstructor;
    
interface RayTracingAccelerationStructure {



    /**
     * Adds a ray tracing instance to the RayTracingAccelerationStructure.
     * @param targetRenderer The Renderer to add to the RayTracingAccelerationStructure.
     * @param subMeshFlags A list of flags that control the shader execution behaviour when a ray intersects a sub-mesh geometry. See RayTracingSubMeshFlags for additional information.
     * @param enableTriangleCulling A bool that indicates whether front/back face culling for this ray tracing instance is enabled. The culling takes place when the GPU performs a ray-triangle intersection test. Culling is enabled (true) by default.
     * @param frontTriangleCounterClockwise A bool that indicates whether to flip the way triangles face in this ray tracing instance. If this is set to true, front-facing triangles will become back-facing and vice versa. Set to false by default.
     * @param mask An 8-bit mask you can use to selectively intersect the ray tracing instance associated with the target Renderer with rays that only pass the mask. All rays are enabled (0xff) by default.
     * @param id An optional instance ID value accessed with InstanceID() HLSL function.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.AddInstance.html | Rendering.RayTracingAccelerationStructure.AddInstance}
     */
    AddInstance(targetRenderer: Renderer, subMeshFlags: Readonly<number[]>, enableTriangleCulling: boolean, frontTriangleCounterClockwise: boolean, mask: number, id: number): number;
    /**
     * Adds a ray tracing instance associated with a list of axis-aligned bounding boxes (AABBs) to the RayTracingAccelerationStructure for procedural geometry generation using intersection shaders.
     * @param config The common parameters that this AABBs ray tracing instance uses.
     * @param matrix The transformation matrix of the ray tracing instance.
     * @param id An optional instance ID value that you can access with InstanceID() HLSL function.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.AddInstance.html | Rendering.RayTracingAccelerationStructure.AddInstance}
     */
    AddInstance(config: RayTracingAABBsInstanceConfig, matrix: Matrix4x4, id: number): number;
    AddInstance(config: RayTracingMeshInstanceConfig, matrix: Matrix4x4, prevMatrix: Nullable<Matrix4x4>, id: number): number;
    AddInstance(config: RayTracingGeometryInstanceConfig, matrix: Matrix4x4, prevMatrix: Nullable<Matrix4x4>, id: number): number;
    AddInstances<T>(config: RayTracingMeshInstanceConfig, instanceData: Readonly<T[]>, instanceCount: number, startInstance: number, id: number): number;
    AddInstances<T>(config: RayTracingMeshInstanceConfig, instanceData: Readonly<T[]>, instanceCount: number, startInstance: number, id: number): number;
    AddInstances<T>(config: RayTracingMeshInstanceConfig, instanceData: Readonly<T[]>, instanceCount: number, startInstance: number, id: number): number;
    AddInstances<T>(config: RayTracingMeshInstanceConfig, instanceData: Readonly<T[]>, id: number): number;
    /**
     * Adds the ray tracing instances associated with a VFXRenderer to the RayTracingAccelerationStructure.
     * @param targetRenderer The Renderer to add to the RayTracingAccelerationStructure.
     * @param vfxSystemMasks An array of 8-bit masks you can use to selectively intersect ray-traced VFX systems associated with the target Renderer with rays that only pass the mask. All rays are enabled (0xff) by default.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.AddVFXInstances.html | Rendering.RayTracingAccelerationStructure.AddVFXInstances}
     */
    AddVFXInstances(targetRenderer: Renderer, vfxSystemMasks: Readonly<number[]>): void;
    /**
     * Builds acceleration structures on the GPU. Allocates any GPU memory required for storing acceleration structure data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.Build.html | Rendering.RayTracingAccelerationStructure.Build}
     */
    Build(): void;
    /**
     * Builds acceleration structures on the GPU. Allocates any GPU memory required for storing acceleration structure data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.Build.html | Rendering.RayTracingAccelerationStructure.Build}
     */
    Build(relativeOrigin: Vector3): void;
    Build(buildSettings: BuildSettings): void;
    /**
     * Removes all ray tracing instances from the RayTracingAccelerationStructure.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.ClearInstances.html | Rendering.RayTracingAccelerationStructure.ClearInstances}
     */
    ClearInstances(): void;
    /**
     * Populates the RayTracingAccelerationStructure with ray tracing instances that Unity associates with Renderers in the Scene by using filtering and culling parameters.
     * @param cullingConfig Parameters for culling and filtering ray tracing instances.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.CullInstances.html | Rendering.RayTracingAccelerationStructure.CullInstances}
     */
    CullInstances(cullingConfig: RayTracingInstanceCullingConfig): RayTracingInstanceCullingResults;
    /**
     * Destroys this RayTracingAccelerationStructure and frees the GPU memory used for storing acceleration structure data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.Dispose.html | Rendering.RayTracingAccelerationStructure.Dispose}
     */
    Dispose(): void;
    /**
     * Returns the number of ray tracing instances in the RayTracingAccelerationStructure.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.GetInstanceCount.html | Rendering.RayTracingAccelerationStructure.GetInstanceCount}
     */
    GetInstanceCount(): number;
    /**
     * Returns the total size of this RayTracingAccelerationStructure in GPU memory in bytes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.GetSize.html | Rendering.RayTracingAccelerationStructure.GetSize}
     */
    GetSize(): number;
    /**
     * Destroys this RayTracingAccelerationStructure and frees the GPU memory used for storing acceleration structure data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.Release.html | Rendering.RayTracingAccelerationStructure.Release}
     */
    Release(): void;
    /**
     * Removes a ray tracing instance associated with a Renderer from this RayTracingAccelerationStructure.
     * @param targetRenderer The Renderer associated with the ray tracing instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.RemoveInstance.html | Rendering.RayTracingAccelerationStructure.RemoveInstance}
     */
    RemoveInstance(targetRenderer: Renderer): void;
    /**
     * Removes a ray tracing instance associated with an axis-aligned bounding box (AABBs) GraphicsBuffer or a Mesh instance from this RayTracingAccelerationStructure.
     * @param handle The handle associated with an AABB or Mesh ray tracing instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.RemoveInstance.html | Rendering.RayTracingAccelerationStructure.RemoveInstance}
     */
    RemoveInstance(handle: number): void;
    /**
     * Remove the ray tracing instances associated with a VFXRenderer from the RayTracingAccelerationStructure.
     * @param targetRenderer The VFXRenderer whose instances will be removed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.RemoveVFXInstances.html | Rendering.RayTracingAccelerationStructure.RemoveVFXInstances}
     */
    RemoveVFXInstances(targetRenderer: Renderer): void;
    /**
     * Updates the instance ID of a ray tracing instance.
     * @param renderer The Renderer associated with the ray tracing instance.
     * @param instanceID The new instance ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.UpdateInstanceID.html | Rendering.RayTracingAccelerationStructure.UpdateInstanceID}
     */
    UpdateInstanceID(renderer: Renderer, instanceID: number): void;
    /**
     * Updates the instance ID of a ray tracing instance.
     * @param handle The handle associated with an AABB or Mesh ray tracing instance.
     * @param instanceID The new instance ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.UpdateInstanceID.html | Rendering.RayTracingAccelerationStructure.UpdateInstanceID}
     */
    UpdateInstanceID(handle: number, instanceID: number): void;
    /**
     * Updates the instance mask of a ray tracing instance.
     * @param renderer The Renderer associated with the ray tracing instance.
     * @param mask The new mask.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.UpdateInstanceMask.html | Rendering.RayTracingAccelerationStructure.UpdateInstanceMask}
     */
    UpdateInstanceMask(renderer: Renderer, mask: number): void;
    /**
     * Updates the instance mask of a ray tracing instance.
     * @param handle The handle associated with an AABB or Mesh ray tracing instance.
     * @param mask The new mask.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.UpdateInstanceMask.html | Rendering.RayTracingAccelerationStructure.UpdateInstanceMask}
     */
    UpdateInstanceMask(handle: number, mask: number): void;
    /**
     * Updates per ray tracing instance Material properties.
     * @param handle The handle associated with a AABB or Mesh ray tracing instance.
     * @param properties The additional material properties to apply onto the Material used by the ray tracing instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.UpdateInstancePropertyBlock.html | Rendering.RayTracingAccelerationStructure.UpdateInstancePropertyBlock}
     */
    UpdateInstancePropertyBlock(handle: number, properties: MaterialPropertyBlock): void;
    /**
     * Updates the transformation of a ray tracing instance.
     * @param renderer The Renderer associated with a ray tracing instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.UpdateInstanceTransform.html | Rendering.RayTracingAccelerationStructure.UpdateInstanceTransform}
     */
    UpdateInstanceTransform(renderer: Renderer): void;
    /**
     * Updates the transformation of a ray tracing instance.
     * @param handle The handle associated with a AABB or Mesh ray tracing instance.
     * @param matrix The new transformation matrix of the ray tracing instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAccelerationStructure.UpdateInstanceTransform.html | Rendering.RayTracingAccelerationStructure.UpdateInstanceTransform}
     */
    UpdateInstanceTransform(handle: number, matrix: Matrix4x4): void;


}
    
interface Renderer extends Component {
    /**
     * The bounding box of the renderer in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-bounds.html | Renderer.bounds}
     */
    bounds: Bounds;
    /**
     * The bounding box of the renderer in local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-localBounds.html | Renderer.localBounds}
     */
    localBounds: Bounds;
    /**
     * Makes the rendered 3D object visible if enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-enabled.html | Renderer.enabled}
     */
    enabled: boolean;
    /**
     * Is this renderer visible in any camera? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-isVisible.html | Renderer.isVisible}
     */
    readonly isVisible: boolean;
    /**
     * Does this object cast shadows?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-shadowCastingMode.html | Renderer.shadowCastingMode}
     */
    shadowCastingMode: ShadowCastingMode;
    /**
     * Does this object receive shadows?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-receiveShadows.html | Renderer.receiveShadows}
     */
    receiveShadows: boolean;
    /**
     * Allows turning off rendering for a specific component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-forceRenderingOff.html | Renderer.forceRenderingOff}
     */
    forceRenderingOff: boolean;
    /**
     * Is this renderer a static shadow caster?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-staticShadowCaster.html | Renderer.staticShadowCaster}
     */
    staticShadowCaster: boolean;
    /**
     * Specifies the mode for motion vector rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-motionVectorGenerationMode.html | Renderer.motionVectorGenerationMode}
     */
    motionVectorGenerationMode: MotionVectorGenerationMode;
    /**
     * The light probe interpolation type.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-lightProbeUsage.html | Renderer.lightProbeUsage}
     */
    lightProbeUsage: LightProbeUsage;
    /**
     * Should reflection probes be used for this Renderer?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-reflectionProbeUsage.html | Renderer.reflectionProbeUsage}
     */
    reflectionProbeUsage: ReflectionProbeUsage;
    /**
     * Determines which rendering layer this renderer lives on, if you use a.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-renderingLayerMask.html | Renderer.renderingLayerMask}
     */
    renderingLayerMask: number;
    /**
     * This value sorts renderers by priority. Lower values are rendered first and higher values are rendered last.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-rendererPriority.html | Renderer.rendererPriority}
     */
    rendererPriority: number;
    /**
     * Describes how this renderer is updated for ray tracing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-rayTracingMode.html | Renderer.rayTracingMode}
     */
    rayTracingMode: RayTracingMode;
    /**
     * The flags Unity uses when it builds acceleration structures associated with geometry used by renderers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-rayTracingAccelerationStructureBuildFlags.html | Renderer.rayTracingAccelerationStructureBuildFlags}
     */
    rayTracingAccelerationStructureBuildFlags: RayTracingAccelerationStructureBuildFlags;
    /**
     * Whether to override the default build flags specified when creating a RayTracingAccelerationStructure.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-rayTracingAccelerationStructureBuildFlagsOverride.html | Renderer.rayTracingAccelerationStructureBuildFlagsOverride}
     */
    rayTracingAccelerationStructureBuildFlagsOverride: boolean;
    /**
     * Name of the Renderer's sorting layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-sortingLayerName.html | Renderer.sortingLayerName}
     */
    sortingLayerName: string;
    /**
     * Unique ID of the Renderer's sorting layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-sortingLayerID.html | Renderer.sortingLayerID}
     */
    sortingLayerID: number;
    /**
     * Renderer's order within a sorting layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-sortingOrder.html | Renderer.sortingOrder}
     */
    sortingOrder: number;
    /**
     * Is the renderer the first LOD level in its group.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-isLOD0.html | Renderer.isLOD0}
     */
    readonly isLOD0: boolean;
    /**
     * Controls if dynamic occlusion culling should be performed for this renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-allowOcclusionWhenDynamic.html | Renderer.allowOcclusionWhenDynamic}
     */
    allowOcclusionWhenDynamic: boolean;
    /**
     * Indicates whether the renderer is part of a with other renderers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-isPartOfStaticBatch.html | Renderer.isPartOfStaticBatch}
     */
    readonly isPartOfStaticBatch: boolean;
    /**
     * Matrix that transforms a point from world space into local space (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-worldToLocalMatrix.html | Renderer.worldToLocalMatrix}
     */
    readonly worldToLocalMatrix: Matrix4x4;
    /**
     * Matrix that transforms a point from local space into world space (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-localToWorldMatrix.html | Renderer.localToWorldMatrix}
     */
    readonly localToWorldMatrix: Matrix4x4;
    /**
     * If set, the Renderer will use the Light Probe Proxy Volume component attached to the source GameObject.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-lightProbeProxyVolumeOverride.html | Renderer.lightProbeProxyVolumeOverride}
     */
    lightProbeProxyVolumeOverride: GameObject;
    /**
     * If set, Renderer will use this Transform's position to find the light or reflection probe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-probeAnchor.html | Renderer.probeAnchor}
     */
    probeAnchor: Transform;
    /**
     * The index of the baked lightmap applied to this renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-lightmapIndex.html | Renderer.lightmapIndex}
     */
    lightmapIndex: number;
    /**
     * The index of the real-time lightmap applied to this renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-realtimeLightmapIndex.html | Renderer.realtimeLightmapIndex}
     */
    realtimeLightmapIndex: number;
    /**
     * The UV scale &amp; offset used for a lightmap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-lightmapScaleOffset.html | Renderer.lightmapScaleOffset}
     */
    lightmapScaleOffset: Vector4;
    /**
     * The UV scale &amp; offset used for a real-time lightmap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-realtimeLightmapScaleOffset.html | Renderer.realtimeLightmapScaleOffset}
     */
    realtimeLightmapScaleOffset: Vector4;
    /**
     * Returns all the instantiated materials of this object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-materials.html | Renderer.materials}
     */
    materials: Readonly<Material[]>;
    /**
     * Returns the first instantiated Material assigned to the renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-material.html | Renderer.material}
     */
    material: Material;
    /**
     * The shared material of this object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-sharedMaterial.html | Renderer.sharedMaterial}
     */
    sharedMaterial: Material;
    /**
     * All the shared materials of this object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-sharedMaterials.html | Renderer.sharedMaterials}
     */
    sharedMaterials: Readonly<Material[]>;
    /**
     * The LODGroup for this Renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer-LODGroup.html | Renderer.LODGroup}
     */
    readonly LODGroup: LODGroup;



    GetClosestReflectionProbes(result: Readonly<ReflectionProbeBlendInfo[]>): void;
    GetMaterials(m: Readonly<Material[]>): void;
    /**
     * Get per-Renderer or per-Material property block.
     * @param properties Material parameters to retrieve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer.GetPropertyBlock.html | Renderer.GetPropertyBlock}
     */
    GetPropertyBlock(properties: MaterialPropertyBlock): void;
    /**
     * Get per-Renderer or per-Material property block.
     * @param properties Material parameters to retrieve.
     * @param materialIndex The index of the Material you want to get overridden parameters from. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer.GetPropertyBlock.html | Renderer.GetPropertyBlock}
     */
    GetPropertyBlock(properties: MaterialPropertyBlock, materialIndex: number): void;
    GetSharedMaterials(m: Readonly<Material[]>): void;
    /**
     * Returns true if the Renderer has a material property block attached via SetPropertyBlock.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer.HasPropertyBlock.html | Renderer.HasPropertyBlock}
     */
    HasPropertyBlock(): boolean;
    /**
     * Reset custom world space bounds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer.ResetBounds.html | Renderer.ResetBounds}
     */
    ResetBounds(): void;
    /**
     * Reset custom local space bounds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer.ResetLocalBounds.html | Renderer.ResetLocalBounds}
     */
    ResetLocalBounds(): void;
    SetMaterials(materials: Readonly<Material[]>): void;
    /**
     * Lets you set or clear per-renderer or per-material parameter overrides.
     * @param properties Property block with values you want to override.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer.SetPropertyBlock.html | Renderer.SetPropertyBlock}
     */
    SetPropertyBlock(properties: MaterialPropertyBlock): void;
    /**
     * Lets you set or clear per-renderer or per-material parameter overrides.
     * @param properties Property block with values you want to override.
     * @param materialIndex The index of the Material you want to override the parameters of. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Renderer.SetPropertyBlock.html | Renderer.SetPropertyBlock}
     */
    SetPropertyBlock(properties: MaterialPropertyBlock, materialIndex: number): void;
    SetSharedMaterials(materials: Readonly<Material[]>): void;


}
    
interface LODGroup extends Component {
    /**
     * The local reference point against which the LOD distance is calculated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LODGroup-localReferencePoint.html | LODGroup.localReferencePoint}
     */
    localReferencePoint: Vector3;
    /**
     * The size of the LOD object in local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LODGroup-size.html | LODGroup.size}
     */
    size: number;
    /**
     * The number of LOD levels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LODGroup-lodCount.html | LODGroup.lodCount}
     */
    readonly lodCount: number;
    /**
     * Specify whether the last LOD level is a BillboardRenderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LODGroup-lastLODBillboard.html | LODGroup.lastLODBillboard}
     */
    lastLODBillboard: boolean;
    /**
     * The LOD fade mode used.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LODGroup-fadeMode.html | LODGroup.fadeMode}
     */
    fadeMode: LODFadeMode;
    /**
     * Specify if the cross-fading should be animated by time. The animation duration is specified globally as crossFadeAnimationDuration.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LODGroup-animateCrossFading.html | LODGroup.animateCrossFading}
     */
    animateCrossFading: boolean;
    /**
     * Allows you to enable or disable the LODGroup.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LODGroup-enabled.html | LODGroup.enabled}
     */
    enabled: boolean;



    ForceLOD(index: number): void;
    /**
     * Returns the array of LODs.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LODGroup.GetLODs.html | LODGroup.GetLODs}
     */
    GetLODs(): Readonly<LOD[]>;
    /**
     * Recalculate the bounding region for the LODGroup (Relatively slow, do not call often).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LODGroup.RecalculateBounds.html | LODGroup.RecalculateBounds}
     */
    RecalculateBounds(): void;
    /**
     * Set the LODs for the LOD group. This will remove any existing LODs configured on the LODGroup.
     * @param lods The LODs to use for this group.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LODGroup.SetLODs.html | LODGroup.SetLODs}
     */
    SetLODs(lods: Readonly<LOD[]>): void;


}
    
interface LOD {
    screenRelativeTransitionHeight: number;
    fadeTransitionWidth: number;
    renderers: Readonly<Renderer[]>;





}
    
interface LODConstructor {


    new(screenRelativeTransitionHeight: number, renderers: Readonly<Renderer[]>): LOD;



}
declare const LOD: LODConstructor;
    
interface LODGroupConstructor {
    /**
     * The cross-fading animation duration in seconds. ArgumentException will be thrown if it is set to zero or a negative value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LODGroup-crossFadeAnimationDuration.html | LODGroup.crossFadeAnimationDuration}
     */
    crossFadeAnimationDuration: number;


    new(): LODGroup;



}
declare const LODGroup: LODGroupConstructor;
    
interface ReflectionProbeBlendInfo {
    probe: ReflectionProbe;
    weight: number;





}
    
interface ReflectionProbe extends Behaviour {
    /**
     * The size of the probe's bounding box in which the probe can contribute to reflections. The size is in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-size.html | ReflectionProbe.size}
     */
    size: Vector3;
    /**
     * The center of the probe's bounding box in which the probe can contribute to reflections. The center is relative to the position of the probe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-center.html | ReflectionProbe.center}
     */
    center: Vector3;
    /**
     * The near clipping plane distance when rendering the probe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-nearClipPlane.html | ReflectionProbe.nearClipPlane}
     */
    nearClipPlane: number;
    /**
     * The far clipping plane distance when rendering the probe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-farClipPlane.html | ReflectionProbe.farClipPlane}
     */
    farClipPlane: number;
    /**
     * The intensity modifier that is applied to the texture of reflection probe in the shader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-intensity.html | ReflectionProbe.intensity}
     */
    intensity: number;
    /**
     * The probe's world space axis-aligned bounding box in which the probe can contribute to reflections (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-bounds.html | ReflectionProbe.bounds}
     */
    readonly bounds: Bounds;
    /**
     * Should this reflection probe use HDR rendering?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-hdr.html | ReflectionProbe.hdr}
     */
    hdr: boolean;
    /**
     * Specifies whether Unity should render non-static GameObjects into the Reflection Probe. If you set this to true, Unity renders non-static GameObjects into the Reflection Probe. If you set this to false, Unity does not render non-static GameObjects into the Reflection Probe. Unity only takes this property into account if the Reflection Probe's Type is Custom.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-renderDynamicObjects.html | ReflectionProbe.renderDynamicObjects}
     */
    renderDynamicObjects: boolean;
    /**
     * Shadow drawing distance when rendering the probe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-shadowDistance.html | ReflectionProbe.shadowDistance}
     */
    shadowDistance: number;
    /**
     * Resolution of the underlying reflection texture in pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-resolution.html | ReflectionProbe.resolution}
     */
    resolution: number;
    /**
     * This is used to render parts of the reflecion probe's surrounding selectively.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-cullingMask.html | ReflectionProbe.cullingMask}
     */
    cullingMask: number;
    /**
     * How the reflection probe clears the background.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-clearFlags.html | ReflectionProbe.clearFlags}
     */
    clearFlags: ReflectionProbeClearFlags;
    /**
     * The color with which the texture of reflection probe will be cleared.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-backgroundColor.html | ReflectionProbe.backgroundColor}
     */
    backgroundColor: Color;
    /**
     * Distance around probe used for blending (used in deferred probes).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-blendDistance.html | ReflectionProbe.blendDistance}
     */
    blendDistance: number;
    /**
     * Should this reflection probe use box projection?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-boxProjection.html | ReflectionProbe.boxProjection}
     */
    boxProjection: boolean;
    /**
     * Should reflection probe texture be generated in the Editor (ReflectionProbeMode.Baked) or should probe use custom specified texure (ReflectionProbeMode.Custom)?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-mode.html | ReflectionProbe.mode}
     */
    mode: ReflectionProbeMode;
    /**
     * Reflection probe importance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-importance.html | ReflectionProbe.importance}
     */
    importance: number;
    /**
     * Sets the way the probe will refresh.

Additional resources: ReflectionProbeRefreshMode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-refreshMode.html | ReflectionProbe.refreshMode}
     */
    refreshMode: ReflectionProbeRefreshMode;
    /**
     * Sets this probe time-slicing mode

Additional resources: ReflectionProbeTimeSlicingMode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-timeSlicingMode.html | ReflectionProbe.timeSlicingMode}
     */
    timeSlicingMode: ReflectionProbeTimeSlicingMode;
    /**
     * Reference to the baked texture of the reflection probe's surrounding.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-bakedTexture.html | ReflectionProbe.bakedTexture}
     */
    bakedTexture: Texture;
    /**
     * Reference to the baked texture of the reflection probe's surrounding. Use this to assign custom reflection texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-customBakedTexture.html | ReflectionProbe.customBakedTexture}
     */
    customBakedTexture: Texture;
    /**
     * Reference to the real-time texture of the reflection probe's surroundings. Use this to assign a RenderTexture to use for real-time reflection.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-realtimeTexture.html | ReflectionProbe.realtimeTexture}
     */
    realtimeTexture: RenderTexture;
    /**
     * Texture which is passed to the shader of the objects in the vicinity of the reflection probe (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-texture.html | ReflectionProbe.texture}
     */
    readonly texture: Texture;
    /**
     * HDR decode values of the reflection probe texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-textureHDRDecodeValues.html | ReflectionProbe.textureHDRDecodeValues}
     */
    readonly textureHDRDecodeValues: Vector4;



    /**
     * Checks if a probe has finished a time-sliced render.
     * @param renderId An integer representing the RenderID as returned by the RenderProbe method.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe.IsFinishedRendering.html | ReflectionProbe.IsFinishedRendering}
     */
    IsFinishedRendering(renderId: number): boolean;
    RenderProbe(): number;
    /**
     * Refreshes the probe's cubemap.
     * @param targetTexture Target RenderTexture in which rendering should be done. Specifying null will update the probe's default texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe.RenderProbe.html | ReflectionProbe.RenderProbe}
     */
    RenderProbe(targetTexture: RenderTexture): number;
    /**
     * Revert all ReflectionProbe parameters to default.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe.Reset.html | ReflectionProbe.Reset}
     */
    Reset(): void;


}
    
interface ReflectionProbeConstructor {
    readonly minBakedCubemapResolution: number;
    readonly maxBakedCubemapResolution: number;
    /**
     * HDR decode values of the default reflection probe texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-defaultTextureHDRDecodeValues.html | ReflectionProbe.defaultTextureHDRDecodeValues}
     */
    readonly defaultTextureHDRDecodeValues: Vector4;
    /**
     * The surface texture of the default reflection probe that captures the environment contribution. Read only.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ReflectionProbe-defaultTexture.html | ReflectionProbe.defaultTexture}
     */
    readonly defaultTexture: Texture;


    new(): ReflectionProbe;


    BlendCubemap(src: Texture, dst: Texture, blend: number, target: RenderTexture): boolean;
    UpdateCachedState(): void;

    readonly reflectionProbeChanged: MonoSignal<ReflectionProbe, ReflectionProbeEvent>;
    readonly defaultReflectionTexture: MonoSignal<Texture>;
}
declare const ReflectionProbe: ReflectionProbeConstructor;
    
interface MaterialPropertyBlock {
    /**
     * Is the material property block empty? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock-isEmpty.html | MaterialPropertyBlock.isEmpty}
     */
    readonly isEmpty: boolean;



    /**
     * Clear material property values.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.Clear.html | MaterialPropertyBlock.Clear}
     */
    Clear(): void;
    CopyProbeOcclusionArrayFrom(occlusionProbes: Readonly<Vector4[]>): void;
    /**
     * This function copies the entire source array into a Vector4 property array named unity_ProbesOcclusion for use with instanced rendering.
     * @param occlusionProbes The array of probe occlusion values to copy from.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.CopyProbeOcclusionArrayFrom.html | MaterialPropertyBlock.CopyProbeOcclusionArrayFrom}
     */
    CopyProbeOcclusionArrayFrom(occlusionProbes: Readonly<Vector4[]>): void;
    CopyProbeOcclusionArrayFrom(occlusionProbes: Readonly<Vector4[]>, sourceStart: number, destStart: number, count: number): void;
    /**
     * This function copies the source array into a Vector4 property array named unity_ProbesOcclusion with the specified source and destination range for use with instanced rendering.
     * @param occlusionProbes The array of probe occlusion values to copy from.
     * @param sourceStart The index of the first element in the source array to copy from.
     * @param destStart The index of the first element in the destination MaterialPropertyBlock array to copy to.
     * @param count The number of elements to copy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.CopyProbeOcclusionArrayFrom.html | MaterialPropertyBlock.CopyProbeOcclusionArrayFrom}
     */
    CopyProbeOcclusionArrayFrom(occlusionProbes: Readonly<Vector4[]>, sourceStart: number, destStart: number, count: number): void;
    CopySHCoefficientArraysFrom(lightProbes: Readonly<SphericalHarmonicsL2[]>): void;
    /**
     * This function converts and copies the entire source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC for use with instanced rendering.
     * @param lightProbes The array of SH values to copy from.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.CopySHCoefficientArraysFrom.html | MaterialPropertyBlock.CopySHCoefficientArraysFrom}
     */
    CopySHCoefficientArraysFrom(lightProbes: Readonly<SphericalHarmonicsL2[]>): void;
    CopySHCoefficientArraysFrom(lightProbes: Readonly<SphericalHarmonicsL2[]>, sourceStart: number, destStart: number, count: number): void;
    /**
     * This function converts and copies the source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC with the specified source and destination range for use with instanced rendering.
     * @param lightProbes The array of SH values to copy from.
     * @param sourceStart The index of the first element in the source array to copy from.
     * @param destStart The index of the first element in the destination MaterialPropertyBlock array to copy to.
     * @param count The number of elements to copy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.CopySHCoefficientArraysFrom.html | MaterialPropertyBlock.CopySHCoefficientArraysFrom}
     */
    CopySHCoefficientArraysFrom(lightProbes: Readonly<SphericalHarmonicsL2[]>, sourceStart: number, destStart: number, count: number): void;
    /**
     * Get a color from the property block.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetColor.html | MaterialPropertyBlock.GetColor}
     */
    GetColor(name: string): Color;
    /**
     * Get a color from the property block.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetColor.html | MaterialPropertyBlock.GetColor}
     */
    GetColor(nameID: number): Color;
    /**
     * Get a float from the property block.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetFloat.html | MaterialPropertyBlock.GetFloat}
     */
    GetFloat(name: string): number;
    /**
     * Get a float from the property block.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetFloat.html | MaterialPropertyBlock.GetFloat}
     */
    GetFloat(nameID: number): number;
    /**
     * Get a float array from the property block.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetFloatArray.html | MaterialPropertyBlock.GetFloatArray}
     */
    GetFloatArray(name: string): Readonly<number[]>;
    /**
     * Get a float array from the property block.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetFloatArray.html | MaterialPropertyBlock.GetFloatArray}
     */
    GetFloatArray(nameID: number): Readonly<number[]>;
    GetFloatArray(name: string, values: Readonly<number[]>): void;
    GetFloatArray(nameID: number, values: Readonly<number[]>): void;
    /**
     * This method is deprecated. Use GetFloat or GetInteger instead.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetInt.html | MaterialPropertyBlock.GetInt}
     */
    GetInt(name: string): number;
    /**
     * This method is deprecated. Use GetFloat or GetInteger instead.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetInt.html | MaterialPropertyBlock.GetInt}
     */
    GetInt(nameID: number): number;
    /**
     * Get an integer from the property block.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetInteger.html | MaterialPropertyBlock.GetInteger}
     */
    GetInteger(name: string): number;
    /**
     * Get an integer from the property block.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetInteger.html | MaterialPropertyBlock.GetInteger}
     */
    GetInteger(nameID: number): number;
    /**
     * Get a matrix from the property block.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetMatrix.html | MaterialPropertyBlock.GetMatrix}
     */
    GetMatrix(name: string): Matrix4x4;
    /**
     * Get a matrix from the property block.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetMatrix.html | MaterialPropertyBlock.GetMatrix}
     */
    GetMatrix(nameID: number): Matrix4x4;
    /**
     * Get a matrix array from the property block.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetMatrixArray.html | MaterialPropertyBlock.GetMatrixArray}
     */
    GetMatrixArray(name: string): Readonly<Matrix4x4[]>;
    /**
     * Get a matrix array from the property block.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetMatrixArray.html | MaterialPropertyBlock.GetMatrixArray}
     */
    GetMatrixArray(nameID: number): Readonly<Matrix4x4[]>;
    GetMatrixArray(name: string, values: Readonly<Matrix4x4[]>): void;
    GetMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    /**
     * Get a texture from the property block.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetTexture.html | MaterialPropertyBlock.GetTexture}
     */
    GetTexture(name: string): Texture;
    /**
     * Get a texture from the property block.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetTexture.html | MaterialPropertyBlock.GetTexture}
     */
    GetTexture(nameID: number): Texture;
    /**
     * Get a vector from the property block.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetVector.html | MaterialPropertyBlock.GetVector}
     */
    GetVector(name: string): Vector4;
    /**
     * Get a vector from the property block.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetVector.html | MaterialPropertyBlock.GetVector}
     */
    GetVector(nameID: number): Vector4;
    /**
     * Get a vector array from the property block.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetVectorArray.html | MaterialPropertyBlock.GetVectorArray}
     */
    GetVectorArray(name: string): Readonly<Vector4[]>;
    /**
     * Get a vector array from the property block.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.GetVectorArray.html | MaterialPropertyBlock.GetVectorArray}
     */
    GetVectorArray(nameID: number): Readonly<Vector4[]>;
    GetVectorArray(name: string, values: Readonly<Vector4[]>): void;
    GetVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    /**
     * Checks if MaterialPropertyBlock has the ComputeBuffer property with the given name or name ID. To set the property, use SetBuffer.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasBuffer.html | MaterialPropertyBlock.HasBuffer}
     */
    HasBuffer(name: string): boolean;
    /**
     * Checks if MaterialPropertyBlock has the ComputeBuffer property with the given name or name ID. To set the property, use SetBuffer.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasBuffer.html | MaterialPropertyBlock.HasBuffer}
     */
    HasBuffer(nameID: number): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Color property with the given name or name ID. To set the property, use SetColor.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasColor.html | MaterialPropertyBlock.HasColor}
     */
    HasColor(name: string): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Color property with the given name or name ID. To set the property, use SetColor.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasColor.html | MaterialPropertyBlock.HasColor}
     */
    HasColor(nameID: number): boolean;
    /**
     * Checks if MaterialPropertyBlock has the ConstantBuffer property with the given name or name ID. To set the property, use SetConstantBuffer.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasConstantBuffer.html | MaterialPropertyBlock.HasConstantBuffer}
     */
    HasConstantBuffer(name: string): boolean;
    /**
     * Checks if MaterialPropertyBlock has the ConstantBuffer property with the given name or name ID. To set the property, use SetConstantBuffer.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasConstantBuffer.html | MaterialPropertyBlock.HasConstantBuffer}
     */
    HasConstantBuffer(nameID: number): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Float property with the given name or name ID. To set the property, use SetFloat.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasFloat.html | MaterialPropertyBlock.HasFloat}
     */
    HasFloat(name: string): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Float property with the given name or name ID. To set the property, use SetFloat.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasFloat.html | MaterialPropertyBlock.HasFloat}
     */
    HasFloat(nameID: number): boolean;
    /**
     * This method is deprecated. Use HasFloat or HasInteger instead.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasInt.html | MaterialPropertyBlock.HasInt}
     */
    HasInt(name: string): boolean;
    /**
     * This method is deprecated. Use HasFloat or HasInteger instead.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasInt.html | MaterialPropertyBlock.HasInt}
     */
    HasInt(nameID: number): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Integer property with the given name or name ID. To set the property, use SetInteger.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasInteger.html | MaterialPropertyBlock.HasInteger}
     */
    HasInteger(name: string): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Integer property with the given name or name ID. To set the property, use SetInteger.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasInteger.html | MaterialPropertyBlock.HasInteger}
     */
    HasInteger(nameID: number): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Matrix property with the given name or name ID. This also works with the Matrix Array property. To set the property, use SetMatrix.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasMatrix.html | MaterialPropertyBlock.HasMatrix}
     */
    HasMatrix(name: string): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Matrix property with the given name or name ID. This also works with the Matrix Array property. To set the property, use SetMatrix.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasMatrix.html | MaterialPropertyBlock.HasMatrix}
     */
    HasMatrix(nameID: number): boolean;
    /**
     * Checks if MaterialPropertyBlock has the property with the given name or name ID. To set the property, use one of the Set methods for MaterialPropertyBlock.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasProperty.html | MaterialPropertyBlock.HasProperty}
     */
    HasProperty(name: string): boolean;
    /**
     * Checks if MaterialPropertyBlock has the property with the given name or name ID. To set the property, use one of the Set methods for MaterialPropertyBlock.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasProperty.html | MaterialPropertyBlock.HasProperty}
     */
    HasProperty(nameID: number): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Texture property with the given name or name ID. To set the property, use SetTexture.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasTexture.html | MaterialPropertyBlock.HasTexture}
     */
    HasTexture(name: string): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Texture property with the given name or name ID. To set the property, use SetTexture.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasTexture.html | MaterialPropertyBlock.HasTexture}
     */
    HasTexture(nameID: number): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Vector property with the given name or name ID. This also works with the Vector Array property. To set the property, use SetVector.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasVector.html | MaterialPropertyBlock.HasVector}
     */
    HasVector(name: string): boolean;
    /**
     * Checks if MaterialPropertyBlock has the Vector property with the given name or name ID. This also works with the Vector Array property. To set the property, use SetVector.
     * @param nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.HasVector.html | MaterialPropertyBlock.HasVector}
     */
    HasVector(nameID: number): boolean;
    /**
     * Set a buffer property.
     * @param name The name of the property.
     * @param value The ComputeBuffer or GraphicsBuffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetBuffer.html | MaterialPropertyBlock.SetBuffer}
     */
    SetBuffer(name: string, value: ComputeBuffer): void;
    /**
     * Set a buffer property.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The ComputeBuffer or GraphicsBuffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetBuffer.html | MaterialPropertyBlock.SetBuffer}
     */
    SetBuffer(nameID: number, value: ComputeBuffer): void;
    /**
     * Set a buffer property.
     * @param name The name of the property.
     * @param value The ComputeBuffer or GraphicsBuffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetBuffer.html | MaterialPropertyBlock.SetBuffer}
     */
    SetBuffer(name: string, value: GraphicsBuffer): void;
    /**
     * Set a buffer property.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The ComputeBuffer or GraphicsBuffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetBuffer.html | MaterialPropertyBlock.SetBuffer}
     */
    SetBuffer(nameID: number, value: GraphicsBuffer): void;
    /**
     * Set a color property.
     * @param name The name of the property.
     * @param value The Color value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetColor.html | MaterialPropertyBlock.SetColor}
     */
    SetColor(name: string, value: Color): void;
    /**
     * Set a color property.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The Color value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetColor.html | MaterialPropertyBlock.SetColor}
     */
    SetColor(nameID: number, value: Color): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
     * @param name The name of the constant buffer to override.
     * @param value The buffer to override the constant buffer values with.
     * @param offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetConstantBuffer.html | MaterialPropertyBlock.SetConstantBuffer}
     */
    SetConstantBuffer(name: string, value: ComputeBuffer, offset: number, size: number): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
     * @param nameID The shader property ID of the constant buffer to override.
     * @param value The buffer to override the constant buffer values with.
     * @param offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetConstantBuffer.html | MaterialPropertyBlock.SetConstantBuffer}
     */
    SetConstantBuffer(nameID: number, value: ComputeBuffer, offset: number, size: number): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
     * @param name The name of the constant buffer to override.
     * @param value The buffer to override the constant buffer values with.
     * @param offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetConstantBuffer.html | MaterialPropertyBlock.SetConstantBuffer}
     */
    SetConstantBuffer(name: string, value: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
     * @param nameID The shader property ID of the constant buffer to override.
     * @param value The buffer to override the constant buffer values with.
     * @param offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetConstantBuffer.html | MaterialPropertyBlock.SetConstantBuffer}
     */
    SetConstantBuffer(nameID: number, value: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Set a float property.
     * @param name The name of the property.
     * @param value The float value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetFloat.html | MaterialPropertyBlock.SetFloat}
     */
    SetFloat(name: string, value: number): void;
    /**
     * Set a float property.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The float value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetFloat.html | MaterialPropertyBlock.SetFloat}
     */
    SetFloat(nameID: number, value: number): void;
    SetFloatArray(name: string, values: Readonly<number[]>): void;
    SetFloatArray(nameID: number, values: Readonly<number[]>): void;
    /**
     * Set a float array property.
     * @param name The name of the property.
     * @param values The array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetFloatArray.html | MaterialPropertyBlock.SetFloatArray}
     */
    SetFloatArray(name: string, values: Readonly<number[]>): void;
    /**
     * Set a float array property.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param values The array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetFloatArray.html | MaterialPropertyBlock.SetFloatArray}
     */
    SetFloatArray(nameID: number, values: Readonly<number[]>): void;
    /**
     * This method is deprecated. Use SetFloat or SetInteger instead.
     * @param name The name of the property.
     * @param value The int value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetInt.html | MaterialPropertyBlock.SetInt}
     */
    SetInt(name: string, value: number): void;
    /**
     * This method is deprecated. Use SetFloat or SetInteger instead.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The int value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetInt.html | MaterialPropertyBlock.SetInt}
     */
    SetInt(nameID: number, value: number): void;
    /**
     * Adds a property to the block. If an integer property with the given name already exists, the old value is replaced.
     * @param name The name of the property.
     * @param value The integer value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetInteger.html | MaterialPropertyBlock.SetInteger}
     */
    SetInteger(name: string, value: number): void;
    /**
     * Adds a property to the block. If an integer property with the given name already exists, the old value is replaced.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The integer value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetInteger.html | MaterialPropertyBlock.SetInteger}
     */
    SetInteger(nameID: number, value: number): void;
    /**
     * Set a matrix property.
     * @param name The name of the property.
     * @param value The matrix value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetMatrix.html | MaterialPropertyBlock.SetMatrix}
     */
    SetMatrix(name: string, value: Matrix4x4): void;
    /**
     * Set a matrix property.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The matrix value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetMatrix.html | MaterialPropertyBlock.SetMatrix}
     */
    SetMatrix(nameID: number, value: Matrix4x4): void;
    SetMatrixArray(name: string, values: Readonly<Matrix4x4[]>): void;
    SetMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    /**
     * Set a matrix array property.
     * @param name The name of the property.
     * @param values The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetMatrixArray.html | MaterialPropertyBlock.SetMatrixArray}
     */
    SetMatrixArray(name: string, values: Readonly<Matrix4x4[]>): void;
    /**
     * Set a matrix array property.
     * @param nameID The array to set.
     * @param values The name ID of the property retrieved by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetMatrixArray.html | MaterialPropertyBlock.SetMatrixArray}
     */
    SetMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    /**
     * Set a texture property.
     * @param name The name of the property.
     * @param value The Texture to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetTexture.html | MaterialPropertyBlock.SetTexture}
     */
    SetTexture(name: string, value: Texture): void;
    /**
     * Set a texture property.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The Texture to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetTexture.html | MaterialPropertyBlock.SetTexture}
     */
    SetTexture(nameID: number, value: Texture): void;
    /**
     * Set a texture property.
     * @param name The name of the property.
     * @param value The Texture to set.
     * @param element Optional parameter that specifies the type of data to set from the RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetTexture.html | MaterialPropertyBlock.SetTexture}
     */
    SetTexture(name: string, value: RenderTexture, element: RenderTextureSubElement): void;
    /**
     * Set a texture property.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The Texture to set.
     * @param element Optional parameter that specifies the type of data to set from the RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetTexture.html | MaterialPropertyBlock.SetTexture}
     */
    SetTexture(nameID: number, value: RenderTexture, element: RenderTextureSubElement): void;
    /**
     * Set a vector property.
     * @param name The name of the property.
     * @param value The Vector4 value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetVector.html | MaterialPropertyBlock.SetVector}
     */
    SetVector(name: string, value: Vector4): void;
    /**
     * Set a vector property.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param value The Vector4 value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetVector.html | MaterialPropertyBlock.SetVector}
     */
    SetVector(nameID: number, value: Vector4): void;
    SetVectorArray(name: string, values: Readonly<Vector4[]>): void;
    SetVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    /**
     * Set a vector array property.
     * @param name The name of the property.
     * @param values The array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetVectorArray.html | MaterialPropertyBlock.SetVectorArray}
     */
    SetVectorArray(name: string, values: Readonly<Vector4[]>): void;
    /**
     * Set a vector array property.
     * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
     * @param values The array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.SetVectorArray.html | MaterialPropertyBlock.SetVectorArray}
     */
    SetVectorArray(nameID: number, values: Readonly<Vector4[]>): void;


}
    
interface SphericalHarmonicsL2 {
    Item: number;



    /**
     * Add an ambient light to the spherical harmonics.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SphericalHarmonicsL2.AddAmbientLight.html | Rendering.SphericalHarmonicsL2.AddAmbientLight}
     */
    AddAmbientLight(color: Color): void;
    /**
     * Add a directional light to the spherical harmonics.
     * @param direction The direction from the light probe to the light. The vector should be normalized for correct results.
     * @param color The color of the light.
     * @param intensity The intensity of the light.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SphericalHarmonicsL2.AddDirectionalLight.html | Rendering.SphericalHarmonicsL2.AddDirectionalLight}
     */
    AddDirectionalLight(direction: Vector3, color: Color, intensity: number): void;
    /**
     * Clears the spherical harmonics coefficients to zero.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SphericalHarmonicsL2.Clear.html | Rendering.SphericalHarmonicsL2.Clear}
     */
    Clear(): void;
    Equals(other: unknown): boolean;
    Equals(other: SphericalHarmonicsL2): boolean;
    /**
     * Evaluates the spherical harmonics for each given direction. The directions and results arrays must have the same size.
     * @param directions Array of normalized directions in which to evaluate the spherical harmonics.
     * @param results Output array for the evaluated values. The order of the results is the same as the directions array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SphericalHarmonicsL2.Evaluate.html | Rendering.SphericalHarmonicsL2.Evaluate}
     */
    Evaluate(directions: Readonly<Vector3[]>, results: Readonly<Color[]>): void;
    GetHashCode(): number;


}
    
interface MaterialPropertyBlockConstructor {


    new(): MaterialPropertyBlock;



}
declare const MaterialPropertyBlock: MaterialPropertyBlockConstructor;
    
interface RendererConstructor {


    new(): Renderer;



}
declare const Renderer: RendererConstructor;
    
interface RayTracingAABBsInstanceConfig {
    /**
     * The GraphicsBuffer that defines a list of axis-aligned bounding boxes (AABBs).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAABBsInstanceConfig-aabbBuffer.html | Rendering.RayTracingAABBsInstanceConfig.aabbBuffer}
     */
    aabbBuffer: GraphicsBuffer;
    /**
     * The number of AABBs Unity uses when you build the acceleration structure for this ray tracing instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAABBsInstanceConfig-aabbCount.html | Rendering.RayTracingAABBsInstanceConfig.aabbCount}
     */
    aabbCount: number;
    /**
     * The index of the first AABB Unity uses from RayTracingAABBsInstanceConfig.aabbBuffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAABBsInstanceConfig-aabbOffset.html | Rendering.RayTracingAABBsInstanceConfig.aabbOffset}
     */
    aabbOffset: number;
    /**
     * Whether the data in RayTracingAABBsInstanceConfig.aabbBuffer is dynamic.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAABBsInstanceConfig-dynamicGeometry.html | Rendering.RayTracingAABBsInstanceConfig.dynamicGeometry}
     */
    dynamicGeometry: boolean;
    /**
     * Determines whether Unity considers the material opaque.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAABBsInstanceConfig-opaqueMaterial.html | Rendering.RayTracingAABBsInstanceConfig.opaqueMaterial}
     */
    opaqueMaterial: boolean;
    /**
     * The Material the ray tracing instance uses.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAABBsInstanceConfig-material.html | Rendering.RayTracingAABBsInstanceConfig.material}
     */
    material: Material;
    /**
     * Additional MaterialPropertyBlock properties to apply to the Material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAABBsInstanceConfig-materialProperties.html | Rendering.RayTracingAABBsInstanceConfig.materialProperties}
     */
    materialProperties: MaterialPropertyBlock;
    /**
     * The used by the ray tracing instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAABBsInstanceConfig-layer.html | Rendering.RayTracingAABBsInstanceConfig.layer}
     */
    layer: number;
    /**
     * The ray tracing instance mask.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAABBsInstanceConfig-mask.html | Rendering.RayTracingAABBsInstanceConfig.mask}
     */
    mask: number;
    /**
     * The flags Unity uses when it builds the acceleration structure for the geometry referenced by this ray tracing instance configuration.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAABBsInstanceConfig-accelerationStructureBuildFlags.html | Rendering.RayTracingAABBsInstanceConfig.accelerationStructureBuildFlags}
     */
    accelerationStructureBuildFlags: RayTracingAccelerationStructureBuildFlags;
    /**
     * Whether to override the build flags specified when creating a RayTracingAccelerationStructure.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingAABBsInstanceConfig-accelerationStructureBuildFlagsOverride.html | Rendering.RayTracingAABBsInstanceConfig.accelerationStructureBuildFlagsOverride}
     */
    accelerationStructureBuildFlagsOverride: boolean;





}
    
interface RayTracingAABBsInstanceConfigConstructor {


    new(): RayTracingAABBsInstanceConfig;
    new(aabbBuffer: GraphicsBuffer, aabbCount: number, dynamicGeometry: boolean, material: Material): RayTracingAABBsInstanceConfig;



}
declare const RayTracingAABBsInstanceConfig: RayTracingAABBsInstanceConfigConstructor;
    
interface BuildSettings {
    buildFlags: RayTracingAccelerationStructureBuildFlags;
    relativeOrigin: Vector3;





}
    
interface BuildSettingsConstructor {


    new(): BuildSettings;
    new(buildFlags: RayTracingAccelerationStructureBuildFlags, relativeOrigin: Vector3): BuildSettings;



}
declare const BuildSettings: BuildSettingsConstructor;
    
interface RayTracingInstanceCullingResults {
    materialsCRC: Readonly<RayTracingInstanceMaterialCRC[]>;
    transformsChanged: boolean;





}
    
interface RayTracingInstanceMaterialCRC {
    instanceID: number;
    crc: number;





}
    
interface RayTracingAccelerationStructureConstructor {


    new(settings: Settings): RayTracingAccelerationStructure;
    new(): RayTracingAccelerationStructure;



}
declare const RayTracingAccelerationStructure: RayTracingAccelerationStructureConstructor;
    
interface ShaderConstructor {
    /**
     * Sets the limit on the number of shader variant chunks Unity loads and keeps in memory.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader-maximumChunksOverride.html | Shader.maximumChunksOverride}
     */
    maximumChunksOverride: number;
    /**
     * Shader LOD level for all shaders.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader-globalMaximumLOD.html | Shader.globalMaximumLOD}
     */
    globalMaximumLOD: number;
    /**
     * Render pipeline currently in use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader-globalRenderPipeline.html | Shader.globalRenderPipeline}
     */
    globalRenderPipeline: string;
    /**
     * An array containing the global shader keywords that are currently enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader-enabledGlobalKeywords.html | Shader.enabledGlobalKeywords}
     */
    readonly enabledGlobalKeywords: Readonly<GlobalKeyword[]>;
    /**
     * An array containing the global shader keywords that currently exist. This includes enabled and disabled global shader keywords.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Shader-globalKeywords.html | Shader.globalKeywords}
     */
    readonly globalKeywords: Readonly<GlobalKeyword[]>;




    DisableKeyword(keyword: string): void;
    DisableKeyword(keyword: GlobalKeyword): void;
    EnableKeyword(keyword: string): void;
    EnableKeyword(keyword: GlobalKeyword): void;
    Find(name: string): Shader;
    GetGlobalColor(name: string): Color;
    GetGlobalColor(nameID: number): Color;
    GetGlobalFloat(name: string): number;
    GetGlobalFloat(nameID: number): number;
    GetGlobalFloatArray(name: string): Readonly<number[]>;
    GetGlobalFloatArray(nameID: number): Readonly<number[]>;
    GetGlobalFloatArray(name: string, values: Readonly<number[]>): void;
    GetGlobalFloatArray(nameID: number, values: Readonly<number[]>): void;
    GetGlobalInt(name: string): number;
    GetGlobalInt(nameID: number): number;
    GetGlobalInteger(name: string): number;
    GetGlobalInteger(nameID: number): number;
    GetGlobalMatrix(name: string): Matrix4x4;
    GetGlobalMatrix(nameID: number): Matrix4x4;
    GetGlobalMatrixArray(name: string): Readonly<Matrix4x4[]>;
    GetGlobalMatrixArray(nameID: number): Readonly<Matrix4x4[]>;
    GetGlobalMatrixArray(name: string, values: Readonly<Matrix4x4[]>): void;
    GetGlobalMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    GetGlobalTexture(name: string): Texture;
    GetGlobalTexture(nameID: number): Texture;
    GetGlobalVector(name: string): Vector4;
    GetGlobalVector(nameID: number): Vector4;
    GetGlobalVectorArray(name: string): Readonly<Vector4[]>;
    GetGlobalVectorArray(nameID: number): Readonly<Vector4[]>;
    GetGlobalVectorArray(name: string, values: Readonly<Vector4[]>): void;
    GetGlobalVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    IsKeywordEnabled(keyword: string): boolean;
    IsKeywordEnabled(keyword: GlobalKeyword): boolean;
    PropertyToID(name: string): number;
    SetGlobalBuffer(name: string, value: ComputeBuffer): void;
    SetGlobalBuffer(nameID: number, value: ComputeBuffer): void;
    SetGlobalBuffer(name: string, value: GraphicsBuffer): void;
    SetGlobalBuffer(nameID: number, value: GraphicsBuffer): void;
    SetGlobalColor(name: string, value: Color): void;
    SetGlobalColor(nameID: number, value: Color): void;
    SetGlobalConstantBuffer(name: string, value: ComputeBuffer, offset: number, size: number): void;
    SetGlobalConstantBuffer(nameID: number, value: ComputeBuffer, offset: number, size: number): void;
    SetGlobalConstantBuffer(name: string, value: GraphicsBuffer, offset: number, size: number): void;
    SetGlobalConstantBuffer(nameID: number, value: GraphicsBuffer, offset: number, size: number): void;
    SetGlobalFloat(name: string, value: number): void;
    SetGlobalFloat(nameID: number, value: number): void;
    SetGlobalFloatArray(name: string, values: Readonly<number[]>): void;
    SetGlobalFloatArray(nameID: number, values: Readonly<number[]>): void;
    SetGlobalFloatArray(name: string, values: Readonly<number[]>): void;
    SetGlobalFloatArray(nameID: number, values: Readonly<number[]>): void;
    SetGlobalInt(name: string, value: number): void;
    SetGlobalInt(nameID: number, value: number): void;
    SetGlobalInteger(name: string, value: number): void;
    SetGlobalInteger(nameID: number, value: number): void;
    SetGlobalMatrix(name: string, value: Matrix4x4): void;
    SetGlobalMatrix(nameID: number, value: Matrix4x4): void;
    SetGlobalMatrixArray(name: string, values: Readonly<Matrix4x4[]>): void;
    SetGlobalMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    SetGlobalMatrixArray(name: string, values: Readonly<Matrix4x4[]>): void;
    SetGlobalMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    SetGlobalRayTracingAccelerationStructure(name: string, value: RayTracingAccelerationStructure): void;
    SetGlobalRayTracingAccelerationStructure(nameID: number, value: RayTracingAccelerationStructure): void;
    SetGlobalTexture(name: string, value: Texture): void;
    SetGlobalTexture(nameID: number, value: Texture): void;
    SetGlobalTexture(name: string, value: RenderTexture, element: RenderTextureSubElement): void;
    SetGlobalTexture(nameID: number, value: RenderTexture, element: RenderTextureSubElement): void;
    SetGlobalVector(name: string, value: Vector4): void;
    SetGlobalVector(nameID: number, value: Vector4): void;
    SetGlobalVectorArray(name: string, values: Readonly<Vector4[]>): void;
    SetGlobalVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    SetGlobalVectorArray(name: string, values: Readonly<Vector4[]>): void;
    SetGlobalVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    SetKeyword(keyword: GlobalKeyword, value: boolean): void;
    WarmupAllShaders(): void;

}
declare const Shader: ShaderConstructor;
    
interface MaterialConstructor {


    new(shader: Shader): Material;
    new(source: Material): Material;
    new(contents: string): Material;



}
declare const Material: MaterialConstructor;
    
interface GraphicsFence {
    /**
     * true if GPU execution has passed the processing point where you inserted the GraphicsFence, otherwise false.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsFence-passed.html | Rendering.GraphicsFence.passed}
     */
    readonly passed: boolean;





}
    
interface ComputeShader extends Object {
    /**
     * The local keyword space of this compute shader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader-keywordSpace.html | ComputeShader.keywordSpace}
     */
    readonly keywordSpace: LocalKeywordSpace;
    /**
     * An array containing names of the local shader keywords that are currently enabled for this compute shader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader-shaderKeywords.html | ComputeShader.shaderKeywords}
     */
    shaderKeywords: Readonly<string[]>;
    /**
     * An array containing the local shader keywords that are currently enabled for this compute shader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader-enabledKeywords.html | ComputeShader.enabledKeywords}
     */
    enabledKeywords: Readonly<LocalKeyword[]>;



    /**
     * Disables a local shader keyword for this compute shader.
     * @param keyword The name of the Rendering.LocalKeyword to disable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.DisableKeyword.html | ComputeShader.DisableKeyword}
     */
    DisableKeyword(keyword: string): void;
    /**
     * Disables a local shader keyword for this compute shader.
     * @param keyword The name of the Rendering.LocalKeyword to disable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.DisableKeyword.html | ComputeShader.DisableKeyword}
     */
    DisableKeyword(keyword: LocalKeyword): void;
    /**
     * Execute a compute shader.
     * @param kernelIndex Which kernel to execute. A single compute shader asset can have multiple kernel entry points.
     * @param threadGroupsX Number of work groups in the X dimension.
     * @param threadGroupsY Number of work groups in the Y dimension.
     * @param threadGroupsZ Number of work groups in the Z dimension.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.Dispatch.html | ComputeShader.Dispatch}
     */
    Dispatch(kernelIndex: number, threadGroupsX: number, threadGroupsY: number, threadGroupsZ: number): void;
    /**
     * Execute a compute shader.
     * @param kernelIndex Which kernel to execute. A single compute shader asset can have multiple kernel entry points.
     * @param argsBuffer Buffer with dispatch arguments.
     * @param argsOffset The byte offset into the buffer, where the draw arguments start.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.DispatchIndirect.html | ComputeShader.DispatchIndirect}
     */
    DispatchIndirect(kernelIndex: number, argsBuffer: ComputeBuffer, argsOffset: number): void;
    DispatchIndirect(kernelIndex: number, argsBuffer: ComputeBuffer): void;
    /**
     * Execute a compute shader.
     * @param kernelIndex Which kernel to execute. A single compute shader asset can have multiple kernel entry points.
     * @param argsBuffer Buffer with dispatch arguments.
     * @param argsOffset The byte offset into the buffer, where the draw arguments start.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.DispatchIndirect.html | ComputeShader.DispatchIndirect}
     */
    DispatchIndirect(kernelIndex: number, argsBuffer: GraphicsBuffer, argsOffset: number): void;
    DispatchIndirect(kernelIndex: number, argsBuffer: GraphicsBuffer): void;
    /**
     * Enables a local shader keyword for this compute shader.
     * @param keyword The name of the Rendering.LocalKeyword to enable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.EnableKeyword.html | ComputeShader.EnableKeyword}
     */
    EnableKeyword(keyword: string): void;
    /**
     * Enables a local shader keyword for this compute shader.
     * @param keyword The name of the Rendering.LocalKeyword to enable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.EnableKeyword.html | ComputeShader.EnableKeyword}
     */
    EnableKeyword(keyword: LocalKeyword): void;
    /**
     * Find ComputeShader kernel index.
     * @param name Name of kernel function.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.FindKernel.html | ComputeShader.FindKernel}
     */
    FindKernel(name: string): number;
    /**
     * Checks whether a shader contains a given kernel.
     * @param name The name of the kernel to look for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.HasKernel.html | ComputeShader.HasKernel}
     */
    HasKernel(name: string): boolean;
    /**
     * Checks whether a local shader keyword is enabled for this compute shader.
     * @param keyword The name of the Rendering.LocalKeyword to check.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.IsKeywordEnabled.html | ComputeShader.IsKeywordEnabled}
     */
    IsKeywordEnabled(keyword: string): boolean;
    /**
     * Checks whether a local shader keyword is enabled for this compute shader.
     * @param keyword The name of the Rendering.LocalKeyword to check.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.IsKeywordEnabled.html | ComputeShader.IsKeywordEnabled}
     */
    IsKeywordEnabled(keyword: LocalKeyword): boolean;
    /**
     * Allows you to check whether the current end user device supports the features required to run the specified compute shader kernel.
     * @param kernelIndex Which kernel to query.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.IsSupported.html | ComputeShader.IsSupported}
     */
    IsSupported(kernelIndex: number): boolean;
    /**
     * Set a bool parameter.
     * @param name Variable name in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetBool.html | ComputeShader.SetBool}
     */
    SetBool(name: string, val: boolean): void;
    /**
     * Set a bool parameter.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetBool.html | ComputeShader.SetBool}
     */
    SetBool(nameID: number, val: boolean): void;
    /**
     * Sets an input or output compute buffer.
     * @param kernelIndex For which kernel the buffer is being set. See FindKernel.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param buffer Buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetBuffer.html | ComputeShader.SetBuffer}
     */
    SetBuffer(kernelIndex: number, nameID: number, buffer: ComputeBuffer): void;
    /**
     * Sets an input or output compute buffer.
     * @param kernelIndex For which kernel the buffer is being set. See FindKernel.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param buffer Buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetBuffer.html | ComputeShader.SetBuffer}
     */
    SetBuffer(kernelIndex: number, nameID: number, buffer: GraphicsBuffer): void;
    /**
     * Sets an input or output compute buffer.
     * @param kernelIndex For which kernel the buffer is being set. See FindKernel.
     * @param name Name of the buffer variable in shader code.
     * @param buffer Buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetBuffer.html | ComputeShader.SetBuffer}
     */
    SetBuffer(kernelIndex: number, name: string, buffer: ComputeBuffer): void;
    /**
     * Sets an input or output compute buffer.
     * @param kernelIndex For which kernel the buffer is being set. See FindKernel.
     * @param name Name of the buffer variable in shader code.
     * @param buffer Buffer to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetBuffer.html | ComputeShader.SetBuffer}
     */
    SetBuffer(kernelIndex: number, name: string, buffer: GraphicsBuffer): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
     * @param nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetConstantBuffer.html | ComputeShader.SetConstantBuffer}
     */
    SetConstantBuffer(nameID: number, buffer: ComputeBuffer, offset: number, size: number): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
     * @param name The name of the buffer to bind as constant buffer.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetConstantBuffer.html | ComputeShader.SetConstantBuffer}
     */
    SetConstantBuffer(name: string, buffer: ComputeBuffer, offset: number, size: number): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
     * @param nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetConstantBuffer.html | ComputeShader.SetConstantBuffer}
     */
    SetConstantBuffer(nameID: number, buffer: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
     * @param name The name of the buffer to bind as constant buffer.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetConstantBuffer.html | ComputeShader.SetConstantBuffer}
     */
    SetConstantBuffer(name: string, buffer: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Set a float parameter.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetFloat.html | ComputeShader.SetFloat}
     */
    SetFloat(nameID: number, val: number): void;
    /**
     * Set a float parameter.
     * @param name Variable name in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetFloat.html | ComputeShader.SetFloat}
     */
    SetFloat(name: string, val: number): void;
    /**
     * Set multiple consecutive float parameters at once.
     * @param name Array variable name in the shader code.
     * @param values Value array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetFloats.html | ComputeShader.SetFloats}
     */
    SetFloats(name: string, values: Readonly<number[]>): void;
    /**
     * Set multiple consecutive float parameters at once.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param values Value array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetFloats.html | ComputeShader.SetFloats}
     */
    SetFloats(nameID: number, values: Readonly<number[]>): void;
    /**
     * Set an integer parameter.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetInt.html | ComputeShader.SetInt}
     */
    SetInt(nameID: number, val: number): void;
    /**
     * Set an integer parameter.
     * @param name Variable name in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetInt.html | ComputeShader.SetInt}
     */
    SetInt(name: string, val: number): void;
    /**
     * Set multiple consecutive integer parameters at once.
     * @param name Array variable name in the shader code.
     * @param values Value array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetInts.html | ComputeShader.SetInts}
     */
    SetInts(name: string, values: Readonly<number[]>): void;
    /**
     * Set multiple consecutive integer parameters at once.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param values Value array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetInts.html | ComputeShader.SetInts}
     */
    SetInts(nameID: number, values: Readonly<number[]>): void;
    /**
     * Sets the state of a local shader keyword for this compute shader.
     * @param keyword The Rendering.LocalKeyword keyword to enable or disable.
     * @param value The desired keyword state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetKeyword.html | ComputeShader.SetKeyword}
     */
    SetKeyword(keyword: LocalKeyword, value: boolean): void;
    /**
     * Set a Matrix parameter.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetMatrix.html | ComputeShader.SetMatrix}
     */
    SetMatrix(nameID: number, val: Matrix4x4): void;
    /**
     * Set a Matrix parameter.
     * @param name Variable name in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetMatrix.html | ComputeShader.SetMatrix}
     */
    SetMatrix(name: string, val: Matrix4x4): void;
    /**
     * Set a Matrix array parameter.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetMatrixArray.html | ComputeShader.SetMatrixArray}
     */
    SetMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    /**
     * Set a Matrix array parameter.
     * @param name Variable name in shader code.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetMatrixArray.html | ComputeShader.SetMatrixArray}
     */
    SetMatrixArray(name: string, values: Readonly<Matrix4x4[]>): void;
    /**
     * Sets a RayTracingAccelerationStructure to be used for Inline Ray Tracing (Ray Queries).
     * @param kernelIndex For which kernel the RayTracingAccelerationStructure is being set. See FindKernel.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param accelerationStructure The RayTracingAccelerationStructure object to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetRayTracingAccelerationStructure.html | ComputeShader.SetRayTracingAccelerationStructure}
     */
    SetRayTracingAccelerationStructure(kernelIndex: number, nameID: number, accelerationStructure: RayTracingAccelerationStructure): void;
    /**
     * Sets a RayTracingAccelerationStructure to be used for Inline Ray Tracing (Ray Queries).
     * @param kernelIndex For which kernel the RayTracingAccelerationStructure is being set. See FindKernel.
     * @param name Resource name in shader code.
     * @param accelerationStructure The RayTracingAccelerationStructure object to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetRayTracingAccelerationStructure.html | ComputeShader.SetRayTracingAccelerationStructure}
     */
    SetRayTracingAccelerationStructure(kernelIndex: number, name: string, accelerationStructure: RayTracingAccelerationStructure): void;
    /**
     * Set a texture parameter.
     * @param kernelIndex For which kernel the texture is being set. See FindKernel.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param texture Texture to set.
     * @param mipLevel Optional mipmap level of the read-write texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetTexture.html | ComputeShader.SetTexture}
     */
    SetTexture(kernelIndex: number, nameID: number, texture: Texture, mipLevel: number): void;
    /**
     * Set a texture parameter.
     * @param kernelIndex For which kernel the texture is being set. See FindKernel.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param texture Texture to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetTexture.html | ComputeShader.SetTexture}
     */
    SetTexture(kernelIndex: number, nameID: number, texture: Texture): void;
    /**
     * Set a texture parameter.
     * @param kernelIndex For which kernel the texture is being set. See FindKernel.
     * @param name Name of the buffer variable in shader code.
     * @param texture Texture to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetTexture.html | ComputeShader.SetTexture}
     */
    SetTexture(kernelIndex: number, name: string, texture: Texture): void;
    /**
     * Set a texture parameter.
     * @param kernelIndex For which kernel the texture is being set. See FindKernel.
     * @param name Name of the buffer variable in shader code.
     * @param texture Texture to set.
     * @param mipLevel Optional mipmap level of the read-write texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetTexture.html | ComputeShader.SetTexture}
     */
    SetTexture(kernelIndex: number, name: string, texture: Texture, mipLevel: number): void;
    /**
     * Set a texture parameter.
     * @param kernelIndex For which kernel the texture is being set. See FindKernel.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param texture Texture to set.
     * @param mipLevel Optional mipmap level of the read-write texture.
     * @param element Optional parameter that specifies the type of data to set from the RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetTexture.html | ComputeShader.SetTexture}
     */
    SetTexture(kernelIndex: number, nameID: number, texture: RenderTexture, mipLevel: number, element: RenderTextureSubElement): void;
    /**
     * Set a texture parameter.
     * @param kernelIndex For which kernel the texture is being set. See FindKernel.
     * @param name Name of the buffer variable in shader code.
     * @param texture Texture to set.
     * @param mipLevel Optional mipmap level of the read-write texture.
     * @param element Optional parameter that specifies the type of data to set from the RenderTexture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetTexture.html | ComputeShader.SetTexture}
     */
    SetTexture(kernelIndex: number, name: string, texture: RenderTexture, mipLevel: number, element: RenderTextureSubElement): void;
    /**
     * Set a texture parameter from a global texture property.
     * @param kernelIndex For which kernel the texture is being set. See FindKernel.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param globalTextureNameID Property name ID, use Shader.PropertyToID to get it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetTextureFromGlobal.html | ComputeShader.SetTextureFromGlobal}
     */
    SetTextureFromGlobal(kernelIndex: number, nameID: number, globalTextureNameID: number): void;
    /**
     * Set a texture parameter from a global texture property.
     * @param kernelIndex For which kernel the texture is being set. See FindKernel.
     * @param name Name of the buffer variable in shader code.
     * @param globalTextureName Global texture property to assign to shader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetTextureFromGlobal.html | ComputeShader.SetTextureFromGlobal}
     */
    SetTextureFromGlobal(kernelIndex: number, name: string, globalTextureName: string): void;
    /**
     * Set a vector parameter.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetVector.html | ComputeShader.SetVector}
     */
    SetVector(nameID: number, val: Vector4): void;
    /**
     * Set a vector parameter.
     * @param name Variable name in shader code.
     * @param val Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetVector.html | ComputeShader.SetVector}
     */
    SetVector(name: string, val: Vector4): void;
    /**
     * Set a vector array parameter.
     * @param nameID Property name ID, use Shader.PropertyToID to get it.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetVectorArray.html | ComputeShader.SetVectorArray}
     */
    SetVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    /**
     * Set a vector array parameter.
     * @param name Variable name in shader code.
     * @param values Value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ComputeShader.SetVectorArray.html | ComputeShader.SetVectorArray}
     */
    SetVectorArray(name: string, values: Readonly<Vector4[]>): void;


}
    
interface RayTracingShader extends Object {
    /**
     * The maximum number of ray bounces this shader can trace (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader-maxRecursionDepth.html | Rendering.RayTracingShader.maxRecursionDepth}
     */
    readonly maxRecursionDepth: number;



    /**
     * Dispatches this RayTracingShader.
     * @param rayGenFunctionName The name of the ray generation shader.
     * @param width The width of the ray generation shader thread grid.
     * @param height The height of the ray generation shader thread grid.
     * @param depth The depth of the ray generation shader thread grid.
     * @param camera Optional parameter used to setup camera-related built-in shader variables.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.Dispatch.html | Rendering.RayTracingShader.Dispatch}
     */
    Dispatch(rayGenFunctionName: string, width: number, height: number, depth: number, camera: Camera): void;
    /**
     * Dispatches this RayTracingShader.
     * @param rayGenFunctionName The name of the ray generation shader.
     * @param argsBuffer Buffer containing dispatch dimensions.
     * @param argsOffset The byte offset into the buffer where the dispatch dimensions start.
     * @param camera If you pass this parameter, Unity sets up built-in shader variables related to that camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.DispatchIndirect.html | Rendering.RayTracingShader.DispatchIndirect}
     */
    DispatchIndirect(rayGenFunctionName: string, argsBuffer: GraphicsBuffer, argsOffset: number, camera: Camera): void;
    /**
     * Sets the value for RayTracingAccelerationStructure property of this RayTracingShader.
     * @param nameID The ID of the RayTracingAccelerationStructure as given by Shader.PropertyToID.
     * @param accelerationStructure The value to set the RayTracingAccelerationStructure to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetAccelerationStructure.html | Rendering.RayTracingShader.SetAccelerationStructure}
     */
    SetAccelerationStructure(nameID: number, accelerationStructure: RayTracingAccelerationStructure): void;
    /**
     * Sets the value for RayTracingAccelerationStructure property of this RayTracingShader.
     * @param name The name of the RayTracingAccelerationStructure being set.
     * @param accelerationStructure The value to set the RayTracingAccelerationStructure to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetAccelerationStructure.html | Rendering.RayTracingShader.SetAccelerationStructure}
     */
    SetAccelerationStructure(name: string, accelerationStructure: RayTracingAccelerationStructure): void;
    /**
     * Sets the value of a boolean uniform.
     * @param name The name of the property being set.
     * @param val The boolean value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetBool.html | Rendering.RayTracingShader.SetBool}
     */
    SetBool(name: string, val: boolean): void;
    /**
     * Sets the value of a boolean uniform.
     * @param nameID The ID of the property as given by Shader.PropertyToID.
     * @param val The boolean value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetBool.html | Rendering.RayTracingShader.SetBool}
     */
    SetBool(nameID: number, val: boolean): void;
    /**
     * Binds an input or output compute buffer.
     * @param nameID The ID of the buffer name in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetBuffer.html | Rendering.RayTracingShader.SetBuffer}
     */
    SetBuffer(nameID: number, buffer: ComputeBuffer): void;
    /**
     * Binds an input or output compute buffer.
     * @param nameID The ID of the buffer name in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetBuffer.html | Rendering.RayTracingShader.SetBuffer}
     */
    SetBuffer(nameID: number, buffer: GraphicsBuffer): void;
    /**
     * Binds an input or output compute buffer.
     * @param nameID The ID of the buffer name in shader code. Use Shader.PropertyToID to get this ID.
     * @param bufferHandle The handle of the buffer to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetBuffer.html | Rendering.RayTracingShader.SetBuffer}
     */
    SetBuffer(nameID: number, bufferHandle: GraphicsBufferHandle): void;
    /**
     * Binds an input or output compute buffer.
     * @param name The name of the buffer in shader code.
     * @param buffer The buffer to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetBuffer.html | Rendering.RayTracingShader.SetBuffer}
     */
    SetBuffer(name: string, buffer: ComputeBuffer): void;
    /**
     * Binds an input or output compute buffer.
     * @param name The name of the buffer in shader code.
     * @param buffer The buffer to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetBuffer.html | Rendering.RayTracingShader.SetBuffer}
     */
    SetBuffer(name: string, buffer: GraphicsBuffer): void;
    /**
     * Binds an input or output compute buffer.
     * @param name The name of the buffer in shader code.
     * @param bufferHandle The handle of the buffer to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetBuffer.html | Rendering.RayTracingShader.SetBuffer}
     */
    SetBuffer(name: string, bufferHandle: GraphicsBufferHandle): void;
    /**
     * Binds a constant buffer created through a ComputeBuffer or a GraphicsBuffer.
     * @param nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the ComputeBuffer or GraphicsBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetConstantBuffer.html | Rendering.RayTracingShader.SetConstantBuffer}
     */
    SetConstantBuffer(nameID: number, buffer: ComputeBuffer, offset: number, size: number): void;
    /**
     * Binds a constant buffer created through a ComputeBuffer or a GraphicsBuffer.
     * @param name The name of the constant buffer in shader code.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the ComputeBuffer or GraphicsBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetConstantBuffer.html | Rendering.RayTracingShader.SetConstantBuffer}
     */
    SetConstantBuffer(name: string, buffer: ComputeBuffer, offset: number, size: number): void;
    /**
     * Binds a constant buffer created through a ComputeBuffer or a GraphicsBuffer.
     * @param nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the ComputeBuffer or GraphicsBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetConstantBuffer.html | Rendering.RayTracingShader.SetConstantBuffer}
     */
    SetConstantBuffer(nameID: number, buffer: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Binds a constant buffer created through a ComputeBuffer or a GraphicsBuffer.
     * @param name The name of the constant buffer in shader code.
     * @param buffer The buffer to bind as constant buffer.
     * @param offset The offset in bytes from the beginning of the ComputeBuffer or GraphicsBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
     * @param size The number of bytes to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetConstantBuffer.html | Rendering.RayTracingShader.SetConstantBuffer}
     */
    SetConstantBuffer(name: string, buffer: GraphicsBuffer, offset: number, size: number): void;
    /**
     * Sets the value of a float uniform.
     * @param nameID The ID of the property as given by Shader.PropertyToID.
     * @param val The float value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetFloat.html | Rendering.RayTracingShader.SetFloat}
     */
    SetFloat(nameID: number, val: number): void;
    /**
     * Sets the value of a float uniform.
     * @param name The name of the property being set.
     * @param val The float value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetFloat.html | Rendering.RayTracingShader.SetFloat}
     */
    SetFloat(name: string, val: number): void;
    /**
     * Sets the values for a float array uniform.
     * @param name The name of the property being set.
     * @param values The float array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetFloats.html | Rendering.RayTracingShader.SetFloats}
     */
    SetFloats(name: string, values: Readonly<number[]>): void;
    /**
     * Sets the values for a float array uniform.
     * @param nameID The ID of the property as given by Shader.PropertyToID.
     * @param values The float array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetFloats.html | Rendering.RayTracingShader.SetFloats}
     */
    SetFloats(nameID: number, values: Readonly<number[]>): void;
    /**
     * Sets the value of a int uniform.
     * @param nameID The ID of the property as given by Shader.PropertyToID.
     * @param val The int value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetInt.html | Rendering.RayTracingShader.SetInt}
     */
    SetInt(nameID: number, val: number): void;
    /**
     * Sets the value of a int uniform.
     * @param name The name of the property being set.
     * @param val The int value to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetInt.html | Rendering.RayTracingShader.SetInt}
     */
    SetInt(name: string, val: number): void;
    /**
     * Sets the values for a int array uniform.
     * @param name The name of the property being set.
     * @param values The int array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetInts.html | Rendering.RayTracingShader.SetInts}
     */
    SetInts(name: string, values: Readonly<number[]>): void;
    /**
     * Sets the values for a int array uniform.
     * @param nameID The ID of the property as given by Shader.PropertyToID.
     * @param values The int array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetInts.html | Rendering.RayTracingShader.SetInts}
     */
    SetInts(nameID: number, values: Readonly<number[]>): void;
    /**
     * Sets the value of a matrix uniform.
     * @param nameID The ID of the property as given by Shader.PropertyToID.
     * @param val The matrix to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetMatrix.html | Rendering.RayTracingShader.SetMatrix}
     */
    SetMatrix(nameID: number, val: Matrix4x4): void;
    /**
     * Sets the value of a matrix uniform.
     * @param name The name of the property being set.
     * @param val The matrix to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetMatrix.html | Rendering.RayTracingShader.SetMatrix}
     */
    SetMatrix(name: string, val: Matrix4x4): void;
    /**
     * Sets a matrix array uniform.
     * @param nameID The ID of the property as given by Shader.PropertyToID.
     * @param values The matrix array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetMatrixArray.html | Rendering.RayTracingShader.SetMatrixArray}
     */
    SetMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    /**
     * Sets a matrix array uniform.
     * @param name The name of the property being set.
     * @param values The matrix array to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetMatrixArray.html | Rendering.RayTracingShader.SetMatrixArray}
     */
    SetMatrixArray(name: string, values: Readonly<Matrix4x4[]>): void;
    /**
     * Selects which Shader Pass to use when executing ray/geometry intersection shaders.
     * @param passName The Shader Pass to use when executing ray tracing shaders.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetShaderPass.html | Rendering.RayTracingShader.SetShaderPass}
     */
    SetShaderPass(passName: string): void;
    /**
     * Binds a texture resource. This can be a input or an output texture (UAV).
     * @param nameID The ID of the resource as given by Shader.PropertyToID.
     * @param texture The texture to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetTexture.html | Rendering.RayTracingShader.SetTexture}
     */
    SetTexture(nameID: number, texture: Texture): void;
    /**
     * Binds a texture resource. This can be a input or an output texture (UAV).
     * @param name The name of the texture being set.
     * @param texture The texture to bind.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetTexture.html | Rendering.RayTracingShader.SetTexture}
     */
    SetTexture(name: string, texture: Texture): void;
    /**
     * Binds a global texture to a RayTracingShader.
     * @param nameID The ID of the texture as given by Shader.PropertyToID.
     * @param globalTextureNameID The ID of the global resource as given by Shader.PropertyToID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetTextureFromGlobal.html | Rendering.RayTracingShader.SetTextureFromGlobal}
     */
    SetTextureFromGlobal(nameID: number, globalTextureNameID: number): void;
    /**
     * Binds a global texture to a RayTracingShader.
     * @param name The name of the texture to bind.
     * @param globalTextureName The name of the global resource to bind to the RayTracingShader.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetTextureFromGlobal.html | Rendering.RayTracingShader.SetTextureFromGlobal}
     */
    SetTextureFromGlobal(name: string, globalTextureName: string): void;
    /**
     * Sets the value for a vector uniform.
     * @param nameID The ID of the property as given by Shader.PropertyToID.
     * @param val The vector to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetVector.html | Rendering.RayTracingShader.SetVector}
     */
    SetVector(nameID: number, val: Vector4): void;
    /**
     * Sets the value for a vector uniform.
     * @param name The name of the property being set.
     * @param val The vector to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetVector.html | Rendering.RayTracingShader.SetVector}
     */
    SetVector(name: string, val: Vector4): void;
    /**
     * Sets a vector array uniform.
     * @param nameID The ID of the property as given by Shader.PropertyToID.
     * @param values The array of vectors to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetVectorArray.html | Rendering.RayTracingShader.SetVectorArray}
     */
    SetVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    /**
     * Sets a vector array uniform.
     * @param name The name of the property being set.
     * @param values The array of vectors to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RayTracingShader.SetVectorArray.html | Rendering.RayTracingShader.SetVectorArray}
     */
    SetVectorArray(name: string, values: Readonly<Vector4[]>): void;


}
    
interface RectInt {
    /**
     * Left coordinate of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-x.html | RectInt.x}
     */
    x: number;
    /**
     * Top coordinate of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-y.html | RectInt.y}
     */
    y: number;
    /**
     * Center coordinate of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-center.html | RectInt.center}
     */
    readonly center: Vector2;
    /**
     * The lower left corner of the rectangle; which is the minimal position of the rectangle along the x- and y-axes, when it is aligned to both axes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-min.html | RectInt.min}
     */
    min: Vector2Int;
    /**
     * The upper right corner of the rectangle; which is the maximal position of the rectangle along the x- and y-axes, when it is aligned to both axes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-max.html | RectInt.max}
     */
    max: Vector2Int;
    /**
     * Width of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-width.html | RectInt.width}
     */
    width: number;
    /**
     * Height of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-height.html | RectInt.height}
     */
    height: number;
    /**
     * Shows the minimum X value of the RectInt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-xMin.html | RectInt.xMin}
     */
    xMin: number;
    /**
     * Show the minimum Y value of the RectInt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-yMin.html | RectInt.yMin}
     */
    yMin: number;
    /**
     * Shows the maximum X value of the RectInt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-xMax.html | RectInt.xMax}
     */
    xMax: number;
    /**
     * Shows the maximum Y value of the RectInt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-yMax.html | RectInt.yMax}
     */
    yMax: number;
    /**
     * Returns the position (x, y) of the RectInt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-position.html | RectInt.position}
     */
    position: Vector2Int;
    /**
     * Returns the width and height of the RectInt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-size.html | RectInt.size}
     */
    size: Vector2Int;
    /**
     * A RectInt.PositionCollection that contains all positions within the RectInt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-allPositionsWithin.html | RectInt.allPositionsWithin}
     */
    readonly allPositionsWithin: PositionEnumerator;



    /**
     * Clamps the position and size of the RectInt to the given bounds.
     * @param bounds Bounds to clamp the RectInt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt.ClampToBounds.html | RectInt.ClampToBounds}
     */
    ClampToBounds(bounds: RectInt): void;
    /**
     * Returns true if the given position is within the RectInt.
     * @param position Position to check.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt.Contains.html | RectInt.Contains}
     */
    Contains(position: Vector2Int): boolean;
    Equals(other: unknown): boolean;
    /**
     * Returns true if the given RectInt is equal to this RectInt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt.Equals.html | RectInt.Equals}
     */
    Equals(other: RectInt): boolean;
    GetHashCode(): number;
    /**
     * RectInts overlap if each RectInt Contains a shared point.
     * @param other Other rectangle to test overlapping with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt.Overlaps.html | RectInt.Overlaps}
     */
    Overlaps(other: RectInt): boolean;
    /**
     * Sets the bounds to the min and max value of the rect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt.SetMinMax.html | RectInt.SetMinMax}
     */
    SetMinMax(minPosition: Vector2Int, maxPosition: Vector2Int): void;
    /**
     * Returns the x, y, width and height of the RectInt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt.ToString.html | RectInt.ToString}
     */
    ToString(): string;
    /**
     * Returns the x, y, width and height of the RectInt.
     * @param format A numeric format string.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt.ToString.html | RectInt.ToString}
     */
    ToString(format: string): string;
    /**
     * Returns the x, y, width and height of the RectInt.
     * @param format A numeric format string.
     * @param formatProvider An object that specifies culture-specific formatting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt.ToString.html | RectInt.ToString}
     */
    ToString(format: string, formatProvider: IFormatProvider): string;


}
    
    
    
interface PositionEnumerator {
    readonly Current: Vector2Int;



    GetEnumerator(): PositionEnumerator;
    MoveNext(): boolean;
    Reset(): void;


}
    
interface PositionEnumeratorConstructor {


    new(min: Vector2Int, max: Vector2Int): PositionEnumerator;



}
declare const PositionEnumerator: PositionEnumeratorConstructor;
    
interface RectIntConstructor {
    /**
     * Shorthand for writing new RectInt(0,0,0,0).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectInt-zero.html | RectInt.zero}
     */
    readonly zero: RectInt;


    new(xMin: number, yMin: number, width: number, height: number): RectInt;
    new(position: Vector2Int, size: Vector2Int): RectInt;



}
declare const RectInt: RectIntConstructor;
    
interface RendererList {
    /**
     * Indicates whether the RendererList is valid or not. If the RendererList is valid, this returns true. Otherwise, this returns false.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RendererList-isValid.html | Rendering.RendererList.isValid}
     */
    readonly isValid: boolean;





}
    
interface RendererListConstructor {
    readonly nullRendererList: RendererList;





}
declare const RendererList: RendererListConstructor;
    
interface AsyncGPUReadbackRequest {
    /**
     * Checks whether the request has been processed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadbackRequest-done.html | Rendering.AsyncGPUReadbackRequest.done}
     */
    readonly done: boolean;
    /**
     * This property is true if the request has encountered an error.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadbackRequest-hasError.html | Rendering.AsyncGPUReadbackRequest.hasError}
     */
    readonly hasError: boolean;
    /**
     * Number of layers in the current request.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadbackRequest-layerCount.html | Rendering.AsyncGPUReadbackRequest.layerCount}
     */
    readonly layerCount: number;
    /**
     * The size in bytes of one layer of the readback data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadbackRequest-layerDataSize.html | Rendering.AsyncGPUReadbackRequest.layerDataSize}
     */
    readonly layerDataSize: number;
    /**
     * The width of the requested GPU data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadbackRequest-width.html | Rendering.AsyncGPUReadbackRequest.width}
     */
    readonly width: number;
    /**
     * When reading data from a ComputeBuffer, height is 1, otherwise, the property takes the value of the requested height from the texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadbackRequest-height.html | Rendering.AsyncGPUReadbackRequest.height}
     */
    readonly height: number;
    /**
     * When reading data from a ComputeBuffer, depth is 1, otherwise, the property takes the value of the requested depth from the texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadbackRequest-depth.html | Rendering.AsyncGPUReadbackRequest.depth}
     */
    readonly depth: number;
    /**
     * In the Editor, defines whether the Player loop is updated while the GPU request is in flight.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadbackRequest-forcePlayerLoopUpdate.html | Rendering.AsyncGPUReadbackRequest.forcePlayerLoopUpdate}
     */
    forcePlayerLoopUpdate: boolean;



    /**
     * Fetches the data of a successful request.
     * @param layer The index of the layer to retrieve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadbackRequest.GetData.html | Rendering.AsyncGPUReadbackRequest.GetData}
     */
    GetData<T>(layer: number): Readonly<T[]>;
    /**
     * Triggers an update of the request.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadbackRequest.Update.html | Rendering.AsyncGPUReadbackRequest.Update}
     */
    Update(): void;
    /**
     * Waits for completion of the request.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.AsyncGPUReadbackRequest.WaitForCompletion.html | Rendering.AsyncGPUReadbackRequest.WaitForCompletion}
     */
    WaitForCompletion(): void;


}
    
interface RenderTargetBinding {
    /**
     * Color buffers to use as render targets.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderTargetBinding-colorRenderTargets.html | Rendering.RenderTargetBinding.colorRenderTargets}
     */
    colorRenderTargets: Readonly<RenderTargetIdentifier[]>;
    /**
     * Depth/stencil buffer to use as render target.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderTargetBinding-depthRenderTarget.html | Rendering.RenderTargetBinding.depthRenderTarget}
     */
    depthRenderTarget: RenderTargetIdentifier;
    /**
     * Load actions for color buffers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderTargetBinding-colorLoadActions.html | Rendering.RenderTargetBinding.colorLoadActions}
     */
    colorLoadActions: Readonly<number[]>;
    /**
     * Store actions for color buffers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderTargetBinding-colorStoreActions.html | Rendering.RenderTargetBinding.colorStoreActions}
     */
    colorStoreActions: Readonly<number[]>;
    /**
     * Load action for the depth/stencil buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderTargetBinding-depthLoadAction.html | Rendering.RenderTargetBinding.depthLoadAction}
     */
    depthLoadAction: RenderBufferLoadAction;
    /**
     * Store action for the depth/stencil buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderTargetBinding-depthStoreAction.html | Rendering.RenderTargetBinding.depthStoreAction}
     */
    depthStoreAction: RenderBufferStoreAction;
    /**
     * Optional flags.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderTargetBinding-flags.html | Rendering.RenderTargetBinding.flags}
     */
    flags: RenderTargetFlags;





}
    
interface RenderTargetBindingConstructor {


    new(colorRenderTargets: Readonly<RenderTargetIdentifier[]>, colorLoadActions: Readonly<number[]>, colorStoreActions: Readonly<number[]>, depthRenderTarget: RenderTargetIdentifier, depthLoadAction: RenderBufferLoadAction, depthStoreAction: RenderBufferStoreAction): RenderTargetBinding;
    new(colorRenderTarget: RenderTargetIdentifier, colorLoadAction: RenderBufferLoadAction, colorStoreAction: RenderBufferStoreAction, depthRenderTarget: RenderTargetIdentifier, depthLoadAction: RenderBufferLoadAction, depthStoreAction: RenderBufferStoreAction): RenderTargetBinding;
    new(setup: RenderTargetSetup): RenderTargetBinding;



}
declare const RenderTargetBinding: RenderTargetBindingConstructor;
    
interface CommandBufferConstructor {
    ThrowOnSetRenderTarget: boolean;


    new(): CommandBuffer;



}
declare const CommandBuffer: CommandBufferConstructor;
    
interface Cubemap extends Texture {
    /**
     * The format of the pixel data in the texture (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap-format.html | Cubemap.format}
     */
    readonly format: TextureFormat;
    readonly isReadable: boolean;
    /**
     * Determines whether mipmap streaming is enabled for this Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap-streamingMipmaps.html | Cubemap.streamingMipmaps}
     */
    readonly streamingMipmaps: boolean;
    /**
     * Sets the relative priority for this Texture when reducing memory size to fit within the memory budget.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap-streamingMipmapsPriority.html | Cubemap.streamingMipmapsPriority}
     */
    readonly streamingMipmapsPriority: number;
    /**
     * The mipmap level to load.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap-requestedMipmapLevel.html | Cubemap.requestedMipmapLevel}
     */
    requestedMipmapLevel: number;
    /**
     * The mipmap level that the streaming system would load before memory budgets are applied.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap-desiredMipmapLevel.html | Cubemap.desiredMipmapLevel}
     */
    readonly desiredMipmapLevel: number;
    /**
     * The mipmap level that the mipmap streaming system is in the process of loading.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap-loadingMipmapLevel.html | Cubemap.loadingMipmapLevel}
     */
    readonly loadingMipmapLevel: number;
    /**
     * The mipmap level that is currently loaded by the streaming system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap-loadedMipmapLevel.html | Cubemap.loadedMipmapLevel}
     */
    readonly loadedMipmapLevel: number;



    /**
     * Copies changes you've made in a CPU texture to the GPU.
     * @param updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
     * @param makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.Apply.html | Cubemap.Apply}
     */
    Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
    Apply(updateMipmaps: boolean): void;
    Apply(): void;
    /**
     * Resets the requestedMipmapLevel field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.ClearRequestedMipmapLevel.html | Cubemap.ClearRequestedMipmapLevel}
     */
    ClearRequestedMipmapLevel(): void;
    /**
     * Copies pixel data from another texture on the CPU.
     * @param src The source texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.CopyPixels.html | Cubemap.CopyPixels}
     */
    CopyPixels(src: Texture): void;
    CopyPixels(src: Texture, srcElement: number, srcMip: number, dstFace: CubemapFace, dstMip: number): void;
    CopyPixels(src: Texture, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dstFace: CubemapFace, dstMip: number, dstX: number, dstY: number): void;
    /**
     * Gets the pixel color at coordinates (x, y).
     * @param face The CubemapFace to sample.
     * @param x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
     * @param y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.GetPixel.html | Cubemap.GetPixel}
     */
    GetPixel(face: CubemapFace, x: number, y: number): Color;
    /**
     * Gets the pixel color at coordinates (x, y).
     * @param face The CubemapFace to sample.
     * @param x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
     * @param y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
     * @param mip The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.GetPixel.html | Cubemap.GetPixel}
     */
    GetPixel(face: CubemapFace, x: number, y: number, mip: number): Color;
    /**
     * Gets the raw data from a texture.
     * @param mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * @param face The CubemapFace to read from.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.GetPixelData.html | Cubemap.GetPixelData}
     */
    GetPixelData<T>(mipLevel: number, face: CubemapFace): Readonly<T[]>;
    /**
     * Gets the pixel color data for a mipmap level of a face as Color structs.
     * @param face The CubemapFace to read from.
     * @param miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.GetPixels.html | Cubemap.GetPixels}
     */
    GetPixels(face: CubemapFace, miplevel: number): Readonly<Color[]>;
    /**
     * Gets the pixel color data for a mipmap level of a face as Color structs.
     * @param face The CubemapFace to read from.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.GetPixels.html | Cubemap.GetPixels}
     */
    GetPixels(face: CubemapFace): Readonly<Color[]>;
    /**
     * Checks to see whether the mipmap level set by requestedMipmapLevel has finished loading.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.IsRequestedMipmapLevelLoaded.html | Cubemap.IsRequestedMipmapLevelLoaded}
     */
    IsRequestedMipmapLevelLoaded(): boolean;
    /**
     * Sets the pixel color at coordinates (x,y).
     * @param face The CubemapFace to write to.
     * @param x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
     * @param y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
     * @param color The color to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.SetPixel.html | Cubemap.SetPixel}
     */
    SetPixel(face: CubemapFace, x: number, y: number, color: Color): void;
    /**
     * Sets the pixel color at coordinates (x,y).
     * @param face The CubemapFace to write to.
     * @param x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
     * @param y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
     * @param color The color to set.
     * @param mip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.SetPixel.html | Cubemap.SetPixel}
     */
    SetPixel(face: CubemapFace, x: number, y: number, color: Color, mip: number): void;
    SetPixelData<T>(data: Readonly<T[]>, mipLevel: number, face: CubemapFace, sourceDataStartIndex: number): void;
    SetPixelData<T>(data: Readonly<T[]>, mipLevel: number, face: CubemapFace, sourceDataStartIndex: number): void;
    /**
     * Sets the pixel colors of an entire mipmap level of a face.
     * @param colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
     * @param face The CubemapFace to write colors to.
     * @param miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.SetPixels.html | Cubemap.SetPixels}
     */
    SetPixels(colors: Readonly<Color[]>, face: CubemapFace, miplevel: number): void;
    /**
     * Sets the pixel colors of an entire mipmap level of a face.
     * @param colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
     * @param face The CubemapFace to write colors to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.SetPixels.html | Cubemap.SetPixels}
     */
    SetPixels(colors: Readonly<Color[]>, face: CubemapFace): void;
    /**
     * Performs smoothing of near edge regions.
     * @param smoothRegionWidthInPixels Pixel distance at edges over which to apply smoothing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.SmoothEdges.html | Cubemap.SmoothEdges}
     */
    SmoothEdges(smoothRegionWidthInPixels: number): void;
    SmoothEdges(): void;
    /**
     * Updates Unity cubemap to use different native cubemap texture object.
     * @param nativeTexture Native cubemap texture object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Cubemap.UpdateExternalTexture.html | Cubemap.UpdateExternalTexture}
     */
    UpdateExternalTexture(nativeTexture: IntPtr): void;


}
    
interface CubemapConstructor {


    new(width: number, format: DefaultFormat, flags: TextureCreationFlags): Cubemap;
    new(width: number, format: DefaultFormat, flags: TextureCreationFlags, mipCount: number): Cubemap;
    new(width: number, format: GraphicsFormat, flags: TextureCreationFlags): Cubemap;
    new(width: number, format: GraphicsFormat, flags: TextureCreationFlags, mipCount: number): Cubemap;
    new(width: number, textureFormat: TextureFormat, mipChain: boolean): Cubemap;
    new(width: number, textureFormat: TextureFormat, mipChain: boolean, createUninitialized: boolean): Cubemap;
    new(width: number, format: TextureFormat, mipCount: number): Cubemap;
    new(width: number, format: TextureFormat, mipCount: number, createUninitialized: boolean): Cubemap;


    CreateExternalTexture(width: number, format: TextureFormat, mipmap: boolean, nativeTex: IntPtr): Cubemap;

}
declare const Cubemap: CubemapConstructor;
    
interface CameraCallback extends MulticastDelegate {



    BeginInvoke(cam: Camera, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): void;
    Invoke(cam: Camera): void;


}
    
interface CameraCallbackConstructor {


    new(object: unknown, method: IntPtr): CameraCallback;



}
declare const CameraCallback: CameraCallbackConstructor;
    
interface CameraConstructor {
    kMinAperture: number;
    kMaxAperture: number;
    kMinBladeCount: number;
    kMaxBladeCount: number;
    onPreCull: CameraCallback;
    onPreRender: CameraCallback;
    onPostRender: CameraCallback;
    /**
     * The first enabled Camera component that is tagged &quot;MainCamera&quot; (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-main.html | Camera.main}
     */
    readonly main: Camera;
    /**
     * The camera we are currently rendering with, for low-level render control only (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-current.html | Camera.current}
     */
    readonly current: Camera;
    /**
     * The number of cameras in the current Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-allCamerasCount.html | Camera.allCamerasCount}
     */
    readonly allCamerasCount: number;
    /**
     * Returns all enabled cameras in the Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Camera-allCameras.html | Camera.allCameras}
     */
    readonly allCameras: Readonly<Camera[]>;


    new(): Camera;


    FieldOfViewToFocalLength(fieldOfView: number, sensorSize: number): number;
    FocalLengthToFieldOfView(focalLength: number, sensorSize: number): number;
    GetAllCameras(cameras: Readonly<Camera[]>): number;
    HorizontalToVerticalFieldOfView(horizontalFieldOfView: number, aspectRatio: number): number;
    SetupCurrent(cur: Camera): void;
    VerticalToHorizontalFieldOfView(verticalFieldOfView: number, aspectRatio: number): number;

}
declare const Camera: CameraConstructor;
    
interface Input {





}
    
interface LocationService {
    /**
     * Indicates whether the device allows the application to access the location service.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationService-isEnabledByUser.html | LocationService.isEnabledByUser}
     */
    readonly isEnabledByUser: boolean;
    /**
     * Returns the location service status.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationService-status.html | LocationService.status}
     */
    readonly status: LocationServiceStatus;
    /**
     * The last geographical location that the device registered.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationService-lastData.html | LocationService.lastData}
     */
    readonly lastData: LocationInfo;



    /**
     * Starts location service updates.
     * @param desiredAccuracyInMeters The service accuracy you want to use, in meters. This determines the accuracy of the device's last location coordinates. Higher values like 500 don't require the device to use its GPS chip and
                    thus save battery power. Lower values like 5-10 provide the best accuracy but require the GPS chip and thus use more battery power. The default value is 10 meters.
     * @param updateDistanceInMeters The minimum distance, in meters, that the device must move laterally before Unity updates Input.location. Higher values like 500 produce fewer updates and are less resource intensive to process. The default is 10 meters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationService.Start.html | LocationService.Start}
     */
    Start(desiredAccuracyInMeters: number, updateDistanceInMeters: number): void;
    /**
     * Starts location service updates.
     * @param desiredAccuracyInMeters The service accuracy you want to use, in meters. This determines the accuracy of the device's last location coordinates. Higher values like 500 don't require the device to use its GPS chip and
                    thus save battery power. Lower values like 5-10 provide the best accuracy but require the GPS chip and thus use more battery power. The default value is 10 meters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationService.Start.html | LocationService.Start}
     */
    Start(desiredAccuracyInMeters: number): void;
    /**
     * Starts location service updates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationService.Start.html | LocationService.Start}
     */
    Start(): void;
    /**
     * Stops location service updates. This is useful to save battery power when the application doesn't require the location service.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationService.Stop.html | LocationService.Stop}
     */
    Stop(): void;


}
    
interface LocationInfo {
    /**
     * Geographical device location latitude.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationInfo-latitude.html | LocationInfo.latitude}
     */
    readonly latitude: number;
    /**
     * Geographical device location longitude.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationInfo-longitude.html | LocationInfo.longitude}
     */
    readonly longitude: number;
    /**
     * Geographical device location altitude in meters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationInfo-altitude.html | LocationInfo.altitude}
     */
    readonly altitude: number;
    /**
     * Horizontal accuracy radius of the location in meters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationInfo-horizontalAccuracy.html | LocationInfo.horizontalAccuracy}
     */
    readonly horizontalAccuracy: number;
    /**
     * Vertical accuracy radius of the location in meters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationInfo-verticalAccuracy.html | LocationInfo.verticalAccuracy}
     */
    readonly verticalAccuracy: number;
    /**
     * Timestamp (in milliseconds from 1970) of when location data was last updated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LocationInfo-timestamp.html | LocationInfo.timestamp}
     */
    readonly timestamp: number;





}
    
interface LocationServiceConstructor {


    new(): LocationService;



}
declare const LocationService: LocationServiceConstructor;
    
interface Compass {
    /**
     * The heading in degrees relative to the magnetic North Pole. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Compass-magneticHeading.html | Compass.magneticHeading}
     */
    readonly magneticHeading: number;
    /**
     * The heading in degrees relative to the geographic North Pole. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Compass-trueHeading.html | Compass.trueHeading}
     */
    readonly trueHeading: number;
    /**
     * Accuracy of heading reading in degrees.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Compass-headingAccuracy.html | Compass.headingAccuracy}
     */
    readonly headingAccuracy: number;
    /**
     * The raw geomagnetic data measured in microteslas. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Compass-rawVector.html | Compass.rawVector}
     */
    readonly rawVector: Vector3;
    /**
     * Indicates the time elapsed since the compass heading was last updated. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Compass-timestamp.html | Compass.timestamp}
     */
    readonly timestamp: number;
    /**
     * Use to enable or disable compass. Note, that if you want Input.compass.trueHeading property to contain a valid value, you must also enable location updates. To do this, call Input.location.Start().

Note: On the web platform,  the compass is available only with an HTTPS connection, except during development when you might use http:localhost.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Compass-enabled.html | Compass.enabled}
     */
    enabled: boolean;





}
    
interface CompassConstructor {


    new(): Compass;



}
declare const Compass: CompassConstructor;
    
interface Gyroscope {
    /**
     * Returns rotation rate as measured by the device's gyroscope.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gyroscope-rotationRate.html | Gyroscope.rotationRate}
     */
    readonly rotationRate: Vector3;
    /**
     * Returns unbiased rotation rate as measured by the device's gyroscope.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gyroscope-rotationRateUnbiased.html | Gyroscope.rotationRateUnbiased}
     */
    readonly rotationRateUnbiased: Vector3;
    /**
     * Returns the gravity acceleration vector expressed in the device's reference frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gyroscope-gravity.html | Gyroscope.gravity}
     */
    readonly gravity: Vector3;
    /**
     * Returns the acceleration that the user is giving to the device.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gyroscope-userAcceleration.html | Gyroscope.userAcceleration}
     */
    readonly userAcceleration: Vector3;
    /**
     * Returns the attitude (ie, orientation in space) of the device.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gyroscope-attitude.html | Gyroscope.attitude}
     */
    readonly attitude: Quaternion;
    /**
     * Sets or retrieves the enabled status of this gyroscope.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gyroscope-enabled.html | Gyroscope.enabled}
     */
    enabled: boolean;
    /**
     * Sets or retrieves gyroscope interval in seconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gyroscope-updateInterval.html | Gyroscope.updateInterval}
     */
    updateInterval: number;





}
    
interface Touch {
    /**
     * The unique index for the touch.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-fingerId.html | Touch.fingerId}
     */
    fingerId: number;
    /**
     * The position of the touch in screen space pixel coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-position.html | Touch.position}
     */
    position: Vector2;
    /**
     * The first position of the touch contact in screen space pixel coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-rawPosition.html | Touch.rawPosition}
     */
    rawPosition: Vector2;
    /**
     * The position delta since last change in pixel coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-deltaPosition.html | Touch.deltaPosition}
     */
    deltaPosition: Vector2;
    /**
     * Amount of time that has passed since the last recorded change in Touch values.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-deltaTime.html | Touch.deltaTime}
     */
    deltaTime: number;
    /**
     * Number of taps.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-tapCount.html | Touch.tapCount}
     */
    tapCount: number;
    /**
     * Describes the phase of the touch.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-phase.html | Touch.phase}
     */
    phase: TouchPhase;
    /**
     * The current amount of pressure being applied to a touch.  1.0f is considered to be the pressure of an average touch.  If Input.touchPressureSupported returns false, the value of this property will always be 1.0f.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-pressure.html | Touch.pressure}
     */
    pressure: number;
    /**
     * The maximum possible pressure value for a platform.  If Input.touchPressureSupported returns false, the value of this property will always be 1.0f.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-maximumPossiblePressure.html | Touch.maximumPossiblePressure}
     */
    maximumPossiblePressure: number;
    /**
     * A value that indicates whether a touch was of Direct, Indirect (or remote), or Stylus type.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-type.html | Touch.type}
     */
    type: TouchType;
    /**
     * Value of 0 radians indicates that the stylus is parallel to the surface, pi/2 indicates that it is perpendicular.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-altitudeAngle.html | Touch.altitudeAngle}
     */
    altitudeAngle: number;
    /**
     * Value of 0 radians indicates that the stylus is pointed along the x-axis of the device.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-azimuthAngle.html | Touch.azimuthAngle}
     */
    azimuthAngle: number;
    /**
     * An estimated value of the radius of a touch.  Add radiusVariance to get the maximum touch size, subtract it to get the minimum touch size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-radius.html | Touch.radius}
     */
    radius: number;
    /**
     * This value determines the accuracy of the touch radius. Add this value to the radius to get the maximum touch size, subtract it to get the minimum touch size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Touch-radiusVariance.html | Touch.radiusVariance}
     */
    radiusVariance: number;





}
    
interface AccelerationEvent {
    /**
     * Value of acceleration.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AccelerationEvent-acceleration.html | AccelerationEvent.acceleration}
     */
    readonly acceleration: Vector3;
    /**
     * Amount of time passed since last accelerometer measurement.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AccelerationEvent-deltaTime.html | AccelerationEvent.deltaTime}
     */
    readonly deltaTime: number;





}
    
interface PenData {
    position: Vector2;
    tilt: Vector2;
    penStatus: PenStatus;
    twist: number;
    pressure: number;
    contactType: PenEventType;
    deltaPos: Vector2;





}
    
interface InputConstructor {
    /**
     * Enables/Disables mouse simulation with touches. By default this option is enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-simulateMouseWithTouches.html | Input.simulateMouseWithTouches}
     */
    simulateMouseWithTouches: boolean;
    /**
     * Is any key or mouse button currently held down? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-anyKey.html | Input.anyKey}
     */
    readonly anyKey: boolean;
    /**
     * Returns true the first frame the user hits any key or mouse button. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-anyKeyDown.html | Input.anyKeyDown}
     */
    readonly anyKeyDown: boolean;
    /**
     * Returns the keyboard input entered this frame. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-inputString.html | Input.inputString}
     */
    readonly inputString: string;
    /**
     * The current mouse position in pixel coordinates. (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-mousePosition.html | Input.mousePosition}
     */
    readonly mousePosition: Vector3;
    /**
     * The current mouse position delta in pixel coordinates. (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-mousePositionDelta.html | Input.mousePositionDelta}
     */
    readonly mousePositionDelta: Vector3;
    /**
     * The current mouse scroll delta. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-mouseScrollDelta.html | Input.mouseScrollDelta}
     */
    readonly mouseScrollDelta: Vector2;
    /**
     * Controls enabling and disabling of IME input composition.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-imeCompositionMode.html | Input.imeCompositionMode}
     */
    imeCompositionMode: IMECompositionMode;
    /**
     * The current IME composition string being typed by the user.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-compositionString.html | Input.compositionString}
     */
    readonly compositionString: string;
    /**
     * Does the user have an IME keyboard input source selected?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-imeIsSelected.html | Input.imeIsSelected}
     */
    readonly imeIsSelected: boolean;
    /**
     * The current text input position used by IMEs to open windows.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-compositionCursorPos.html | Input.compositionCursorPos}
     */
    compositionCursorPos: Vector2;
    /**
     * Indicates if a mouse device is detected.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-mousePresent.html | Input.mousePresent}
     */
    readonly mousePresent: boolean;
    /**
     * Returns whether the device on which application is currently running supports touch input.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-touchSupported.html | Input.touchSupported}
     */
    readonly touchSupported: boolean;
    /**
     * Returns the number of queued pen events that can be accessed by calling GetPenEvent().
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-penEventCount.html | Input.penEventCount}
     */
    readonly penEventCount: number;
    /**
     * Number of touches. Guaranteed not to change throughout the frame. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-touchCount.html | Input.touchCount}
     */
    readonly touchCount: number;
    /**
     * Bool value which let's users check if touch pressure is supported.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-touchPressureSupported.html | Input.touchPressureSupported}
     */
    readonly touchPressureSupported: boolean;
    /**
     * Returns true when Stylus Touch is supported by a device or platform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-stylusTouchSupported.html | Input.stylusTouchSupported}
     */
    readonly stylusTouchSupported: boolean;
    /**
     * Property indicating whether the system handles multiple touches.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-multiTouchEnabled.html | Input.multiTouchEnabled}
     */
    multiTouchEnabled: boolean;
    /**
     * Device physical orientation as reported by OS. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-deviceOrientation.html | Input.deviceOrientation}
     */
    readonly deviceOrientation: DeviceOrientation;
    /**
     * Last measured linear acceleration of a device in three-dimensional space. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-acceleration.html | Input.acceleration}
     */
    readonly acceleration: Vector3;
    /**
     * This property controls if input sensors should be compensated for screen orientation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-compensateSensors.html | Input.compensateSensors}
     */
    compensateSensors: boolean;
    /**
     * Number of acceleration measurements which occurred during last frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-accelerationEventCount.html | Input.accelerationEventCount}
     */
    readonly accelerationEventCount: number;
    /**
     * Should  Back button quit the application?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-backButtonLeavesApp.html | Input.backButtonLeavesApp}
     */
    backButtonLeavesApp: boolean;
    /**
     * Property for accessing device location (handheld devices only). (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-location.html | Input.location}
     */
    readonly location: LocationService;
    /**
     * Property for accessing compass (handheld devices only). (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-compass.html | Input.compass}
     */
    readonly compass: Compass;
    /**
     * Returns default gyroscope.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-gyro.html | Input.gyro}
     */
    readonly gyro: Gyroscope;
    /**
     * Returns list of objects representing status of all touches during last frame. (Read Only) (Allocates temporary variables).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-touches.html | Input.touches}
     */
    readonly touches: Readonly<Touch[]>;
    /**
     * Returns list of acceleration measurements which occurred during the last frame. (Read Only) (Allocates temporary variables).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Input-accelerationEvents.html | Input.accelerationEvents}
     */
    readonly accelerationEvents: Readonly<AccelerationEvent[]>;


    new(): Input;


    ClearLastPenContactEvent(): void;
    GetAccelerationEvent(index: number): AccelerationEvent;
    GetAxis(axisName: string): number;
    GetAxisRaw(axisName: string): number;
    GetButton(buttonName: string): boolean;
    GetButtonDown(buttonName: string): boolean;
    GetButtonUp(buttonName: string): boolean;
    GetJoystickNames(): Readonly<string[]>;
    GetKey(key: KeyCode): boolean;
    GetKey(name: string): boolean;
    GetKeyDown(key: KeyCode): boolean;
    GetKeyDown(name: string): boolean;
    GetKeyUp(key: KeyCode): boolean;
    GetKeyUp(name: string): boolean;
    GetLastPenContactEvent(): PenData;
    GetMouseButton(button: number): boolean;
    GetMouseButtonDown(button: number): boolean;
    GetMouseButtonUp(button: number): boolean;
    GetPenEvent(index: number): PenData;
    GetTouch(index: number): Touch;
    IsJoystickPreconfigured(joystickName: string): boolean;
    ResetInputAxes(): void;
    ResetPenEvents(): void;

}
declare const Input: InputConstructor;
    
interface IEventSystemHandler {





}
    
interface ISubmitHandler extends IEventSystemHandler {



    OnSubmit(eventData: BaseEventData): void;


}
    
interface AbstractEventData {
    readonly used: boolean;



    Reset(): void;
    Use(): void;


}
    
interface BaseEventData extends AbstractEventData {
    readonly currentInputModule: BaseInputModule;
    selectedObject: GameObject;





}
    
interface UIBehaviour extends MonoBehaviour {



    IsActive(): boolean;
    IsDestroyed(): boolean;


}
    
interface BaseInputModule extends UIBehaviour {
    readonly input: BaseInput;
    inputOverride: BaseInput;



    ActivateModule(): void;
    ConvertPointerEventScrollDeltaToTicks(scrollDelta: Vector2): Vector2;
    ConvertUIToolkitPointerId(sourcePointerData: PointerEventData): number;
    DeactivateModule(): void;
    IsModuleSupported(): boolean;
    IsPointerOverGameObject(pointerId: number): boolean;
    Process(): void;
    ShouldActivateModule(): boolean;
    UpdateModule(): void;


}
    
interface BaseInput extends UIBehaviour {
    readonly compositionString: string;
    imeCompositionMode: IMECompositionMode;
    compositionCursorPos: Vector2;
    readonly mousePresent: boolean;
    readonly mousePosition: Vector2;
    readonly mouseScrollDelta: Vector2;
    readonly mouseScrollDeltaPerTick: number;
    readonly touchSupported: boolean;
    readonly touchCount: number;



    GetAxisRaw(axisName: string): number;
    GetButtonDown(buttonName: string): boolean;
    GetMouseButton(button: number): boolean;
    GetMouseButtonDown(button: number): boolean;
    GetMouseButtonUp(button: number): boolean;
    GetTouch(index: number): Touch;


}
    
interface BaseInputConstructor {


    new(): BaseInput;



}
declare const BaseInput: BaseInputConstructor;
    
interface PointerEventData extends BaseEventData {
    hovered: Readonly<GameObject[]>;
    pointerEnter: GameObject;
    readonly lastPress: GameObject;
    rawPointerPress: GameObject;
    pointerDrag: GameObject;
    pointerClick: GameObject;
    pointerCurrentRaycast: RaycastResult;
    pointerPressRaycast: RaycastResult;
    eligibleForClick: boolean;
    displayIndex: number;
    pointerId: number;
    position: Vector2;
    delta: Vector2;
    pressPosition: Vector2;
    clickTime: number;
    clickCount: number;
    scrollDelta: Vector2;
    useDragThreshold: boolean;
    dragging: boolean;
    button: InputButton;
    pressure: number;
    tangentialPressure: number;
    altitudeAngle: number;
    azimuthAngle: number;
    twist: number;
    tilt: Vector2;
    penStatus: PenStatus;
    radius: Vector2;
    radiusVariance: Vector2;
    fullyExited: boolean;
    reentered: boolean;
    readonly enterEventCamera: Camera;
    readonly pressEventCamera: Camera;
    pointerPress: GameObject;



    IsPointerMoving(): boolean;
    IsScrolling(): boolean;
    ToString(): string;


}
    
interface RaycastResult {
    module: BaseRaycaster;
    distance: number;
    index: number;
    depth: number;
    sortingGroupID: number;
    sortingGroupOrder: number;
    sortingLayer: number;
    sortingOrder: number;
    worldPosition: Vector3;
    worldNormal: Vector3;
    screenPosition: Vector2;
    displayIndex: number;
    gameObject: GameObject;
    readonly isValid: boolean;



    Clear(): void;
    ToString(): string;


}
    
interface BaseRaycaster extends UIBehaviour {
    readonly eventCamera: Camera;
    readonly sortOrderPriority: number;
    readonly renderOrderPriority: number;
    readonly rootRaycaster: BaseRaycaster;



    Raycast(eventData: PointerEventData, resultAppendList: Readonly<RaycastResult[]>): void;
    ToString(): string;


}
    
interface PointerEventDataConstructor {


    new(eventSystem: EventSystem): PointerEventData;



}
declare const PointerEventData: PointerEventDataConstructor;
    
interface BaseEventDataConstructor {


    new(eventSystem: EventSystem): BaseEventData;



}
declare const BaseEventData: BaseEventDataConstructor;
    
interface IPointerClickHandler extends IEventSystemHandler {



    OnPointerClick(eventData: PointerEventData): void;


}
    
interface IPointerEnterHandler extends IEventSystemHandler {



    OnPointerEnter(eventData: PointerEventData): void;


}
    
interface ISelectHandler extends IEventSystemHandler {



    OnSelect(eventData: BaseEventData): void;


}
    
interface IPointerExitHandler extends IEventSystemHandler {



    OnPointerExit(eventData: PointerEventData): void;


}
    
interface IDeselectHandler extends IEventSystemHandler {



    OnDeselect(eventData: BaseEventData): void;


}
    
interface IPointerDownHandler extends IEventSystemHandler {



    OnPointerDown(eventData: PointerEventData): void;


}
    
interface IPointerUpHandler extends IEventSystemHandler {



    OnPointerUp(eventData: PointerEventData): void;


}
    
interface IMoveHandler extends IEventSystemHandler {



    OnMove(eventData: AxisEventData): void;


}
    
interface AxisEventData extends BaseEventData {
    moveVector: Vector2;
    moveDir: MoveDirection;





}
    
interface AxisEventDataConstructor {


    new(eventSystem: EventSystem): AxisEventData;



}
declare const AxisEventData: AxisEventDataConstructor;
    
interface Selectable extends UIBehaviour, IPointerEnterHandler, ISelectHandler, IPointerExitHandler, IDeselectHandler, IPointerDownHandler, IPointerUpHandler, IMoveHandler {
    navigation: Navigation;
    transition: Transition;
    colors: ColorBlock;
    spriteState: SpriteState;
    animationTriggers: AnimationTriggers;
    targetGraphic: Graphic;
    interactable: boolean;
    image: Image;
    readonly animator: Animator;



    FindSelectable(dir: Vector3): Selectable;
    FindSelectableOnDown(): Selectable;
    FindSelectableOnLeft(): Selectable;
    FindSelectableOnRight(): Selectable;
    FindSelectableOnUp(): Selectable;
    IsInteractable(): boolean;
    OnDeselect(eventData: BaseEventData): void;
    OnMove(eventData: AxisEventData): void;
    OnPointerDown(eventData: PointerEventData): void;
    OnPointerEnter(eventData: PointerEventData): void;
    OnPointerExit(eventData: PointerEventData): void;
    OnPointerUp(eventData: PointerEventData): void;
    OnSelect(eventData: BaseEventData): void;
    Select(): void;


}
    
interface Navigation {
    mode: Mode;
    wrapAround: boolean;
    selectOnUp: Selectable;
    selectOnDown: Selectable;
    selectOnLeft: Selectable;
    selectOnRight: Selectable;



    Equals(other: Navigation): boolean;


}
    
interface NavigationConstructor {
    readonly defaultNavigation: Navigation;





}
declare const Navigation: NavigationConstructor;
    
interface ColorBlock {
    normalColor: Color;
    highlightedColor: Color;
    pressedColor: Color;
    selectedColor: Color;
    disabledColor: Color;
    colorMultiplier: number;
    fadeDuration: number;



    Equals(obj: unknown): boolean;
    Equals(other: ColorBlock): boolean;
    GetHashCode(): number;


}
    
interface ColorBlockConstructor {
    defaultColorBlock: ColorBlock;





}
declare const ColorBlock: ColorBlockConstructor;
    
interface SpriteState {
    highlightedSprite: Sprite;
    pressedSprite: Sprite;
    selectedSprite: Sprite;
    disabledSprite: Sprite;



    Equals(other: SpriteState): boolean;


}
    
interface AnimationTriggers {
    normalTrigger: string;
    highlightedTrigger: string;
    pressedTrigger: string;
    selectedTrigger: string;
    disabledTrigger: string;





}
    
interface AnimationTriggersConstructor {


    new(): AnimationTriggers;



}
declare const AnimationTriggers: AnimationTriggersConstructor;
    
interface ICanvasElement {
    readonly transform: Transform;



    GraphicUpdateComplete(): void;
    IsDestroyed(): boolean;
    LayoutComplete(): void;
    Rebuild(executing: CanvasUpdate): void;


}
    
interface Graphic extends UIBehaviour, ICanvasElement {
    color: Color;
    raycastTarget: boolean;
    raycastPadding: Vector4;
    readonly depth: number;
    readonly rectTransform: RectTransform;
    readonly canvas: Canvas;
    readonly canvasRenderer: CanvasRenderer;
    readonly defaultMaterial: Material;
    material: Material;
    readonly materialForRendering: Material;
    readonly mainTexture: Texture;



    CrossFadeAlpha(alpha: number, duration: number, ignoreTimeScale: boolean): void;
    CrossFadeColor(targetColor: Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean): void;
    CrossFadeColor(targetColor: Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean, useRGB: boolean): void;
    GetPixelAdjustedRect(): Rect;
    GraphicUpdateComplete(): void;
    LayoutComplete(): void;
    OnCullingChanged(): void;
    OnRebuildRequested(): void;
    PixelAdjustPoint(point: Vector2): Vector2;
    Raycast(sp: Vector2, eventCamera: Camera): boolean;
    Rebuild(update: CanvasUpdate): void;
    RegisterDirtyLayoutCallback(action: UnityAction): void;
    RegisterDirtyMaterialCallback(action: UnityAction): void;
    RegisterDirtyVerticesCallback(action: UnityAction): void;
    SetAllDirty(): void;
    SetLayoutDirty(): void;
    SetMaterialDirty(): void;
    SetNativeSize(): void;
    SetRaycastDirty(): void;
    SetVerticesDirty(): void;
    UnregisterDirtyLayoutCallback(action: UnityAction): void;
    UnregisterDirtyMaterialCallback(action: UnityAction): void;
    UnregisterDirtyVerticesCallback(action: UnityAction): void;


}
    
interface RectTransform extends Transform {
    /**
     * The calculated rectangle in the local space of the Transform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform-rect.html | RectTransform.rect}
     */
    readonly rect: Rect;
    /**
     * The normalized position in the parent RectTransform that the lower left corner is anchored to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform-anchorMin.html | RectTransform.anchorMin}
     */
    anchorMin: Vector2;
    /**
     * The normalized position in the parent RectTransform that the upper right corner is anchored to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform-anchorMax.html | RectTransform.anchorMax}
     */
    anchorMax: Vector2;
    /**
     * The position of the pivot of this RectTransform relative to the anchor reference point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform-anchoredPosition.html | RectTransform.anchoredPosition}
     */
    anchoredPosition: Vector2;
    /**
     * The size of this RectTransform relative to the distances between the anchors.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform-sizeDelta.html | RectTransform.sizeDelta}
     */
    sizeDelta: Vector2;
    /**
     * The normalized position in this RectTransform that it rotates around.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform-pivot.html | RectTransform.pivot}
     */
    pivot: Vector2;
    /**
     * The 3D position of the pivot of this RectTransform relative to the anchor reference point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform-anchoredPosition3D.html | RectTransform.anchoredPosition3D}
     */
    anchoredPosition3D: Vector3;
    /**
     * The offset of the lower left corner of the rectangle relative to the lower left anchor.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform-offsetMin.html | RectTransform.offsetMin}
     */
    offsetMin: Vector2;
    /**
     * The offset of the upper right corner of the rectangle relative to the upper right anchor.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform-offsetMax.html | RectTransform.offsetMax}
     */
    offsetMax: Vector2;
    /**
     * The object that is driving the values of this RectTransform. Value is null if not driven.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform-drivenByObject.html | RectTransform.drivenByObject}
     */
    readonly drivenByObject: Object;



    /**
     * Force the recalculation of RectTransforms internal data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform.ForceUpdateRectTransforms.html | RectTransform.ForceUpdateRectTransforms}
     */
    ForceUpdateRectTransforms(): void;
    /**
     * Get the corners of the calculated rectangle in the local space of its Transform.
     * @param fourCornersArray The array that corners are filled into.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform.GetLocalCorners.html | RectTransform.GetLocalCorners}
     */
    GetLocalCorners(fourCornersArray: Readonly<Vector3[]>): void;
    /**
     * Get the corners of the calculated rectangle in world space.
     * @param fourCornersArray The array that corners are filled into.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectTransform.GetWorldCorners.html | RectTransform.GetWorldCorners}
     */
    GetWorldCorners(fourCornersArray: Readonly<Vector3[]>): void;
    SetInsetAndSizeFromParentEdge(edge: Edge, inset: number, size: number): void;
    SetSizeWithCurrentAnchors(axis: Axis, size: number): void;


}
    
interface RectTransformConstructor {


    new(): RectTransform;



    readonly reapplyDrivenProperties: MonoSignal<void>;
}
declare const RectTransform: RectTransformConstructor;
    
interface Canvas extends Behaviour {
    /**
     * Is the Canvas in World or Overlay mode?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-renderMode.html | Canvas.renderMode}
     */
    renderMode: RenderMode;
    /**
     * Is this the root Canvas?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-isRootCanvas.html | Canvas.isRootCanvas}
     */
    readonly isRootCanvas: boolean;
    /**
     * Get the render rect for the Canvas.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-pixelRect.html | Canvas.pixelRect}
     */
    readonly pixelRect: Rect;
    /**
     * Scales the entire canvas, ensuring it fits the screen. It only applies when Canvas.renderMode is set to Screen Space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-scaleFactor.html | Canvas.scaleFactor}
     */
    scaleFactor: number;
    /**
     * The number of pixels per unit that is considered the default.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-referencePixelsPerUnit.html | Canvas.referencePixelsPerUnit}
     */
    referencePixelsPerUnit: number;
    /**
     * Allows for nested canvases to override pixelPerfect settings inherited from parent canvases.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-overridePixelPerfect.html | Canvas.overridePixelPerfect}
     */
    overridePixelPerfect: boolean;
    /**
     * Should the Canvas vertex color always be in gamma space before passing to the UI shaders in linear color space work flow.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-vertexColorAlwaysGammaSpace.html | Canvas.vertexColorAlwaysGammaSpace}
     */
    vertexColorAlwaysGammaSpace: boolean;
    /**
     * Forces pixel alignment for elements in the canvas. It only applies when Canvas.renderMode is set to Screen Space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-pixelPerfect.html | Canvas.pixelPerfect}
     */
    pixelPerfect: boolean;
    /**
     * How far away from the camera is the Canvas generated? It only applies when Canvas.renderMode is set to RenderMode.ScreenSpaceCamera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-planeDistance.html | Canvas.planeDistance}
     */
    planeDistance: number;
    /**
     * The render order in which the canvas is being emitted to the Scene. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-renderOrder.html | Canvas.renderOrder}
     */
    readonly renderOrder: number;
    /**
     * Allows for nested canvases to override the Canvas.sortingOrder from parent canvases.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-overrideSorting.html | Canvas.overrideSorting}
     */
    overrideSorting: boolean;
    /**
     * Canvas' order within a sorting layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-sortingOrder.html | Canvas.sortingOrder}
     */
    sortingOrder: number;
    /**
     * For Overlay mode, display index on which the UI canvas will appear.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-targetDisplay.html | Canvas.targetDisplay}
     */
    targetDisplay: number;
    /**
     * Unique ID of the Canvas' sorting layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-sortingLayerID.html | Canvas.sortingLayerID}
     */
    sortingLayerID: number;
    /**
     * Cached calculated value based upon SortingLayerID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-cachedSortingLayerValue.html | Canvas.cachedSortingLayerValue}
     */
    readonly cachedSortingLayerValue: number;
    /**
     * Get or set the mask of additional shader channels to be used when creating the Canvas mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-additionalShaderChannels.html | Canvas.additionalShaderChannels}
     */
    additionalShaderChannels: AdditionalCanvasShaderChannels;
    /**
     * Name of the Canvas' sorting layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-sortingLayerName.html | Canvas.sortingLayerName}
     */
    sortingLayerName: string;
    /**
     * Returns the Canvas closest to root, by checking through each parent and returning the last canvas found. If no other canvas is found then the canvas will return itself.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-rootCanvas.html | Canvas.rootCanvas}
     */
    readonly rootCanvas: Canvas;
    /**
     * Returns the canvas display size based on the selected render mode and target display.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-renderingDisplaySize.html | Canvas.renderingDisplaySize}
     */
    readonly renderingDisplaySize: Vector2;
    /**
     * Should the Canvas size be updated based on the render target when a manual Camera.Render call is performed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-updateRectTransformForStandalone.html | Canvas.updateRectTransformForStandalone}
     */
    updateRectTransformForStandalone: StandaloneRenderResize;
    /**
     * Camera used for sizing the Canvas when in Screen Space - Camera. Also used as the Camera that events will be sent through for a World Space Canvas.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-worldCamera.html | Canvas.worldCamera}
     */
    worldCamera: Camera;
    /**
     * The normalized grid size that the canvas will split the renderable area into.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Canvas-normalizedSortingGridSize.html | Canvas.normalizedSortingGridSize}
     */
    normalizedSortingGridSize: number;





}
    
interface CanvasConstructor {


    new(): Canvas;


    ForceUpdateCanvases(): void;
    GetDefaultCanvasMaterial(): Material;
    GetETC1SupportedCanvasMaterial(): Material;

    readonly preWillRenderCanvases: MonoSignal<void>;
    readonly willRenderCanvases: MonoSignal<void>;
}
declare const Canvas: CanvasConstructor;
    
interface CanvasRenderer extends Component {
    /**
     * Enable 'render stack' pop draw call.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer-hasPopInstruction.html | CanvasRenderer.hasPopInstruction}
     */
    hasPopInstruction: boolean;
    /**
     * The number of materials usable by this renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer-materialCount.html | CanvasRenderer.materialCount}
     */
    materialCount: number;
    /**
     * The number of materials usable by this renderer. Used internally for masking.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer-popMaterialCount.html | CanvasRenderer.popMaterialCount}
     */
    popMaterialCount: number;
    /**
     * Depth of the renderer relative to the root canvas.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer-absoluteDepth.html | CanvasRenderer.absoluteDepth}
     */
    readonly absoluteDepth: number;
    /**
     * True if any change has occured that would invalidate the positions of generated geometry.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer-hasMoved.html | CanvasRenderer.hasMoved}
     */
    readonly hasMoved: boolean;
    /**
     * Indicates whether geometry emitted by this renderer can be ignored when the vertex color alpha is close to zero for every vertex of the mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer-cullTransparentMesh.html | CanvasRenderer.cullTransparentMesh}
     */
    cullTransparentMesh: boolean;
    /**
     * True if rect clipping has been enabled on this renderer.
Additional resources: CanvasRenderer.EnableRectClipping, CanvasRenderer.DisableRectClipping.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer-hasRectClipping.html | CanvasRenderer.hasRectClipping}
     */
    readonly hasRectClipping: boolean;
    /**
     * Depth of the renderer realative to the parent canvas.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer-relativeDepth.html | CanvasRenderer.relativeDepth}
     */
    readonly relativeDepth: number;
    /**
     * Indicates whether geometry emitted by this renderer is ignored.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer-cull.html | CanvasRenderer.cull}
     */
    cull: boolean;
    /**
     * The clipping softness to apply to the renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer-clippingSoftness.html | CanvasRenderer.clippingSoftness}
     */
    clippingSoftness: Vector2;



    /**
     * Remove all cached vertices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.Clear.html | CanvasRenderer.Clear}
     */
    Clear(): void;
    /**
     * Disables rectangle clipping for this CanvasRenderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.DisableRectClipping.html | CanvasRenderer.DisableRectClipping}
     */
    DisableRectClipping(): void;
    /**
     * Enables rect clipping on the CanvasRendered. Geometry outside of the specified rect will be clipped (not rendered).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.EnableRectClipping.html | CanvasRenderer.EnableRectClipping}
     */
    EnableRectClipping(rect: Rect): void;
    /**
     * Get the current alpha of the renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.GetAlpha.html | CanvasRenderer.GetAlpha}
     */
    GetAlpha(): number;
    /**
     * Get the current color of the renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.GetColor.html | CanvasRenderer.GetColor}
     */
    GetColor(): Color;
    /**
     * Get the final inherited alpha calculated by including all the parent alphas from included parent CanvasGroups.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.GetInheritedAlpha.html | CanvasRenderer.GetInheritedAlpha}
     */
    GetInheritedAlpha(): number;
    /**
     * Gets the current Material assigned to the CanvasRenderer.
     * @param index The material index to retrieve (0 if this parameter is omitted).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.GetMaterial.html | CanvasRenderer.GetMaterial}
     */
    GetMaterial(index: number): Material;
    /**
     * Gets the current Material assigned to the CanvasRenderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.GetMaterial.html | CanvasRenderer.GetMaterial}
     */
    GetMaterial(): Material;
    /**
     * Returns the current mesh used to render the canvas content into.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.GetMesh.html | CanvasRenderer.GetMesh}
     */
    GetMesh(): Mesh;
    /**
     * Gets the current Material assigned to the CanvasRenderer. Used internally for masking.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.GetPopMaterial.html | CanvasRenderer.GetPopMaterial}
     */
    GetPopMaterial(index: number): Material;
    /**
     * Set the alpha of the renderer. Will be multiplied with the UIVertex alpha and the Canvas alpha.
     * @param alpha Alpha.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.SetAlpha.html | CanvasRenderer.SetAlpha}
     */
    SetAlpha(alpha: number): void;
    /**
     * The Alpha Texture that will be passed to the Shader under the _AlphaTex property.
     * @param texture The Texture to be passed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.SetAlphaTexture.html | CanvasRenderer.SetAlphaTexture}
     */
    SetAlphaTexture(texture: Texture): void;
    /**
     * Set the color of the renderer. Will be multiplied with the UIVertex color and the Canvas color.
     * @param color Renderer multiply color.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.SetColor.html | CanvasRenderer.SetColor}
     */
    SetColor(color: Color): void;
    /**
     * Set the material for the canvas renderer. If a texture is specified then it will be used as the 'MainTex' instead of the material's 'MainTex'.
Additional resources: CanvasRenderer.materialCount, CanvasRenderer.SetTexture.
     * @param material Material for rendering.
     * @param index Material index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.SetMaterial.html | CanvasRenderer.SetMaterial}
     */
    SetMaterial(material: Material, index: number): void;
    /**
     * Set the material for the canvas renderer. If a texture is specified then it will be used as the 'MainTex' instead of the material's 'MainTex'.
Additional resources: CanvasRenderer.materialCount, CanvasRenderer.SetTexture.
     * @param material Material for rendering.
     * @param texture Material texture overide.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.SetMaterial.html | CanvasRenderer.SetMaterial}
     */
    SetMaterial(material: Material, texture: Texture): void;
    /**
     * Sets the Mesh used by this renderer. Note the Mesh must be read/write enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.SetMesh.html | CanvasRenderer.SetMesh}
     */
    SetMesh(mesh: Mesh): void;
    /**
     * Set the material for the canvas renderer. Used internally for masking.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.SetPopMaterial.html | CanvasRenderer.SetPopMaterial}
     */
    SetPopMaterial(material: Material, index: number): void;
    /**
     * Sets the texture used by this renderer's material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasRenderer.SetTexture.html | CanvasRenderer.SetTexture}
     */
    SetTexture(texture: Texture): void;


}
    
interface UIVertex {
    position: Vector3;
    normal: Vector3;
    tangent: Vector4;
    color: Color32;
    uv0: Vector4;
    uv1: Vector4;
    uv2: Vector4;
    uv3: Vector4;





}
    
interface UIVertexConstructor {
    simpleVert: UIVertex;





}
declare const UIVertex: UIVertexConstructor;
    
interface CanvasRendererConstructor {


    new(): CanvasRenderer;


    AddUIVertexStream(verts: Readonly<UIVertex[]>, positions: Readonly<Vector3[]>, colors: Readonly<Color32[]>, uv0S: Readonly<Vector4[]>, uv1S: Readonly<Vector4[]>, normals: Readonly<Vector3[]>, tangents: Readonly<Vector4[]>): void;
    AddUIVertexStream(verts: Readonly<UIVertex[]>, positions: Readonly<Vector3[]>, colors: Readonly<Color32[]>, uv0S: Readonly<Vector4[]>, uv1S: Readonly<Vector4[]>, uv2S: Readonly<Vector4[]>, uv3S: Readonly<Vector4[]>, normals: Readonly<Vector3[]>, tangents: Readonly<Vector4[]>): void;
    CreateUIVertexStream(verts: Readonly<UIVertex[]>, positions: Readonly<Vector3[]>, colors: Readonly<Color32[]>, uv0S: Readonly<Vector4[]>, uv1S: Readonly<Vector4[]>, normals: Readonly<Vector3[]>, tangents: Readonly<Vector4[]>, indices: Readonly<number[]>): void;
    CreateUIVertexStream(verts: Readonly<UIVertex[]>, positions: Readonly<Vector3[]>, colors: Readonly<Color32[]>, uv0S: Readonly<Vector4[]>, uv1S: Readonly<Vector4[]>, uv2S: Readonly<Vector4[]>, uv3S: Readonly<Vector4[]>, normals: Readonly<Vector3[]>, tangents: Readonly<Vector4[]>, indices: Readonly<number[]>): void;
    SplitUIVertexStreams(verts: Readonly<UIVertex[]>, positions: Readonly<Vector3[]>, colors: Readonly<Color32[]>, uv0S: Readonly<Vector4[]>, uv1S: Readonly<Vector4[]>, normals: Readonly<Vector3[]>, tangents: Readonly<Vector4[]>, indices: Readonly<number[]>): void;
    SplitUIVertexStreams(verts: Readonly<UIVertex[]>, positions: Readonly<Vector3[]>, colors: Readonly<Color32[]>, uv0S: Readonly<Vector4[]>, uv1S: Readonly<Vector4[]>, uv2S: Readonly<Vector4[]>, uv3S: Readonly<Vector4[]>, normals: Readonly<Vector3[]>, tangents: Readonly<Vector4[]>, indices: Readonly<number[]>): void;

    readonly onRequestRebuild: MonoSignal<void>;
}
declare const CanvasRenderer: CanvasRendererConstructor;
    
interface UnityAction extends MulticastDelegate {



    BeginInvoke(callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): void;
    Invoke(): void;


}
    
interface UnityActionConstructor {


    new(object: unknown, method: IntPtr): UnityAction;



}
declare const UnityAction: UnityActionConstructor;
    
interface GraphicConstructor {
    readonly defaultGraphicMaterial: Material;





}
declare const Graphic: GraphicConstructor;
    
interface ISerializationCallbackReceiver {



    /**
     * Implement this callback to transform data back into runtime data types after an object is deserialized.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ISerializationCallbackReceiver.OnAfterDeserialize.html | ISerializationCallbackReceiver.OnAfterDeserialize}
     */
    OnAfterDeserialize(): void;
    /**
     * Implement this callback to transform data into serializable data types immediately before an object is serialized.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ISerializationCallbackReceiver.OnBeforeSerialize.html | ISerializationCallbackReceiver.OnBeforeSerialize}
     */
    OnBeforeSerialize(): void;


}
    
interface ICanvasRaycastFilter {



    /**
     * Given a point and a camera is the raycast valid.
     * @param sp Screen position.
     * @param eventCamera Raycast camera.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ICanvasRaycastFilter.IsRaycastLocationValid.html | ICanvasRaycastFilter.IsRaycastLocationValid}
     */
    IsRaycastLocationValid(sp: Vector2, eventCamera: Camera): boolean;


}
    
interface ILayoutElement {
    readonly minWidth: number;
    readonly preferredWidth: number;
    readonly flexibleWidth: number;
    readonly minHeight: number;
    readonly preferredHeight: number;
    readonly flexibleHeight: number;
    readonly layoutPriority: number;



    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;


}
    
interface IClippable {
    readonly gameObject: GameObject;
    readonly rectTransform: RectTransform;



    Cull(clipRect: Rect, validRect: boolean): void;
    RecalculateClipping(): void;
    SetClipRect(value: Rect, validRect: boolean): void;
    SetClipSoftness(clipSoftness: Vector2): void;


}
    
interface IMaterialModifier {



    GetModifiedMaterial(baseMaterial: Material): Material;


}
    
interface IMaskable {



    RecalculateMasking(): void;


}
    
interface MaskableGraphic extends Graphic, IClippable, IMaterialModifier, IMaskable {
    maskable: boolean;
    isMaskingGraphic: boolean;

    readonly onCullStateChanged: MonoSignal<void>;


    Cull(clipRect: Rect, validRect: boolean): void;
    GetModifiedMaterial(baseMaterial: Material): Material;
    RecalculateClipping(): void;
    RecalculateMasking(): void;
    SetClipRect(clipRect: Rect, validRect: boolean): void;
    SetClipSoftness(clipSoftness: Vector2): void;


}
    
interface Image extends MaskableGraphic, ISerializationCallbackReceiver, ICanvasRaycastFilter, ILayoutElement {
    sprite: Sprite;
    overrideSprite: Sprite;
    type: Type;
    preserveAspect: boolean;
    fillCenter: boolean;
    fillMethod: FillMethod;
    fillAmount: number;
    fillClockwise: boolean;
    fillOrigin: number;
    alphaHitTestMinimumThreshold: number;
    useSpriteMesh: boolean;
    readonly mainTexture: Texture;
    readonly hasBorder: boolean;
    pixelsPerUnitMultiplier: number;
    readonly pixelsPerUnit: number;
    material: Material;
    readonly minWidth: number;
    readonly preferredWidth: number;
    readonly flexibleWidth: number;
    readonly minHeight: number;
    readonly preferredHeight: number;
    readonly flexibleHeight: number;
    readonly layoutPriority: number;



    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    DisableSpriteOptimizations(): void;
    IsRaycastLocationValid(screenPoint: Vector2, eventCamera: Camera): boolean;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    SetNativeSize(): void;


}
    
interface ImageConstructor {
    readonly defaultETC1GraphicMaterial: Material;





}
declare const Image: ImageConstructor;
    
interface Animator extends Behaviour {
    /**
     * Returns true if the current rig is optimizable with AnimatorUtility.OptimizeTransformHierarchy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-isOptimizable.html | Animator.isOptimizable}
     */
    readonly isOptimizable: boolean;
    /**
     * Returns true if the current rig is humanoid, false if it is generic.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-isHuman.html | Animator.isHuman}
     */
    readonly isHuman: boolean;
    /**
     * Returns true if the current rig has root motion.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-hasRootMotion.html | Animator.hasRootMotion}
     */
    readonly hasRootMotion: boolean;
    /**
     * Returns the scale of the current Avatar for a humanoid rig, (1 by default if the rig is generic).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-humanScale.html | Animator.humanScale}
     */
    readonly humanScale: number;
    /**
     * Returns whether the animator is initialized successfully.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-isInitialized.html | Animator.isInitialized}
     */
    readonly isInitialized: boolean;
    /**
     * Gets the avatar delta position for the last evaluated frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-deltaPosition.html | Animator.deltaPosition}
     */
    readonly deltaPosition: Vector3;
    /**
     * Gets the avatar delta rotation for the last evaluated frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-deltaRotation.html | Animator.deltaRotation}
     */
    readonly deltaRotation: Quaternion;
    /**
     * Gets the avatar velocity  for the last evaluated frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-velocity.html | Animator.velocity}
     */
    readonly velocity: Vector3;
    /**
     * Gets the avatar angular velocity for the last evaluated frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-angularVelocity.html | Animator.angularVelocity}
     */
    readonly angularVelocity: Vector3;
    /**
     * The root position, the position of the game object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-rootPosition.html | Animator.rootPosition}
     */
    rootPosition: Vector3;
    /**
     * The root rotation, the rotation of the game object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-rootRotation.html | Animator.rootRotation}
     */
    rootRotation: Quaternion;
    /**
     * Should root motion be applied?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-applyRootMotion.html | Animator.applyRootMotion}
     */
    applyRootMotion: boolean;
    /**
     * When enabled, the physics system uses animated transforms from GameObjects with kinematic Rigidbody components to influence other GameObjects.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-animatePhysics.html | Animator.animatePhysics}
     */
    animatePhysics: boolean;
    /**
     * Specifies the update mode of the Animator.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-updateMode.html | Animator.updateMode}
     */
    updateMode: AnimatorUpdateMode;
    /**
     * Returns true if the object has a transform hierarchy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-hasTransformHierarchy.html | Animator.hasTransformHierarchy}
     */
    readonly hasTransformHierarchy: boolean;
    /**
     * The current gravity weight based on current animations that are played.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-gravityWeight.html | Animator.gravityWeight}
     */
    readonly gravityWeight: number;
    /**
     * The position of the body center of mass.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-bodyPosition.html | Animator.bodyPosition}
     */
    bodyPosition: Vector3;
    /**
     * The rotation of the body center of mass.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-bodyRotation.html | Animator.bodyRotation}
     */
    bodyRotation: Quaternion;
    /**
     * Automatic stabilization of feet during transition and blending.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-stabilizeFeet.html | Animator.stabilizeFeet}
     */
    stabilizeFeet: boolean;
    /**
     * Returns the number of layers in the controller.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-layerCount.html | Animator.layerCount}
     */
    readonly layerCount: number;
    /**
     * The AnimatorControllerParameter list used by the animator. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-parameters.html | Animator.parameters}
     */
    readonly parameters: Readonly<AnimatorControllerParameter[]>;
    /**
     * Returns the number of parameters in the controller.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-parameterCount.html | Animator.parameterCount}
     */
    readonly parameterCount: number;
    /**
     * Blends pivot point between body center of mass and feet pivot.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-feetPivotActive.html | Animator.feetPivotActive}
     */
    feetPivotActive: number;
    /**
     * Gets the pivot weight.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-pivotWeight.html | Animator.pivotWeight}
     */
    readonly pivotWeight: number;
    /**
     * Get the current position of the pivot.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-pivotPosition.html | Animator.pivotPosition}
     */
    readonly pivotPosition: Vector3;
    /**
     * If automatic matching is active.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-isMatchingTarget.html | Animator.isMatchingTarget}
     */
    readonly isMatchingTarget: boolean;
    /**
     * The playback speed of the Animator. 1 is normal playback speed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-speed.html | Animator.speed}
     */
    speed: number;
    /**
     * Returns the position of the target specified by SetTarget.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-targetPosition.html | Animator.targetPosition}
     */
    readonly targetPosition: Vector3;
    /**
     * Returns the rotation of the target specified by SetTarget.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-targetRotation.html | Animator.targetRotation}
     */
    readonly targetRotation: Quaternion;
    /**
     * Returns the Avatar root Transform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-avatarRoot.html | Animator.avatarRoot}
     */
    readonly avatarRoot: Transform;
    /**
     * Controls culling of this Animator component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-cullingMode.html | Animator.cullingMode}
     */
    cullingMode: AnimatorCullingMode;
    /**
     * Sets the playback position in the recording buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-playbackTime.html | Animator.playbackTime}
     */
    playbackTime: number;
    /**
     * Start time of the first frame of the buffer relative to the frame at which StartRecording was called.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-recorderStartTime.html | Animator.recorderStartTime}
     */
    recorderStartTime: number;
    /**
     * End time of the recorded clip relative to when StartRecording was called.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-recorderStopTime.html | Animator.recorderStopTime}
     */
    recorderStopTime: number;
    /**
     * Gets the mode of the Animator recorder.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-recorderMode.html | Animator.recorderMode}
     */
    readonly recorderMode: AnimatorRecorderMode;
    /**
     * The runtime representation of AnimatorController that controls the Animator.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-runtimeAnimatorController.html | Animator.runtimeAnimatorController}
     */
    runtimeAnimatorController: RuntimeAnimatorController;
    /**
     * Returns true if Animator has any playables assigned to it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-hasBoundPlayables.html | Animator.hasBoundPlayables}
     */
    readonly hasBoundPlayables: boolean;
    /**
     * Gets/Sets the current Avatar.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-avatar.html | Animator.avatar}
     */
    avatar: Avatar;
    /**
     * The PlayableGraph created by the Animator.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-playableGraph.html | Animator.playableGraph}
     */
    readonly playableGraph: PlayableGraph;
    /**
     * Additional layers affects the center of mass.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-layersAffectMassCenter.html | Animator.layersAffectMassCenter}
     */
    layersAffectMassCenter: boolean;
    /**
     * Get left foot bottom height.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-leftFeetBottomHeight.html | Animator.leftFeetBottomHeight}
     */
    readonly leftFeetBottomHeight: number;
    /**
     * Get right foot bottom height.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-rightFeetBottomHeight.html | Animator.rightFeetBottomHeight}
     */
    readonly rightFeetBottomHeight: number;
    logWarnings: boolean;
    /**
     * Sets whether the Animator sends events of type AnimationEvent.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-fireEvents.html | Animator.fireEvents}
     */
    fireEvents: boolean;
    /**
     * Controls the behaviour of the Animator component when a GameObject is inactive.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-keepAnimatorStateOnDisable.html | Animator.keepAnimatorStateOnDisable}
     */
    keepAnimatorStateOnDisable: boolean;
    /**
     * Specifies whether playable graph values are reset or preserved when the Animator is disabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator-writeDefaultValuesOnDisable.html | Animator.writeDefaultValuesOnDisable}
     */
    writeDefaultValuesOnDisable: boolean;



    /**
     * Apply the default Root Motion.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.ApplyBuiltinRootMotion.html | Animator.ApplyBuiltinRootMotion}
     */
    ApplyBuiltinRootMotion(): void;
    CrossFade(stateName: string, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number): void;
    CrossFade(stateName: string, normalizedTransitionDuration: number, layer: number): void;
    CrossFade(stateName: string, normalizedTransitionDuration: number): void;
    /**
     * Creates a crossfade from the current state to any other state using normalized times.
     * @param stateName The name of the state.
     * @param normalizedTransitionDuration The duration of the transition (normalized).
     * @param layer The layer where the crossfade occurs.
     * @param normalizedTimeOffset The time of the state (normalized).
     * @param normalizedTransitionTime The time of the transition (normalized).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.CrossFade.html | Animator.CrossFade}
     */
    CrossFade(stateName: string, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number, normalizedTransitionTime: number): void;
    /**
     * Creates a crossfade from the current state to any other state using normalized times.
     * @param stateHashName The hash name of the state.
     * @param normalizedTransitionDuration The duration of the transition (normalized).
     * @param layer The layer where the crossfade occurs.
     * @param normalizedTimeOffset The time of the state (normalized).
     * @param normalizedTransitionTime The time of the transition (normalized).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.CrossFade.html | Animator.CrossFade}
     */
    CrossFade(stateHashName: number, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number, normalizedTransitionTime: number): void;
    CrossFade(stateHashName: number, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number): void;
    CrossFade(stateHashName: number, normalizedTransitionDuration: number, layer: number): void;
    CrossFade(stateHashName: number, normalizedTransitionDuration: number): void;
    CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number): void;
    CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number, layer: number): void;
    CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number): void;
    /**
     * Creates a crossfade from the current state to any other state using times in seconds.
     * @param stateName The name of the state.
     * @param fixedTransitionDuration The duration of the transition (in seconds).
     * @param layer The layer where the crossfade occurs.
     * @param fixedTimeOffset The time of the state (in seconds).
     * @param normalizedTransitionTime The time of the transition (normalized).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.CrossFadeInFixedTime.html | Animator.CrossFadeInFixedTime}
     */
    CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number, normalizedTransitionTime: number): void;
    CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number): void;
    CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number, layer: number): void;
    CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number): void;
    /**
     * Creates a crossfade from the current state to any other state using times in seconds.
     * @param stateHashName The hash name of the state.
     * @param fixedTransitionDuration The duration of the transition (in seconds).
     * @param layer The layer where the crossfade occurs.
     * @param fixedTimeOffset The time of the state (in seconds).
     * @param normalizedTransitionTime The time of the transition (normalized).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.CrossFadeInFixedTime.html | Animator.CrossFadeInFixedTime}
     */
    CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number, normalizedTransitionTime: number): void;
    /**
     * Returns an AnimatorTransitionInfo with the informations on the current transition.
     * @param layerIndex The layer's index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetAnimatorTransitionInfo.html | Animator.GetAnimatorTransitionInfo}
     */
    GetAnimatorTransitionInfo(layerIndex: number): AnimatorTransitionInfo;
    /**
     * Returns the first StateMachineBehaviour that matches type T or is derived from T. Returns null if none are found.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetBehaviour.html | Animator.GetBehaviour}
     */
    GetBehaviour<T extends StateMachineBehaviour>(): T;
    /**
     * Returns all StateMachineBehaviour that match type T or are derived from T. Returns null if none are found.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetBehaviours.html | Animator.GetBehaviours}
     */
    GetBehaviours<T extends StateMachineBehaviour>(): Readonly<T[]>;
    GetBehaviours(fullPathHash: number, layerIndex: number): Readonly<StateMachineBehaviour[]>;
    /**
     * Retrieves the Transform mapped to a human bone based on its id.
     * @param humanBoneId The human bone to be queried. See the HumanBodyBones enum for a list of possible values.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetBoneTransform.html | Animator.GetBoneTransform}
     */
    GetBoneTransform(humanBoneId: HumanBodyBones): Transform;
    /**
     * Returns the value of the given boolean parameter.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetBool.html | Animator.GetBool}
     */
    GetBool(name: string): boolean;
    /**
     * Returns the value of the given boolean parameter.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetBool.html | Animator.GetBool}
     */
    GetBool(id: number): boolean;
    /**
     * Returns an array of all the AnimatorClipInfo in the current state of the given layer.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetCurrentAnimatorClipInfo.html | Animator.GetCurrentAnimatorClipInfo}
     */
    GetCurrentAnimatorClipInfo(layerIndex: number): Readonly<AnimatorClipInfo[]>;
    GetCurrentAnimatorClipInfo(layerIndex: number, clips: Readonly<AnimatorClipInfo[]>): void;
    /**
     * Returns the number of AnimatorClipInfo in the current state.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetCurrentAnimatorClipInfoCount.html | Animator.GetCurrentAnimatorClipInfoCount}
     */
    GetCurrentAnimatorClipInfoCount(layerIndex: number): number;
    /**
     * Returns an AnimatorStateInfo with the information on the current state.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetCurrentAnimatorStateInfo.html | Animator.GetCurrentAnimatorStateInfo}
     */
    GetCurrentAnimatorStateInfo(layerIndex: number): AnimatorStateInfo;
    /**
     * Returns the value of the given float parameter.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetFloat.html | Animator.GetFloat}
     */
    GetFloat(name: string): number;
    /**
     * Returns the value of the given float parameter.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetFloat.html | Animator.GetFloat}
     */
    GetFloat(id: number): number;
    /**
     * Gets the position of an IK hint.
     * @param hint The AvatarIKHint that is queried.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetIKHintPosition.html | Animator.GetIKHintPosition}
     */
    GetIKHintPosition(hint: AvatarIKHint): Vector3;
    /**
     * Gets the translative weight of an IK Hint (0 = at the original animation before IK, 1 = at the hint).
     * @param hint The AvatarIKHint that is queried.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetIKHintPositionWeight.html | Animator.GetIKHintPositionWeight}
     */
    GetIKHintPositionWeight(hint: AvatarIKHint): number;
    /**
     * Gets the position of an IK goal.
     * @param goal The AvatarIKGoal that is queried.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetIKPosition.html | Animator.GetIKPosition}
     */
    GetIKPosition(goal: AvatarIKGoal): Vector3;
    /**
     * Gets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).
     * @param goal The AvatarIKGoal that is queried.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetIKPositionWeight.html | Animator.GetIKPositionWeight}
     */
    GetIKPositionWeight(goal: AvatarIKGoal): number;
    /**
     * Gets the rotation of an IK goal.
     * @param goal The AvatarIKGoal that is is queried.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetIKRotation.html | Animator.GetIKRotation}
     */
    GetIKRotation(goal: AvatarIKGoal): Quaternion;
    /**
     * Gets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).
     * @param goal The AvatarIKGoal that is queried.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetIKRotationWeight.html | Animator.GetIKRotationWeight}
     */
    GetIKRotationWeight(goal: AvatarIKGoal): number;
    /**
     * Returns the value of the given integer parameter.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetInteger.html | Animator.GetInteger}
     */
    GetInteger(name: string): number;
    /**
     * Returns the value of the given integer parameter.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetInteger.html | Animator.GetInteger}
     */
    GetInteger(id: number): number;
    /**
     * Returns the index of the layer with the given name.
     * @param layerName The layer name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetLayerIndex.html | Animator.GetLayerIndex}
     */
    GetLayerIndex(layerName: string): number;
    /**
     * Returns the layer name.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetLayerName.html | Animator.GetLayerName}
     */
    GetLayerName(layerIndex: number): string;
    /**
     * Returns the weight of the layer at the specified index.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetLayerWeight.html | Animator.GetLayerWeight}
     */
    GetLayerWeight(layerIndex: number): number;
    /**
     * Returns an array of all the AnimatorClipInfo in the next state of the given layer.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetNextAnimatorClipInfo.html | Animator.GetNextAnimatorClipInfo}
     */
    GetNextAnimatorClipInfo(layerIndex: number): Readonly<AnimatorClipInfo[]>;
    GetNextAnimatorClipInfo(layerIndex: number, clips: Readonly<AnimatorClipInfo[]>): void;
    /**
     * Returns the number of AnimatorClipInfo in the next state.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetNextAnimatorClipInfoCount.html | Animator.GetNextAnimatorClipInfoCount}
     */
    GetNextAnimatorClipInfoCount(layerIndex: number): number;
    /**
     * Returns an AnimatorStateInfo with the information on the next state.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetNextAnimatorStateInfo.html | Animator.GetNextAnimatorStateInfo}
     */
    GetNextAnimatorStateInfo(layerIndex: number): AnimatorStateInfo;
    /**
     * See AnimatorController.parameters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.GetParameter.html | Animator.GetParameter}
     */
    GetParameter(index: number): AnimatorControllerParameter;
    /**
     * Returns true if the state exists in this layer, false otherwise.
     * @param layerIndex The layer index.
     * @param stateID The state ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.HasState.html | Animator.HasState}
     */
    HasState(layerIndex: number, stateID: number): boolean;
    /**
     * Interrupts the automatic target matching.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.InterruptMatchTarget.html | Animator.InterruptMatchTarget}
     */
    InterruptMatchTarget(): void;
    /**
     * Interrupts the automatic target matching.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.InterruptMatchTarget.html | Animator.InterruptMatchTarget}
     */
    InterruptMatchTarget(completeMatch: boolean): void;
    /**
     * Returns true if there is a transition on the given layer, false otherwise.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.IsInTransition.html | Animator.IsInTransition}
     */
    IsInTransition(layerIndex: number): boolean;
    /**
     * Returns true if the parameter is controlled by a curve, false otherwise.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.IsParameterControlledByCurve.html | Animator.IsParameterControlledByCurve}
     */
    IsParameterControlledByCurve(name: string): boolean;
    /**
     * Returns true if the parameter is controlled by a curve, false otherwise.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.IsParameterControlledByCurve.html | Animator.IsParameterControlledByCurve}
     */
    IsParameterControlledByCurve(id: number): boolean;
    MatchTarget(matchPosition: Vector3, matchRotation: Quaternion, targetBodyPart: AvatarTarget, weightMask: MatchTargetWeightMask, startNormalizedTime: number): void;
    /**
     * Automatically adjust the GameObject position and rotation.
     * @param matchPosition The position we want the body part to reach.
     * @param matchRotation The rotation in which we want the body part to be.
     * @param targetBodyPart The body part that is involved in the match.
     * @param weightMask Structure that contains weights for matching position and rotation.
     * @param startNormalizedTime Start time within the animation clip (0 - beginning of clip, 1 - end of clip).
     * @param targetNormalizedTime End time within the animation clip (0 - beginning of clip, 1 - end of clip), values greater than 1 can be set to trigger a match after a certain number of loops. Ex: 2.3 means at 30% of 2nd loop.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.MatchTarget.html | Animator.MatchTarget}
     */
    MatchTarget(matchPosition: Vector3, matchRotation: Quaternion, targetBodyPart: AvatarTarget, weightMask: MatchTargetWeightMask, startNormalizedTime: number, targetNormalizedTime: number): void;
    MatchTarget(matchPosition: Vector3, matchRotation: Quaternion, targetBodyPart: AvatarTarget, weightMask: MatchTargetWeightMask, startNormalizedTime: number, targetNormalizedTime: number, completeMatch: boolean): void;
    Play(stateName: string, layer: number): void;
    Play(stateName: string): void;
    /**
     * Plays a state.
     * @param stateName The state name.
     * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
     * @param normalizedTime The time offset between zero and one.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.Play.html | Animator.Play}
     */
    Play(stateName: string, layer: number, normalizedTime: number): void;
    /**
     * Plays a state.
     * @param stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
     * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
     * @param normalizedTime The time offset between zero and one.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.Play.html | Animator.Play}
     */
    Play(stateNameHash: number, layer: number, normalizedTime: number): void;
    Play(stateNameHash: number, layer: number): void;
    Play(stateNameHash: number): void;
    PlayInFixedTime(stateName: string, layer: number): void;
    PlayInFixedTime(stateName: string): void;
    /**
     * Plays a state.
     * @param stateName The state name.
     * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
     * @param fixedTime The time offset (in seconds).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.PlayInFixedTime.html | Animator.PlayInFixedTime}
     */
    PlayInFixedTime(stateName: string, layer: number, fixedTime: number): void;
    /**
     * Plays a state.
     * @param stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
     * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
     * @param fixedTime The time offset (in seconds).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.PlayInFixedTime.html | Animator.PlayInFixedTime}
     */
    PlayInFixedTime(stateNameHash: number, layer: number, fixedTime: number): void;
    PlayInFixedTime(stateNameHash: number, layer: number): void;
    PlayInFixedTime(stateNameHash: number): void;
    /**
     * Rebind all the animated properties and mesh data with the Animator.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.Rebind.html | Animator.Rebind}
     */
    Rebind(): void;
    /**
     * Resets the value of the given trigger parameter.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.ResetTrigger.html | Animator.ResetTrigger}
     */
    ResetTrigger(name: string): void;
    /**
     * Resets the value of the given trigger parameter.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.ResetTrigger.html | Animator.ResetTrigger}
     */
    ResetTrigger(id: number): void;
    /**
     * Sets local rotation of a human bone during a IK pass.
     * @param humanBoneId The human bone Id.
     * @param rotation The local rotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetBoneLocalRotation.html | Animator.SetBoneLocalRotation}
     */
    SetBoneLocalRotation(humanBoneId: HumanBodyBones, rotation: Quaternion): void;
    /**
     * Sets the value of the given boolean parameter.
     * @param name The parameter name.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetBool.html | Animator.SetBool}
     */
    SetBool(name: string, value: boolean): void;
    /**
     * Sets the value of the given boolean parameter.
     * @param id The parameter ID.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetBool.html | Animator.SetBool}
     */
    SetBool(id: number, value: boolean): void;
    /**
     * Send float values to the Animator to affect transitions.
     * @param name The parameter name.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetFloat.html | Animator.SetFloat}
     */
    SetFloat(name: string, value: number): void;
    /**
     * Send float values to the Animator to affect transitions.
     * @param name The parameter name.
     * @param value The new parameter value.
     * @param dampTime The damper total time.
     * @param deltaTime The delta time to give to the damper.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetFloat.html | Animator.SetFloat}
     */
    SetFloat(name: string, value: number, dampTime: number, deltaTime: number): void;
    /**
     * Send float values to the Animator to affect transitions.
     * @param id The parameter ID.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetFloat.html | Animator.SetFloat}
     */
    SetFloat(id: number, value: number): void;
    /**
     * Send float values to the Animator to affect transitions.
     * @param id The parameter ID.
     * @param value The new parameter value.
     * @param dampTime The damper total time.
     * @param deltaTime The delta time to give to the damper.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetFloat.html | Animator.SetFloat}
     */
    SetFloat(id: number, value: number, dampTime: number, deltaTime: number): void;
    /**
     * Sets the position of an IK hint.
     * @param hint The AvatarIKHint that is set.
     * @param hintPosition The position in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetIKHintPosition.html | Animator.SetIKHintPosition}
     */
    SetIKHintPosition(hint: AvatarIKHint, hintPosition: Vector3): void;
    /**
     * Sets the translative weight of an IK hint (0 = at the original animation before IK, 1 = at the hint).
     * @param hint The AvatarIKHint that is set.
     * @param value The translative weight.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetIKHintPositionWeight.html | Animator.SetIKHintPositionWeight}
     */
    SetIKHintPositionWeight(hint: AvatarIKHint, value: number): void;
    /**
     * Sets the position of an IK goal.
     * @param goal The AvatarIKGoal that is set.
     * @param goalPosition The position in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetIKPosition.html | Animator.SetIKPosition}
     */
    SetIKPosition(goal: AvatarIKGoal, goalPosition: Vector3): void;
    /**
     * Sets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).
     * @param goal The AvatarIKGoal that is set.
     * @param value The translative weight.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetIKPositionWeight.html | Animator.SetIKPositionWeight}
     */
    SetIKPositionWeight(goal: AvatarIKGoal, value: number): void;
    /**
     * Sets the rotation of an IK goal.
     * @param goal The AvatarIKGoal that is set.
     * @param goalRotation The rotation of the goal in world space which should follow Unity's world coordinates convention (see below).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetIKRotation.html | Animator.SetIKRotation}
     */
    SetIKRotation(goal: AvatarIKGoal, goalRotation: Quaternion): void;
    /**
     * Sets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).
     * @param goal The AvatarIKGoal that is set.
     * @param value The rotational weight.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetIKRotationWeight.html | Animator.SetIKRotationWeight}
     */
    SetIKRotationWeight(goal: AvatarIKGoal, value: number): void;
    /**
     * Sets the value of the given integer parameter.
     * @param name The parameter name.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetInteger.html | Animator.SetInteger}
     */
    SetInteger(name: string, value: number): void;
    /**
     * Sets the value of the given integer parameter.
     * @param id The parameter ID.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetInteger.html | Animator.SetInteger}
     */
    SetInteger(id: number, value: number): void;
    /**
     * Sets the weight of the layer at the given index.
     * @param layerIndex The layer index.
     * @param weight The new layer weight.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetLayerWeight.html | Animator.SetLayerWeight}
     */
    SetLayerWeight(layerIndex: number, weight: number): void;
    /**
     * Sets the look at position.
     * @param lookAtPosition The position to lookAt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetLookAtPosition.html | Animator.SetLookAtPosition}
     */
    SetLookAtPosition(lookAtPosition: Vector3): void;
    /**
     * Set look at weights.
     * @param weight (0-1) the global weight of the LookAt, multiplier for other parameters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetLookAtWeight.html | Animator.SetLookAtWeight}
     */
    SetLookAtWeight(weight: number): void;
    /**
     * Set look at weights.
     * @param weight (0-1) the global weight of the LookAt, multiplier for other parameters.
     * @param bodyWeight (0-1) determines how much the body is involved in the LookAt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetLookAtWeight.html | Animator.SetLookAtWeight}
     */
    SetLookAtWeight(weight: number, bodyWeight: number): void;
    /**
     * Set look at weights.
     * @param weight (0-1) the global weight of the LookAt, multiplier for other parameters.
     * @param bodyWeight (0-1) determines how much the body is involved in the LookAt.
     * @param headWeight (0-1) determines how much the head is involved in the LookAt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetLookAtWeight.html | Animator.SetLookAtWeight}
     */
    SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number): void;
    /**
     * Set look at weights.
     * @param weight (0-1) the global weight of the LookAt, multiplier for other parameters.
     * @param bodyWeight (0-1) determines how much the body is involved in the LookAt.
     * @param headWeight (0-1) determines how much the head is involved in the LookAt.
     * @param eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetLookAtWeight.html | Animator.SetLookAtWeight}
     */
    SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number, eyesWeight: number): void;
    /**
     * Set look at weights.
     * @param weight (0-1) the global weight of the LookAt, multiplier for other parameters.
     * @param bodyWeight (0-1) determines how much the body is involved in the LookAt.
     * @param headWeight (0-1) determines how much the head is involved in the LookAt.
     * @param eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
     * @param clampWeight (0-1) 0.0 means the character is unrestrained in motion. 1.0 means the character is clamped (look at becomes impossible). 0.5 means the character is able to move on half of the possible range (180 degrees).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetLookAtWeight.html | Animator.SetLookAtWeight}
     */
    SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number, eyesWeight: number, clampWeight: number): void;
    /**
     * Sets an AvatarTarget and a targetNormalizedTime for the current state.
     * @param targetIndex The avatar body part that is queried.
     * @param targetNormalizedTime The current state Time that is queried.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetTarget.html | Animator.SetTarget}
     */
    SetTarget(targetIndex: AvatarTarget, targetNormalizedTime: number): void;
    /**
     * Sets the value of the given trigger parameter.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetTrigger.html | Animator.SetTrigger}
     */
    SetTrigger(name: string): void;
    /**
     * Sets the value of the given trigger parameter.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.SetTrigger.html | Animator.SetTrigger}
     */
    SetTrigger(id: number): void;
    /**
     * Sets the animator in playback mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.StartPlayback.html | Animator.StartPlayback}
     */
    StartPlayback(): void;
    /**
     * Sets the animator in recording mode, and allocates a circular buffer of size frameCount.
     * @param frameCount The number of frames (updates) that will be recorded. If frameCount is 0, the recording will continue until the user calls StopRecording. The maximum value for frameCount is 10000.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.StartRecording.html | Animator.StartRecording}
     */
    StartRecording(frameCount: number): void;
    /**
     * Stops the animator playback mode. When playback stops, the avatar resumes getting control from game logic.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.StopPlayback.html | Animator.StopPlayback}
     */
    StopPlayback(): void;
    /**
     * Stops animator record mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.StopRecording.html | Animator.StopRecording}
     */
    StopRecording(): void;
    /**
     * Evaluates the animator based on deltaTime.
     * @param deltaTime The time delta.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.Update.html | Animator.Update}
     */
    Update(deltaTime: number): void;
    /**
     * Forces a write of the default values stored in the animator.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animator.WriteDefaultValues.html | Animator.WriteDefaultValues}
     */
    WriteDefaultValues(): void;


}
    
interface AnimatorControllerParameter {
    /**
     * The name of the parameter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorControllerParameter-name.html | AnimatorControllerParameter.name}
     */
    name: string;
    /**
     * Returns the hash of the parameter based on its name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorControllerParameter-nameHash.html | AnimatorControllerParameter.nameHash}
     */
    readonly nameHash: number;
    /**
     * The type of the parameter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorControllerParameter-type.html | AnimatorControllerParameter.type}
     */
    type: AnimatorControllerParameterType;
    /**
     * The default float value for the parameter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorControllerParameter-defaultFloat.html | AnimatorControllerParameter.defaultFloat}
     */
    defaultFloat: number;
    /**
     * The default int value for the parameter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorControllerParameter-defaultInt.html | AnimatorControllerParameter.defaultInt}
     */
    defaultInt: number;
    /**
     * The default bool value for the parameter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorControllerParameter-defaultBool.html | AnimatorControllerParameter.defaultBool}
     */
    defaultBool: boolean;



    Equals(o: unknown): boolean;
    GetHashCode(): number;


}
    
interface AnimatorControllerParameterConstructor {


    new(): AnimatorControllerParameter;



}
declare const AnimatorControllerParameter: AnimatorControllerParameterConstructor;
    
interface RuntimeAnimatorController extends Object {
    /**
     * Retrieves all AnimationClip used by the controller.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RuntimeAnimatorController-animationClips.html | RuntimeAnimatorController.animationClips}
     */
    readonly animationClips: Readonly<AnimationClip[]>;





}
    
interface Motion extends Object {
    readonly averageDuration: number;
    readonly averageAngularSpeed: number;
    readonly averageSpeed: Vector3;
    readonly apparentSpeed: number;
    readonly isLooping: boolean;
    readonly legacy: boolean;
    readonly isHumanMotion: boolean;





}
    
interface AnimationClip extends Motion {
    /**
     * Animation length in seconds. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-length.html | AnimationClip.length}
     */
    readonly length: number;
    /**
     * Frame rate at which keyframes are sampled. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-frameRate.html | AnimationClip.frameRate}
     */
    frameRate: number;
    /**
     * Sets the default wrap mode used in the animation state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-wrapMode.html | AnimationClip.wrapMode}
     */
    wrapMode: WrapMode;
    /**
     * AABB of this Animation Clip in local space of Animation component that it is attached too.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-localBounds.html | AnimationClip.localBounds}
     */
    localBounds: Bounds;
    /**
     * Set to true if the AnimationClip will be used with the Legacy Animation component ( instead of the Animator ).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-legacy.html | AnimationClip.legacy}
     */
    legacy: boolean;
    /**
     * Returns true if the animation contains curve that drives a humanoid rig.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-humanMotion.html | AnimationClip.humanMotion}
     */
    readonly humanMotion: boolean;
    /**
     * Returns true if the animation clip has no curves and no events.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-empty.html | AnimationClip.empty}
     */
    readonly empty: boolean;
    /**
     * Returns true if the Animation has animation on the root transform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-hasGenericRootTransform.html | AnimationClip.hasGenericRootTransform}
     */
    readonly hasGenericRootTransform: boolean;
    /**
     * Returns true if the AnimationClip has editor curves for its root motion.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-hasMotionFloatCurves.html | AnimationClip.hasMotionFloatCurves}
     */
    readonly hasMotionFloatCurves: boolean;
    /**
     * Returns true if the AnimationClip has root motion curves.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-hasMotionCurves.html | AnimationClip.hasMotionCurves}
     */
    readonly hasMotionCurves: boolean;
    /**
     * Returns true if the AnimationClip has root Curves.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-hasRootCurves.html | AnimationClip.hasRootCurves}
     */
    readonly hasRootCurves: boolean;
    /**
     * Animation Events for this animation clip.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip-events.html | AnimationClip.events}
     */
    events: Readonly<AnimationEvent[]>;



    /**
     * Adds an animation event to the clip.
     * @param evt AnimationEvent to add.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip.AddEvent.html | AnimationClip.AddEvent}
     */
    AddEvent(evt: AnimationEvent): void;
    /**
     * Clears all curves from the clip.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip.ClearCurves.html | AnimationClip.ClearCurves}
     */
    ClearCurves(): void;
    /**
     * Realigns quaternion keys to ensure shortest interpolation paths.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip.EnsureQuaternionContinuity.html | AnimationClip.EnsureQuaternionContinuity}
     */
    EnsureQuaternionContinuity(): void;
    /**
     * Samples an animation at a given time for any animated properties.
     * @param go The animated game object.
     * @param time The time to sample an animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip.SampleAnimation.html | AnimationClip.SampleAnimation}
     */
    SampleAnimation(go: GameObject, time: number): void;
    /**
     * Assigns the curve to animate a specific property.
     * @param relativePath Path to the game object this curve applies to. The relativePath
        is formatted similar to a pathname, e.g. &quot;rootspineleftArm&quot;.  If relativePath
        is empty it refers to the game object the animation clip is attached to.
     * @param type The class type of the component that is animated.
     * @param propertyName The name or path to the property being animated.
     * @param curve The animation curve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationClip.SetCurve.html | AnimationClip.SetCurve}
     */
    SetCurve(relativePath: string, type: Type, propertyName: string, curve: AnimationCurve): void;


}
    
interface AnimationEvent {
    /**
     * String parameter that is stored in the event and will be sent to the function.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-stringParameter.html | AnimationEvent.stringParameter}
     */
    stringParameter: string;
    /**
     * Float parameter that is stored in the event and will be sent to the function.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-floatParameter.html | AnimationEvent.floatParameter}
     */
    floatParameter: number;
    /**
     * Int parameter that is stored in the event and will be sent to the function.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-intParameter.html | AnimationEvent.intParameter}
     */
    intParameter: number;
    /**
     * Object reference parameter that is stored in the event and will be sent to the function.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-objectReferenceParameter.html | AnimationEvent.objectReferenceParameter}
     */
    objectReferenceParameter: Object;
    /**
     * The name of the function that will be called.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-functionName.html | AnimationEvent.functionName}
     */
    functionName: string;
    /**
     * The time at which the event will be fired off.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-time.html | AnimationEvent.time}
     */
    time: number;
    /**
     * Function call options.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-messageOptions.html | AnimationEvent.messageOptions}
     */
    messageOptions: SendMessageOptions;
    /**
     * Returns true if this Animation event has been fired by an Animation component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-isFiredByLegacy.html | AnimationEvent.isFiredByLegacy}
     */
    readonly isFiredByLegacy: boolean;
    /**
     * Returns true if this Animation event has been fired by an Animator component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-isFiredByAnimator.html | AnimationEvent.isFiredByAnimator}
     */
    readonly isFiredByAnimator: boolean;
    /**
     * The animation state that fired this event (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-animationState.html | AnimationEvent.animationState}
     */
    readonly animationState: AnimationState;
    /**
     * The animator state info related to this event (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-animatorStateInfo.html | AnimationEvent.animatorStateInfo}
     */
    readonly animatorStateInfo: AnimatorStateInfo;
    /**
     * The animator clip info related to this event (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationEvent-animatorClipInfo.html | AnimationEvent.animatorClipInfo}
     */
    readonly animatorClipInfo: AnimatorClipInfo;





}
    
interface TrackedReference {



    Equals(o: unknown): boolean;
    GetHashCode(): number;


}
    
interface AnimationState extends TrackedReference {
    /**
     * Enables / disables the animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState-enabled.html | AnimationState.enabled}
     */
    enabled: boolean;
    /**
     * The weight of animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState-weight.html | AnimationState.weight}
     */
    weight: number;
    /**
     * Wrapping mode of the animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState-wrapMode.html | AnimationState.wrapMode}
     */
    wrapMode: WrapMode;
    /**
     * The current time of the animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState-time.html | AnimationState.time}
     */
    time: number;
    /**
     * Normalized time of the State.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState-normalizedTime.html | AnimationState.normalizedTime}
     */
    normalizedTime: number;
    /**
     * The playback speed of the animation. 1 is normal playback speed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState-speed.html | AnimationState.speed}
     */
    speed: number;
    /**
     * The normalized playback speed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState-normalizedSpeed.html | AnimationState.normalizedSpeed}
     */
    normalizedSpeed: number;
    /**
     * The length of the animation clip in seconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState-length.html | AnimationState.length}
     */
    readonly length: number;
    layer: number;
    /**
     * The clip that is being played by this animation state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState-clip.html | AnimationState.clip}
     */
    readonly clip: AnimationClip;
    /**
     * The name of the animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState-name.html | AnimationState.name}
     */
    name: string;
    /**
     * Which blend mode should be used?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState-blendMode.html | AnimationState.blendMode}
     */
    blendMode: AnimationBlendMode;



    /**
     * Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.
     * @param mix The transform to animate.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState.AddMixingTransform.html | AnimationState.AddMixingTransform}
     */
    AddMixingTransform(mix: Transform): void;
    /**
     * Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.
     * @param mix The transform to animate.
     * @param recursive Whether to also animate all children of the specified transform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState.AddMixingTransform.html | AnimationState.AddMixingTransform}
     */
    AddMixingTransform(mix: Transform, recursive: boolean): void;
    /**
     * Removes a transform which should be animated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationState.RemoveMixingTransform.html | AnimationState.RemoveMixingTransform}
     */
    RemoveMixingTransform(mix: Transform): void;


}
    
interface AnimationStateConstructor {


    new(): AnimationState;



}
declare const AnimationState: AnimationStateConstructor;
    
interface AnimatorStateInfo {
    /**
     * The full path hash for this state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorStateInfo-fullPathHash.html | AnimatorStateInfo.fullPathHash}
     */
    readonly fullPathHash: number;
    /**
     * The hash is generated using Animator.StringToHash. The hash does not include the name of the parent layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorStateInfo-shortNameHash.html | AnimatorStateInfo.shortNameHash}
     */
    readonly shortNameHash: number;
    /**
     * Normalized time of the State.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorStateInfo-normalizedTime.html | AnimatorStateInfo.normalizedTime}
     */
    readonly normalizedTime: number;
    /**
     * Current duration of the state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorStateInfo-length.html | AnimatorStateInfo.length}
     */
    readonly length: number;
    /**
     * The playback speed of the animation. 1 is the normal playback speed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorStateInfo-speed.html | AnimatorStateInfo.speed}
     */
    readonly speed: number;
    /**
     * The speed multiplier for this state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorStateInfo-speedMultiplier.html | AnimatorStateInfo.speedMultiplier}
     */
    readonly speedMultiplier: number;
    /**
     * The Tag of the State.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorStateInfo-tagHash.html | AnimatorStateInfo.tagHash}
     */
    readonly tagHash: number;
    /**
     * Is the state looping.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorStateInfo-loop.html | AnimatorStateInfo.loop}
     */
    readonly loop: boolean;



    /**
     * Does name match the name of the active state in the statemachine?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorStateInfo.IsName.html | AnimatorStateInfo.IsName}
     */
    IsName(name: string): boolean;
    /**
     * Does tag match the tag of the active state in the statemachine.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorStateInfo.IsTag.html | AnimatorStateInfo.IsTag}
     */
    IsTag(tag: string): boolean;


}
    
interface AnimatorClipInfo {
    /**
     * Returns the animation clip played by the Animator.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorClipInfo-clip.html | AnimatorClipInfo.clip}
     */
    readonly clip: AnimationClip;
    /**
     * Returns the blending weight used by the Animator to blend this clip.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorClipInfo-weight.html | AnimatorClipInfo.weight}
     */
    readonly weight: number;





}
    
interface AnimationEventConstructor {


    new(): AnimationEvent;



}
declare const AnimationEvent: AnimationEventConstructor;
    
interface AnimationCurve {
    /**
     * All keys defined in the animation curve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve-keys.html | AnimationCurve.keys}
     */
    keys: Readonly<Keyframe[]>;
    readonly Item: Keyframe;
    /**
     * The number of keys in the curve. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve-length.html | AnimationCurve.length}
     */
    readonly length: number;
    /**
     * The behaviour of the animation before the first keyframe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve-preWrapMode.html | AnimationCurve.preWrapMode}
     */
    preWrapMode: WrapMode;
    /**
     * The behaviour of the animation after the last keyframe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve-postWrapMode.html | AnimationCurve.postWrapMode}
     */
    postWrapMode: WrapMode;



    /**
     * Add a new key to the curve.
     * @param time The time at which to add the key (horizontal axis in the curve graph).
     * @param value The value for the key (vertical axis in the curve graph).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve.AddKey.html | AnimationCurve.AddKey}
     */
    AddKey(time: number, value: number): number;
    /**
     * Add a new key to the curve.
     * @param key The key to add to the curve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve.AddKey.html | AnimationCurve.AddKey}
     */
    AddKey(key: Keyframe): number;
    /**
     * Erases all KeyFrame from this instance of the AnimationCurve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve.ClearKeys.html | AnimationCurve.ClearKeys}
     */
    ClearKeys(): void;
    /**
     * Copies the keys and properties of the specified AnimationCurve object into this instance of the  AnimationCurve class.
     * @param other The AnimationCurve object to obtain the values to copy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve.CopyFrom.html | AnimationCurve.CopyFrom}
     */
    CopyFrom(other: AnimationCurve): void;
    Equals(o: unknown): boolean;
    Equals(other: AnimationCurve): boolean;
    /**
     * Evaluate the curve at time.
     * @param time The time within the curve you want to evaluate (the horizontal axis in the curve graph).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve.Evaluate.html | AnimationCurve.Evaluate}
     */
    Evaluate(time: number): number;
    /**
     * A HashCode for the animation curve, computed using all individual Keyframe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve.GetHashCode.html | AnimationCurve.GetHashCode}
     */
    GetHashCode(): number;
    /**
     * Moves the key at index to key.time and key.value.
     * @param index The index of the key to move.
     * @param key The keyframe containing the new time and value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve.MoveKey.html | AnimationCurve.MoveKey}
     */
    MoveKey(index: number, key: Keyframe): number;
    /**
     * Removes a key.
     * @param index The index of the key to remove.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve.RemoveKey.html | AnimationCurve.RemoveKey}
     */
    RemoveKey(index: number): void;
    /**
     * Smooth the in and out tangents of the keyframe at index.
     * @param index The index of the keyframe to be smoothed.
     * @param weight The smoothing weight to apply to the keyframe's tangents.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimationCurve.SmoothTangents.html | AnimationCurve.SmoothTangents}
     */
    SmoothTangents(index: number, weight: number): void;


}
    
interface Keyframe {
    /**
     * The time of the keyframe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Keyframe-time.html | Keyframe.time}
     */
    time: number;
    /**
     * The value of the curve at keyframe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Keyframe-value.html | Keyframe.value}
     */
    value: number;
    /**
     * Sets the incoming tangent for this key. The incoming tangent affects the slope of the curve from the previous key to this key.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Keyframe-inTangent.html | Keyframe.inTangent}
     */
    inTangent: number;
    /**
     * Sets the outgoing tangent for this key. The outgoing tangent affects the slope of the curve from this key to the next key.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Keyframe-outTangent.html | Keyframe.outTangent}
     */
    outTangent: number;
    /**
     * Sets the incoming weight for this key. The incoming weight affects the slope of the curve from the previous key to this key.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Keyframe-inWeight.html | Keyframe.inWeight}
     */
    inWeight: number;
    /**
     * Sets the outgoing weight for this key. The outgoing weight affects the slope of the curve from this key to the next key.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Keyframe-outWeight.html | Keyframe.outWeight}
     */
    outWeight: number;
    /**
     * Weighted mode for the keyframe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Keyframe-weightedMode.html | Keyframe.weightedMode}
     */
    weightedMode: WeightedMode;





}
    
interface KeyframeConstructor {


    new(time: number, value: number): Keyframe;
    new(time: number, value: number, inTangent: number, outTangent: number): Keyframe;
    new(time: number, value: number, inTangent: number, outTangent: number, inWeight: number, outWeight: number): Keyframe;



}
declare const Keyframe: KeyframeConstructor;
    
interface AnimationCurveConstructor {


    new(keys: Readonly<Keyframe[]>): AnimationCurve;
    new(): AnimationCurve;


    Constant(timeStart: number, timeEnd: number, value: number): AnimationCurve;
    EaseInOut(timeStart: number, valueStart: number, timeEnd: number, valueEnd: number): AnimationCurve;
    Linear(timeStart: number, valueStart: number, timeEnd: number, valueEnd: number): AnimationCurve;

}
declare const AnimationCurve: AnimationCurveConstructor;
    
interface AnimationClipConstructor {


    new(): AnimationClip;



}
declare const AnimationClip: AnimationClipConstructor;
    
interface Avatar extends Object {
    /**
     * Return true if this avatar is a valid mecanim avatar. It can be a generic avatar or a human avatar.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Avatar-isValid.html | Avatar.isValid}
     */
    readonly isValid: boolean;
    /**
     * Return true if this avatar is a valid human avatar.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Avatar-isHuman.html | Avatar.isHuman}
     */
    readonly isHuman: boolean;
    /**
     * Returns the HumanDescription used to create this Avatar.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Avatar-humanDescription.html | Avatar.humanDescription}
     */
    readonly humanDescription: HumanDescription;





}
    
interface HumanDescription {
    human: Readonly<HumanBone[]>;
    skeleton: Readonly<SkeletonBone[]>;
    /**
     * Defines how the upper arm's roll/twisting is distributed between the shoulder and elbow joints.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanDescription-upperArmTwist.html | HumanDescription.upperArmTwist}
     */
    upperArmTwist: number;
    /**
     * Defines how the lower arm's roll/twisting is distributed between the elbow and wrist joints.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanDescription-lowerArmTwist.html | HumanDescription.lowerArmTwist}
     */
    lowerArmTwist: number;
    /**
     * Defines how the upper leg's roll/twisting is distributed between the thigh and knee joints.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanDescription-upperLegTwist.html | HumanDescription.upperLegTwist}
     */
    upperLegTwist: number;
    /**
     * Defines how the lower leg's roll/twisting is distributed between the knee and ankle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanDescription-lowerLegTwist.html | HumanDescription.lowerLegTwist}
     */
    lowerLegTwist: number;
    /**
     * Amount by which the arm's length is allowed to stretch when using IK.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanDescription-armStretch.html | HumanDescription.armStretch}
     */
    armStretch: number;
    /**
     * Amount by which the leg's length is allowed to stretch when using IK.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanDescription-legStretch.html | HumanDescription.legStretch}
     */
    legStretch: number;
    /**
     * Modification to the minimum distance between the feet of a humanoid model.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanDescription-feetSpacing.html | HumanDescription.feetSpacing}
     */
    feetSpacing: number;
    /**
     * True for any human that has a translation Degree of Freedom (DoF). It is set to false by default.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanDescription-hasTranslationDoF.html | HumanDescription.hasTranslationDoF}
     */
    hasTranslationDoF: boolean;





}
    
interface HumanBone {
    limit: HumanLimit;
    /**
     * The name of the bone to which the Mecanim human bone is mapped.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanBone-boneName.html | HumanBone.boneName}
     */
    boneName: string;
    /**
     * The name of the Mecanim human bone to which the bone from the model is mapped.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanBone-humanName.html | HumanBone.humanName}
     */
    humanName: string;





}
    
interface HumanLimit {
    /**
     * Should this limit use the default values?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanLimit-useDefaultValues.html | HumanLimit.useDefaultValues}
     */
    useDefaultValues: boolean;
    /**
     * The maximum negative rotation away from the initial value that this muscle can apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanLimit-min.html | HumanLimit.min}
     */
    min: Vector3;
    /**
     * The maximum rotation away from the initial value that this muscle can apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanLimit-max.html | HumanLimit.max}
     */
    max: Vector3;
    /**
     * The default orientation of a bone when no muscle action is applied.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanLimit-center.html | HumanLimit.center}
     */
    center: Vector3;
    /**
     * Length of the bone to which the limit is applied.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/HumanLimit-axisLength.html | HumanLimit.axisLength}
     */
    axisLength: number;





}
    
interface SkeletonBone {
    name: string;
    position: Vector3;
    rotation: Quaternion;
    scale: Vector3;





}
    
interface PlayableGraph {



    Connect<U extends IPlayable, V extends IPlayable>(source: U, sourceOutputPort: number, destination: V, destinationInputPort: number): boolean;
    /**
     * Destroys the graph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.Destroy.html | Playables.PlayableGraph.Destroy}
     */
    Destroy(): void;
    DestroyOutput<U extends IPlayableOutput>(output: U): void;
    DestroyPlayable<U extends IPlayable>(playable: U): void;
    DestroySubgraph<U extends IPlayable>(playable: U): void;
    Disconnect<U extends IPlayable>(input: U, inputPort: number): void;
    /**
     * Evaluates all the PlayableOutputs in the graph, and updates all the connected Playables in the graph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.Evaluate.html | Playables.PlayableGraph.Evaluate}
     */
    Evaluate(): void;
    /**
     * Evaluates all the PlayableOutputs in the graph, and updates all the connected Playables in the graph.
     * @param deltaTime The time in seconds by which to advance each Playable in the graph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.Evaluate.html | Playables.PlayableGraph.Evaluate}
     */
    Evaluate(deltaTime: number): void;
    /**
     * Returns the name of the PlayableGraph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.GetEditorName.html | Playables.PlayableGraph.GetEditorName}
     */
    GetEditorName(): string;
    /**
     * Get PlayableOutput at the given index in the graph.
     * @param index The output index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.GetOutput.html | Playables.PlayableGraph.GetOutput}
     */
    GetOutput(index: number): PlayableOutput;
    /**
     * Get PlayableOutput of the requested type at the given index in the graph.
     * @param index The output index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.GetOutputByType.html | Playables.PlayableGraph.GetOutputByType}
     */
    GetOutputByType<T extends IPlayableOutput>(index: number): PlayableOutput;
    /**
     * Returns the number of PlayableOutput in the graph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.GetOutputCount.html | Playables.PlayableGraph.GetOutputCount}
     */
    GetOutputCount(): number;
    /**
     * Get the number of PlayableOutput of the requested type in the graph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.GetOutputCountByType.html | Playables.PlayableGraph.GetOutputCountByType}
     */
    GetOutputCountByType<T extends IPlayableOutput>(): number;
    /**
     * Returns the number of Playable owned by the Graph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.GetPlayableCount.html | Playables.PlayableGraph.GetPlayableCount}
     */
    GetPlayableCount(): number;
    /**
     * Returns the table used by the graph to resolve ExposedReferences.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.GetResolver.html | Playables.PlayableGraph.GetResolver}
     */
    GetResolver(): IExposedPropertyTable;
    /**
     * Returns the Playable with no output connections at the given index.
     * @param index The index of the root Playable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.GetRootPlayable.html | Playables.PlayableGraph.GetRootPlayable}
     */
    GetRootPlayable(index: number): Playable;
    /**
     * Returns the number of Playable owned by the Graph that have no connected outputs.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.GetRootPlayableCount.html | Playables.PlayableGraph.GetRootPlayableCount}
     */
    GetRootPlayableCount(): number;
    /**
     * Returns how time is incremented when playing back.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.GetTimeUpdateMode.html | Playables.PlayableGraph.GetTimeUpdateMode}
     */
    GetTimeUpdateMode(): DirectorUpdateMode;
    /**
     * Indicates that a graph has completed its operations.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.IsDone.html | Playables.PlayableGraph.IsDone}
     */
    IsDone(): boolean;
    /**
     * Indicates that a graph is presently running.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.IsPlaying.html | Playables.PlayableGraph.IsPlaying}
     */
    IsPlaying(): boolean;
    /**
     * Returns true if the PlayableGraph has been properly constructed using PlayableGraph.CreateGraph and is not deleted.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.IsValid.html | Playables.PlayableGraph.IsValid}
     */
    IsValid(): boolean;
    /**
     * Plays the graph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.Play.html | Playables.PlayableGraph.Play}
     */
    Play(): void;
    /**
     * Changes the table used by the graph to resolve ExposedReferences.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.SetResolver.html | Playables.PlayableGraph.SetResolver}
     */
    SetResolver(value: IExposedPropertyTable): void;
    /**
     * Changes how time is incremented when playing back.
     * @param value The new DirectorUpdateMode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.SetTimeUpdateMode.html | Playables.PlayableGraph.SetTimeUpdateMode}
     */
    SetTimeUpdateMode(value: DirectorUpdateMode): void;
    /**
     * Stops the graph, if it is playing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableGraph.Stop.html | Playables.PlayableGraph.Stop}
     */
    Stop(): void;


}
    
interface IPlayable {



    GetHandle(): PlayableHandle;


}
    
interface PlayableHandle {



    Equals(p: unknown): boolean;
    Equals(other: PlayableHandle): boolean;
    GetHashCode(): number;


}
    
interface PlayableHandleConstructor {
    readonly Null: PlayableHandle;





}
declare const PlayableHandle: PlayableHandleConstructor;
    
interface IPlayableOutput {



    GetHandle(): PlayableOutputHandle;


}
    
interface PlayableOutputHandle {



    Equals(p: unknown): boolean;
    Equals(other: PlayableOutputHandle): boolean;
    GetHashCode(): number;


}
    
interface PlayableOutputHandleConstructor {
    readonly Null: PlayableOutputHandle;





}
declare const PlayableOutputHandle: PlayableOutputHandleConstructor;
    
interface PlayableOutput extends IPlayableOutput {



    Equals(other: PlayableOutput): boolean;
    GetHandle(): PlayableOutputHandle;
    GetPlayableOutputType(): Type;
    IsPlayableOutputOfType<T extends IPlayableOutput>(): boolean;


}
    
interface PlayableOutputConstructor {
    /**
     * Returns an invalid PlayableOutput.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.PlayableOutput-Null.html | Playables.PlayableOutput.Null}
     */
    readonly Null: PlayableOutput;





}
declare const PlayableOutput: PlayableOutputConstructor;
    
interface IExposedPropertyTable {



    /**
     * Remove a value for the given reference.
     * @param id Identifier of the ExposedReference.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/IExposedPropertyTable.ClearReferenceValue.html | IExposedPropertyTable.ClearReferenceValue}
     */
    ClearReferenceValue(id: PropertyName): void;
    /**
     * Assigns a value for an ExposedReference.
     * @param id Identifier of the ExposedReference.
     * @param value The value to assigned to the ExposedReference.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/IExposedPropertyTable.SetReferenceValue.html | IExposedPropertyTable.SetReferenceValue}
     */
    SetReferenceValue(id: PropertyName, value: Object): void;


}
    
interface PropertyName {



    /**
     * Determines whether this instance and a specified object, which must also be a PropertyName object, have the same value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PropertyName.Equals.html | PropertyName.Equals}
     */
    Equals(other: unknown): boolean;
    Equals(other: PropertyName): boolean;
    /**
     * Returns the hash code for this PropertyName.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PropertyName.GetHashCode.html | PropertyName.GetHashCode}
     */
    GetHashCode(): number;
    /**
     * For debugging purposes only. Returns the string value representing the string in the Editor.
Returns &quot;UnityEngine.PropertyName&quot; in the player.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PropertyName.ToString.html | PropertyName.ToString}
     */
    ToString(): string;


}
    
interface PropertyNameConstructor {


    new(name: string): PropertyName;
    new(other: PropertyName): PropertyName;
    new(id: number): PropertyName;


    IsNullOrEmpty(prop: PropertyName): boolean;

}
declare const PropertyName: PropertyNameConstructor;
    
interface Playable extends IPlayable {



    Equals(other: Playable): boolean;
    GetHandle(): PlayableHandle;
    GetPlayableType(): Type;
    IsPlayableOfType<T extends IPlayable>(): boolean;


}
    
interface PlayableConstructor {
    /**
     * Returns an invalid Playable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Playables.Playable-Null.html | Playables.Playable.Null}
     */
    readonly Null: Playable;




    Create(graph: PlayableGraph, inputCount: number): Playable;

}
declare const Playable: PlayableConstructor;
    
interface PlayableGraphConstructor {




    Create(): PlayableGraph;
    Create(name: string): PlayableGraph;

}
declare const PlayableGraph: PlayableGraphConstructor;
    
interface AnimatorTransitionInfo {
    /**
     * The hash name of the Transition.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorTransitionInfo-fullPathHash.html | AnimatorTransitionInfo.fullPathHash}
     */
    readonly fullPathHash: number;
    /**
     * The simplified name of the Transition.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorTransitionInfo-nameHash.html | AnimatorTransitionInfo.nameHash}
     */
    readonly nameHash: number;
    /**
     * The user-specified name of the Transition.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorTransitionInfo-userNameHash.html | AnimatorTransitionInfo.userNameHash}
     */
    readonly userNameHash: number;
    /**
     * The unit of the transition duration.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorTransitionInfo-durationUnit.html | AnimatorTransitionInfo.durationUnit}
     */
    readonly durationUnit: DurationUnit;
    /**
     * Duration of the transition.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorTransitionInfo-duration.html | AnimatorTransitionInfo.duration}
     */
    readonly duration: number;
    /**
     * Normalized time of the Transition.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorTransitionInfo-normalizedTime.html | AnimatorTransitionInfo.normalizedTime}
     */
    readonly normalizedTime: number;
    /**
     * Returns true if the transition is from an AnyState node, or from Animator.CrossFade.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorTransitionInfo-anyState.html | AnimatorTransitionInfo.anyState}
     */
    readonly anyState: boolean;



    /**
     * Does name match the name of the active Transition.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorTransitionInfo.IsName.html | AnimatorTransitionInfo.IsName}
     */
    IsName(name: string): boolean;
    /**
     * Does userName match the name of the active Transition.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AnimatorTransitionInfo.IsUserName.html | AnimatorTransitionInfo.IsUserName}
     */
    IsUserName(name: string): boolean;


}
    
interface StateMachineBehaviour extends ScriptableObject {



    OnStateEnter(animator: Animator, stateInfo: AnimatorStateInfo, layerIndex: number): void;
    OnStateEnter(animator: Animator, stateInfo: AnimatorStateInfo, layerIndex: number, controller: AnimatorControllerPlayable): void;
    OnStateExit(animator: Animator, stateInfo: AnimatorStateInfo, layerIndex: number): void;
    OnStateExit(animator: Animator, stateInfo: AnimatorStateInfo, layerIndex: number, controller: AnimatorControllerPlayable): void;
    OnStateIK(animator: Animator, stateInfo: AnimatorStateInfo, layerIndex: number): void;
    OnStateIK(animator: Animator, stateInfo: AnimatorStateInfo, layerIndex: number, controller: AnimatorControllerPlayable): void;
    /**
     * Invoked on the first update frame when taking a transition into a state machine. Implement this message to influence the entry transition into the sub-state machine.
     * @param animator The Animator evaluating the state machine.
     * @param stateMachinePathHash The hash of the full path to the state machine.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/StateMachineBehaviour.OnStateMachineEnter.html | StateMachineBehaviour.OnStateMachineEnter}
     */
    OnStateMachineEnter(animator: Animator, stateMachinePathHash: number): void;
    OnStateMachineEnter(animator: Animator, stateMachinePathHash: number, controller: AnimatorControllerPlayable): void;
    /**
     * Invoked on the last update frame when taking a transition out of a StateMachine. Implement this message to influence the exit transition out of the sub-state machine
     * @param animator The Animator evaluating the state machine.
     * @param stateMachinePathHash The hash of the full path to the state machine.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/StateMachineBehaviour.OnStateMachineExit.html | StateMachineBehaviour.OnStateMachineExit}
     */
    OnStateMachineExit(animator: Animator, stateMachinePathHash: number): void;
    OnStateMachineExit(animator: Animator, stateMachinePathHash: number, controller: AnimatorControllerPlayable): void;
    OnStateMove(animator: Animator, stateInfo: AnimatorStateInfo, layerIndex: number): void;
    OnStateMove(animator: Animator, stateInfo: AnimatorStateInfo, layerIndex: number, controller: AnimatorControllerPlayable): void;
    OnStateUpdate(animator: Animator, stateInfo: AnimatorStateInfo, layerIndex: number): void;
    OnStateUpdate(animator: Animator, stateInfo: AnimatorStateInfo, layerIndex: number, controller: AnimatorControllerPlayable): void;


}
    
interface AnimatorControllerPlayable extends IPlayable {



    CrossFade(stateName: string, transitionDuration: number): void;
    CrossFade(stateName: string, transitionDuration: number, layer: number): void;
    CrossFade(stateName: string, transitionDuration: number, layer: number, normalizedTime: number): void;
    CrossFade(stateNameHash: number, transitionDuration: number): void;
    CrossFade(stateNameHash: number, transitionDuration: number, layer: number): void;
    CrossFade(stateNameHash: number, transitionDuration: number, layer: number, normalizedTime: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number, layer: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number, layer: number, fixedTime: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number, layer: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number, layer: number, fixedTime: number): void;
    Equals(other: AnimatorControllerPlayable): boolean;
    /**
     * Returns an AnimatorTransitionInfo with the informations on the current transition.
     * @param layerIndex The layer's index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetAnimatorTransitionInfo.html | Animations.AnimatorControllerPlayable.GetAnimatorTransitionInfo}
     */
    GetAnimatorTransitionInfo(layerIndex: number): AnimatorTransitionInfo;
    /**
     * Returns the value of the given boolean parameter.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetBool.html | Animations.AnimatorControllerPlayable.GetBool}
     */
    GetBool(name: string): boolean;
    /**
     * Returns the value of the given boolean parameter.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetBool.html | Animations.AnimatorControllerPlayable.GetBool}
     */
    GetBool(id: number): boolean;
    /**
     * Returns an array of all the AnimatorClipInfo in the current state of the given layer.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetCurrentAnimatorClipInfo.html | Animations.AnimatorControllerPlayable.GetCurrentAnimatorClipInfo}
     */
    GetCurrentAnimatorClipInfo(layerIndex: number): Readonly<AnimatorClipInfo[]>;
    GetCurrentAnimatorClipInfo(layerIndex: number, clips: Readonly<AnimatorClipInfo[]>): void;
    /**
     * Returns the number of AnimatorClipInfo in the current state.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetCurrentAnimatorClipInfoCount.html | Animations.AnimatorControllerPlayable.GetCurrentAnimatorClipInfoCount}
     */
    GetCurrentAnimatorClipInfoCount(layerIndex: number): number;
    /**
     * Returns an AnimatorStateInfo with the information on the current state.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetCurrentAnimatorStateInfo.html | Animations.AnimatorControllerPlayable.GetCurrentAnimatorStateInfo}
     */
    GetCurrentAnimatorStateInfo(layerIndex: number): AnimatorStateInfo;
    /**
     * Returns the value of the given float parameter.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetFloat.html | Animations.AnimatorControllerPlayable.GetFloat}
     */
    GetFloat(name: string): number;
    /**
     * Returns the value of the given float parameter.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetFloat.html | Animations.AnimatorControllerPlayable.GetFloat}
     */
    GetFloat(id: number): number;
    GetHandle(): PlayableHandle;
    /**
     * Returns the value of the given integer parameter.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetInteger.html | Animations.AnimatorControllerPlayable.GetInteger}
     */
    GetInteger(name: string): number;
    /**
     * Returns the value of the given integer parameter.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetInteger.html | Animations.AnimatorControllerPlayable.GetInteger}
     */
    GetInteger(id: number): number;
    GetLayerCount(): number;
    /**
     * Returns the index of the layer with the given name.
     * @param layerName The layer name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetLayerIndex.html | Animations.AnimatorControllerPlayable.GetLayerIndex}
     */
    GetLayerIndex(layerName: string): number;
    /**
     * Returns the layer name.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetLayerName.html | Animations.AnimatorControllerPlayable.GetLayerName}
     */
    GetLayerName(layerIndex: number): string;
    /**
     * Returns the weight of the layer at the specified index.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetLayerWeight.html | Animations.AnimatorControllerPlayable.GetLayerWeight}
     */
    GetLayerWeight(layerIndex: number): number;
    GetNextAnimatorClipInfo(layerIndex: number, clips: Readonly<AnimatorClipInfo[]>): void;
    /**
     * Returns an array of all the AnimatorClipInfo in the next state of the given layer.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetNextAnimatorClipInfo.html | Animations.AnimatorControllerPlayable.GetNextAnimatorClipInfo}
     */
    GetNextAnimatorClipInfo(layerIndex: number): Readonly<AnimatorClipInfo[]>;
    /**
     * Returns the number of AnimatorClipInfo in the next state.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetNextAnimatorClipInfoCount.html | Animations.AnimatorControllerPlayable.GetNextAnimatorClipInfoCount}
     */
    GetNextAnimatorClipInfoCount(layerIndex: number): number;
    /**
     * Returns an AnimatorStateInfo with the information on the next state.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetNextAnimatorStateInfo.html | Animations.AnimatorControllerPlayable.GetNextAnimatorStateInfo}
     */
    GetNextAnimatorStateInfo(layerIndex: number): AnimatorStateInfo;
    /**
     * See AnimatorController.parameters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.GetParameter.html | Animations.AnimatorControllerPlayable.GetParameter}
     */
    GetParameter(index: number): AnimatorControllerParameter;
    GetParameterCount(): number;
    /**
     * Returns true if the state exists in this layer, false otherwise.
     * @param layerIndex The layer index.
     * @param stateID The state ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.HasState.html | Animations.AnimatorControllerPlayable.HasState}
     */
    HasState(layerIndex: number, stateID: number): boolean;
    /**
     * Returns true if there is a transition on the given layer, false otherwise.
     * @param layerIndex The layer index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.IsInTransition.html | Animations.AnimatorControllerPlayable.IsInTransition}
     */
    IsInTransition(layerIndex: number): boolean;
    /**
     * Returns true if the parameter is controlled by a curve, false otherwise.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.IsParameterControlledByCurve.html | Animations.AnimatorControllerPlayable.IsParameterControlledByCurve}
     */
    IsParameterControlledByCurve(name: string): boolean;
    /**
     * Returns true if the parameter is controlled by a curve, false otherwise.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.IsParameterControlledByCurve.html | Animations.AnimatorControllerPlayable.IsParameterControlledByCurve}
     */
    IsParameterControlledByCurve(id: number): boolean;
    Play(stateName: string): void;
    Play(stateName: string, layer: number): void;
    /**
     * Plays a state.
     * @param stateName The state name.
     * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
     * @param normalizedTime The time offset between zero and one.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.Play.html | Animations.AnimatorControllerPlayable.Play}
     */
    Play(stateName: string, layer: number, normalizedTime: number): void;
    Play(stateNameHash: number): void;
    Play(stateNameHash: number, layer: number): void;
    /**
     * Plays a state.
     * @param stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
     * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
     * @param normalizedTime The time offset between zero and one.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.Play.html | Animations.AnimatorControllerPlayable.Play}
     */
    Play(stateNameHash: number, layer: number, normalizedTime: number): void;
    PlayInFixedTime(stateName: string): void;
    PlayInFixedTime(stateName: string, layer: number): void;
    /**
     * Plays a state.
     * @param stateName The state name.
     * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
     * @param fixedTime The time offset (in seconds).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.PlayInFixedTime.html | Animations.AnimatorControllerPlayable.PlayInFixedTime}
     */
    PlayInFixedTime(stateName: string, layer: number, fixedTime: number): void;
    PlayInFixedTime(stateNameHash: number): void;
    PlayInFixedTime(stateNameHash: number, layer: number): void;
    /**
     * Plays a state.
     * @param stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
     * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
     * @param fixedTime The time offset (in seconds).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.PlayInFixedTime.html | Animations.AnimatorControllerPlayable.PlayInFixedTime}
     */
    PlayInFixedTime(stateNameHash: number, layer: number, fixedTime: number): void;
    /**
     * Resets the value of the given trigger parameter.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.ResetTrigger.html | Animations.AnimatorControllerPlayable.ResetTrigger}
     */
    ResetTrigger(name: string): void;
    /**
     * Resets the value of the given trigger parameter.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.ResetTrigger.html | Animations.AnimatorControllerPlayable.ResetTrigger}
     */
    ResetTrigger(id: number): void;
    /**
     * Sets the value of the given boolean parameter.
     * @param name The parameter name.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.SetBool.html | Animations.AnimatorControllerPlayable.SetBool}
     */
    SetBool(name: string, value: boolean): void;
    /**
     * Sets the value of the given boolean parameter.
     * @param id The parameter ID.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.SetBool.html | Animations.AnimatorControllerPlayable.SetBool}
     */
    SetBool(id: number, value: boolean): void;
    /**
     * Send float values to the AnimatorController to affect transitions.
     * @param name The parameter name.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.SetFloat.html | Animations.AnimatorControllerPlayable.SetFloat}
     */
    SetFloat(name: string, value: number): void;
    /**
     * Send float values to the AnimatorController to affect transitions.
     * @param id The parameter ID.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.SetFloat.html | Animations.AnimatorControllerPlayable.SetFloat}
     */
    SetFloat(id: number, value: number): void;
    SetHandle(handle: PlayableHandle): void;
    /**
     * Sets the value of the given integer parameter.
     * @param name The parameter name.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.SetInteger.html | Animations.AnimatorControllerPlayable.SetInteger}
     */
    SetInteger(name: string, value: number): void;
    /**
     * Sets the value of the given integer parameter.
     * @param id The parameter ID.
     * @param value The new parameter value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.SetInteger.html | Animations.AnimatorControllerPlayable.SetInteger}
     */
    SetInteger(id: number, value: number): void;
    /**
     * Sets the weight of the layer at the given index.
     * @param layerIndex The layer index.
     * @param weight The new layer weight.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.SetLayerWeight.html | Animations.AnimatorControllerPlayable.SetLayerWeight}
     */
    SetLayerWeight(layerIndex: number, weight: number): void;
    /**
     * Sets the value of the given trigger parameter.
     * @param name The parameter name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.SetTrigger.html | Animations.AnimatorControllerPlayable.SetTrigger}
     */
    SetTrigger(name: string): void;
    /**
     * Sets the value of the given trigger parameter.
     * @param id The parameter ID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable.SetTrigger.html | Animations.AnimatorControllerPlayable.SetTrigger}
     */
    SetTrigger(id: number): void;


}
    
interface AnimatorControllerPlayableConstructor {
    /**
     * Returns an invalid AnimatorControllerPlayable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animations.AnimatorControllerPlayable-Null.html | Animations.AnimatorControllerPlayable.Null}
     */
    readonly Null: AnimatorControllerPlayable;




    Create(graph: PlayableGraph, controller: RuntimeAnimatorController): AnimatorControllerPlayable;

}
declare const AnimatorControllerPlayable: AnimatorControllerPlayableConstructor;
    
interface MatchTargetWeightMask {
    /**
     * Position XYZ weight.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MatchTargetWeightMask-positionXYZWeight.html | MatchTargetWeightMask.positionXYZWeight}
     */
    positionXYZWeight: Vector3;
    /**
     * Rotation weight.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MatchTargetWeightMask-rotationWeight.html | MatchTargetWeightMask.rotationWeight}
     */
    rotationWeight: number;





}
    
interface MatchTargetWeightMaskConstructor {


    new(positionXYZWeight: Vector3, rotationWeight: number): MatchTargetWeightMask;



}
declare const MatchTargetWeightMask: MatchTargetWeightMaskConstructor;
    
interface AnimatorConstructor {


    new(): Animator;


    StringToHash(name: string): number;

}
declare const Animator: AnimatorConstructor;
    
interface SelectableConstructor {
    readonly allSelectablesArray: Readonly<Selectable[]>;
    readonly allSelectableCount: number;




    AllSelectablesNoAlloc(selectables: Readonly<Selectable[]>): number;

}
declare const Selectable: SelectableConstructor;
    
interface Button extends Selectable, ISubmitHandler, IPointerClickHandler {

    readonly onClick: MonoSignal<void>;


    OnPointerClick(eventData: PointerEventData): void;
    OnSubmit(eventData: BaseEventData): void;


}
    
interface MeshRenderer extends Renderer {
    /**
     * Vertex attributes in this mesh will override or add attributes of the primary mesh in the MeshRenderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MeshRenderer-additionalVertexStreams.html | MeshRenderer.additionalVertexStreams}
     */
    additionalVertexStreams: Mesh;
    /**
     * Vertex attributes that override the primary mesh when the MeshRenderer uses lightmaps in the Realtime Global Illumination system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MeshRenderer-enlightenVertexStream.html | MeshRenderer.enlightenVertexStream}
     */
    enlightenVertexStream: Mesh;
    /**
     * Index of the first sub-mesh to use from the Mesh associated with this MeshRenderer (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MeshRenderer-subMeshStartIndex.html | MeshRenderer.subMeshStartIndex}
     */
    readonly subMeshStartIndex: number;
    /**
     * Specifies the relative lightmap resolution of this object. (Editor only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MeshRenderer-scaleInLightmap.html | MeshRenderer.scaleInLightmap}
     */
    scaleInLightmap: number;
    /**
     * Determines how the object will receive global illumination. (Editor only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MeshRenderer-receiveGI.html | MeshRenderer.receiveGI}
     */
    receiveGI: ReceiveGI;
    /**
     * When enabled, seams in baked lightmaps will get smoothed. (Editor only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MeshRenderer-stitchLightmapSeams.html | MeshRenderer.stitchLightmapSeams}
     */
    stitchLightmapSeams: boolean;





}
    
interface MeshRendererConstructor {


    new(): MeshRenderer;



}
declare const MeshRenderer: MeshRendererConstructor;
    
interface MeshFilter extends Component {
    /**
     * Returns the shared mesh of the mesh filter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MeshFilter-sharedMesh.html | MeshFilter.sharedMesh}
     */
    sharedMesh: Mesh;
    /**
     * Returns either a new Mesh|mesh or a duplicate of the existing mesh, and assigns it to the mesh filter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MeshFilter-mesh.html | MeshFilter.mesh}
     */
    mesh: Mesh;





}
    
interface MeshFilterConstructor {


    new(): MeshFilter;



}
declare const MeshFilter: MeshFilterConstructor;
    
interface TMP_Text extends MaskableGraphic {
    text: string;
    textPreprocessor: ITextPreprocessor;
    isRightToLeftText: boolean;
    font: TMP_FontAsset;
    fontSharedMaterial: Material;
    fontSharedMaterials: Readonly<Material[]>;
    fontMaterial: Material;
    fontMaterials: Readonly<Material[]>;
    color: Color;
    alpha: number;
    enableVertexGradient: boolean;
    colorGradient: VertexGradient;
    colorGradientPreset: TMP_ColorGradient;
    spriteAsset: TMP_SpriteAsset;
    tintAllSprites: boolean;
    styleSheet: TMP_StyleSheet;
    textStyle: TMP_Style;
    overrideColorTags: boolean;
    faceColor: Color32;
    outlineColor: Color32;
    outlineWidth: number;
    fontSize: number;
    fontWeight: FontWeight;
    readonly pixelsPerUnit: number;
    enableAutoSizing: boolean;
    fontSizeMin: number;
    fontSizeMax: number;
    fontStyle: FontStyles;
    readonly isUsingBold: boolean;
    horizontalAlignment: HorizontalAlignmentOptions;
    verticalAlignment: VerticalAlignmentOptions;
    alignment: TextAlignmentOptions;
    characterSpacing: number;
    wordSpacing: number;
    lineSpacing: number;
    lineSpacingAdjustment: number;
    paragraphSpacing: number;
    characterWidthAdjustment: number;
    textWrappingMode: TextWrappingModes;
    wordWrappingRatios: number;
    overflowMode: TextOverflowModes;
    readonly isTextOverflowing: boolean;
    readonly firstOverflowCharacterIndex: number;
    linkedTextComponent: TMP_Text;
    readonly isTextTruncated: boolean;
    fontFeatures: Readonly<OTL_FeatureTag[]>;
    extraPadding: boolean;
    richText: boolean;
    emojiFallbackSupport: boolean;
    parseCtrlCharacters: boolean;
    isOverlay: boolean;
    isOrthographic: boolean;
    enableCulling: boolean;
    ignoreVisibility: boolean;
    horizontalMapping: TextureMappingOptions;
    verticalMapping: TextureMappingOptions;
    mappingUvLineOffset: number;
    renderMode: TextRenderFlags;
    geometrySortingOrder: VertexSortingOrder;
    isTextObjectScaleStatic: boolean;
    vertexBufferAutoSizeReduction: boolean;
    firstVisibleCharacter: number;
    maxVisibleCharacters: number;
    maxVisibleWords: number;
    maxVisibleLines: number;
    useMaxVisibleDescender: boolean;
    pageToDisplay: number;
    margin: Vector4;
    readonly textInfo: TMP_TextInfo;
    havePropertiesChanged: boolean;
    isUsingLegacyAnimationComponent: boolean;
    readonly transform: Transform;
    readonly rectTransform: RectTransform;
    autoSizeTextContainer: boolean;
    readonly mesh: Mesh;
    isVolumetricText: boolean;
    readonly bounds: Bounds;
    readonly textBounds: Bounds;
    readonly flexibleHeight: number;
    readonly flexibleWidth: number;
    readonly minWidth: number;
    readonly minHeight: number;
    readonly maxWidth: number;
    readonly maxHeight: number;
    readonly preferredWidth: number;
    readonly preferredHeight: number;
    readonly renderedWidth: number;
    readonly renderedHeight: number;
    readonly layoutPriority: number;

    readonly OnPreRenderText: MonoSignal<TMP_TextInfo>;


    ClearMesh(): void;
    ClearMesh(uploadGeometry: boolean): void;
    ComputeMarginSize(): void;
    CrossFadeAlpha(alpha: number, duration: number, ignoreTimeScale: boolean): void;
    CrossFadeColor(targetColor: Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean): void;
    ForceMeshUpdate(ignoreActiveState: boolean, forceTextReparsing: boolean): void;
    GetParsedText(): string;
    GetPreferredValues(): Vector2;
    GetPreferredValues(width: number, height: number): Vector2;
    GetPreferredValues(text: string): Vector2;
    GetPreferredValues(text: string, width: number, height: number): Vector2;
    GetRenderedValues(): Vector2;
    GetRenderedValues(onlyVisibleCharacters: boolean): Vector2;
    GetTextInfo(text: string): TMP_TextInfo;
    SetCharArray(sourceText: Readonly<string[]>): void;
    SetCharArray(sourceText: Readonly<string[]>, start: number, length: number): void;
    SetText(sourceText: string): void;
    SetText(sourceText: string, arg0: number): void;
    SetText(sourceText: string, arg0: number, arg1: number): void;
    SetText(sourceText: string, arg0: number, arg1: number, arg2: number): void;
    SetText(sourceText: string, arg0: number, arg1: number, arg2: number, arg3: number): void;
    SetText(sourceText: string, arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
    SetText(sourceText: string, arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
    SetText(sourceText: string, arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
    SetText(sourceText: string, arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
    SetText(sourceText: StringBuilder): void;
    SetText(sourceText: Readonly<string[]>): void;
    SetText(sourceText: Readonly<string[]>, start: number, length: number): void;
    SetVertices(vertices: Readonly<Vector3[]>): void;
    UpdateGeometry(mesh: Mesh, index: number): void;
    UpdateMeshPadding(): void;
    UpdateVertexData(flags: TMP_VertexDataUpdateFlags): void;
    UpdateVertexData(): void;


}
    
interface ITextPreprocessor {



    PreprocessText(text: string): string;


}
    
interface TMP_Asset extends ScriptableObject {
    readonly version: string;
    readonly instanceID: number;
    hashCode: number;
    faceInfo: FaceInfo;
    material: Material;
    materialHashCode: number;





}
    
interface FaceInfo {
    /**
     * The name of the font typeface also known as family name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-familyName.html | TextCore.FaceInfo.familyName}
     */
    familyName: string;
    /**
     * The style name of the typeface which defines both the visual style and weight of the typeface.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-styleName.html | TextCore.FaceInfo.styleName}
     */
    styleName: string;
    /**
     * The point size used for sampling the typeface.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-pointSize.html | TextCore.FaceInfo.pointSize}
     */
    pointSize: number;
    /**
     * The relative scale of the typeface.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-scale.html | TextCore.FaceInfo.scale}
     */
    scale: number;
    /**
     * The line height represents the distance between consecutive lines of text.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-lineHeight.html | TextCore.FaceInfo.lineHeight}
     */
    lineHeight: number;
    /**
     * The Ascent line is typically located at the top of the tallest glyph in the typeface.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-ascentLine.html | TextCore.FaceInfo.ascentLine}
     */
    ascentLine: number;
    /**
     * The Cap line is typically located at the top of capital letters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-capLine.html | TextCore.FaceInfo.capLine}
     */
    capLine: number;
    /**
     * The Mean line is typically located at the top of lowercase letters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-meanLine.html | TextCore.FaceInfo.meanLine}
     */
    meanLine: number;
    /**
     * The Baseline is an imaginary line upon which all glyphs appear to rest on.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-baseline.html | TextCore.FaceInfo.baseline}
     */
    baseline: number;
    /**
     * The Descent line is typically located at the bottom of the glyph with the lowest descender in the typeface.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-descentLine.html | TextCore.FaceInfo.descentLine}
     */
    descentLine: number;
    /**
     * The position of characters using superscript.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-superscriptOffset.html | TextCore.FaceInfo.superscriptOffset}
     */
    superscriptOffset: number;
    /**
     * The relative size / scale of superscript characters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-superscriptSize.html | TextCore.FaceInfo.superscriptSize}
     */
    superscriptSize: number;
    /**
     * The position of characters using subscript.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-subscriptOffset.html | TextCore.FaceInfo.subscriptOffset}
     */
    subscriptOffset: number;
    /**
     * The relative size / scale of subscript characters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-subscriptSize.html | TextCore.FaceInfo.subscriptSize}
     */
    subscriptSize: number;
    /**
     * The position of the underline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-underlineOffset.html | TextCore.FaceInfo.underlineOffset}
     */
    underlineOffset: number;
    /**
     * The thickness of the underline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-underlineThickness.html | TextCore.FaceInfo.underlineThickness}
     */
    underlineThickness: number;
    /**
     * The position of the strikethrough.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-strikethroughOffset.html | TextCore.FaceInfo.strikethroughOffset}
     */
    strikethroughOffset: number;
    /**
     * The thickness of the strikethrough.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-strikethroughThickness.html | TextCore.FaceInfo.strikethroughThickness}
     */
    strikethroughThickness: number;
    /**
     * The width of the tab character.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo-tabWidth.html | TextCore.FaceInfo.tabWidth}
     */
    tabWidth: number;



    /**
     * Compares the information in this FaceInfo structure with the information in the given FaceInfo structure to determine whether they have the same values.
     * @param other The FaceInfo structure to compare this FaceInfo structure with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.FaceInfo.Compare.html | TextCore.FaceInfo.Compare}
     */
    Compare(other: FaceInfo): boolean;


}
    
interface TMP_FontAsset extends TMP_Asset {
    normalStyle: number;
    normalSpacingOffset: number;
    boldStyle: number;
    boldSpacing: number;
    italicStyle: number;
    tabSize: number;
    atlas: Texture2D;
    creationSettings: FontAssetCreationSettings;
    readonly sourceFontFile: Font;
    atlasPopulationMode: AtlasPopulationMode;
    readonly glyphTable: Readonly<Glyph[]>;
    readonly glyphLookupTable: CSDictionary<number, Glyph>;
    readonly characterTable: Readonly<TMP_Character[]>;
    readonly characterLookupTable: CSDictionary<number, TMP_Character>;
    readonly atlasTexture: Texture2D;
    atlasTextures: Readonly<Texture2D[]>;
    readonly atlasTextureCount: number;
    isMultiAtlasTexturesEnabled: boolean;
    getFontFeatures: boolean;
    readonly atlasWidth: number;
    readonly atlasHeight: number;
    readonly atlasPadding: number;
    readonly atlasRenderMode: GlyphRenderMode;
    readonly fontFeatureTable: TMP_FontFeatureTable;
    fallbackFontAssetTable: Readonly<TMP_FontAsset[]>;
    readonly fontWeightTable: Readonly<TMP_FontWeightPair[]>;



    ClearFontAssetData(setAtlasSizeToZero: boolean): void;
    HasCharacter(character: number): boolean;
    HasCharacter(character: string, searchFallbacks: boolean, tryAddCharacter: boolean): boolean;
    HasCharacters(text: string): boolean;
    ReadFontAssetDefinition(): void;
    TryAddCharacters(unicodes: Readonly<number[]>, includeFontFeatures: boolean): boolean;
    TryAddCharacters(characters: string, includeFontFeatures: boolean): boolean;


}
    
interface FontAssetCreationSettings {
    sourceFontFileName: string;
    sourceFontFileGUID: string;
    faceIndex: number;
    pointSizeSamplingMode: number;
    pointSize: number;
    padding: number;
    paddingMode: number;
    packingMode: number;
    atlasWidth: number;
    atlasHeight: number;
    characterSetSelectionMode: number;
    characterSequence: string;
    referencedFontAssetGUID: string;
    referencedTextAssetGUID: string;
    fontStyle: number;
    fontStyleModifier: number;
    renderMode: number;
    includeFontFeatures: boolean;





}
    
interface Font extends Object {
    /**
     * The material used for the font display.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Font-material.html | Font.material}
     */
    material: Material;
    fontNames: Readonly<string[]>;
    /**
     * Is the font a dynamic font.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Font-dynamic.html | Font.dynamic}
     */
    readonly dynamic: boolean;
    /**
     * The ascent of the font.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Font-ascent.html | Font.ascent}
     */
    readonly ascent: number;
    /**
     * The default size of the font.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Font-fontSize.html | Font.fontSize}
     */
    readonly fontSize: number;
    /**
     * Access an array of all characters contained in the font texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Font-characterInfo.html | Font.characterInfo}
     */
    characterInfo: Readonly<CharacterInfo[]>;
    /**
     * The line height of the font.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Font-lineHeight.html | Font.lineHeight}
     */
    readonly lineHeight: number;



    /**
     * Does this font have a specific character?
     * @param c The character to check for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Font.HasCharacter.html | Font.HasCharacter}
     */
    HasCharacter(c: string): boolean;
    /**
     * Request characters to be added to the font texture (dynamic fonts only).
     * @param characters The characters which are needed to be in the font texture.
     * @param size The size of the requested characters (the default value of zero will use the font's default size).
     * @param style The style of the requested characters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Font.RequestCharactersInTexture.html | Font.RequestCharactersInTexture}
     */
    RequestCharactersInTexture(characters: string, size: number, style: FontStyle): void;
    RequestCharactersInTexture(characters: string, size: number): void;
    RequestCharactersInTexture(characters: string): void;


}
    
interface CharacterInfo {
    index: number;
    size: number;
    style: FontStyle;
    /**
     * The horizontal distance, rounded to the nearest integer, from the origin of this character to the origin of the next character.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-advance.html | CharacterInfo.advance}
     */
    advance: number;
    /**
     * The width of the glyph image.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-glyphWidth.html | CharacterInfo.glyphWidth}
     */
    glyphWidth: number;
    /**
     * The height of the glyph image.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-glyphHeight.html | CharacterInfo.glyphHeight}
     */
    glyphHeight: number;
    /**
     * The horizontal distance from the origin of this glyph to the begining of the glyph image.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-bearing.html | CharacterInfo.bearing}
     */
    bearing: number;
    /**
     * The minimum extend of the glyph image in the y-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-minY.html | CharacterInfo.minY}
     */
    minY: number;
    /**
     * The maximum extend of the glyph image in the y-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-maxY.html | CharacterInfo.maxY}
     */
    maxY: number;
    /**
     * The minium extend of the glyph image in the x-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-minX.html | CharacterInfo.minX}
     */
    minX: number;
    /**
     * The maximum extend of the glyph image in the x-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-maxX.html | CharacterInfo.maxX}
     */
    maxX: number;
    /**
     * The uv coordinate matching the bottom left of the glyph image in the font texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-uvBottomLeft.html | CharacterInfo.uvBottomLeft}
     */
    uvBottomLeft: Vector2;
    /**
     * The uv coordinate matching the bottom right of the glyph image in the font texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-uvBottomRight.html | CharacterInfo.uvBottomRight}
     */
    uvBottomRight: Vector2;
    /**
     * The uv coordinate matching the top right of the glyph image in the font texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-uvTopRight.html | CharacterInfo.uvTopRight}
     */
    uvTopRight: Vector2;
    /**
     * The uv coordinate matching the top left of the glyph image in the font texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterInfo-uvTopLeft.html | CharacterInfo.uvTopLeft}
     */
    uvTopLeft: Vector2;





}
    
interface FontConstructor {


    new(): Font;
    new(name: string): Font;


    CreateDynamicFontFromOSFont(fontname: string, size: number): Font;
    CreateDynamicFontFromOSFont(fontnames: Readonly<string[]>, size: number): Font;
    GetMaxVertsForString(str: string): number;
    GetOSInstalledFontNames(): Readonly<string[]>;
    GetPathsToOSFonts(): Readonly<string[]>;

    readonly textureRebuilt: MonoSignal<Font>;
}
declare const Font: FontConstructor;
    
interface Glyph {
    /**
     * The index of the glyph in the source font file.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.Glyph-index.html | TextCore.Glyph.index}
     */
    index: number;
    /**
     * The metrics that define the size, position and spacing of a glyph when performing text layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.Glyph-metrics.html | TextCore.Glyph.metrics}
     */
    metrics: GlyphMetrics;
    /**
     * A rectangle that defines the position of a glyph within an atlas texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.Glyph-glyphRect.html | TextCore.Glyph.glyphRect}
     */
    glyphRect: GlyphRect;
    /**
     * The relative scale of the glyph. The default value is 1.0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.Glyph-scale.html | TextCore.Glyph.scale}
     */
    scale: number;
    /**
     * The index of the atlas texture that contains this glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.Glyph-atlasIndex.html | TextCore.Glyph.atlasIndex}
     */
    atlasIndex: number;
    /**
     * Glyph class definition type.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.Glyph-classDefinitionType.html | TextCore.Glyph.classDefinitionType}
     */
    classDefinitionType: GlyphClassDefinitionType;



    /**
     * Compares two glyphs to determine if they have the same values.
     * @param other The glyph to compare with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.Glyph.Compare.html | TextCore.Glyph.Compare}
     */
    Compare(other: Glyph): boolean;


}
    
interface GlyphMetrics {
    /**
     * The width of the glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.GlyphMetrics-width.html | TextCore.GlyphMetrics.width}
     */
    width: number;
    /**
     * The height of the glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.GlyphMetrics-height.html | TextCore.GlyphMetrics.height}
     */
    height: number;
    /**
     * The horizontal distance from the current drawing position (origin) relative to the element's left bounding box edge (bbox).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.GlyphMetrics-horizontalBearingX.html | TextCore.GlyphMetrics.horizontalBearingX}
     */
    horizontalBearingX: number;
    /**
     * The vertical distance from the current baseline relative to the element's top bounding box edge (bbox).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.GlyphMetrics-horizontalBearingY.html | TextCore.GlyphMetrics.horizontalBearingY}
     */
    horizontalBearingY: number;
    /**
     * The horizontal distance to increase (left to right) or decrease (right to left) the drawing position relative to the origin of the text element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.GlyphMetrics-horizontalAdvance.html | TextCore.GlyphMetrics.horizontalAdvance}
     */
    horizontalAdvance: number;



    Equals(obj: unknown): boolean;
    Equals(other: GlyphMetrics): boolean;
    GetHashCode(): number;


}
    
interface GlyphMetricsConstructor {


    new(width: number, height: number, bearingX: number, bearingY: number, advance: number): GlyphMetrics;



}
declare const GlyphMetrics: GlyphMetricsConstructor;
    
interface GlyphRect {
    /**
     * The x position of the glyph in the font atlas texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.GlyphRect-x.html | TextCore.GlyphRect.x}
     */
    x: number;
    /**
     * The y position of the glyph in the font atlas texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.GlyphRect-y.html | TextCore.GlyphRect.y}
     */
    y: number;
    /**
     * The width of the glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.GlyphRect-width.html | TextCore.GlyphRect.width}
     */
    width: number;
    /**
     * The height of the glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.GlyphRect-height.html | TextCore.GlyphRect.height}
     */
    height: number;



    Equals(obj: unknown): boolean;
    Equals(other: GlyphRect): boolean;
    GetHashCode(): number;


}
    
interface GlyphRectConstructor {
    /**
     * A GlyphRect with all values set to zero. Shorthand for writing GlyphRect(0, 0, 0, 0).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.GlyphRect-zero.html | TextCore.GlyphRect.zero}
     */
    readonly zero: GlyphRect;


    new(x: number, y: number, width: number, height: number): GlyphRect;
    new(rect: Rect): GlyphRect;



}
declare const GlyphRect: GlyphRectConstructor;
    
interface GlyphConstructor {


    new(): Glyph;
    new(glyph: Glyph): Glyph;
    new(index: number, metrics: GlyphMetrics, glyphRect: GlyphRect): Glyph;
    new(index: number, metrics: GlyphMetrics, glyphRect: GlyphRect, scale: number, atlasIndex: number): Glyph;



}
declare const Glyph: GlyphConstructor;
    
interface TMP_TextElement {
    readonly elementType: TextElementType;
    unicode: number;
    textAsset: TMP_Asset;
    glyph: Glyph;
    glyphIndex: number;
    scale: number;





}
    
interface TMP_TextElementConstructor {


    new(): TMP_TextElement;



}
declare const TMP_TextElement: TMP_TextElementConstructor;
    
interface TMP_Character extends TMP_TextElement {





}
    
interface TMP_CharacterConstructor {


    new(): TMP_Character;
    new(unicode: number, glyph: Glyph): TMP_Character;
    new(unicode: number, fontAsset: TMP_FontAsset, glyph: Glyph): TMP_Character;



}
declare const TMP_Character: TMP_CharacterConstructor;
    
interface TMP_FontFeatureTable {
    multipleSubstitutionRecords: Readonly<MultipleSubstitutionRecord[]>;
    ligatureRecords: Readonly<LigatureSubstitutionRecord[]>;
    glyphPairAdjustmentRecords: Readonly<GlyphPairAdjustmentRecord[]>;
    MarkToBaseAdjustmentRecords: Readonly<MarkToBaseAdjustmentRecord[]>;
    MarkToMarkAdjustmentRecords: Readonly<MarkToMarkAdjustmentRecord[]>;



    SortGlyphPairAdjustmentRecords(): void;
    SortMarkToBaseAdjustmentRecords(): void;
    SortMarkToMarkAdjustmentRecords(): void;


}
    
interface MultipleSubstitutionRecord {
    targetGlyphID: number;
    substituteGlyphIDs: Readonly<number[]>;





}
    
interface LigatureSubstitutionRecord {
    componentGlyphIDs: Readonly<number[]>;
    ligatureGlyphID: number;





}
    
interface GlyphPairAdjustmentRecord {
    /**
     * The positional adjustment values for the first glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.LowLevel.GlyphPairAdjustmentRecord-firstAdjustmentRecord.html | TextCore.LowLevel.GlyphPairAdjustmentRecord.firstAdjustmentRecord}
     */
    firstAdjustmentRecord: GlyphAdjustmentRecord;
    /**
     * The positional adjustment values for the second glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.LowLevel.GlyphPairAdjustmentRecord-secondAdjustmentRecord.html | TextCore.LowLevel.GlyphPairAdjustmentRecord.secondAdjustmentRecord}
     */
    secondAdjustmentRecord: GlyphAdjustmentRecord;
    featureLookupFlags: FontFeatureLookupFlags;



    Equals(obj: unknown): boolean;
    Equals(other: GlyphPairAdjustmentRecord): boolean;
    GetHashCode(): number;


}
    
interface GlyphAdjustmentRecord {
    /**
     * The index of the glyph in the source font file.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.LowLevel.GlyphAdjustmentRecord-glyphIndex.html | TextCore.LowLevel.GlyphAdjustmentRecord.glyphIndex}
     */
    glyphIndex: number;
    /**
     * The GlyphValueRecord contains the positional adjustments of the glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.LowLevel.GlyphAdjustmentRecord-glyphValueRecord.html | TextCore.LowLevel.GlyphAdjustmentRecord.glyphValueRecord}
     */
    glyphValueRecord: GlyphValueRecord;



    Equals(obj: unknown): boolean;
    Equals(other: GlyphAdjustmentRecord): boolean;
    GetHashCode(): number;


}
    
interface GlyphValueRecord {
    /**
     * The positional adjustment that affects the horizontal bearing X of the glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.LowLevel.GlyphValueRecord-xPlacement.html | TextCore.LowLevel.GlyphValueRecord.xPlacement}
     */
    xPlacement: number;
    /**
     * The positional adjustment that affectsthe horizontal bearing Y of the glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.LowLevel.GlyphValueRecord-yPlacement.html | TextCore.LowLevel.GlyphValueRecord.yPlacement}
     */
    yPlacement: number;
    /**
     * The positional adjustment that affects the horizontal advance of the glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.LowLevel.GlyphValueRecord-xAdvance.html | TextCore.LowLevel.GlyphValueRecord.xAdvance}
     */
    xAdvance: number;
    /**
     * The positional adjustment that affects the vertical advance of the glyph.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.LowLevel.GlyphValueRecord-yAdvance.html | TextCore.LowLevel.GlyphValueRecord.yAdvance}
     */
    yAdvance: number;



    Equals(obj: unknown): boolean;
    Equals(other: GlyphValueRecord): boolean;
    GetHashCode(): number;


}
    
interface GlyphValueRecordConstructor {


    new(xPlacement: number, yPlacement: number, xAdvance: number, yAdvance: number): GlyphValueRecord;



}
declare const GlyphValueRecord: GlyphValueRecordConstructor;
    
interface GlyphAdjustmentRecordConstructor {


    new(glyphIndex: number, glyphValueRecord: GlyphValueRecord): GlyphAdjustmentRecord;



}
declare const GlyphAdjustmentRecord: GlyphAdjustmentRecordConstructor;
    
interface GlyphPairAdjustmentRecordConstructor {


    new(firstAdjustmentRecord: GlyphAdjustmentRecord, secondAdjustmentRecord: GlyphAdjustmentRecord): GlyphPairAdjustmentRecord;



}
declare const GlyphPairAdjustmentRecord: GlyphPairAdjustmentRecordConstructor;
    
interface MarkToBaseAdjustmentRecord {
    baseGlyphID: number;
    baseGlyphAnchorPoint: GlyphAnchorPoint;
    markGlyphID: number;
    markPositionAdjustment: MarkPositionAdjustment;





}
    
interface GlyphAnchorPoint {
    xCoordinate: number;
    yCoordinate: number;





}
    
interface MarkPositionAdjustment {
    xPositionAdjustment: number;
    yPositionAdjustment: number;





}
    
interface MarkPositionAdjustmentConstructor {


    new(x: number, y: number): MarkPositionAdjustment;



}
declare const MarkPositionAdjustment: MarkPositionAdjustmentConstructor;
    
interface MarkToMarkAdjustmentRecord {
    baseMarkGlyphID: number;
    baseMarkGlyphAnchorPoint: GlyphAnchorPoint;
    combiningMarkGlyphID: number;
    combiningMarkPositionAdjustment: MarkPositionAdjustment;





}
    
interface TMP_FontFeatureTableConstructor {


    new(): TMP_FontFeatureTable;



}
declare const TMP_FontFeatureTable: TMP_FontFeatureTableConstructor;
    
interface TMP_FontWeightPair {
    regularTypeface: TMP_FontAsset;
    italicTypeface: TMP_FontAsset;





}
    
interface TMP_FontAssetConstructor {


    new(): TMP_FontAsset;


    CreateFontAsset(familyName: string, styleName: string, pointSize: number): TMP_FontAsset;
    CreateFontAsset(fontFilePath: string, faceIndex: number, samplingPointSize: number, atlasPadding: number, renderMode: GlyphRenderMode, atlasWidth: number, atlasHeight: number): TMP_FontAsset;
    CreateFontAsset(font: Font): TMP_FontAsset;
    CreateFontAsset(font: Font, samplingPointSize: number, atlasPadding: number, renderMode: GlyphRenderMode, atlasWidth: number, atlasHeight: number, atlasPopulationMode: AtlasPopulationMode, enableMultiAtlasSupport: boolean): TMP_FontAsset;
    GetCharacters(fontAsset: TMP_FontAsset): string;
    GetCharactersArray(fontAsset: TMP_FontAsset): Readonly<number[]>;

}
declare const TMP_FontAsset: TMP_FontAssetConstructor;
    
interface VertexGradient {
    topLeft: Color;
    topRight: Color;
    bottomLeft: Color;
    bottomRight: Color;





}
    
interface VertexGradientConstructor {


    new(color: Color): VertexGradient;
    new(color0: Color, color1: Color, color2: Color, color3: Color): VertexGradient;



}
declare const VertexGradient: VertexGradientConstructor;
    
interface TMP_ColorGradient extends ScriptableObject {
    colorMode: ColorMode;
    topLeft: Color;
    topRight: Color;
    bottomLeft: Color;
    bottomRight: Color;





}
    
interface TMP_ColorGradientConstructor {


    new(): TMP_ColorGradient;
    new(color: Color): TMP_ColorGradient;
    new(color0: Color, color1: Color, color2: Color, color3: Color): TMP_ColorGradient;



}
declare const TMP_ColorGradient: TMP_ColorGradientConstructor;
    
interface TMP_SpriteAsset extends TMP_Asset {
    spriteSheet: Texture;
    spriteInfoList: Readonly<TMP_Sprite[]>;
    fallbackSpriteAssets: Readonly<TMP_SpriteAsset[]>;
    readonly spriteCharacterTable: Readonly<TMP_SpriteCharacter[]>;
    readonly spriteCharacterLookupTable: CSDictionary<number, TMP_SpriteCharacter>;
    readonly spriteGlyphTable: Readonly<TMP_SpriteGlyph[]>;



    GetSpriteIndexFromHashcode(hashCode: number): number;
    GetSpriteIndexFromName(name: string): number;
    GetSpriteIndexFromUnicode(unicode: number): number;
    SortGlyphTable(): void;
    UpdateLookupTables(): void;


}
    
interface TMP_TextElement_Legacy {
    id: number;
    x: number;
    y: number;
    width: number;
    height: number;
    xOffset: number;
    yOffset: number;
    xAdvance: number;
    scale: number;





}
    
interface TMP_TextElement_LegacyConstructor {


    new(): TMP_TextElement_Legacy;



}
declare const TMP_TextElement_Legacy: TMP_TextElement_LegacyConstructor;
    
interface TMP_Sprite extends TMP_TextElement_Legacy {
    name: string;
    hashCode: number;
    unicode: number;
    pivot: Vector2;
    sprite: Sprite;





}
    
interface TMP_SpriteConstructor {


    new(): TMP_Sprite;



}
declare const TMP_Sprite: TMP_SpriteConstructor;
    
interface TMP_SpriteCharacter extends TMP_TextElement {
    name: string;





}
    
interface TMP_SpriteCharacterConstructor {


    new(): TMP_SpriteCharacter;
    new(unicode: number, glyph: TMP_SpriteGlyph): TMP_SpriteCharacter;
    new(unicode: number, spriteAsset: TMP_SpriteAsset, glyph: TMP_SpriteGlyph): TMP_SpriteCharacter;



}
declare const TMP_SpriteCharacter: TMP_SpriteCharacterConstructor;
    
interface TMP_SpriteGlyph extends Glyph {
    sprite: Sprite;





}
    
interface TMP_SpriteGlyphConstructor {


    new(): TMP_SpriteGlyph;
    new(index: number, metrics: GlyphMetrics, glyphRect: GlyphRect, scale: number, atlasIndex: number): TMP_SpriteGlyph;
    new(index: number, metrics: GlyphMetrics, glyphRect: GlyphRect, scale: number, atlasIndex: number, sprite: Sprite): TMP_SpriteGlyph;



}
declare const TMP_SpriteGlyph: TMP_SpriteGlyphConstructor;
    
interface TMP_SpriteAssetConstructor {


    new(): TMP_SpriteAsset;



}
declare const TMP_SpriteAsset: TMP_SpriteAssetConstructor;
    
interface TMP_StyleSheet extends ScriptableObject {



    GetStyle(hashCode: number): TMP_Style;
    GetStyle(name: string): TMP_Style;
    RefreshStyles(): void;


}
    
interface TMP_Style {
    name: string;
    hashCode: number;
    readonly styleOpeningDefinition: string;
    readonly styleClosingDefinition: string;
    readonly styleOpeningTagArray: Readonly<number[]>;
    readonly styleClosingTagArray: Readonly<number[]>;



    RefreshStyle(): void;


}
    
interface TMP_StyleConstructor {
    readonly NormalStyle: TMP_Style;





}
declare const TMP_Style: TMP_StyleConstructor;
    
interface TMP_StyleSheetConstructor {


    new(): TMP_StyleSheet;



}
declare const TMP_StyleSheet: TMP_StyleSheetConstructor;
    
interface TMP_TextInfo {
    textComponent: TMP_Text;
    characterCount: number;
    spriteCount: number;
    spaceCount: number;
    wordCount: number;
    linkCount: number;
    lineCount: number;
    pageCount: number;
    materialCount: number;
    characterInfo: Readonly<TMP_CharacterInfo[]>;
    wordInfo: Readonly<TMP_WordInfo[]>;
    linkInfo: Readonly<TMP_LinkInfo[]>;
    lineInfo: Readonly<TMP_LineInfo[]>;
    pageInfo: Readonly<TMP_PageInfo[]>;
    meshInfo: Readonly<TMP_MeshInfo[]>;



    ClearAllMeshInfo(): void;
    ClearMeshInfo(updateMesh: boolean): void;
    ClearUnusedVertices(materials: Readonly<MaterialReference[]>): void;
    CopyMeshInfoVertexData(): Readonly<TMP_MeshInfo[]>;
    ResetVertexLayout(isVolumetric: boolean): void;


}
    
interface TMP_CharacterInfo {
    elementType: TMP_TextElementType;
    character: string;
    index: number;
    stringLength: number;
    textElement: TMP_TextElement;
    alternativeGlyph: Glyph;
    fontAsset: TMP_FontAsset;
    material: Material;
    materialReferenceIndex: number;
    isUsingAlternateTypeface: boolean;
    pointSize: number;
    lineNumber: number;
    pageNumber: number;
    vertexIndex: number;
    vertex_BL: TMP_Vertex;
    vertex_TL: TMP_Vertex;
    vertex_TR: TMP_Vertex;
    vertex_BR: TMP_Vertex;
    topLeft: Vector3;
    bottomLeft: Vector3;
    topRight: Vector3;
    bottomRight: Vector3;
    origin: number;
    xAdvance: number;
    ascender: number;
    baseLine: number;
    descender: number;
    aspectRatio: number;
    scale: number;
    color: Color32;
    underlineColor: Color32;
    underlineVertexIndex: number;
    strikethroughColor: Color32;
    strikethroughVertexIndex: number;
    highlightColor: Color32;
    highlightState: HighlightState;
    style: FontStyles;
    isVisible: boolean;





}
    
interface TMP_Vertex {
    position: Vector3;
    uv: Vector4;
    uv2: Vector2;
    color: Color32;





}
    
interface TMP_VertexConstructor {
    readonly zero: TMP_Vertex;





}
declare const TMP_Vertex: TMP_VertexConstructor;
    
interface HighlightState {
    color: Color32;
    padding: TMP_Offset;



    Equals(obj: unknown): boolean;
    Equals(other: HighlightState): boolean;
    GetHashCode(): number;


}
    
interface TMP_Offset {
    left: number;
    right: number;
    top: number;
    bottom: number;
    horizontal: number;
    vertical: number;



    Equals(obj: unknown): boolean;
    Equals(other: TMP_Offset): boolean;
    GetHashCode(): number;


}
    
interface TMP_OffsetConstructor {
    readonly zero: TMP_Offset;


    new(left: number, right: number, top: number, bottom: number): TMP_Offset;
    new(horizontal: number, vertical: number): TMP_Offset;



}
declare const TMP_Offset: TMP_OffsetConstructor;
    
interface HighlightStateConstructor {


    new(color: Color32, padding: TMP_Offset): HighlightState;



}
declare const HighlightState: HighlightStateConstructor;
    
interface TMP_WordInfo {
    textComponent: TMP_Text;
    firstCharacterIndex: number;
    lastCharacterIndex: number;
    characterCount: number;



    GetWord(): string;


}
    
interface TMP_LinkInfo {
    textComponent: TMP_Text;
    hashCode: number;
    linkIdFirstCharacterIndex: number;
    linkIdLength: number;
    linkTextfirstCharacterIndex: number;
    linkTextLength: number;



    GetLink(): string;
    GetLinkID(): string;
    GetLinkText(): string;


}
    
interface TMP_LineInfo {
    characterCount: number;
    visibleCharacterCount: number;
    spaceCount: number;
    visibleSpaceCount: number;
    wordCount: number;
    firstCharacterIndex: number;
    firstVisibleCharacterIndex: number;
    lastCharacterIndex: number;
    lastVisibleCharacterIndex: number;
    length: number;
    lineHeight: number;
    ascender: number;
    baseline: number;
    descender: number;
    maxAdvance: number;
    width: number;
    marginLeft: number;
    marginRight: number;
    alignment: HorizontalAlignmentOptions;
    lineExtents: Extents;





}
    
interface Extents {
    min: Vector2;
    max: Vector2;



    ToString(): string;


}
    
interface ExtentsConstructor {


    new(min: Vector2, max: Vector2): Extents;



}
declare const Extents: ExtentsConstructor;
    
interface TMP_PageInfo {
    firstCharacterIndex: number;
    lastCharacterIndex: number;
    ascender: number;
    baseLine: number;
    descender: number;





}
    
interface TMP_MeshInfo {
    mesh: Mesh;
    vertexCount: number;
    vertices: Readonly<Vector3[]>;
    normals: Readonly<Vector3[]>;
    tangents: Readonly<Vector4[]>;
    uvs0: Readonly<Vector4[]>;
    uvs2: Readonly<Vector2[]>;
    colors32: Readonly<Color32[]>;
    triangles: Readonly<number[]>;
    material: Material;



    Clear(): void;
    Clear(uploadChanges: boolean): void;
    ClearUnusedVertices(): void;
    ClearUnusedVertices(startIndex: number): void;
    ClearUnusedVertices(startIndex: number, updateMesh: boolean): void;
    ResizeMeshInfo(size: number): void;
    ResizeMeshInfo(size: number, isVolumetric: boolean): void;
    SortGeometry(order: VertexSortingOrder): void;
    SortGeometry(sortingOrder: Readonly<number[]>): void;
    SwapVertexData(src: number, dst: number): void;


}
    
interface TMP_MeshInfoConstructor {


    new(mesh: Mesh, size: number): TMP_MeshInfo;
    new(mesh: Mesh, size: number, isVolumetric: boolean): TMP_MeshInfo;



}
declare const TMP_MeshInfo: TMP_MeshInfoConstructor;
    
interface MaterialReference {
    index: number;
    fontAsset: TMP_FontAsset;
    spriteAsset: TMP_SpriteAsset;
    material: Material;
    isDefaultMaterial: boolean;
    isFallbackMaterial: boolean;
    fallbackMaterial: Material;
    padding: number;
    referenceCount: number;





}
    
interface MaterialReferenceConstructor {


    new(index: number, fontAsset: TMP_FontAsset, spriteAsset: TMP_SpriteAsset, material: Material, padding: number): MaterialReference;


    AddMaterialReference(material: Material, fontAsset: TMP_FontAsset, materialReferences: Readonly<MaterialReference[]>, materialReferenceIndexLookup: CSDictionary<number, number>): number;
    AddMaterialReference(material: Material, spriteAsset: TMP_SpriteAsset, materialReferences: Readonly<MaterialReference[]>, materialReferenceIndexLookup: CSDictionary<number, number>): number;
    Contains(materialReferences: Readonly<MaterialReference[]>, fontAsset: TMP_FontAsset): boolean;

}
declare const MaterialReference: MaterialReferenceConstructor;
    
interface TMP_TextInfoConstructor {


    new(): TMP_TextInfo;
    new(textComponent: TMP_Text): TMP_TextInfo;


    Resize<T>(array: Readonly<T[]>, size: number): void;
    Resize<T>(array: Readonly<T[]>, size: number, isBlockAllocated: boolean): void;

}
declare const TMP_TextInfo: TMP_TextInfoConstructor;
    
interface TMP_TextConstructor {





    readonly OnFontAssetRequest: MonoSignal<number, string, TMP_FontAsset>;
    readonly OnSpriteAssetRequest: MonoSignal<number, string, TMP_SpriteAsset>;
    readonly OnMissingCharacter: MonoSignal<void>;
}
declare const TMP_Text: TMP_TextConstructor;
    
interface TextMeshProUGUI extends TMP_Text, ILayoutElement {
    readonly materialForRendering: Material;
    autoSizeTextContainer: boolean;
    readonly mesh: Mesh;
    readonly canvasRenderer: CanvasRenderer;
    maskOffset: Vector4;

    readonly OnPreRenderText: MonoSignal<TMP_TextInfo>;


    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    ClearMesh(): void;
    ComputeMarginSize(): void;
    Cull(clipRect: Rect, validRect: boolean): void;
    ForceMeshUpdate(ignoreActiveState: boolean, forceTextReparsing: boolean): void;
    GetModifiedMaterial(baseMaterial: Material): Material;
    GetTextInfo(text: string): TMP_TextInfo;
    Rebuild(update: CanvasUpdate): void;
    RecalculateClipping(): void;
    SetAllDirty(): void;
    SetLayoutDirty(): void;
    SetMaterialDirty(): void;
    SetVerticesDirty(): void;
    UpdateFontAsset(): void;
    UpdateGeometry(mesh: Mesh, index: number): void;
    UpdateMeshPadding(): void;
    UpdateVertexData(flags: TMP_VertexDataUpdateFlags): void;
    UpdateVertexData(): void;


}
    
interface TextMeshProUGUIConstructor {


    new(): TextMeshProUGUI;



}
declare const TextMeshProUGUI: TextMeshProUGUIConstructor;
    
interface Animation extends Behaviour {
    /**
     * The default animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation-clip.html | Animation.clip}
     */
    clip: AnimationClip;
    /**
     * Should the default animation clip (the Animation.clip property) automatically start playing on startup?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation-playAutomatically.html | Animation.playAutomatically}
     */
    playAutomatically: boolean;
    /**
     * How should time beyond the playback range of the clip be treated?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation-wrapMode.html | Animation.wrapMode}
     */
    wrapMode: WrapMode;
    /**
     * Is an animation currently being played?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation-isPlaying.html | Animation.isPlaying}
     */
    readonly isPlaying: boolean;
    readonly Item: AnimationState;
    /**
     * When enabled, the physics system uses animated transforms from GameObjects with kinematic Rigidbody components to influence other GameObjects.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation-animatePhysics.html | Animation.animatePhysics}
     */
    animatePhysics: boolean;
    /**
     * Specifies the update mode of the Animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation-updateMode.html | Animation.updateMode}
     */
    updateMode: AnimationUpdateMode;
    /**
     * Controls culling of this Animation component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation-cullingType.html | Animation.cullingType}
     */
    cullingType: AnimationCullingType;
    /**
     * AABB of this Animation animation component in local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation-localBounds.html | Animation.localBounds}
     */
    localBounds: Bounds;



    /**
     * Adds a clip to the animation with name newName.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.AddClip.html | Animation.AddClip}
     */
    AddClip(clip: AnimationClip, newName: string): void;
    /**
     * Adds clip to the only play between firstFrame and lastFrame. The new clip will also be added to the animation with name newName.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.AddClip.html | Animation.AddClip}
     */
    AddClip(clip: AnimationClip, newName: string, firstFrame: number, lastFrame: number): void;
    /**
     * Adds clip to the only play between firstFrame and lastFrame. The new clip will also be added to the animation with name newName.
     * @param addLoopFrame Should an extra frame be inserted at the end that matches the first frame? Turn this on if you are making a looping animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.AddClip.html | Animation.AddClip}
     */
    AddClip(clip: AnimationClip, newName: string, firstFrame: number, lastFrame: number, addLoopFrame: boolean): void;
    /**
     * Blends the animation named animation towards targetWeight over the next time seconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Blend.html | Animation.Blend}
     */
    Blend(animation: string): void;
    /**
     * Blends the animation named animation towards targetWeight over the next time seconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Blend.html | Animation.Blend}
     */
    Blend(animation: string, targetWeight: number): void;
    /**
     * Blends the animation named animation towards targetWeight over the next time seconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Blend.html | Animation.Blend}
     */
    Blend(animation: string, targetWeight: number, fadeLength: number): void;
    /**
     * Fades in the animation with the name animation over a period of time defined by fadeLength.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.CrossFade.html | Animation.CrossFade}
     */
    CrossFade(animation: string): void;
    /**
     * Fades in the animation with the name animation over a period of time defined by fadeLength.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.CrossFade.html | Animation.CrossFade}
     */
    CrossFade(animation: string, fadeLength: number): void;
    /**
     * Fades in the animation with the name animation over a period of time defined by fadeLength.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.CrossFade.html | Animation.CrossFade}
     */
    CrossFade(animation: string, fadeLength: number, mode: PlayMode): void;
    /**
     * Cross fades an animation after previous animations has finished playing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.CrossFadeQueued.html | Animation.CrossFadeQueued}
     */
    CrossFadeQueued(animation: string): AnimationState;
    /**
     * Cross fades an animation after previous animations has finished playing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.CrossFadeQueued.html | Animation.CrossFadeQueued}
     */
    CrossFadeQueued(animation: string, fadeLength: number): AnimationState;
    /**
     * Cross fades an animation after previous animations has finished playing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.CrossFadeQueued.html | Animation.CrossFadeQueued}
     */
    CrossFadeQueued(animation: string, fadeLength: number, queue: QueueMode): AnimationState;
    /**
     * Cross fades an animation after previous animations has finished playing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.CrossFadeQueued.html | Animation.CrossFadeQueued}
     */
    CrossFadeQueued(animation: string, fadeLength: number, queue: QueueMode, mode: PlayMode): AnimationState;
    GetClip(name: string): AnimationClip;
    /**
     * Get the number of clips currently assigned to this animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.GetClipCount.html | Animation.GetClipCount}
     */
    GetClipCount(): number;
    GetEnumerator(): IEnumerator;
    /**
     * Is the animation named name playing?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.IsPlaying.html | Animation.IsPlaying}
     */
    IsPlaying(name: string): boolean;
    /**
     * Plays an animation without blending.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Play.html | Animation.Play}
     */
    Play(): boolean;
    /**
     * Plays an animation without blending.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Play.html | Animation.Play}
     */
    Play(mode: PlayMode): boolean;
    /**
     * Plays an animation without blending.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Play.html | Animation.Play}
     */
    Play(animation: string): boolean;
    /**
     * Plays an animation without blending.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Play.html | Animation.Play}
     */
    Play(animation: string, mode: PlayMode): boolean;
    /**
     * Plays an animation after previous animations has finished playing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.PlayQueued.html | Animation.PlayQueued}
     */
    PlayQueued(animation: string): AnimationState;
    /**
     * Plays an animation after previous animations has finished playing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.PlayQueued.html | Animation.PlayQueued}
     */
    PlayQueued(animation: string, queue: QueueMode): AnimationState;
    /**
     * Plays an animation after previous animations has finished playing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.PlayQueued.html | Animation.PlayQueued}
     */
    PlayQueued(animation: string, queue: QueueMode, mode: PlayMode): AnimationState;
    /**
     * Remove clip from the animation list.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.RemoveClip.html | Animation.RemoveClip}
     */
    RemoveClip(clip: AnimationClip): void;
    /**
     * Remove clip from the animation list.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.RemoveClip.html | Animation.RemoveClip}
     */
    RemoveClip(clipName: string): void;
    /**
     * Rewinds all animations.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Rewind.html | Animation.Rewind}
     */
    Rewind(): void;
    /**
     * Rewinds the animation named name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Rewind.html | Animation.Rewind}
     */
    Rewind(name: string): void;
    /**
     * Samples animations at the current state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Sample.html | Animation.Sample}
     */
    Sample(): void;
    /**
     * Stops all playing animations that were started with this Animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Stop.html | Animation.Stop}
     */
    Stop(): void;
    /**
     * Stops an animation named name.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Animation.Stop.html | Animation.Stop}
     */
    Stop(name: string): void;
    SyncLayer(layer: number): void;


}
    
interface AnimationConstructor {


    new(): Animation;



}
declare const Animation: AnimationConstructor;
    
interface ClientSceneListener extends MonoBehaviour {
    IsGameSceneLoaded: boolean;
    SceneLoadPercent: number;

    readonly sceneLoadedEvent: MonoSignal<void>;
    readonly sceneLoadPercentChanged: MonoSignal<void>;




}
    
interface ClientSceneListenerConstructor {


    new(): ClientSceneListener;



}
declare const ClientSceneListener: ClientSceneListenerConstructor;
    
interface BundleLoadingScreen extends MonoBehaviour {
    showContinueButton: boolean;



    SetError(msg: string): void;
    SetProgress(text: string, percent: number): void;
    SetTotalDownloadSize(sizeBytes: number): void;


}
    
interface CoreLoadingScreen extends BundleLoadingScreen {
    progressText: TMP_Text;
    disconnectButton: Button;
    continueButton: Button;
    spinner: GameObject;
    gameImage: RawImage;
    editorGameImageColor: Color;
    bottomCard: RectTransform;
    errorWrapper: GameObject;
    errorText: TMP_Text;
    voiceChatCard: RectTransform;
    voiceChatToggle: InternalToggle;
    updatedByGame: boolean;



    ClickContinueButton(): void;
    Close(): void;
    DisconnectBtn_OnClick(): void;
    OnReload(): void;
    RetryBtn_OnClick(): void;
    SetError(msg: string): void;
    SetProgress(text: string, percent: number): void;
    SetTotalDownloadSize(sizeBytes: number): void;


}
    
interface RawImage extends MaskableGraphic {
    readonly mainTexture: Texture;
    texture: Texture;
    uvRect: Rect;



    SetNativeSize(): void;


}
    
interface InternalToggle extends MonoBehaviour {
    onValueChanged: Action<boolean>;
    bgImage: Image;
    handle: RectTransform;
    activeColor: Color;
    inactiveColor: Color;



    Button_OnClick(): void;
    SetValue(val: boolean): void;
    Start(): void;


}
    
interface InternalToggleConstructor {


    new(): InternalToggle;



}
declare const InternalToggle: InternalToggleConstructor;
    
interface CoreLoadingScreenConstructor {
    gameImageCache: CSDictionary<string, Texture2D>;


    new(): CoreLoadingScreen;



}
declare const CoreLoadingScreen: CoreLoadingScreenConstructor;
    
interface IDelayedField {
    readonly isDelayed: boolean;





}
    
interface IEditableElement {





}
    
interface IMixedValueSupport {
    /**
     * Indicates whether to enable the mixed value state on the value field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IMixedValueSupport-showMixedValue.html | UIElements.IMixedValueSupport.showMixedValue}
     */
    showMixedValue: boolean;





}
    
interface INotifyValueChanged<T> {
    value: T;



    SetValueWithoutNotify(newValue: T): void;


}
    
interface IPrefixLabel {
    readonly label: string;
    readonly labelElement: Label;





}
    
interface ITextElement {
    text: string;





}
    
interface ITextEdition {
    /**
     * Returns true if the element is read only.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextEdition-isReadOnly.html | UIElements.ITextEdition.isReadOnly}
     */
    isReadOnly: boolean;
    /**
     * Maximum number of characters for that element
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextEdition-maxLength.html | UIElements.ITextEdition.maxLength}
     */
    maxLength: number;
    /**
     * A short hint to help users understand what to enter in the field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextEdition-placeholder.html | UIElements.ITextEdition.placeholder}
     */
    placeholder: string;
    /**
     * If set to true, the value property isn't updated until either the user presses Enter or the element loses focus.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextEdition-isDelayed.html | UIElements.ITextEdition.isDelayed}
     */
    isDelayed: boolean;
    /**
     * The character used for masking when in password mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextEdition-maskChar.html | UIElements.ITextEdition.maskChar}
     */
    maskChar: string;
    /**
     * Returns true if the field is used to edit a password.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextEdition-isPassword.html | UIElements.ITextEdition.isPassword}
     */
    isPassword: boolean;
    /**
     * Hides the placeholder on focus.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextEdition-hidePlaceholderOnFocus.html | UIElements.ITextEdition.hidePlaceholderOnFocus}
     */
    hidePlaceholderOnFocus: boolean;
    /**
     * Determines if the soft keyboard auto correction is turned on or off.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextEdition-autoCorrection.html | UIElements.ITextEdition.autoCorrection}
     */
    autoCorrection: boolean;
    /**
     * Hides or shows the mobile input field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextEdition-hideMobileInput.html | UIElements.ITextEdition.hideMobileInput}
     */
    hideMobileInput: boolean;
    /**
     * The TouchScreenKeyboard being used to edit the Input Field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextEdition-touchScreenKeyboard.html | UIElements.ITextEdition.touchScreenKeyboard}
     */
    readonly touchScreenKeyboard: TouchScreenKeyboard;
    /**
     * The type of mobile keyboard that will be used.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextEdition-keyboardType.html | UIElements.ITextEdition.keyboardType}
     */
    keyboardType: TouchScreenKeyboardType;





}
    
interface TouchScreenKeyboard {
    /**
     * Returns the text displayed by the input field of the keyboard.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-text.html | TouchScreenKeyboard.text}
     */
    text: string;
    /**
     * Is the keyboard visible or sliding into the position on the screen?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-active.html | TouchScreenKeyboard.active}
     */
    active: boolean;
    /**
     * Returns the status of the on-screen keyboard. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-status.html | TouchScreenKeyboard.status}
     */
    readonly status: Status;
    /**
     * How many characters the keyboard input field is limited to. 0 = infinite.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-characterLimit.html | TouchScreenKeyboard.characterLimit}
     */
    characterLimit: number;
    /**
     * Specifies whether the TouchScreenKeyboard supports the selection property. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-canGetSelection.html | TouchScreenKeyboard.canGetSelection}
     */
    readonly canGetSelection: boolean;
    /**
     * Specifies whether the TouchScreenKeyboard supports the selection property. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-canSetSelection.html | TouchScreenKeyboard.canSetSelection}
     */
    readonly canSetSelection: boolean;
    /**
     * Gets or sets the character range of the selected text within the string currently being edited.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-selection.html | TouchScreenKeyboard.selection}
     */
    selection: RangeInt;
    /**
     * Returns the TouchScreenKeyboardType of the keyboard.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-type.html | TouchScreenKeyboard.type}
     */
    readonly type: TouchScreenKeyboardType;
    /**
     * Specified on which display the on-screen keyboard will appear.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-targetDisplay.html | TouchScreenKeyboard.targetDisplay}
     */
    targetDisplay: number;





}
    
interface RangeInt {
    start: number;
    length: number;
    /**
     * The end index of the range (not inclusive).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RangeInt-end.html | RangeInt.end}
     */
    readonly end: number;





}
    
interface RangeIntConstructor {


    new(start: number, length: number): RangeInt;



}
declare const RangeInt: RangeIntConstructor;
    
interface TouchScreenKeyboardConstructor {
    /**
     * Is touch screen keyboard supported.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-isSupported.html | TouchScreenKeyboard.isSupported}
     */
    readonly isSupported: boolean;
    /**
     * Checks if the text within an input field can be selected and modified while TouchScreenKeyboard is open.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-isInPlaceEditingAllowed.html | TouchScreenKeyboard.isInPlaceEditingAllowed}
     */
    readonly isInPlaceEditingAllowed: boolean;
    /**
     * Will text input field above the keyboard be hidden when the keyboard is on screen?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-hideInput.html | TouchScreenKeyboard.hideInput}
     */
    hideInput: boolean;
    /**
     * Returns the status of the on-screen keyboard's input field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-inputFieldAppearance.html | TouchScreenKeyboard.inputFieldAppearance}
     */
    readonly inputFieldAppearance: InputFieldAppearance;
    /**
     * Returns portion of the screen which is covered by the keyboard.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-area.html | TouchScreenKeyboard.area}
     */
    readonly area: Rect;
    /**
     * Returns true whenever any keyboard is visible on the screen.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TouchScreenKeyboard-visible.html | TouchScreenKeyboard.visible}
     */
    readonly visible: boolean;


    new(text: string, keyboardType: TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean, textPlaceholder: string, characterLimit: number): TouchScreenKeyboard;


    Open(text: string, keyboardType: TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean, textPlaceholder: string, characterLimit: number): TouchScreenKeyboard;
    Open(text: string, keyboardType: TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean, textPlaceholder: string): TouchScreenKeyboard;
    Open(text: string, keyboardType: TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean): TouchScreenKeyboard;
    Open(text: string, keyboardType: TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean): TouchScreenKeyboard;
    Open(text: string, keyboardType: TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean): TouchScreenKeyboard;
    Open(text: string, keyboardType: TouchScreenKeyboardType, autocorrection: boolean): TouchScreenKeyboard;
    Open(text: string, keyboardType: TouchScreenKeyboardType): TouchScreenKeyboard;
    Open(text: string): TouchScreenKeyboard;

}
declare const TouchScreenKeyboard: TouchScreenKeyboardConstructor;
    
interface IExperimentalFeatures {
    /**
     * Returns the animation experimental interface.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IExperimentalFeatures-animation.html | UIElements.IExperimentalFeatures.animation}
     */
    readonly animation: ITransitionAnimations;





}
    
interface ITransitionAnimations {



    /**
     * Triggers an animation changing this element's layout style values.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.ITransitionAnimations.Layout.html | UIElements.Experimental.ITransitionAnimations.Layout}
     */
    Layout(to: Rect, durationMs: number): ValueAnimation<Rect>;
    /**
     * Triggers an animation changing this element's transform position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.ITransitionAnimations.Position.html | UIElements.Experimental.ITransitionAnimations.Position}
     */
    Position(to: Vector3, duration: number): ValueAnimation<Vector3>;
    /**
     * Triggers an animation changing this element's transform rotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.ITransitionAnimations.Rotation.html | UIElements.Experimental.ITransitionAnimations.Rotation}
     */
    Rotation(to: Quaternion, duration: number): ValueAnimation<Quaternion>;
    /**
     * Triggers an animation changing this element's transform scale.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.ITransitionAnimations.Scale.html | UIElements.Experimental.ITransitionAnimations.Scale}
     */
    Scale(to: number, duration: number): ValueAnimation<number>;
    /**
     * Triggers an animation changing this element's size style values.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.ITransitionAnimations.Size.html | UIElements.Experimental.ITransitionAnimations.Size}
     */
    Size(to: Vector2, durationMs: number): ValueAnimation<Vector2>;
    Start(from: number, to: number, durationMs: number, onValueChanged: Action<VisualElement, number>): ValueAnimation<number>;
    Start(from: Rect, to: Rect, durationMs: number, onValueChanged: Action<VisualElement, Rect>): ValueAnimation<Rect>;
    Start(from: Color, to: Color, durationMs: number, onValueChanged: Action<VisualElement, Color>): ValueAnimation<Color>;
    Start(from: Vector3, to: Vector3, durationMs: number, onValueChanged: Action<VisualElement, Vector3>): ValueAnimation<Vector3>;
    Start(from: Vector2, to: Vector2, durationMs: number, onValueChanged: Action<VisualElement, Vector2>): ValueAnimation<Vector2>;
    Start(from: Quaternion, to: Quaternion, durationMs: number, onValueChanged: Action<VisualElement, Quaternion>): ValueAnimation<Quaternion>;
    /**
     * Starts a transition animation on this VisualElement.
     * @param from Start value.
     * @param to End value.
     * @param durationMs Duration of the transition in milliseconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.ITransitionAnimations.Start.html | UIElements.Experimental.ITransitionAnimations.Start}
     */
    Start(from: StyleValues, to: StyleValues, durationMs: number): ValueAnimation<StyleValues>;
    /**
     * Starts a transition animation on this VisualElement.
     * @param to End value.
     * @param durationMs Duration of the transition in milliseconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.ITransitionAnimations.Start.html | UIElements.Experimental.ITransitionAnimations.Start}
     */
    Start(to: StyleValues, durationMs: number): ValueAnimation<StyleValues>;
    Start(fromValueGetter: Func<VisualElement, number>, to: number, durationMs: number, onValueChanged: Action<VisualElement, number>): ValueAnimation<number>;
    Start(fromValueGetter: Func<VisualElement, Rect>, to: Rect, durationMs: number, onValueChanged: Action<VisualElement, Rect>): ValueAnimation<Rect>;
    Start(fromValueGetter: Func<VisualElement, Color>, to: Color, durationMs: number, onValueChanged: Action<VisualElement, Color>): ValueAnimation<Color>;
    Start(fromValueGetter: Func<VisualElement, Vector3>, to: Vector3, durationMs: number, onValueChanged: Action<VisualElement, Vector3>): ValueAnimation<Vector3>;
    Start(fromValueGetter: Func<VisualElement, Vector2>, to: Vector2, durationMs: number, onValueChanged: Action<VisualElement, Vector2>): ValueAnimation<Vector2>;
    Start(fromValueGetter: Func<VisualElement, Quaternion>, to: Quaternion, durationMs: number, onValueChanged: Action<VisualElement, Quaternion>): ValueAnimation<Quaternion>;
    /**
     * Triggers an animation changing this element's positioning style values.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.ITransitionAnimations.TopLeft.html | UIElements.Experimental.ITransitionAnimations.TopLeft}
     */
    TopLeft(to: Vector2, durationMs: number): ValueAnimation<Vector2>;


}
    
interface IValueAnimationUpdate {



    Tick(currentTimeMs: number): void;


}
    
interface IValueAnimation {
    /**
     * Tells if the animation is currently active.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.IValueAnimation-isRunning.html | UIElements.Experimental.IValueAnimation.isRunning}
     */
    readonly isRunning: boolean;
    /**
     * Duration of the transition in milliseconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.IValueAnimation-durationMs.html | UIElements.Experimental.IValueAnimation.durationMs}
     */
    durationMs: number;



    /**
     * Returns this animation object into its object pool.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.IValueAnimation.Recycle.html | UIElements.Experimental.IValueAnimation.Recycle}
     */
    Recycle(): void;
    /**
     * Starts the animation using this object's values.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.IValueAnimation.Start.html | UIElements.Experimental.IValueAnimation.Start}
     */
    Start(): void;
    /**
     * Stops this animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.IValueAnimation.Stop.html | UIElements.Experimental.IValueAnimation.Stop}
     */
    Stop(): void;


}
    
    
interface IVisualElementScheduler {



    Execute(timerUpdateEvent: Action<TimerState>): IVisualElementScheduledItem;
    /**
     * Schedule this action to be executed later.
     * @param updateEvent The action to be executed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IVisualElementScheduler.Execute.html | UIElements.IVisualElementScheduler.Execute}
     */
    Execute(updateEvent: Action): IVisualElementScheduledItem;


}
    
interface IVisualElementScheduledItem {
    /**
     * Returns the VisualElement this object is associated with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IVisualElementScheduledItem-element.html | UIElements.IVisualElementScheduledItem.element}
     */
    readonly element: VisualElement;
    /**
     * Will be true when this item is scheduled. Note that an item's callback will only be executed when it's VisualElement is attached to a panel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IVisualElementScheduledItem-isActive.html | UIElements.IVisualElementScheduledItem.isActive}
     */
    readonly isActive: boolean;



    /**
     * Repeats this action after a specified time.
     * @param intervalMs Minimum amount of time in milliseconds between each action execution.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IVisualElementScheduledItem.Every.html | UIElements.IVisualElementScheduledItem.Every}
     */
    Every(intervalMs: number): IVisualElementScheduledItem;
    /**
     * Cancels any previously scheduled execution of this item and re-schedules the item.
     * @param delayMs Minimum time in milliseconds before this item will be executed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IVisualElementScheduledItem.ExecuteLater.html | UIElements.IVisualElementScheduledItem.ExecuteLater}
     */
    ExecuteLater(delayMs: number): void;
    /**
     * After specified duration, the item will be automatically unscheduled.
     * @param durationMs The total duration in milliseconds where this item will be active.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IVisualElementScheduledItem.ForDuration.html | UIElements.IVisualElementScheduledItem.ForDuration}
     */
    ForDuration(durationMs: number): IVisualElementScheduledItem;
    /**
     * Removes this item from its VisualElement's scheduler.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IVisualElementScheduledItem.Pause.html | UIElements.IVisualElementScheduledItem.Pause}
     */
    Pause(): void;
    /**
     * If not already active, will schedule this item on its VisualElement's scheduler.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IVisualElementScheduledItem.Resume.html | UIElements.IVisualElementScheduledItem.Resume}
     */
    Resume(): void;
    /**
     * Adds a delay to the first invokation.
     * @param delayMs The minimum number of milliseconds after activation where this item's action will be executed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IVisualElementScheduledItem.StartingIn.html | UIElements.IVisualElementScheduledItem.StartingIn}
     */
    StartingIn(delayMs: number): IVisualElementScheduledItem;
    Until(stopCondition: Func<boolean>): IVisualElementScheduledItem;


}
    
interface TimerState {
    /**
     * Start time in milliseconds, or last callback time for repeatable IScheduledItem.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TimerState-start.html | UIElements.TimerState.start}
     */
    start: number;
    /**
     * Current time in milliseconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TimerState-now.html | UIElements.TimerState.now}
     */
    now: number;
    /**
     * Time difference in milliseconds between now and the previous callback.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TimerState-deltaTime.html | UIElements.TimerState.deltaTime}
     */
    readonly deltaTime: number;



    /**
     * Compare this object with another object and return true if they are equal.
     * @param obj The object to compare with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TimerState.Equals.html | UIElements.TimerState.Equals}
     */
    Equals(obj: unknown): boolean;
    /**
     * Compare this object with another object and return true if they are equal.
     * @param other The object to compare with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TimerState.Equals.html | UIElements.TimerState.Equals}
     */
    Equals(other: TimerState): boolean;
    GetHashCode(): number;


}
    
interface IResolvedStyle {
    /**
     * Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-alignContent.html | UIElements.IResolvedStyle.alignContent}
     */
    readonly alignContent: Align;
    /**
     * Alignment of children on the cross axis of this container.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-alignItems.html | UIElements.IResolvedStyle.alignItems}
     */
    readonly alignItems: Align;
    /**
     * Similar to align-items, but only for this specific element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-alignSelf.html | UIElements.IResolvedStyle.alignSelf}
     */
    readonly alignSelf: Align;
    /**
     * Background color to paint in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-backgroundColor.html | UIElements.IResolvedStyle.backgroundColor}
     */
    readonly backgroundColor: Color;
    /**
     * Background image to paint in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-backgroundImage.html | UIElements.IResolvedStyle.backgroundImage}
     */
    readonly backgroundImage: Background;
    /**
     * Background image x position value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-backgroundPositionX.html | UIElements.IResolvedStyle.backgroundPositionX}
     */
    readonly backgroundPositionX: BackgroundPosition;
    /**
     * Background image y position value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-backgroundPositionY.html | UIElements.IResolvedStyle.backgroundPositionY}
     */
    readonly backgroundPositionY: BackgroundPosition;
    /**
     * Background image repeat value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-backgroundRepeat.html | UIElements.IResolvedStyle.backgroundRepeat}
     */
    readonly backgroundRepeat: BackgroundRepeat;
    /**
     * Background image size value. Transitions are fully supported only when using size in pixels or percentages, such as pixel-to-pixel or percentage-to-percentage transitions.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-backgroundSize.html | UIElements.IResolvedStyle.backgroundSize}
     */
    readonly backgroundSize: BackgroundSize;
    /**
     * Color of the element's bottom border.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderBottomColor.html | UIElements.IResolvedStyle.borderBottomColor}
     */
    readonly borderBottomColor: Color;
    /**
     * The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderBottomLeftRadius.html | UIElements.IResolvedStyle.borderBottomLeftRadius}
     */
    readonly borderBottomLeftRadius: number;
    /**
     * The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderBottomRightRadius.html | UIElements.IResolvedStyle.borderBottomRightRadius}
     */
    readonly borderBottomRightRadius: number;
    /**
     * Space reserved for the bottom edge of the border during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderBottomWidth.html | UIElements.IResolvedStyle.borderBottomWidth}
     */
    readonly borderBottomWidth: number;
    /**
     * Color of the element's left border.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderLeftColor.html | UIElements.IResolvedStyle.borderLeftColor}
     */
    readonly borderLeftColor: Color;
    /**
     * Space reserved for the left edge of the border during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderLeftWidth.html | UIElements.IResolvedStyle.borderLeftWidth}
     */
    readonly borderLeftWidth: number;
    /**
     * Color of the element's right border.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderRightColor.html | UIElements.IResolvedStyle.borderRightColor}
     */
    readonly borderRightColor: Color;
    /**
     * Space reserved for the right edge of the border during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderRightWidth.html | UIElements.IResolvedStyle.borderRightWidth}
     */
    readonly borderRightWidth: number;
    /**
     * Color of the element's top border.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderTopColor.html | UIElements.IResolvedStyle.borderTopColor}
     */
    readonly borderTopColor: Color;
    /**
     * The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderTopLeftRadius.html | UIElements.IResolvedStyle.borderTopLeftRadius}
     */
    readonly borderTopLeftRadius: number;
    /**
     * The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderTopRightRadius.html | UIElements.IResolvedStyle.borderTopRightRadius}
     */
    readonly borderTopRightRadius: number;
    /**
     * Space reserved for the top edge of the border during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-borderTopWidth.html | UIElements.IResolvedStyle.borderTopWidth}
     */
    readonly borderTopWidth: number;
    /**
     * Bottom distance from the element's box during layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-bottom.html | UIElements.IResolvedStyle.bottom}
     */
    readonly bottom: number;
    /**
     * Color to use when drawing the text of an element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-color.html | UIElements.IResolvedStyle.color}
     */
    readonly color: Color;
    /**
     * Defines how an element is displayed in the layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-display.html | UIElements.IResolvedStyle.display}
     */
    readonly display: DisplayStyle;
    /**
     * Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-flexBasis.html | UIElements.IResolvedStyle.flexBasis}
     */
    readonly flexBasis: StyleFloat;
    /**
     * Direction of the main axis to layout children in a container.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-flexDirection.html | UIElements.IResolvedStyle.flexDirection}
     */
    readonly flexDirection: FlexDirection;
    /**
     * Specifies how the item will grow relative to the rest of the flexible items inside the same container.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-flexGrow.html | UIElements.IResolvedStyle.flexGrow}
     */
    readonly flexGrow: number;
    /**
     * Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-flexShrink.html | UIElements.IResolvedStyle.flexShrink}
     */
    readonly flexShrink: number;
    /**
     * Placement of children over multiple lines if not enough space is available in this container.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-flexWrap.html | UIElements.IResolvedStyle.flexWrap}
     */
    readonly flexWrap: Wrap;
    /**
     * Font size to draw the element's text.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-fontSize.html | UIElements.IResolvedStyle.fontSize}
     */
    readonly fontSize: number;
    /**
     * Fixed height of an element for the layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-height.html | UIElements.IResolvedStyle.height}
     */
    readonly height: number;
    /**
     * Justification of children on the main axis of this container.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-justifyContent.html | UIElements.IResolvedStyle.justifyContent}
     */
    readonly justifyContent: Justify;
    /**
     * Left distance from the element's box during layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-left.html | UIElements.IResolvedStyle.left}
     */
    readonly left: number;
    /**
     * Increases or decreases the space between characters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-letterSpacing.html | UIElements.IResolvedStyle.letterSpacing}
     */
    readonly letterSpacing: number;
    /**
     * Space reserved for the bottom edge of the margin during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-marginBottom.html | UIElements.IResolvedStyle.marginBottom}
     */
    readonly marginBottom: number;
    /**
     * Space reserved for the left edge of the margin during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-marginLeft.html | UIElements.IResolvedStyle.marginLeft}
     */
    readonly marginLeft: number;
    /**
     * Space reserved for the right edge of the margin during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-marginRight.html | UIElements.IResolvedStyle.marginRight}
     */
    readonly marginRight: number;
    /**
     * Space reserved for the top edge of the margin during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-marginTop.html | UIElements.IResolvedStyle.marginTop}
     */
    readonly marginTop: number;
    /**
     * Maximum height for an element, when it is flexible or measures its own size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-maxHeight.html | UIElements.IResolvedStyle.maxHeight}
     */
    readonly maxHeight: StyleFloat;
    /**
     * Maximum width for an element, when it is flexible or measures its own size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-maxWidth.html | UIElements.IResolvedStyle.maxWidth}
     */
    readonly maxWidth: StyleFloat;
    /**
     * Minimum height for an element, when it is flexible or measures its own size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-minHeight.html | UIElements.IResolvedStyle.minHeight}
     */
    readonly minHeight: StyleFloat;
    /**
     * Minimum width for an element, when it is flexible or measures its own size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-minWidth.html | UIElements.IResolvedStyle.minWidth}
     */
    readonly minWidth: StyleFloat;
    /**
     * Specifies the transparency of an element and of its children.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-opacity.html | UIElements.IResolvedStyle.opacity}
     */
    readonly opacity: number;
    /**
     * Space reserved for the bottom edge of the padding during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-paddingBottom.html | UIElements.IResolvedStyle.paddingBottom}
     */
    readonly paddingBottom: number;
    /**
     * Space reserved for the left edge of the padding during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-paddingLeft.html | UIElements.IResolvedStyle.paddingLeft}
     */
    readonly paddingLeft: number;
    /**
     * Space reserved for the right edge of the padding during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-paddingRight.html | UIElements.IResolvedStyle.paddingRight}
     */
    readonly paddingRight: number;
    /**
     * Space reserved for the top edge of the padding during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-paddingTop.html | UIElements.IResolvedStyle.paddingTop}
     */
    readonly paddingTop: number;
    /**
     * Element's positioning in its parent container.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-position.html | UIElements.IResolvedStyle.position}
     */
    readonly position: Position;
    /**
     * Right distance from the element's box during layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-right.html | UIElements.IResolvedStyle.right}
     */
    readonly right: number;
    /**
     * A rotation transformation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-rotate.html | UIElements.IResolvedStyle.rotate}
     */
    readonly rotate: Rotate;
    /**
     * A scaling transformation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-scale.html | UIElements.IResolvedStyle.scale}
     */
    readonly scale: Scale;
    /**
     * The element's text overflow mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-textOverflow.html | UIElements.IResolvedStyle.textOverflow}
     */
    readonly textOverflow: TextOverflow;
    /**
     * Top distance from the element's box during layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-top.html | UIElements.IResolvedStyle.top}
     */
    readonly top: number;
    /**
     * The transformation origin is the point around which a transformation is applied.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-transformOrigin.html | UIElements.IResolvedStyle.transformOrigin}
     */
    readonly transformOrigin: Vector3;
    /**
     * Duration to wait before starting a property's transition effect when its value changes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-transitionDelay.html | UIElements.IResolvedStyle.transitionDelay}
     */
    readonly transitionDelay: Readonly<TimeValue[]>;
    /**
     * Time a transition animation should take to complete.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-transitionDuration.html | UIElements.IResolvedStyle.transitionDuration}
     */
    readonly transitionDuration: Readonly<TimeValue[]>;
    /**
     * Properties to which a transition effect should be applied.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-transitionProperty.html | UIElements.IResolvedStyle.transitionProperty}
     */
    readonly transitionProperty: Readonly<StylePropertyName[]>;
    /**
     * Determines how intermediate values are calculated for properties modified by a transition effect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-transitionTimingFunction.html | UIElements.IResolvedStyle.transitionTimingFunction}
     */
    readonly transitionTimingFunction: Readonly<EasingFunction[]>;
    /**
     * A translate transformation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-translate.html | UIElements.IResolvedStyle.translate}
     */
    readonly translate: Vector3;
    /**
     * Tinting color for the element's backgroundImage.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unityBackgroundImageTintColor.html | UIElements.IResolvedStyle.unityBackgroundImageTintColor}
     */
    readonly unityBackgroundImageTintColor: Color;
    /**
     * TextElement editor rendering mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unityEditorTextRenderingMode.html | UIElements.IResolvedStyle.unityEditorTextRenderingMode}
     */
    readonly unityEditorTextRenderingMode: EditorTextRenderingMode;
    /**
     * Font to draw the element's text, defined as a Font object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unityFont.html | UIElements.IResolvedStyle.unityFont}
     */
    readonly unityFont: Font;
    /**
     * Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unityFontDefinition.html | UIElements.IResolvedStyle.unityFontDefinition}
     */
    readonly unityFontDefinition: FontDefinition;
    /**
     * Font style and weight (normal, bold, italic) to draw the element's text.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unityFontStyleAndWeight.html | UIElements.IResolvedStyle.unityFontStyleAndWeight}
     */
    readonly unityFontStyleAndWeight: FontStyle;
    /**
     * Increases or decreases the space between paragraphs.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unityParagraphSpacing.html | UIElements.IResolvedStyle.unityParagraphSpacing}
     */
    readonly unityParagraphSpacing: number;
    /**
     * Size of the 9-slice's bottom edge when painting an element's background image.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unitySliceBottom.html | UIElements.IResolvedStyle.unitySliceBottom}
     */
    readonly unitySliceBottom: number;
    /**
     * Size of the 9-slice's left edge when painting an element's background image.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unitySliceLeft.html | UIElements.IResolvedStyle.unitySliceLeft}
     */
    readonly unitySliceLeft: number;
    /**
     * Size of the 9-slice's right edge when painting an element's background image.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unitySliceRight.html | UIElements.IResolvedStyle.unitySliceRight}
     */
    readonly unitySliceRight: number;
    /**
     * Scale applied to an element's slices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unitySliceScale.html | UIElements.IResolvedStyle.unitySliceScale}
     */
    readonly unitySliceScale: number;
    /**
     * Size of the 9-slice's top edge when painting an element's background image.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unitySliceTop.html | UIElements.IResolvedStyle.unitySliceTop}
     */
    readonly unitySliceTop: number;
    /**
     * Horizontal and vertical text alignment in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unityTextAlign.html | UIElements.IResolvedStyle.unityTextAlign}
     */
    readonly unityTextAlign: TextAnchor;
    /**
     * Switches between Unity's standard and advanced text generator
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unityTextGenerator.html | UIElements.IResolvedStyle.unityTextGenerator}
     */
    readonly unityTextGenerator: TextGeneratorType;
    /**
     * Outline color of the text.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unityTextOutlineColor.html | UIElements.IResolvedStyle.unityTextOutlineColor}
     */
    readonly unityTextOutlineColor: Color;
    /**
     * Outline width of the text.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unityTextOutlineWidth.html | UIElements.IResolvedStyle.unityTextOutlineWidth}
     */
    readonly unityTextOutlineWidth: number;
    /**
     * The element's text overflow position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-unityTextOverflowPosition.html | UIElements.IResolvedStyle.unityTextOverflowPosition}
     */
    readonly unityTextOverflowPosition: TextOverflowPosition;
    /**
     * Specifies whether or not an element is visible.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-visibility.html | UIElements.IResolvedStyle.visibility}
     */
    readonly visibility: Visibility;
    /**
     * Word wrap over multiple lines if not enough space is available to draw the text of an element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-whiteSpace.html | UIElements.IResolvedStyle.whiteSpace}
     */
    readonly whiteSpace: WhiteSpace;
    /**
     * Fixed width of an element for the layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-width.html | UIElements.IResolvedStyle.width}
     */
    readonly width: number;
    /**
     * Increases or decreases the space between words.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IResolvedStyle-wordSpacing.html | UIElements.IResolvedStyle.wordSpacing}
     */
    readonly wordSpacing: number;





}
    
interface Background {
    /**
     * The texture to display as a background.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Background-texture.html | UIElements.Background.texture}
     */
    texture: Texture2D;
    /**
     * The sprite to display as a background.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Background-sprite.html | UIElements.Background.sprite}
     */
    sprite: Sprite;
    /**
     * The RenderTexture to display as a background.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Background-renderTexture.html | UIElements.Background.renderTexture}
     */
    renderTexture: RenderTexture;
    /**
     * The VectorImage to display as a background.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Background-vectorImage.html | UIElements.Background.vectorImage}
     */
    vectorImage: VectorImage;



    Equals(other: Background): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    /**
     * Retrieves the selected asset which can be of a type of Texture, Sprite, RenderTexture or VectorImage.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Background.GetSelectedImage.html | UIElements.Background.GetSelectedImage}
     */
    GetSelectedImage(): Object;
    /**
     * Help verify whether an asset has been assigned or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Background.IsEmpty.html | UIElements.Background.IsEmpty}
     */
    IsEmpty(): boolean;
    ToString(): string;


}
    
interface VectorImage extends ScriptableObject {
    /**
     * The width of the vector image.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VectorImage-width.html | UIElements.VectorImage.width}
     */
    readonly width: number;
    /**
     * The height of the vector image.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VectorImage-height.html | UIElements.VectorImage.height}
     */
    readonly height: number;





}
    
interface VectorImageConstructor {


    new(): VectorImage;



}
declare const VectorImage: VectorImageConstructor;
    
interface BackgroundConstructor {


    new(t: Texture2D): Background;


    FromRenderTexture(rt: RenderTexture): Background;
    FromSprite(s: Sprite): Background;
    FromTexture2D(t: Texture2D): Background;
    FromVectorImage(vi: VectorImage): Background;

}
declare const Background: BackgroundConstructor;
    
interface BackgroundPosition {
    keyword: BackgroundPositionKeyword;
    offset: Length;



    Equals(obj: unknown): boolean;
    Equals(other: BackgroundPosition): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface Length {
    /**
     * The length value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Length-value.html | UIElements.Length.value}
     */
    value: number;
    /**
     * The unit of the value property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Length-unit.html | UIElements.Length.unit}
     */
    unit: LengthUnit;



    Equals(other: Length): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    /**
     * Check if Length is Auto.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Length.IsAuto.html | UIElements.Length.IsAuto}
     */
    IsAuto(): boolean;
    /**
     * Check if Length is None.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Length.IsNone.html | UIElements.Length.IsNone}
     */
    IsNone(): boolean;
    ToString(): string;


}
    
interface LengthConstructor {


    new(value: number): Length;
    new(value: number, unit: LengthUnit): Length;


    Auto(): Length;
    None(): Length;
    Percent(value: number): Length;

}
declare const Length: LengthConstructor;
    
interface BackgroundPositionConstructor {


    new(keyword: BackgroundPositionKeyword): BackgroundPosition;
    new(keyword: BackgroundPositionKeyword, offset: Length): BackgroundPosition;



}
declare const BackgroundPosition: BackgroundPositionConstructor;
    
interface BackgroundRepeat {
    x: Repeat;
    y: Repeat;



    Equals(obj: unknown): boolean;
    Equals(other: BackgroundRepeat): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface BackgroundRepeatConstructor {


    new(repeatX: Repeat, repeatY: Repeat): BackgroundRepeat;



}
declare const BackgroundRepeat: BackgroundRepeatConstructor;
    
interface BackgroundSize {
    /**
     * Background size type
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.BackgroundSize-sizeType.html | UIElements.BackgroundSize.sizeType}
     */
    sizeType: BackgroundSizeType;
    /**
     * Background size x
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.BackgroundSize-x.html | UIElements.BackgroundSize.x}
     */
    x: Length;
    /**
     * Background size y
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.BackgroundSize-y.html | UIElements.BackgroundSize.y}
     */
    y: Length;



    Equals(obj: unknown): boolean;
    Equals(other: BackgroundSize): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface BackgroundSizeConstructor {


    new(sizeX: Length, sizeY: Length): BackgroundSize;
    new(sizeType: BackgroundSizeType): BackgroundSize;



}
declare const BackgroundSize: BackgroundSizeConstructor;
    
interface IStyleValue<T> {
    value: T;
    keyword: StyleKeyword;





}
    
interface StyleFloat extends IStyleValue<number> {
    /**
     * The float value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleFloat-value.html | UIElements.StyleFloat.value}
     */
    value: number;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleFloat-keyword.html | UIElements.StyleFloat.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleFloat): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleFloatConstructor {


    new(v: number): StyleFloat;
    new(keyword: StyleKeyword): StyleFloat;



}
declare const StyleFloat: StyleFloatConstructor;
    
interface Rotate {
    /**
     * The angle applied by the rotation. Positive values represent clockwise rotation and negative values represent counterclockwise rotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Rotate-angle.html | UIElements.Rotate.angle}
     */
    angle: Angle;



    Equals(other: Rotate): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface Angle {
    /**
     * The angle value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Angle-value.html | UIElements.Angle.value}
     */
    value: number;
    /**
     * The unit of the value property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Angle-unit.html | UIElements.Angle.unit}
     */
    unit: AngleUnit;



    Equals(other: Angle): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    /**
     * Returns the value of the angle, expressed in degrees.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Angle.ToDegrees.html | UIElements.Angle.ToDegrees}
     */
    ToDegrees(): number;
    /**
     * Returns the value of the angle, expressed in gradians.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Angle.ToGradians.html | UIElements.Angle.ToGradians}
     */
    ToGradians(): number;
    /**
     * Returns the value of the angle, expressed in radians.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Angle.ToRadians.html | UIElements.Angle.ToRadians}
     */
    ToRadians(): number;
    ToString(): string;
    /**
     * Returns the value of the angle, expressed in turns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Angle.ToTurns.html | UIElements.Angle.ToTurns}
     */
    ToTurns(): number;


}
    
interface AngleConstructor {


    new(value: number): Angle;
    new(value: number, unit: AngleUnit): Angle;


    Degrees(value: number): Angle;
    Gradians(value: number): Angle;
    Radians(value: number): Angle;
    Turns(value: number): Angle;

}
declare const Angle: AngleConstructor;
    
interface RotateConstructor {


    new(angle: Angle): Rotate;


    None(): Rotate;

}
declare const Rotate: RotateConstructor;
    
interface Scale {
    value: Vector3;



    Equals(other: Scale): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface ScaleConstructor {


    new(scale: Vector2): Scale;
    new(scale: Vector3): Scale;


    None(): Scale;

}
declare const Scale: ScaleConstructor;
    
interface TimeValue {
    /**
     * The time value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TimeValue-value.html | UIElements.TimeValue.value}
     */
    value: number;
    /**
     * The unit of the value property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TimeValue-unit.html | UIElements.TimeValue.unit}
     */
    unit: TimeUnit;



    Equals(other: TimeValue): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface TimeValueConstructor {


    new(value: number): TimeValue;
    new(value: number, unit: TimeUnit): TimeValue;



}
declare const TimeValue: TimeValueConstructor;
    
interface StylePropertyName {



    Equals(other: unknown): boolean;
    Equals(other: StylePropertyName): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StylePropertyNameConstructor {


    new(name: string): StylePropertyName;


    IsNullOrEmpty(propertyName: StylePropertyName): boolean;

}
declare const StylePropertyName: StylePropertyNameConstructor;
    
interface EasingFunction {
    /**
     * The value of the EasingMode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EasingFunction-mode.html | UIElements.EasingFunction.mode}
     */
    mode: EasingMode;



    Equals(other: EasingFunction): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface EasingFunctionConstructor {


    new(mode: EasingMode): EasingFunction;



}
declare const EasingFunction: EasingFunctionConstructor;
    
interface FontDefinition {
    /**
     * Font to use to display text. You cannot set this and FontDefinition.fontAsset at the same time.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.FontDefinition-font.html | UIElements.FontDefinition.font}
     */
    font: Font;
    /**
     * SDF font to use to display text. You cannot set this and FontDefinition.font at the same time.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.FontDefinition-fontAsset.html | UIElements.FontDefinition.fontAsset}
     */
    fontAsset: FontAsset;



    Equals(other: FontDefinition): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface TextAsset extends ScriptableObject {
    readonly version: string;
    readonly instanceID: number;
    hashCode: number;
    material: Material;
    materialHashCode: number;





}
    
interface FontAsset extends TextAsset {
    fontAssetCreationEditorSettings: FontAssetCreationEditorSettings;
    readonly sourceFontFile: Font;
    atlasPopulationMode: AtlasPopulationMode;
    faceInfo: FaceInfo;
    readonly glyphTable: Readonly<Glyph[]>;
    readonly glyphLookupTable: CSDictionary<number, Glyph>;
    readonly characterTable: Readonly<Character[]>;
    readonly characterLookupTable: CSDictionary<number, Character>;
    readonly atlasTexture: Texture2D;
    atlasTextures: Readonly<Texture2D[]>;
    readonly atlasTextureCount: number;
    isMultiAtlasTexturesEnabled: boolean;
    getFontFeatures: boolean;
    readonly atlasWidth: number;
    readonly atlasHeight: number;
    readonly atlasPadding: number;
    readonly atlasRenderMode: GlyphRenderMode;
    readonly fontFeatureTable: FontFeatureTable;
    fallbackFontAssetTable: Readonly<FontAsset[]>;
    readonly fontWeightTable: Readonly<FontWeightPair[]>;
    regularStyleWeight: number;
    regularStyleSpacing: number;
    boldStyleWeight: number;
    boldStyleSpacing: number;
    italicStyleSlant: number;
    tabMultiple: number;



    ClearFontAssetData(setAtlasSizeToZero: boolean): void;
    HasCharacter(character: number): boolean;
    HasCharacter(character: string, searchFallbacks: boolean, tryAddCharacter: boolean): boolean;
    HasCharacter(character: number, searchFallbacks: boolean, tryAddCharacter: boolean): boolean;
    HasCharacters(text: string): boolean;
    ReadFontAssetDefinition(): void;
    TryAddCharacters(unicodes: Readonly<number[]>, includeFontFeatures: boolean): boolean;
    TryAddCharacters(characters: string, includeFontFeatures: boolean): boolean;


}
    
interface FontAssetCreationEditorSettings {
    sourceFontFileGUID: string;
    faceIndex: number;
    pointSizeSamplingMode: number;
    pointSize: number;
    padding: number;
    paddingMode: number;
    packingMode: number;
    atlasWidth: number;
    atlasHeight: number;
    characterSetSelectionMode: number;
    characterSequence: string;
    referencedFontAssetGUID: string;
    referencedTextAssetGUID: string;
    fontStyle: number;
    fontStyleModifier: number;
    renderMode: number;
    includeFontFeatures: boolean;





}
    
interface TextElement {
    readonly elementType: TextElementType;
    unicode: number;
    textAsset: TextAsset;
    glyph: Glyph;
    glyphIndex: number;
    scale: number;





}
    
    
    
interface FontFeatureTable {



    /**
     * Sorts the glyph pair adjustment records by glyph index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.Text.FontFeatureTable.SortGlyphPairAdjustmentRecords.html | TextCore.Text.FontFeatureTable.SortGlyphPairAdjustmentRecords}
     */
    SortGlyphPairAdjustmentRecords(): void;
    /**
     * Sorts the Mark-to-Base Adjustment Table records.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.Text.FontFeatureTable.SortMarkToBaseAdjustmentRecords.html | TextCore.Text.FontFeatureTable.SortMarkToBaseAdjustmentRecords}
     */
    SortMarkToBaseAdjustmentRecords(): void;
    /**
     * Sorts the Mark-to-Mark Adjustment Table records.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextCore.Text.FontFeatureTable.SortMarkToMarkAdjustmentRecords.html | TextCore.Text.FontFeatureTable.SortMarkToMarkAdjustmentRecords}
     */
    SortMarkToMarkAdjustmentRecords(): void;


}
    
interface FontWeightPair {
    regularTypeface: FontAsset;
    italicTypeface: FontAsset;





}
    
interface FontAssetConstructor {


    new(): FontAsset;


    CreateFontAsset(familyName: string, styleName: string, pointSize: number): FontAsset;
    CreateFontAsset(fontFilePath: string, faceIndex: number, samplingPointSize: number, atlasPadding: number, renderMode: GlyphRenderMode, atlasWidth: number, atlasHeight: number): FontAsset;
    CreateFontAsset(font: Font): FontAsset;
    CreateFontAsset(font: Font, samplingPointSize: number, atlasPadding: number, renderMode: GlyphRenderMode, atlasWidth: number, atlasHeight: number, atlasPopulationMode: AtlasPopulationMode, enableMultiAtlasSupport: boolean): FontAsset;
    GetCharacters(fontAsset: FontAsset): string;
    GetCharactersArray(fontAsset: FontAsset): Readonly<number[]>;

}
declare const FontAsset: FontAssetConstructor;
    
interface FontDefinitionConstructor {




    FromFont(f: Font): FontDefinition;
    FromSDFFont(f: FontAsset): FontDefinition;

}
declare const FontDefinition: FontDefinitionConstructor;
    
interface IStylePropertyAnimations {
    runningAnimationCount: number;
    completedAnimationCount: number;



    CancelAllAnimations(): void;
    CancelAnimation(id: StylePropertyId): void;
    GetAllAnimations(outPropertyIds: Readonly<StylePropertyId[]>): void;
    HasRunningAnimation(id: StylePropertyId): boolean;
    Start(id: StylePropertyId, from: number, to: number, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: number, to: number, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: Length, to: Length, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: Color, to: Color, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: Background, to: Background, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: FontDefinition, to: FontDefinition, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: Font, to: Font, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: TextShadow, to: TextShadow, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: Scale, to: Scale, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: Translate, to: Translate, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: Rotate, to: Rotate, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: TransformOrigin, to: TransformOrigin, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: BackgroundPosition, to: BackgroundPosition, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: BackgroundRepeat, to: BackgroundRepeat, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    Start(id: StylePropertyId, from: BackgroundSize, to: BackgroundSize, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    StartEnum(id: StylePropertyId, from: number, to: number, durationMs: number, delayMs: number, easingCurve: Func<number, number>): boolean;
    UpdateAnimation(id: StylePropertyId): void;


}
    
interface TextShadow {
    offset: Vector2;
    blurRadius: number;
    color: Color;



    Equals(obj: unknown): boolean;
    Equals(other: TextShadow): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface Translate {
    x: Length;
    y: Length;
    z: number;



    Equals(other: Translate): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface TranslateConstructor {


    new(x: Length, y: Length, z: number): Translate;
    new(x: Length, y: Length): Translate;


    None(): Translate;

}
declare const Translate: TranslateConstructor;
    
interface TransformOrigin {
    x: Length;
    y: Length;
    z: number;



    Equals(other: TransformOrigin): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface TransformOriginConstructor {


    new(x: Length, y: Length, z: number): TransformOrigin;
    new(x: Length, y: Length): TransformOrigin;


    Initial(): TransformOrigin;

}
declare const TransformOrigin: TransformOriginConstructor;
    
interface ITransform {
    /**
     * The position of the VisualElement transform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITransform-position.html | UIElements.ITransform.position}
     */
    position: Vector3;
    /**
     * The rotation of the VisualElement transform stored as a Quaternion.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITransform-rotation.html | UIElements.ITransform.rotation}
     */
    rotation: Quaternion;
    /**
     * The scale of the VisualElement transform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITransform-scale.html | UIElements.ITransform.scale}
     */
    scale: Vector3;
    /**
     * Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITransform-matrix.html | UIElements.ITransform.matrix}
     */
    readonly matrix: Matrix4x4;





}
    
interface IEventHandler {



    /**
     * Handles an event according to its propagation phase and current target, by executing the element's
 default action or callbacks associated with the event.
     * @param evt The event to handle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IEventHandler.HandleEvent.html | UIElements.IEventHandler.HandleEvent}
     */
    HandleEvent(evt: EventBase): void;
    /**
     * Returns true if event handlers for the event propagation BubbleUp phase, have been attached to this object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IEventHandler.HasBubbleUpHandlers.html | UIElements.IEventHandler.HasBubbleUpHandlers}
     */
    HasBubbleUpHandlers(): boolean;
    /**
     * Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IEventHandler.HasTrickleDownHandlers.html | UIElements.IEventHandler.HasTrickleDownHandlers}
     */
    HasTrickleDownHandlers(): boolean;
    /**
     * Sends an event to the event handler.
     * @param e The event to send.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IEventHandler.SendEvent.html | UIElements.IEventHandler.SendEvent}
     */
    SendEvent(e: EventBase): void;


}
    
interface EventBase {
    /**
     * Retrieves the type ID for this event instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-eventTypeId.html | UIElements.EventBase.eventTypeId}
     */
    readonly eventTypeId: number;
    /**
     * The time when the event was created, in milliseconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-timestamp.html | UIElements.EventBase.timestamp}
     */
    readonly timestamp: number;
    /**
     * Returns whether this event type bubbles up in the event propagation path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-bubbles.html | UIElements.EventBase.bubbles}
     */
    readonly bubbles: boolean;
    /**
     * Returns whether this event is sent down the event propagation path during the TrickleDown phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-tricklesDown.html | UIElements.EventBase.tricklesDown}
     */
    readonly tricklesDown: boolean;
    /**
     * The target visual element that received this event. Unlike currentTarget, this target does not change when
 the event is sent to other elements along the propagation path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-target.html | UIElements.EventBase.target}
     */
    target: IEventHandler;
    /**
     * Whether StopPropagation() was called for this event.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-isPropagationStopped.html | UIElements.EventBase.isPropagationStopped}
     */
    readonly isPropagationStopped: boolean;
    /**
     * Indicates whether StopImmediatePropagation() was called for this event.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-isImmediatePropagationStopped.html | UIElements.EventBase.isImmediatePropagationStopped}
     */
    readonly isImmediatePropagationStopped: boolean;
    /**
     * The current propagation phase for this event.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-propagationPhase.html | UIElements.EventBase.propagationPhase}
     */
    readonly propagationPhase: PropagationPhase;
    /**
     * The current target of the event. This is the VisualElement, in the propagation path, for which event handlers are currently being executed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-currentTarget.html | UIElements.EventBase.currentTarget}
     */
    readonly currentTarget: IEventHandler;
    /**
     * Indicates whether the event is being dispatched to a visual element. An event cannot be redispatched while it being dispatched. If you need to recursively dispatch an event, it is recommended that you use a copy of the event.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-dispatch.html | UIElements.EventBase.dispatch}
     */
    readonly dispatch: boolean;
    /**
     * The IMGUIEvent at the source of this event. The source can be null since not all events are generated by IMGUI.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-imguiEvent.html | UIElements.EventBase.imguiEvent}
     */
    readonly imguiEvent: Event;
    /**
     * The original mouse position of the IMGUI event, before it is transformed to the current target local coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase-originalMousePosition.html | UIElements.EventBase.originalMousePosition}
     */
    readonly originalMousePosition: Vector2;



    /**
     * Implementation of IDisposable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase.Dispose.html | UIElements.EventBase.Dispose}
     */
    Dispose(): void;
    /**
     * Immediately stops the propagation of the event. The event isn't sent to other elements along the propagation path. This method prevents other event handlers from executing on the current target.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase.StopImmediatePropagation.html | UIElements.EventBase.StopImmediatePropagation}
     */
    StopImmediatePropagation(): void;
    /**
     * Stops propagating this event. The event is not sent to other elements along the propagation path.
 This method does not prevent other event handlers from executing on the current target.
 If this method is called during the TrickleDown propagation phase, it will prevent default actions
 to be processed, such as an element getting focused as a result of a PointerDownEvent.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.EventBase.StopPropagation.html | UIElements.EventBase.StopPropagation}
     */
    StopPropagation(): void;


}
    
interface Event {
    readonly rawType: EventType;
    /**
     * The mouse position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-mousePosition.html | Event.mousePosition}
     */
    mousePosition: Vector2;
    /**
     * The relative movement of the mouse compared to last event.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-delta.html | Event.delta}
     */
    delta: Vector2;
    /**
     * The type of pointer that created this event (for example, mouse, touch screen, pen).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-pointerType.html | Event.pointerType}
     */
    pointerType: PointerType;
    /**
     * Which mouse button was pressed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-button.html | Event.button}
     */
    button: number;
    /**
     * Which modifier keys are held down.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-modifiers.html | Event.modifiers}
     */
    modifiers: EventModifiers;
    /**
     * How hard pen pressure is applied, normalized between 0 (no pressure) and 1 (maximum pressure).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-pressure.html | Event.pressure}
     */
    pressure: number;
    /**
     * Specifies the rotation of the pen around its axis, expressed in radians. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-twist.html | Event.twist}
     */
    twist: number;
    /**
     * Specifies the angle of the pen relative to the X and Y axes, expressed in radians.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-tilt.html | Event.tilt}
     */
    tilt: Vector2;
    /**
     * Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-penStatus.html | Event.penStatus}
     */
    penStatus: PenStatus;
    /**
     * How many consecutive mouse clicks have we received.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-clickCount.html | Event.clickCount}
     */
    clickCount: number;
    /**
     * The character typed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-character.html | Event.character}
     */
    character: string;
    /**
     * The raw key code for keyboard events.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-keyCode.html | Event.keyCode}
     */
    keyCode: KeyCode;
    /**
     * Index of display that the event belongs to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-displayIndex.html | Event.displayIndex}
     */
    displayIndex: number;
    /**
     * The type of event.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-type.html | Event.type}
     */
    type: EventType;
    /**
     * The name of an ExecuteCommand or ValidateCommand Event.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-commandName.html | Event.commandName}
     */
    commandName: string;
    /**
     * Is Shift held down? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-shift.html | Event.shift}
     */
    shift: boolean;
    /**
     * Is Control key held down? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-control.html | Event.control}
     */
    control: boolean;
    /**
     * Is Alt/Option key held down? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-alt.html | Event.alt}
     */
    alt: boolean;
    /**
     * Is Command/Windows key held down? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-command.html | Event.command}
     */
    command: boolean;
    /**
     * Is Caps Lock on? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-capsLock.html | Event.capsLock}
     */
    capsLock: boolean;
    /**
     * Is the current keypress on the numeric keyboard? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-numeric.html | Event.numeric}
     */
    numeric: boolean;
    /**
     * Is the current keypress a function key? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-functionKey.html | Event.functionKey}
     */
    readonly functionKey: boolean;
    /**
     * Is this event a keyboard event? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-isKey.html | Event.isKey}
     */
    readonly isKey: boolean;
    /**
     * Is this event a mouse event? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-isMouse.html | Event.isMouse}
     */
    readonly isMouse: boolean;
    readonly isScrollWheel: boolean;



    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    /**
     * Get a filtered event type for a given control ID.
     * @param controlID The ID of the control you are querying from.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event.GetTypeForControl.html | Event.GetTypeForControl}
     */
    GetTypeForControl(controlID: number): EventType;
    ToString(): string;
    /**
     * Use this event.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event.Use.html | Event.Use}
     */
    Use(): void;


}
    
interface EventConstructor {
    /**
     * The current event that's being processed right now.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Event-current.html | Event.current}
     */
    current: Event;


    new(): Event;
    new(displayIndex: number): Event;
    new(other: Event): Event;


    GetEventCount(): number;
    KeyboardEvent(key: string): Event;
    PopEvent(outEvent: Event): boolean;

}
declare const Event: EventConstructor;
    
interface CallbackEventHandler extends IEventHandler {



    /**
     * Return true if event handlers for the event propagation BubbleUp phase have been attached to this object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.CallbackEventHandler.HasBubbleUpHandlers.html | UIElements.CallbackEventHandler.HasBubbleUpHandlers}
     */
    HasBubbleUpHandlers(): boolean;
    /**
     * Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.CallbackEventHandler.HasTrickleDownHandlers.html | UIElements.CallbackEventHandler.HasTrickleDownHandlers}
     */
    HasTrickleDownHandlers(): boolean;
    RegisterCallback<TEventType extends EventBase<TEventType>>(callback: EventCallback<TEventType>, useTrickleDown: TrickleDown): void;
    RegisterCallback<TEventType extends EventBase<TEventType>, TUserArgsType>(callback: EventCallback<TEventType, TUserArgsType>, userArgs: TUserArgsType, useTrickleDown: TrickleDown): void;
    RegisterCallbackOnce<TEventType extends EventBase<TEventType>>(callback: EventCallback<TEventType>, useTrickleDown: TrickleDown): void;
    RegisterCallbackOnce<TEventType extends EventBase<TEventType>, TUserArgsType>(callback: EventCallback<TEventType, TUserArgsType>, userArgs: TUserArgsType, useTrickleDown: TrickleDown): void;
    /**
     * Sends an event to the event handler.
     * @param e The event to send.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.CallbackEventHandler.SendEvent.html | UIElements.CallbackEventHandler.SendEvent}
     */
    SendEvent(e: EventBase): void;
    UnregisterCallback<TEventType extends EventBase<TEventType>>(callback: EventCallback<TEventType>, useTrickleDown: TrickleDown): void;
    UnregisterCallback<TEventType extends EventBase<TEventType>, TUserArgsType>(callback: EventCallback<TEventType, TUserArgsType>, useTrickleDown: TrickleDown): void;


}
    
interface EventBase<T> extends EventBase {
    readonly eventTypeId: number;



    Dispose(): void;


}
    
interface EventBaseConstructor {




    GetPooled(): T;
    TypeId(): number;

}
declare const EventBase: EventBaseConstructor;
    
interface EventCallback<TEventType> extends MulticastDelegate {



    BeginInvoke(evt: TEventType, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): void;
    Invoke(evt: TEventType): void;


}
    
interface EventCallbackConstructor {


    new(object: unknown, method: IntPtr): EventCallback<TEventType>;



}
declare const EventCallback: EventCallbackConstructor;
    
interface EventCallback<TEventType, TCallbackArgs> extends MulticastDelegate {



    BeginInvoke(evt: TEventType, userArgs: TCallbackArgs, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): void;
    Invoke(evt: TEventType, userArgs: TCallbackArgs): void;


}
    
interface EventCallbackConstructor {


    new(object: unknown, method: IntPtr): EventCallback<TEventType, TCallbackArgs>;



}
declare const EventCallback: EventCallbackConstructor;
    
interface Focusable extends CallbackEventHandler {
    /**
     * Return the focus controller for this element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Focusable-focusController.html | UIElements.Focusable.focusController}
     */
    readonly focusController: FocusController;
    /**
     * True if the element can be focused.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Focusable-focusable.html | UIElements.Focusable.focusable}
     */
    focusable: boolean;
    /**
     * An integer used to sort focusables in the focus ring. Must be greater than or equal to zero.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Focusable-tabIndex.html | UIElements.Focusable.tabIndex}
     */
    tabIndex: number;
    /**
     * Whether the element should delegate the focus to its children.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Focusable-delegatesFocus.html | UIElements.Focusable.delegatesFocus}
     */
    delegatesFocus: boolean;
    /**
     * Return true if the element can be focused.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Focusable-canGrabFocus.html | UIElements.Focusable.canGrabFocus}
     */
    readonly canGrabFocus: boolean;



    /**
     * Tell the element to release the focus.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Focusable.Blur.html | UIElements.Focusable.Blur}
     */
    Blur(): void;
    /**
     * Attempt to give the focus to this element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Focusable.Focus.html | UIElements.Focusable.Focus}
     */
    Focus(): void;


}
    
interface FocusController {
    /**
     * The currently focused VisualElement.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.FocusController-focusedElement.html | UIElements.FocusController.focusedElement}
     */
    readonly focusedElement: Focusable;



    /**
     * Instructs the FocusController to ignore the given event.
 This will prevent the event from changing the current focused VisualElement or triggering focus events.
     * @param evt The event to be ignored.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.FocusController.IgnoreEvent.html | UIElements.FocusController.IgnoreEvent}
     */
    IgnoreEvent(evt: EventBase): void;


}
    
interface FocusControllerConstructor {


    new(focusRing: IFocusRing): FocusController;



}
declare const FocusController: FocusControllerConstructor;
    
    
interface MeshGenerationContext {
    /**
     * The element for which VisualElement.generateVisualContent was invoked.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.MeshGenerationContext-visualElement.html | UIElements.MeshGenerationContext.visualElement}
     */
    readonly visualElement: VisualElement;
    /**
     * The vector painter object used to issue drawing commands.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.MeshGenerationContext-painter2D.html | UIElements.MeshGenerationContext.painter2D}
     */
    readonly painter2D: Painter2D;



    /**
     * Instructs the renderer to wait for the completion of the provided JobHandle before beginning processing the meshes.
     * @param jobHandle JobHandle to wait for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.MeshGenerationContext.AddMeshGenerationJob.html | UIElements.MeshGenerationContext.AddMeshGenerationJob}
     */
    AddMeshGenerationJob(jobHandle: JobHandle): void;
    /**
     * Allocates and draws the specified number of vertices and indices required to express geometry for drawing the content of a VisualElement.
     * @param vertexCount The number of vertices to allocate. The maximum is 65535 (or UInt16.MaxValue).
     * @param indexCount The number of triangle list indices to allocate. Each 3 indices represent one triangle, so this value should be multiples of 3.
     * @param texture An optional texture to be applied on the triangles allocated. Pass null to rely on vertex colors only.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.MeshGenerationContext.Allocate.html | UIElements.MeshGenerationContext.Allocate}
     */
    Allocate(vertexCount: number, indexCount: number, texture: Texture): MeshWriteData;
    DrawMesh(vertices: Readonly<Vertex[]>, indices: Readonly<number[]>, texture: Texture): void;
    /**
     * Draw a string of text.
     * @param text The text to display.
     * @param pos The start position where the text will be displayed.
     * @param fontSize The font size to use.
     * @param color The text color.
     * @param font The font asset to use. If the value is null, the font asset of the VisualElement style is used instead. For more information, refer to &lt;see cref=&quot;IStyle.unityFontDefinition&quot; /&gt;.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.MeshGenerationContext.DrawText.html | UIElements.MeshGenerationContext.DrawText}
     */
    DrawText(text: string, pos: Vector2, fontSize: number, color: Color, font: FontAsset): void;
    /**
     * Draws a VectorImage asset.
     * @param vectorImage The vector image to draw.
     * @param offset The position offset where to draw the vector image.
     * @param rotationAngle The rotation of the vector image.
     * @param scale The scale of the vector image
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.MeshGenerationContext.DrawVectorImage.html | UIElements.MeshGenerationContext.DrawVectorImage}
     */
    DrawVectorImage(vectorImage: VectorImage, offset: Vector2, rotationAngle: Angle, scale: Vector2): void;


}
    
interface Painter2D {
    /**
     * The line width of draw paths when using Stroke.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D-lineWidth.html | UIElements.Painter2D.lineWidth}
     */
    lineWidth: number;
    /**
     * The color of draw paths when using Stroke.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D-strokeColor.html | UIElements.Painter2D.strokeColor}
     */
    strokeColor: Color;
    /**
     * The stroke gradient to use when using Stroke.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D-strokeGradient.html | UIElements.Painter2D.strokeGradient}
     */
    strokeGradient: Gradient;
    /**
     * The color used for fill paths when using Fill.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D-fillColor.html | UIElements.Painter2D.fillColor}
     */
    fillColor: Color;
    /**
     * The join to use when drawing paths using Stroke.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D-lineJoin.html | UIElements.Painter2D.lineJoin}
     */
    lineJoin: LineJoin;
    /**
     * The cap to use when drawing paths using Stroke.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D-lineCap.html | UIElements.Painter2D.lineCap}
     */
    lineCap: LineCap;
    /**
     * When using LineJoin.Miter joins, this defines the limit on the ratio of the miter length to the
 stroke width before converting the miter to a bevel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D-miterLimit.html | UIElements.Painter2D.miterLimit}
     */
    miterLimit: number;



    /**
     * Adds an arc to the current sub-path to the provided position, radius and angles.
     * @param center The center position of the arc.
     * @param radius The radius of the arc.
     * @param startAngle The starting angle the arc.
     * @param endAngle The ending angle of the arc.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.Arc.html | UIElements.Painter2D.Arc}
     */
    Arc(center: Vector2, radius: number, startAngle: Angle, endAngle: Angle, direction: ArcDirection): void;
    /**
     * Adds an arc to the current sub-path to the provided position using a control point.
     * @param p1 The first control point of the arc.
     * @param p2 The final point of the arc.
     * @param radius The radius of the arc.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.ArcTo.html | UIElements.Painter2D.ArcTo}
     */
    ArcTo(p1: Vector2, p2: Vector2, radius: number): void;
    /**
     * Begins a new path and empties the list of recorded sub-paths.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.BeginPath.html | UIElements.Painter2D.BeginPath}
     */
    BeginPath(): void;
    /**
     * Adds a cubic bezier curve to the current sub-path to the provided position using two control points.
     * @param p1 The first control point of the cubic bezier.
     * @param p2 The second control point of the cubic bezier.
     * @param p3 The final position of the cubic bezier.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.BezierCurveTo.html | UIElements.Painter2D.BezierCurveTo}
     */
    BezierCurveTo(p1: Vector2, p2: Vector2, p3: Vector2): void;
    /**
     * When created as a detached painter, clears the current content. Does nothing otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.Clear.html | UIElements.Painter2D.Clear}
     */
    Clear(): void;
    /**
     * Closes the current sub-path with a straight line. If the sub-path is already closed, this does nothing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.ClosePath.html | UIElements.Painter2D.ClosePath}
     */
    ClosePath(): void;
    /**
     * Dispose the Painter2D object and free its internal unmanaged resources.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.Dispose.html | UIElements.Painter2D.Dispose}
     */
    Dispose(): void;
    /**
     * Fills the currently defined path.
     * @param fillRule The fill rule (non-zero or odd-even) to use. Default is non-zero.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.Fill.html | UIElements.Painter2D.Fill}
     */
    Fill(fillRule: FillRule): void;
    /**
     * Adds a straight line to the current sub-path to the provided position.
     * @param pos The end position of the line.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.LineTo.html | UIElements.Painter2D.LineTo}
     */
    LineTo(pos: Vector2): void;
    /**
     * Begins a new sub-path at the provied coordinate.
     * @param pos The position of the new sub-path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.MoveTo.html | UIElements.Painter2D.MoveTo}
     */
    MoveTo(pos: Vector2): void;
    /**
     * Adds a quadratic bezier curve to the current sub-path to the provided position using a control point.
     * @param p1 The control point of the quadratic bezier.
     * @param p2 The final position of the quadratic bezier.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.QuadraticCurveTo.html | UIElements.Painter2D.QuadraticCurveTo}
     */
    QuadraticCurveTo(p1: Vector2, p2: Vector2): void;
    /**
     * Saves the content of this Painter2D to a VectorImage object.
     * @param vectorImage The VectorImage object that will be initialized with this painter. This object should not be null.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.SaveToVectorImage.html | UIElements.Painter2D.SaveToVectorImage}
     */
    SaveToVectorImage(vectorImage: VectorImage): boolean;
    /**
     * Strokes the currently defined path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Painter2D.Stroke.html | UIElements.Painter2D.Stroke}
     */
    Stroke(): void;


}
    
interface Gradient {
    /**
     * All color keys defined in the gradient.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gradient-colorKeys.html | Gradient.colorKeys}
     */
    colorKeys: Readonly<GradientColorKey[]>;
    /**
     * All alpha keys defined in the gradient.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gradient-alphaKeys.html | Gradient.alphaKeys}
     */
    alphaKeys: Readonly<GradientAlphaKey[]>;
    /**
     * Controls how the gradient colors are interpolated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gradient-mode.html | Gradient.mode}
     */
    mode: GradientMode;
    /**
     * Indicates the color space that the gradient color keys are using.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gradient-colorSpace.html | Gradient.colorSpace}
     */
    colorSpace: ColorSpace;



    Equals(o: unknown): boolean;
    Equals(other: Gradient): boolean;
    /**
     * Calculate color at a given time.
     * @param time Time of the evaluation (0 - 1).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gradient.Evaluate.html | Gradient.Evaluate}
     */
    Evaluate(time: number): Color;
    GetHashCode(): number;
    /**
     * Setup Gradient with an array of color keys and alpha keys.
     * @param colorKeys Color keys of the gradient (maximum 8 color keys).
     * @param alphaKeys Alpha keys of the gradient (maximum 8 alpha keys).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gradient.SetKeys.html | Gradient.SetKeys}
     */
    SetKeys(colorKeys: Readonly<GradientColorKey[]>, alphaKeys: Readonly<GradientAlphaKey[]>): void;


}
    
interface GradientColorKey {
    color: Color;
    time: number;





}
    
interface GradientColorKeyConstructor {


    new(col: Color, time: number): GradientColorKey;



}
declare const GradientColorKey: GradientColorKeyConstructor;
    
interface GradientAlphaKey {
    alpha: number;
    time: number;





}
    
interface GradientAlphaKeyConstructor {


    new(alpha: number, time: number): GradientAlphaKey;



}
declare const GradientAlphaKey: GradientAlphaKeyConstructor;
    
interface GradientConstructor {


    new(): Gradient;



}
declare const Gradient: GradientConstructor;
    
interface Painter2DConstructor {


    new(): Painter2D;



}
declare const Painter2D: Painter2DConstructor;
    
interface JobHandle {
    /**
     * Determines if a task is running.
     */
    readonly IsCompleted: boolean;



    /**
     * Ensures that a job has completed.
     */
    Complete(): void;
    Equals(other: JobHandle): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;


}
    
interface JobHandleConstructor {




    CheckFenceIsDependencyOrDidSyncFence(jobHandle: JobHandle, dependsOn: JobHandle): boolean;
    CombineDependencies(job0: JobHandle, job1: JobHandle): JobHandle;
    CombineDependencies(job0: JobHandle, job1: JobHandle, job2: JobHandle): JobHandle;
    CombineDependencies(jobs: Readonly<JobHandle[]>): JobHandle;
    CombineDependencies(jobs: Readonly<JobHandle[]>): JobHandle;
    CompleteAll(job0: JobHandle, job1: JobHandle): void;
    CompleteAll(job0: JobHandle, job1: JobHandle, job2: JobHandle): void;
    CompleteAll(jobs: Readonly<JobHandle[]>): void;
    ScheduleBatchedJobs(): void;

}
declare const JobHandle: JobHandleConstructor;
    
interface MeshWriteData {
    /**
     * The number of vertices successfully allocated for VisualElement content drawing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.MeshWriteData-vertexCount.html | UIElements.MeshWriteData.vertexCount}
     */
    readonly vertexCount: number;
    /**
     * The number of indices successfully allocated for VisualElement content drawing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.MeshWriteData-indexCount.html | UIElements.MeshWriteData.indexCount}
     */
    readonly indexCount: number;



    SetAllIndices(indices: Readonly<number[]>): void;
    SetAllIndices(indices: Readonly<number[]>): void;
    /**
     * Fills the values of the allocated vertices with values copied directly from an array.
 When this method is called, it is not possible to use SetNextVertex to fill the allocated vertices array.
     * @param vertices The array of vertices to copy from. The length of the array must match the allocated vertex count.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.MeshWriteData.SetAllVertices.html | UIElements.MeshWriteData.SetAllVertices}
     */
    SetAllVertices(vertices: Readonly<Vertex[]>): void;
    SetAllVertices(vertices: Readonly<Vertex[]>): void;
    SetNextIndex(index: number): void;
    /**
     * Assigns the value of the next vertex of the allocated vertices list.
     * @param vertex The value of the next vertex.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.MeshWriteData.SetNextVertex.html | UIElements.MeshWriteData.SetNextVertex}
     */
    SetNextVertex(vertex: Vertex): void;


}
    
interface Vertex {
    position: Vector3;
    tint: Color32;
    uv: Vector2;





}
    
interface VertexConstructor {
    readonly nearZ: number;





}
declare const Vertex: VertexConstructor;
    
interface PropertyPath {
    /**
     * Gets the number of parts contained in the PropertyPath.
     */
    readonly Length: number;
    /**
     * Gets if there is any part contained in the PropertyPath.
     */
    readonly IsEmpty: boolean;
    readonly Item: PropertyPathPart;



    /**
     * Indicates whether this instance and a specified object are equal.
     * @param other The object to compare with the current instance.
     */
    Equals(other: PropertyPath): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface PropertyPathPart {
    /**
     * Returns true if the part is PropertyPathPartKind.Name.
     */
    readonly IsName: boolean;
    /**
     * Returns true if the part is PropertyPathPartKind.Index.
     */
    readonly IsIndex: boolean;
    /**
     * Returns true if the part is PropertyPathPartKind.Key.
     */
    readonly IsKey: boolean;
    /**
     * The PropertyPathPartKind for this path. This determines how algorithms will resolve the path.
     */
    readonly Kind: PropertyPathPartKind;
    /**
     * The Name of the part. This will only be set when using PropertyPathPartKind.Name
     */
    readonly Name: string;
    /**
     * The Index of the part. This will only be set when using PropertyPathPartKind.Index
     */
    readonly Index: number;
    /**
     * The Key of the part. This will only be set when using PropertyPathPartKind.Key
     */
    readonly Key: unknown;



    /**
     * Indicates whether this instance and a specified object are equal.
     * @param other The object to compare with the current instance.
     */
    Equals(other: PropertyPathPart): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface PropertyPathPartConstructor {


    new(name: string): PropertyPathPart;
    new(index: number): PropertyPathPart;
    new(key: unknown): PropertyPathPart;



}
declare const PropertyPathPart: PropertyPathPartConstructor;
    
interface IProperty {
    /**
     * Gets the name of the property.
     */
    readonly Name: string;
    /**
     * Gets a value indicating whether the property is read-only or not.
     */
    readonly IsReadOnly: boolean;



    /**
     * Returns the declared value type of the property.
     */
    DeclaredValueType(): Type;
    /**
     * Returns the first attribute of the given type.
     */
    GetAttribute<TAttribute extends Attribute>(): TAttribute;
    /**
     * Returns all attribute for this property.
     */
    GetAttributes<TAttribute extends Attribute>(): Readonly<TAttribute[]>;
    /**
     * Returns all attribute for this property.
     */
    GetAttributes(): Readonly<Attribute[]>;
    /**
     * Returns true if the property has any attributes of the given type.
     */
    HasAttribute<TAttribute extends Attribute>(): boolean;


}
    
interface PropertyPathConstructor {


    new(path: string): PropertyPath;


    AppendIndex(path: PropertyPath, index: number): PropertyPath;
    AppendKey(path: PropertyPath, key: unknown): PropertyPath;
    AppendName(path: PropertyPath, name: string): PropertyPath;
    AppendPart(path: PropertyPath, part: PropertyPathPart): PropertyPath;
    AppendProperty(path: PropertyPath, property: IProperty): PropertyPath;
    Combine(path: PropertyPath, pathToAppend: PropertyPath): PropertyPath;
    Combine(path: PropertyPath, pathToAppend: string): PropertyPath;
    FromIndex(index: number): PropertyPath;
    FromKey(key: unknown): PropertyPath;
    FromName(name: string): PropertyPath;
    FromPart(part: PropertyPathPart): PropertyPath;
    Pop(path: PropertyPath): PropertyPath;
    SubPath(path: PropertyPath, startIndex: number): PropertyPath;
    SubPath(path: PropertyPath, startIndex: number, length: number): PropertyPath;

}
declare const PropertyPath: PropertyPathConstructor;
    
interface Hierarchy {
    readonly parent: VisualElement;
    readonly childCount: number;
    readonly Item: VisualElement;



    Add(child: VisualElement): void;
    Children(): Readonly<VisualElement[]>;
    Clear(): void;
    ElementAt(index: number): VisualElement;
    Equals(other: Hierarchy): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    IndexOf(element: VisualElement): number;
    Insert(index: number, child: VisualElement): void;
    Remove(child: VisualElement): void;
    RemoveAt(index: number): void;
    Sort(comp: Comparison<VisualElement>): void;


}
    
interface IPanel {
    /**
     * Root of the VisualElement hierarchy.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IPanel-visualTree.html | UIElements.IPanel.visualTree}
     */
    readonly visualTree: VisualElement;
    /**
     * This Panel EventDispatcher.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IPanel-dispatcher.html | UIElements.IPanel.dispatcher}
     */
    readonly dispatcher: EventDispatcher;
    /**
     * Describes in which context a VisualElement hierarchy is being ran.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IPanel-contextType.html | UIElements.IPanel.contextType}
     */
    readonly contextType: ContextType;
    /**
     * Return the focus controller for this panel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IPanel-focusController.html | UIElements.IPanel.focusController}
     */
    readonly focusController: FocusController;
    /**
     * The Contextual menu manager for the panel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IPanel-contextualMenuManager.html | UIElements.IPanel.contextualMenuManager}
     */
    readonly contextualMenuManager: ContextualMenuManager;
    /**
     * Checks whether any element within the panel has had any changes to its state since the panel was last rendered.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IPanel-isDirty.html | UIElements.IPanel.isDirty}
     */
    readonly isDirty: boolean;
    /**
     * Gives the current scaled pixels per point value of the panel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IPanel-scaledPixelsPerPoint.html | UIElements.IPanel.scaledPixelsPerPoint}
     */
    readonly scaledPixelsPerPoint: number;



    /**
     * Returns the top element at this position. Will not return elements with pickingMode set to PickingMode.Ignore.
     * @param point World coordinates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IPanel.Pick.html | UIElements.IPanel.Pick}
     */
    Pick(point: Vector2): VisualElement;
    PickAll(point: Vector2, picked: Readonly<VisualElement[]>): VisualElement;


}
    
interface EventDispatcher {





}
    
interface ContextualMenuManager {



    /**
     * Displays the contextual menu.
     * @param triggerEvent The event that triggered the display of the menu.
     * @param target The element for which the menu is displayed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ContextualMenuManager.DisplayMenu.html | UIElements.ContextualMenuManager.DisplayMenu}
     */
    DisplayMenu(triggerEvent: EventBase, target: IEventHandler): void;
    /**
     * Checks if the event triggers the display of the contextual menu. This method also displays the menu.
     * @param evt The event to inspect.
     * @param eventHandler The element for which the menu is displayed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ContextualMenuManager.DisplayMenuIfEventMatches.html | UIElements.ContextualMenuManager.DisplayMenuIfEventMatches}
     */
    DisplayMenuIfEventMatches(evt: EventBase, eventHandler: IEventHandler): void;


}
    
interface VisualTreeAsset extends ScriptableObject {
    /**
     * Whether there were errors encountered while importing the UXML File
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualTreeAsset-importedWithErrors.html | UIElements.VisualTreeAsset.importedWithErrors}
     */
    readonly importedWithErrors: boolean;
    /**
     * Whether there were warnings encountered while importing the UXML File
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualTreeAsset-importedWithWarnings.html | UIElements.VisualTreeAsset.importedWithWarnings}
     */
    readonly importedWithWarnings: boolean;
    /**
     * The UXML templates used by this VisualTreeAsset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualTreeAsset-templateDependencies.html | UIElements.VisualTreeAsset.templateDependencies}
     */
    readonly templateDependencies: Readonly<VisualTreeAsset[]>;
    /**
     * The stylesheets used by this VisualTreeAsset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualTreeAsset-stylesheets.html | UIElements.VisualTreeAsset.stylesheets}
     */
    readonly stylesheets: Readonly<StyleSheet[]>;
    /**
     * A hash value computed from the template content.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualTreeAsset-contentHash.html | UIElements.VisualTreeAsset.contentHash}
     */
    contentHash: number;



    /**
     * Build a tree of VisualElements from the asset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualTreeAsset.CloneTree.html | UIElements.VisualTreeAsset.CloneTree}
     */
    CloneTree(): TemplateContainer;
    /**
     * Build a tree of VisualElements from the asset.
     * @param bindingPath The path to the property that you want to bind to the root of the cloned tree.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualTreeAsset.CloneTree.html | UIElements.VisualTreeAsset.CloneTree}
     */
    CloneTree(bindingPath: string): TemplateContainer;
    /**
     * Builds a tree of VisualElements from the asset.
     * @param target A VisualElement that will act as the root of the cloned tree.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualTreeAsset.CloneTree.html | UIElements.VisualTreeAsset.CloneTree}
     */
    CloneTree(target: VisualElement): void;
    /**
     * Build a tree of VisualElements from the asset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualTreeAsset.Instantiate.html | UIElements.VisualTreeAsset.Instantiate}
     */
    Instantiate(): TemplateContainer;
    /**
     * Build a tree of VisualElements from the asset.
     * @param bindingPath The path to the property that you want to bind to the root of the cloned tree.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualTreeAsset.Instantiate.html | UIElements.VisualTreeAsset.Instantiate}
     */
    Instantiate(bindingPath: string): TemplateContainer;


}
    
interface StyleSheet extends ScriptableObject {
    /**
     * Whether there were errors encountered while importing the StyleSheet
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleSheet-importedWithErrors.html | UIElements.StyleSheet.importedWithErrors}
     */
    readonly importedWithErrors: boolean;
    /**
     * Whether there were warnings encountered while importing the StyleSheet
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleSheet-importedWithWarnings.html | UIElements.StyleSheet.importedWithWarnings}
     */
    readonly importedWithWarnings: boolean;
    /**
     * A hash value computed from the stylesheet content.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleSheet-contentHash.html | UIElements.StyleSheet.contentHash}
     */
    contentHash: number;





}
    
interface StyleSheetConstructor {


    new(): StyleSheet;



}
declare const StyleSheet: StyleSheetConstructor;
    
interface IBindable {
    /**
     * Binding object that will be updated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IBindable-binding.html | UIElements.IBindable.binding}
     */
    binding: IBinding;
    /**
     * Path of the target property to be bound.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IBindable-bindingPath.html | UIElements.IBindable.bindingPath}
     */
    bindingPath: string;





}
    
interface IBinding {



    /**
     * Called at regular intervals to synchronize bound properties to their IBindable counterparts. Called before the Update() method.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IBinding.PreUpdate.html | UIElements.IBinding.PreUpdate}
     */
    PreUpdate(): void;
    /**
     * Disconnects the field from its bound property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IBinding.Release.html | UIElements.IBinding.Release}
     */
    Release(): void;
    /**
     * Called at regular intervals to synchronize bound properties to their IBindable counterparts.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.IBinding.Update.html | UIElements.IBinding.Update}
     */
    Update(): void;


}
    
interface BindableElement extends VisualElement, IBindable {
    /**
     * Binding object that will be updated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.BindableElement-binding.html | UIElements.BindableElement.binding}
     */
    binding: IBinding;
    /**
     * Path of the target property to be bound.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.BindableElement-bindingPath.html | UIElements.BindableElement.bindingPath}
     */
    bindingPath: string;





}
    
interface BindableElementConstructor {


    new(): BindableElement;



}
declare const BindableElement: BindableElementConstructor;
    
interface TemplateContainer extends BindableElement {
    /**
     * The local ID of the template in the parent UXML file (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TemplateContainer-templateId.html | UIElements.TemplateContainer.templateId}
     */
    readonly templateId: string;
    /**
     * Stores the template asset reference, if the generated element is cloned from a VisualTreeAsset as a
 Template declaration inside another VisualTreeAsset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TemplateContainer-templateSource.html | UIElements.TemplateContainer.templateSource}
     */
    readonly templateSource: VisualTreeAsset;
    readonly contentContainer: VisualElement;





}
    
interface TemplateContainerConstructor {


    new(): TemplateContainer;
    new(templateId: string): TemplateContainer;



}
declare const TemplateContainer: TemplateContainerConstructor;
    
interface VisualTreeAssetConstructor {


    new(): VisualTreeAsset;



}
declare const VisualTreeAsset: VisualTreeAssetConstructor;
    
    
interface StyleEnum<T> extends IStyleValue<T> {
    value: T;
    keyword: StyleKeyword;



    Equals(other: StyleEnum<T>): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleEnumConstructor {


    new(v: T): StyleEnum<T>;
    new(keyword: StyleKeyword): StyleEnum<T>;



}
declare const StyleEnum: StyleEnumConstructor;
    
interface StyleColor extends IStyleValue<Color> {
    /**
     * The Color value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleColor-value.html | UIElements.StyleColor.value}
     */
    value: Color;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleColor-keyword.html | UIElements.StyleColor.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleColor): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleColorConstructor {


    new(v: Color): StyleColor;
    new(keyword: StyleKeyword): StyleColor;



}
declare const StyleColor: StyleColorConstructor;
    
interface StyleBackground extends IStyleValue<Background> {
    /**
     * The Background value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleBackground-value.html | UIElements.StyleBackground.value}
     */
    value: Background;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleBackground-keyword.html | UIElements.StyleBackground.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleBackground): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleBackgroundConstructor {


    new(v: Background): StyleBackground;
    new(v: Texture2D): StyleBackground;
    new(v: Sprite): StyleBackground;
    new(v: VectorImage): StyleBackground;
    new(keyword: StyleKeyword): StyleBackground;



}
declare const StyleBackground: StyleBackgroundConstructor;
    
interface StyleBackgroundPosition extends IStyleValue<BackgroundPosition> {
    /**
     * The BackgroundPosition value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleBackgroundPosition-value.html | UIElements.StyleBackgroundPosition.value}
     */
    value: BackgroundPosition;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleBackgroundPosition-keyword.html | UIElements.StyleBackgroundPosition.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleBackgroundPosition): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleBackgroundPositionConstructor {


    new(v: BackgroundPosition): StyleBackgroundPosition;
    new(keyword: StyleKeyword): StyleBackgroundPosition;



}
declare const StyleBackgroundPosition: StyleBackgroundPositionConstructor;
    
interface StyleBackgroundRepeat extends IStyleValue<BackgroundRepeat> {
    /**
     * The BackgroundRepeat value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleBackgroundRepeat-value.html | UIElements.StyleBackgroundRepeat.value}
     */
    value: BackgroundRepeat;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleBackgroundRepeat-keyword.html | UIElements.StyleBackgroundRepeat.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleBackgroundRepeat): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleBackgroundRepeatConstructor {


    new(v: BackgroundRepeat): StyleBackgroundRepeat;
    new(keyword: StyleKeyword): StyleBackgroundRepeat;



}
declare const StyleBackgroundRepeat: StyleBackgroundRepeatConstructor;
    
interface StyleBackgroundSize extends IStyleValue<BackgroundSize> {
    /**
     * The BackgroundSize value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleBackgroundSize-value.html | UIElements.StyleBackgroundSize.value}
     */
    value: BackgroundSize;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleBackgroundSize-keyword.html | UIElements.StyleBackgroundSize.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleBackgroundSize): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleBackgroundSizeConstructor {


    new(v: BackgroundSize): StyleBackgroundSize;
    new(keyword: StyleKeyword): StyleBackgroundSize;



}
declare const StyleBackgroundSize: StyleBackgroundSizeConstructor;
    
interface StyleLength extends IStyleValue<Length> {
    /**
     * The Length value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleLength-value.html | UIElements.StyleLength.value}
     */
    value: Length;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleLength-keyword.html | UIElements.StyleLength.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleLength): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleLengthConstructor {


    new(v: number): StyleLength;
    new(v: Length): StyleLength;
    new(keyword: StyleKeyword): StyleLength;



}
declare const StyleLength: StyleLengthConstructor;
    
interface Cursor {
    /**
     * The texture to use for the cursor style. To use a texture as a cursor, import the texture with &quot;Read/Write enabled&quot; in the texture importer (or using the &quot;Cursor&quot; defaults).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Cursor-texture.html | UIElements.Cursor.texture}
     */
    texture: Texture2D;
    /**
     * The offset from the top left of the texture to use as the target point (must be within the bounds of the cursor).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Cursor-hotspot.html | UIElements.Cursor.hotspot}
     */
    hotspot: Vector2;



    Equals(obj: unknown): boolean;
    Equals(other: Cursor): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleCursor extends IStyleValue<Cursor> {
    /**
     * The Cursor value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleCursor-value.html | UIElements.StyleCursor.value}
     */
    value: Cursor;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleCursor-keyword.html | UIElements.StyleCursor.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleCursor): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleCursorConstructor {


    new(v: Cursor): StyleCursor;
    new(keyword: StyleKeyword): StyleCursor;



}
declare const StyleCursor: StyleCursorConstructor;
    
interface StyleRotate extends IStyleValue<Rotate> {
    /**
     * The Rotate value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleRotate-value.html | UIElements.StyleRotate.value}
     */
    value: Rotate;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleRotate-keyword.html | UIElements.StyleRotate.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleRotate): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleRotateConstructor {


    new(v: Rotate): StyleRotate;
    new(keyword: StyleKeyword): StyleRotate;



}
declare const StyleRotate: StyleRotateConstructor;
    
interface StyleScale extends IStyleValue<Scale> {
    /**
     * The Scale value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleScale-value.html | UIElements.StyleScale.value}
     */
    value: Scale;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleScale-keyword.html | UIElements.StyleScale.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleScale): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleScaleConstructor {


    new(v: Scale): StyleScale;
    new(keyword: StyleKeyword): StyleScale;
    new(scale: Vector2): StyleScale;



}
declare const StyleScale: StyleScaleConstructor;
    
interface StyleTextShadow extends IStyleValue<TextShadow> {
    /**
     * The TextShadow value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleTextShadow-value.html | UIElements.StyleTextShadow.value}
     */
    value: TextShadow;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleTextShadow-keyword.html | UIElements.StyleTextShadow.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleTextShadow): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleTextShadowConstructor {


    new(v: TextShadow): StyleTextShadow;
    new(keyword: StyleKeyword): StyleTextShadow;



}
declare const StyleTextShadow: StyleTextShadowConstructor;
    
interface StyleTransformOrigin extends IStyleValue<TransformOrigin> {
    /**
     * The TransformOrigin value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleTransformOrigin-value.html | UIElements.StyleTransformOrigin.value}
     */
    value: TransformOrigin;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleTransformOrigin-keyword.html | UIElements.StyleTransformOrigin.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleTransformOrigin): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleTransformOriginConstructor {


    new(v: TransformOrigin): StyleTransformOrigin;
    new(keyword: StyleKeyword): StyleTransformOrigin;



}
declare const StyleTransformOrigin: StyleTransformOriginConstructor;
    
interface StyleList<T> extends IStyleValue<Readonly<T[]>> {
    value: Readonly<T[]>;
    keyword: StyleKeyword;



    Equals(other: StyleList<T>): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleListConstructor {


    new(v: Readonly<T[]>): StyleList<T>;
    new(keyword: StyleKeyword): StyleList<T>;



}
declare const StyleList: StyleListConstructor;
    
interface StyleTranslate extends IStyleValue<Translate> {
    /**
     * The Translate value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleTranslate-value.html | UIElements.StyleTranslate.value}
     */
    value: Translate;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleTranslate-keyword.html | UIElements.StyleTranslate.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleTranslate): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleTranslateConstructor {


    new(v: Translate): StyleTranslate;
    new(keyword: StyleKeyword): StyleTranslate;



}
declare const StyleTranslate: StyleTranslateConstructor;
    
interface StyleFont extends IStyleValue<Font> {
    /**
     * The Font value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleFont-value.html | UIElements.StyleFont.value}
     */
    value: Font;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleFont-keyword.html | UIElements.StyleFont.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleFont): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleFontConstructor {


    new(v: Font): StyleFont;
    new(keyword: StyleKeyword): StyleFont;



}
declare const StyleFont: StyleFontConstructor;
    
interface StyleFontDefinition extends IStyleValue<FontDefinition> {
    /**
     * The actual value of the definition.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleFontDefinition-value.html | UIElements.StyleFontDefinition.value}
     */
    value: FontDefinition;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleFontDefinition-keyword.html | UIElements.StyleFontDefinition.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleFontDefinition): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;


}
    
interface StyleFontDefinitionConstructor {


    new(f: FontDefinition): StyleFontDefinition;
    new(f: FontAsset): StyleFontDefinition;
    new(f: Font): StyleFontDefinition;
    new(keyword: StyleKeyword): StyleFontDefinition;



}
declare const StyleFontDefinition: StyleFontDefinitionConstructor;
    
interface StyleInt extends IStyleValue<number> {
    /**
     * The integer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleInt-value.html | UIElements.StyleInt.value}
     */
    value: number;
    /**
     * The style keyword.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.StyleInt-keyword.html | UIElements.StyleInt.keyword}
     */
    keyword: StyleKeyword;



    Equals(other: StyleInt): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StyleIntConstructor {


    new(v: number): StyleInt;
    new(keyword: StyleKeyword): StyleInt;



}
declare const StyleInt: StyleIntConstructor;
    
interface ICustomStyle {





}
    
interface VisualElementStyleSheetSet {
    /**
     * Number of style sheets attached to the owner element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualElementStyleSheetSet-count.html | UIElements.VisualElementStyleSheetSet.count}
     */
    readonly count: number;
    readonly Item: StyleSheet;



    /**
     * Adds a style sheet for the owner element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualElementStyleSheetSet.Add.html | UIElements.VisualElementStyleSheetSet.Add}
     */
    Add(styleSheet: StyleSheet): void;
    /**
     * Removes all style sheets for the owner element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualElementStyleSheetSet.Clear.html | UIElements.VisualElementStyleSheetSet.Clear}
     */
    Clear(): void;
    /**
     * Looks for the specified StyleSheet
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualElementStyleSheetSet.Contains.html | UIElements.VisualElementStyleSheetSet.Contains}
     */
    Contains(styleSheet: StyleSheet): boolean;
    /**
     * Compares instances of the VisualElementStyleSheetSet struct for equality.
     * @param other The structure to compare with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualElementStyleSheetSet.Equals.html | UIElements.VisualElementStyleSheetSet.Equals}
     */
    Equals(other: VisualElementStyleSheetSet): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    /**
     * Removes a style sheet for the owner element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.VisualElementStyleSheetSet.Remove.html | UIElements.VisualElementStyleSheetSet.Remove}
     */
    Remove(styleSheet: StyleSheet): boolean;


}
    
interface BindingId {



    /**
     * Indicates whether two binding properties are equal.
     * @param other The object to compare with the current instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.BindingId.Equals.html | UIElements.BindingId.Equals}
     */
    Equals(other: BindingId): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    /**
     * Returns the binding property as a string.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.BindingId.ToString.html | UIElements.BindingId.ToString}
     */
    ToString(): string;


}
    
interface BindingIdConstructor {
    readonly Invalid: BindingId;


    new(path: string): BindingId;
    new(path: PropertyPath): BindingId;



}
declare const BindingId: BindingIdConstructor;
    
interface Binding {
    /**
     * When set to true, the binding instance updates during the next update cycle.
 When set to false, the binding instance updates only if a change is detected.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Binding-isDirty.html | UIElements.Binding.isDirty}
     */
    readonly isDirty: boolean;
    /**
     * When set to BindingUpdateTrigger.EveryUpdate, the binding instance updates in every update, regardless of the
 data source version.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Binding-updateTrigger.html | UIElements.Binding.updateTrigger}
     */
    updateTrigger: BindingUpdateTrigger;



    /**
     * Notifies the binding system to process this binding.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Binding.MarkDirty.html | UIElements.Binding.MarkDirty}
     */
    MarkDirty(): void;


}
    
interface BindingConstructor {




    ResetPanelLogLevel(panel: IPanel): void;
    SetGlobalLogLevel(logLevel: BindingLogLevel): void;
    SetPanelLogLevel(panel: IPanel, logLevel: BindingLogLevel): void;

}
declare const Binding: BindingConstructor;
    
interface BindingInfo {
    /**
     * The visual element targeted by the binding.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.BindingInfo-targetElement.html | UIElements.BindingInfo.targetElement}
     */
    readonly targetElement: VisualElement;
    /**
     * The binding id.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.BindingInfo-bindingId.html | UIElements.BindingInfo.bindingId}
     */
    readonly bindingId: BindingId;
    /**
     * The binding matching this information.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.BindingInfo-binding.html | UIElements.BindingInfo.binding}
     */
    readonly binding: Binding;





}
    
interface DataSourceContext {
    /**
     * The resolved data source.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.DataSourceContext-dataSource.html | UIElements.DataSourceContext.dataSource}
     */
    readonly dataSource: unknown;
    /**
     * The resolved data source path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.DataSourceContext-dataSourcePath.html | UIElements.DataSourceContext.dataSourcePath}
     */
    readonly dataSourcePath: PropertyPath;





}
    
interface DataSourceContextConstructor {


    new(dataSource: unknown, dataSourcePath: PropertyPath): DataSourceContext;



}
declare const DataSourceContext: DataSourceContextConstructor;
    
    
    
interface StyleValues {
    /**
     * Top distance from the element's box during layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-top.html | UIElements.Experimental.StyleValues.top}
     */
    top: number;
    /**
     * Left distance from the element's box during layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-left.html | UIElements.Experimental.StyleValues.left}
     */
    left: number;
    /**
     * Fixed width of an element for the layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-width.html | UIElements.Experimental.StyleValues.width}
     */
    width: number;
    /**
     * Fixed height of an element for the layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-height.html | UIElements.Experimental.StyleValues.height}
     */
    height: number;
    /**
     * Right distance from the element's box during layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-right.html | UIElements.Experimental.StyleValues.right}
     */
    right: number;
    /**
     * Bottom distance from the element's box during layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-bottom.html | UIElements.Experimental.StyleValues.bottom}
     */
    bottom: number;
    /**
     * Color to use when drawing the text of an element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-color.html | UIElements.Experimental.StyleValues.color}
     */
    color: Color;
    /**
     * Background color to paint in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-backgroundColor.html | UIElements.Experimental.StyleValues.backgroundColor}
     */
    backgroundColor: Color;
    /**
     * Tinting color for the element's backgroundImage.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-unityBackgroundImageTintColor.html | UIElements.Experimental.StyleValues.unityBackgroundImageTintColor}
     */
    unityBackgroundImageTintColor: Color;
    /**
     * Color of the border to paint inside the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-borderColor.html | UIElements.Experimental.StyleValues.borderColor}
     */
    borderColor: Color;
    /**
     * Space reserved for the left edge of the margin during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-marginLeft.html | UIElements.Experimental.StyleValues.marginLeft}
     */
    marginLeft: number;
    /**
     * Space reserved for the top edge of the margin during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-marginTop.html | UIElements.Experimental.StyleValues.marginTop}
     */
    marginTop: number;
    /**
     * Space reserved for the right edge of the margin during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-marginRight.html | UIElements.Experimental.StyleValues.marginRight}
     */
    marginRight: number;
    /**
     * Space reserved for the bottom edge of the margin during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-marginBottom.html | UIElements.Experimental.StyleValues.marginBottom}
     */
    marginBottom: number;
    /**
     * Space reserved for the left edge of the padding during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-paddingLeft.html | UIElements.Experimental.StyleValues.paddingLeft}
     */
    paddingLeft: number;
    /**
     * Space reserved for the top edge of the padding during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-paddingTop.html | UIElements.Experimental.StyleValues.paddingTop}
     */
    paddingTop: number;
    /**
     * Space reserved for the right edge of the padding during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-paddingRight.html | UIElements.Experimental.StyleValues.paddingRight}
     */
    paddingRight: number;
    /**
     * Space reserved for the bottom edge of the padding during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-paddingBottom.html | UIElements.Experimental.StyleValues.paddingBottom}
     */
    paddingBottom: number;
    /**
     * Space reserved for the left edge of the border during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-borderLeftWidth.html | UIElements.Experimental.StyleValues.borderLeftWidth}
     */
    borderLeftWidth: number;
    /**
     * Space reserved for the right edge of the border during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-borderRightWidth.html | UIElements.Experimental.StyleValues.borderRightWidth}
     */
    borderRightWidth: number;
    /**
     * Space reserved for the top edge of the border during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-borderTopWidth.html | UIElements.Experimental.StyleValues.borderTopWidth}
     */
    borderTopWidth: number;
    /**
     * Space reserved for the bottom edge of the border during the layout phase.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-borderBottomWidth.html | UIElements.Experimental.StyleValues.borderBottomWidth}
     */
    borderBottomWidth: number;
    /**
     * The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-borderTopLeftRadius.html | UIElements.Experimental.StyleValues.borderTopLeftRadius}
     */
    borderTopLeftRadius: number;
    /**
     * The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-borderTopRightRadius.html | UIElements.Experimental.StyleValues.borderTopRightRadius}
     */
    borderTopRightRadius: number;
    /**
     * The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-borderBottomLeftRadius.html | UIElements.Experimental.StyleValues.borderBottomLeftRadius}
     */
    borderBottomLeftRadius: number;
    /**
     * The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-borderBottomRightRadius.html | UIElements.Experimental.StyleValues.borderBottomRightRadius}
     */
    borderBottomRightRadius: number;
    /**
     * Specifies the transparency of an element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-opacity.html | UIElements.Experimental.StyleValues.opacity}
     */
    opacity: number;
    /**
     * Specifies how much the item will grow relative to the rest of the flexible items inside the same container.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-flexGrow.html | UIElements.Experimental.StyleValues.flexGrow}
     */
    flexGrow: number;
    /**
     * Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Experimental.StyleValues-flexShrink.html | UIElements.Experimental.StyleValues.flexShrink}
     */
    flexShrink: number;





}
    
interface ITextElementExperimentalFeatures extends IExperimentalFeatures {



    /**
     * Setting this property will override the displayed text while preserving the original text value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextElementExperimentalFeatures.SetRenderedText.html | UIElements.ITextElementExperimentalFeatures.SetRenderedText}
     */
    SetRenderedText(renderedText: string): void;


}
    
interface ITextSelection {
    /**
     * Returns true if the field is selectable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection-isSelectable.html | UIElements.ITextSelection.isSelectable}
     */
    isSelectable: boolean;
    /**
     * Color of the cursor.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection-cursorColor.html | UIElements.ITextSelection.cursorColor}
     */
    cursorColor: Color;
    /**
     * Background color of selected text.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection-selectionColor.html | UIElements.ITextSelection.selectionColor}
     */
    selectionColor: Color;
    /**
     * This is the cursor index in the text presented.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection-cursorIndex.html | UIElements.ITextSelection.cursorIndex}
     */
    cursorIndex: number;
    /**
     * Controls whether double clicking selects the word under the mouse pointer or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection-doubleClickSelectsWord.html | UIElements.ITextSelection.doubleClickSelectsWord}
     */
    doubleClickSelectsWord: boolean;
    /**
     * This is the selection index in the text presented.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection-selectIndex.html | UIElements.ITextSelection.selectIndex}
     */
    selectIndex: number;
    /**
     * Controls whether triple clicking selects the entire line under the mouse pointer or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection-tripleClickSelectsLine.html | UIElements.ITextSelection.tripleClickSelectsLine}
     */
    tripleClickSelectsLine: boolean;
    /**
     * Controls whether the element's content is selected upon receiving focus.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection-selectAllOnFocus.html | UIElements.ITextSelection.selectAllOnFocus}
     */
    selectAllOnFocus: boolean;
    /**
     * Controls whether the element's content is selected when you mouse up for the first time.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection-selectAllOnMouseUp.html | UIElements.ITextSelection.selectAllOnMouseUp}
     */
    selectAllOnMouseUp: boolean;
    /**
     * The position of the text cursor inside the element.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection-cursorPosition.html | UIElements.ITextSelection.cursorPosition}
     */
    readonly cursorPosition: Vector2;



    /**
     * Return true is the TextElement has a selection.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection.HasSelection.html | UIElements.ITextSelection.HasSelection}
     */
    HasSelection(): boolean;
    /**
     * Selects all the text contained in the field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection.SelectAll.html | UIElements.ITextSelection.SelectAll}
     */
    SelectAll(): void;
    /**
     * Remove selection
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection.SelectNone.html | UIElements.ITextSelection.SelectNone}
     */
    SelectNone(): void;
    /**
     * Select text between cursorIndex and selectIndex.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ITextSelection.SelectRange.html | UIElements.ITextSelection.SelectRange}
     */
    SelectRange(cursorIndex: number, selectionIndex: number): void;


}
    
interface TextElement extends BindableElement, ITextElement, ITextEdition, ITextElementExperimentalFeatures, INotifyValueChanged<string>, ITextSelection {
    /**
     * The text to be displayed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TextElement-text.html | UIElements.TextElement.text}
     */
    text: string;
    /**
     * When false, rich text tags will not be parsed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TextElement-enableRichText.html | UIElements.TextElement.enableRichText}
     */
    enableRichText: boolean;
    /**
     * Specifies the order in which the system should look for Emoji characters when rendering text.
 If this setting is enabled, the global Emoji Fallback list will be searched first for characters defined as
 Emoji in the Unicode 14.0 standard.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TextElement-emojiFallbackSupport.html | UIElements.TextElement.emojiFallbackSupport}
     */
    emojiFallbackSupport: boolean;
    /**
     * Specifies whether escape sequences are displayed as is or if they are replaced by the character they represent.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TextElement-parseEscapeSequences.html | UIElements.TextElement.parseEscapeSequences}
     */
    parseEscapeSequences: boolean;
    /**
     * When true, a tooltip displays the full version of elided text, and also if a tooltip had been previously
 provided, it will be overwritten.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TextElement-displayTooltipWhenElided.html | UIElements.TextElement.displayTooltipWhenElided}
     */
    displayTooltipWhenElided: boolean;
    /**
     * Returns true if text is elided, false otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TextElement-isElided.html | UIElements.TextElement.isElided}
     */
    readonly isElided: boolean;
    /**
     * Returns the TextElement experimental interface.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TextElement-experimental.html | UIElements.TextElement.experimental}
     */
    readonly experimental: ITextElementExperimentalFeatures;
    /**
     * Retrieves this TextElement's ITextSelection
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TextElement-selection.html | UIElements.TextElement.selection}
     */
    readonly selection: ITextSelection;



    MeasureTextSize(textToMeasure: string, width: number, widthMode: MeasureMode, height: number, heightMode: MeasureMode): Vector2;


}
    
interface TextElementConstructor {
    readonly ussClassName: string;
    readonly selectableUssClassName: string;


    new(): TextElement;



}
declare const TextElement: TextElementConstructor;
    
interface Label extends TextElement {





}
    
interface LabelConstructor {
    readonly ussClassName: string;


    new(): Label;
    new(text: string): Label;



}
declare const Label: LabelConstructor;
    
interface BaseField<TValueType> extends BindableElement, IEditableElement, IMixedValueSupport, INotifyValueChanged<TValueType>, IPrefixLabel {
    value: TValueType;
    readonly labelElement: Label;
    label: string;
    showMixedValue: boolean;



    SetValueWithoutNotify(newValue: TValueType): void;


}
    
interface BaseFieldConstructor {
    readonly ussClassName: string;
    readonly labelUssClassName: string;
    readonly inputUssClassName: string;
    readonly noLabelVariantUssClassName: string;
    readonly labelDraggerVariantUssClassName: string;
    readonly mixedValueLabelUssClassName: string;
    readonly alignedFieldUssClassName: string;





}
declare const BaseField: BaseFieldConstructor;
    
interface TextInputBaseField<TValueType> extends BaseField<TValueType>, IDelayedField {
    readonly textSelection: ITextSelection;
    readonly textEdition: ITextEdition;
    isReadOnly: boolean;
    isPasswordField: boolean;
    autoCorrection: boolean;
    hideMobileInput: boolean;
    keyboardType: TouchScreenKeyboardType;
    readonly touchScreenKeyboard: TouchScreenKeyboard;
    maxLength: number;
    isDelayed: boolean;
    maskChar: string;
    readonly selectionColor: Color;
    readonly cursorColor: Color;
    cursorIndex: number;
    readonly cursorPosition: Vector2;
    selectIndex: number;
    selectAllOnFocus: boolean;
    selectAllOnMouseUp: boolean;
    doubleClickSelectsWord: boolean;
    tripleClickSelectsLine: boolean;
    readonly text: string;
    emojiFallbackSupport: boolean;
    verticalScrollerVisibility: ScrollerVisibility;



    MeasureTextSize(textToMeasure: string, width: number, widthMode: MeasureMode, height: number, heightMode: MeasureMode): Vector2;
    SelectAll(): void;
    SelectNone(): void;
    SelectRange(cursorIndex: number, selectionIndex: number): void;


}
    
interface TextInputBaseFieldConstructor {
    readonly ussClassName: string;
    readonly labelUssClassName: string;
    readonly inputUssClassName: string;
    readonly singleLineInputUssClassName: string;
    readonly multilineInputUssClassName: string;
    readonly placeholderUssClassName: string;
    readonly textInputUssName: string;





}
declare const TextInputBaseField: TextInputBaseFieldConstructor;
    
interface TextField extends TextInputBaseField<string> {
    /**
     * Set this to true to allow multiple lines in the textfield and false if otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TextField-multiline.html | UIElements.TextField.multiline}
     */
    multiline: boolean;
    /**
     * The string currently being exposed by the field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.TextField-value.html | UIElements.TextField.value}
     */
    value: string;



    SetValueWithoutNotify(newValue: string): void;


}
    
interface TextFieldConstructor {
    readonly ussClassName: string;
    readonly labelUssClassName: string;
    readonly inputUssClassName: string;


    new(): TextField;
    new(maxLength: number, multiline: boolean, isPasswordField: boolean, maskChar: string): TextField;
    new(label: string): TextField;
    new(label: string, maxLength: number, multiline: boolean, isPasswordField: boolean, maskChar: string): TextField;



}
declare const TextField: TextFieldConstructor;
    
interface GameConfig extends ScriptableObject {
    gameId: string;
    startingScene: SceneAsset;
    gameScenes: Readonly<Object[]>;
    packages: Readonly<AirshipPackageDocument[]>;
    tags: Readonly<string[]>;
    gameLayers: Readonly<string[]>;
    gameTags: Readonly<string[]>;
    physicsMatrix: Readonly<boolean[]>;
    gravity: Vector3;
    bounceThreshold: number;
    defaultMaxDepenetrationVelocity: number;
    sleepThreshold: number;
    defaultContactOffset: number;
    defaultSolverIterations: number;
    defaultSolverVelocityIterations: number;
    queriesHitBackfaces: boolean;
    queriesHitTriggers: boolean;
    supportsMobile: boolean;



    DeserializeSettings(): void;
    SerializeSettings(): void;
    ToJson(): string;


}
    
interface SceneAsset extends Object {





}
    
interface AirshipPackageDocument {
    id: string;
    assetVersion: string;
    codeVersion: string;
    publishVersionNumber: string;
    game: boolean;
    localSource: boolean;
    disabled: boolean;
    defaultPackage: boolean;
    forceLatestVersion: boolean;



    IsDownloaded(): boolean;


}
    
interface AirshipPackageDocumentConstructor {


    new(): AirshipPackageDocument;


    FindPathFromDocument(document: AirshipPackageDocument): string;

}
declare const AirshipPackageDocument: AirshipPackageDocumentConstructor;
    
interface GameConfigConstructor {
    MaximumTags: number;


    new(): GameConfig;


    Load(): GameConfig;

}
declare const GameConfig: GameConfigConstructor;
    
interface RenderSettings extends Object {





}
    
interface Light extends Behaviour {
    /**
     * The type of the light.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-type.html | Light.type}
     */
    type: LightType;
    /**
     * The angle of the spot light's cone in degrees.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-spotAngle.html | Light.spotAngle}
     */
    spotAngle: number;
    /**
     * The angle of the spot light's inner cone in degrees.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-innerSpotAngle.html | Light.innerSpotAngle}
     */
    innerSpotAngle: number;
    /**
     * The color of the light.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-color.html | Light.color}
     */
    color: Color;
    /**
     * The color temperature of the light.
          Correlated Color Temperature (abbreviated as CCT) is multiplied with the color filter when calculating the final color of a light source. The color temperature of the electromagnetic radiation emitted from an ideal black body is defined as its surface temperature in Kelvin. White is 6500K according to the D65 standard. A candle light is 1800K and a soft warm light bulb is 2700K.
          If you want to use colorTemperature, GraphicsSettings.lightsUseLinearIntensity and Light.useColorTemperature has to be enabled.
          Additional resources: GraphicsSettings.lightsUseLinearIntensity, GraphicsSettings.useColorTemperature.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-colorTemperature.html | Light.colorTemperature}
     */
    colorTemperature: number;
    /**
     * Set to true to use the color temperature.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-useColorTemperature.html | Light.useColorTemperature}
     */
    useColorTemperature: boolean;
    /**
     * The Intensity of a light is multiplied with the Light color.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-intensity.html | Light.intensity}
     */
    intensity: number;
    /**
     * The multiplier that defines the strength of the bounce lighting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-bounceIntensity.html | Light.bounceIntensity}
     */
    bounceIntensity: number;
    /**
     * The unit Light.intensity should be displayed in.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-lightUnit.html | Light.lightUnit}
     */
    lightUnit: LightUnit;
    /**
     * How far away to measure LightUnit.Lux from.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-luxAtDistance.html | Light.luxAtDistance}
     */
    luxAtDistance: number;
    /**
     * Wether a Spot Light should simulate having a reflector.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-enableSpotReflector.html | Light.enableSpotReflector}
     */
    enableSpotReflector: boolean;
    /**
     * Set to true to override light bounding sphere for culling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-useBoundingSphereOverride.html | Light.useBoundingSphereOverride}
     */
    useBoundingSphereOverride: boolean;
    /**
     * Bounding sphere used to override the regular light bounding sphere during culling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-boundingSphereOverride.html | Light.boundingSphereOverride}
     */
    boundingSphereOverride: Vector4;
    /**
     * Whether to cull shadows for this Light when the Light is outside of the view frustum.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-useViewFrustumForShadowCasterCull.html | Light.useViewFrustumForShadowCasterCull}
     */
    useViewFrustumForShadowCasterCull: boolean;
    /**
     * Force a light to be visible even if outside the view frustum.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-forceVisible.html | Light.forceVisible}
     */
    forceVisible: boolean;
    /**
     * The custom resolution of the shadow map.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-shadowCustomResolution.html | Light.shadowCustomResolution}
     */
    shadowCustomResolution: number;
    /**
     * Shadow mapping constant bias.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-shadowBias.html | Light.shadowBias}
     */
    shadowBias: number;
    /**
     * Shadow mapping normal-based bias.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-shadowNormalBias.html | Light.shadowNormalBias}
     */
    shadowNormalBias: number;
    /**
     * Near plane value to use for shadow frustums.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-shadowNearPlane.html | Light.shadowNearPlane}
     */
    shadowNearPlane: number;
    /**
     * Set to true to enable custom matrix for culling during shadows.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-useShadowMatrixOverride.html | Light.useShadowMatrixOverride}
     */
    useShadowMatrixOverride: boolean;
    /**
     * Matrix that overrides the regular light projection matrix during shadow culling. Unity uses this matrix if you set Light.useShadowMatrixOverride to true.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-shadowMatrixOverride.html | Light.shadowMatrixOverride}
     */
    shadowMatrixOverride: Matrix4x4;
    /**
     * The range of each point of the light.

                Since area lights have a light emitting surface instead of a single point, the cumulative range of the light is larger than this property. This larger range can be read from the Light.dilatedRange property. For non-area lights, Light.range and Light.dilatedRange return the same value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-range.html | Light.range}
     */
    range: number;
    /**
     * The Light.range property describes the range of each point on the light. However, area lights consist of several light-emitting points, and so the effective range is a bit larger, and depends on the size of the area light. This property returns this larger range. Use this property to find whether a given world-space point will be lit by the area light.

                If not an area light, then returns the same value as Light.range.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-dilatedRange.html | Light.dilatedRange}
     */
    readonly dilatedRange: number;
    /**
     * The to use for this light.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-flare.html | Light.flare}
     */
    flare: Flare;
    /**
     * This property describes the output of the last Global Illumination bake.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-bakingOutput.html | Light.bakingOutput}
     */
    bakingOutput: LightBakingOutput;
    /**
     * This is used to light certain objects in the Scene selectively.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-cullingMask.html | Light.cullingMask}
     */
    cullingMask: number;
    /**
     * Determines which rendering LayerMask this Light affects.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-renderingLayerMask.html | Light.renderingLayerMask}
     */
    renderingLayerMask: number;
    /**
     * Allows you to override the global Shadowmask Mode per light. Only use this with render pipelines that can handle per light Shadowmask modes. Incompatible with the legacy renderers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-lightShadowCasterMode.html | Light.lightShadowCasterMode}
     */
    lightShadowCasterMode: LightShadowCasterMode;
    /**
     * Controls the amount of artificial softening applied to the edges of shadows cast by the Point or Spot light (Editor only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-shadowRadius.html | Light.shadowRadius}
     */
    shadowRadius: number;
    /**
     * Controls the amount of artificial softening applied to the edges of shadows cast by directional lights (Editor only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-shadowAngle.html | Light.shadowAngle}
     */
    shadowAngle: number;
    /**
     * How this light casts shadows
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-shadows.html | Light.shadows}
     */
    shadows: LightShadows;
    /**
     * Strength of light's shadows.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-shadowStrength.html | Light.shadowStrength}
     */
    shadowStrength: number;
    /**
     * The resolution of the shadow map.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-shadowResolution.html | Light.shadowResolution}
     */
    shadowResolution: LightShadowResolution;
    /**
     * Per-light, per-layer shadow culling distances. Directional lights only.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-layerShadowCullDistances.html | Light.layerShadowCullDistances}
     */
    layerShadowCullDistances: Readonly<number[]>;
    /**
     * The size of a directional light's cookie.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-cookieSize.html | Light.cookieSize}
     */
    cookieSize: number;
    /**
     * The cookie texture projected by the light.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-cookie.html | Light.cookie}
     */
    cookie: Texture;
    /**
     * How to render the light.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-renderMode.html | Light.renderMode}
     */
    renderMode: LightRenderMode;
    /**
     * The size of the area light.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-areaSize.html | Light.areaSize}
     */
    areaSize: Vector2;
    /**
     * This property describes what part of a light's contribution can be baked (Editor only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-lightmapBakeType.html | Light.lightmapBakeType}
     */
    lightmapBakeType: LightmapBakeType;
    /**
     * Number of command buffers set up on this light (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light-commandBufferCount.html | Light.commandBufferCount}
     */
    readonly commandBufferCount: number;



    /**
     * Add a command buffer to be executed at a specified place.
     * @param evt When to execute the command buffer during rendering.
     * @param buffer The buffer to execute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light.AddCommandBuffer.html | Light.AddCommandBuffer}
     */
    AddCommandBuffer(evt: LightEvent, buffer: CommandBuffer): void;
    /**
     * Add a command buffer to be executed at a specified place.
     * @param evt When to execute the command buffer during rendering.
     * @param buffer The buffer to execute.
     * @param shadowPassMask A mask specifying which shadow passes to execute the buffer for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light.AddCommandBuffer.html | Light.AddCommandBuffer}
     */
    AddCommandBuffer(evt: LightEvent, buffer: CommandBuffer, shadowPassMask: ShadowMapPass): void;
    /**
     * Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
     * @param evt The point during the graphics processing at which this command buffer should commence on the GPU.
     * @param buffer The buffer to execute.
     * @param queueType The desired async compute queue type to execute the buffer on.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light.AddCommandBufferAsync.html | Light.AddCommandBufferAsync}
     */
    AddCommandBufferAsync(evt: LightEvent, buffer: CommandBuffer, queueType: ComputeQueueType): void;
    /**
     * Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
     * @param evt The point during the graphics processing at which this command buffer should commence on the GPU.
     * @param buffer The buffer to execute.
     * @param shadowPassMask A mask specifying which shadow passes to execute the buffer for.
     * @param queueType The desired async compute queue type to execute the buffer on.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light.AddCommandBufferAsync.html | Light.AddCommandBufferAsync}
     */
    AddCommandBufferAsync(evt: LightEvent, buffer: CommandBuffer, shadowPassMask: ShadowMapPass, queueType: ComputeQueueType): void;
    /**
     * Get command buffers to be executed at a specified place.
     * @param evt When to execute the command buffer during rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light.GetCommandBuffers.html | Light.GetCommandBuffers}
     */
    GetCommandBuffers(evt: LightEvent): Readonly<CommandBuffer[]>;
    /**
     * Remove all command buffers set on this light.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light.RemoveAllCommandBuffers.html | Light.RemoveAllCommandBuffers}
     */
    RemoveAllCommandBuffers(): void;
    /**
     * Remove command buffer from execution at a specified place.
     * @param evt When to execute the command buffer during rendering.
     * @param buffer The buffer to execute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light.RemoveCommandBuffer.html | Light.RemoveCommandBuffer}
     */
    RemoveCommandBuffer(evt: LightEvent, buffer: CommandBuffer): void;
    /**
     * Remove command buffers from execution at a specified place.
     * @param evt When to execute the command buffer during rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light.RemoveCommandBuffers.html | Light.RemoveCommandBuffers}
     */
    RemoveCommandBuffers(evt: LightEvent): void;
    /**
     * Revert all light parameters to default.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light.Reset.html | Light.Reset}
     */
    Reset(): void;
    /**
     * Sets a light dirty to notify the light baking backends to update their internal light representation (Editor only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Light.SetLightDirty.html | Light.SetLightDirty}
     */
    SetLightDirty(): void;


}
    
interface Flare extends Object {





}
    
interface FlareConstructor {


    new(): Flare;



}
declare const Flare: FlareConstructor;
    
interface LightBakingOutput {
    probeOcclusionLightIndex: number;
    occlusionMaskChannel: number;
    lightmapBakeType: LightmapBakeType;
    mixedLightingMode: MixedLightingMode;
    isBaked: boolean;





}
    
interface LightConstructor {


    new(): Light;



}
declare const Light: LightConstructor;
    
interface RenderSettingsConstructor {
    /**
     * Is fog enabled?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-fog.html | RenderSettings.fog}
     */
    fog: boolean;
    /**
     * The starting distance of linear fog.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-fogStartDistance.html | RenderSettings.fogStartDistance}
     */
    fogStartDistance: number;
    /**
     * The ending distance of linear fog.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-fogEndDistance.html | RenderSettings.fogEndDistance}
     */
    fogEndDistance: number;
    /**
     * Fog mode to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-fogMode.html | RenderSettings.fogMode}
     */
    fogMode: FogMode;
    /**
     * The color of the fog.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-fogColor.html | RenderSettings.fogColor}
     */
    fogColor: Color;
    /**
     * The density of the exponential fog.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-fogDensity.html | RenderSettings.fogDensity}
     */
    fogDensity: number;
    /**
     * Ambient lighting mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-ambientMode.html | RenderSettings.ambientMode}
     */
    ambientMode: AmbientMode;
    /**
     * Ambient lighting coming from above.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-ambientSkyColor.html | RenderSettings.ambientSkyColor}
     */
    ambientSkyColor: Color;
    /**
     * Ambient lighting coming from the sides.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-ambientEquatorColor.html | RenderSettings.ambientEquatorColor}
     */
    ambientEquatorColor: Color;
    /**
     * Ambient lighting coming from below.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-ambientGroundColor.html | RenderSettings.ambientGroundColor}
     */
    ambientGroundColor: Color;
    /**
     * How much the light from the Ambient Source affects the Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-ambientIntensity.html | RenderSettings.ambientIntensity}
     */
    ambientIntensity: number;
    /**
     * Flat ambient lighting color.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-ambientLight.html | RenderSettings.ambientLight}
     */
    ambientLight: Color;
    /**
     * The color used for the sun shadows in the Subtractive lightmode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-subtractiveShadowColor.html | RenderSettings.subtractiveShadowColor}
     */
    subtractiveShadowColor: Color;
    /**
     * The global skybox to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-skybox.html | RenderSettings.skybox}
     */
    skybox: Material;
    /**
     * The light used by the procedural skybox.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-sun.html | RenderSettings.sun}
     */
    sun: Light;
    /**
     * An ambient probe that captures environment lighting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-ambientProbe.html | RenderSettings.ambientProbe}
     */
    ambientProbe: SphericalHarmonicsL2;
    customReflectionTexture: Texture;
    /**
     * How much the skybox / custom cubemap reflection affects the Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-reflectionIntensity.html | RenderSettings.reflectionIntensity}
     */
    reflectionIntensity: number;
    /**
     * The number of times a reflection includes other reflections.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-reflectionBounces.html | RenderSettings.reflectionBounces}
     */
    reflectionBounces: number;
    /**
     * Default reflection mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-defaultReflectionMode.html | RenderSettings.defaultReflectionMode}
     */
    defaultReflectionMode: DefaultReflectionMode;
    /**
     * Cubemap resolution for default reflection.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-defaultReflectionResolution.html | RenderSettings.defaultReflectionResolution}
     */
    defaultReflectionResolution: number;
    /**
     * Size of the Light halos.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-haloStrength.html | RenderSettings.haloStrength}
     */
    haloStrength: number;
    /**
     * The intensity of all flares in the Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-flareStrength.html | RenderSettings.flareStrength}
     */
    flareStrength: number;
    /**
     * The fade speed of all flares in the Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderSettings-flareFadeSpeed.html | RenderSettings.flareFadeSpeed}
     */
    flareFadeSpeed: number;





}
declare const RenderSettings: RenderSettingsConstructor;
    
interface ServerBootstrap extends MonoBehaviour {
    startupConfig: StartupConfig;
    overrideGameBundleId: string;
    overrideGameBundleVersion: string;
    airshipJWT: string;
    agones: AgonesBetaSdk;
    allocatedByAgones: boolean;
    gameId: string;
    serverId: string;
    organizationId: string;
    isShutdownEventTriggered: boolean;
    isAgonesShutdownTriggered: boolean;
    serverContext: ServerContext;
    isServerReady: boolean;
    isStartupConfigReady: boolean;

    readonly OnStartLoadingGame: MonoSignal<void>;
    readonly OnServerReady: MonoSignal<void>;
    readonly OnStartupConfigReady: MonoSignal<void>;
    readonly onProcessExit: MonoSignal<void>;


    FinishedSetup(): void;
    GetJoinCode(): string;
    InvokeOnProcessExit(): void;
    IsAgonesEnvironment(): boolean;
    OnGameServerChange(server: GameServer): void;
    Shutdown(): void;


}
    
interface StartupConfig {
    GameBundleId: string;
    GameAssetVersion: string;
    GameCodeVersion: string;
    StartingSceneName: string;
    GamePublishVersion: string;
    CdnUrl: string;
    packages: Readonly<AirshipPackageDocument[]>;





}
    
interface AgonesSdk extends MonoBehaviour {
    healthIntervalSecond: number;
    healthEnabled: boolean;
    logEnabled: boolean;



    Allocate(): boolean;
    Connect(): boolean;
    GameServer(): GameServer;
    Ready(): boolean;
    Reserve(duration: TimeSpan): boolean;
    SetAnnotation(key: string, value: string): boolean;
    SetLabel(key: string, value: string): boolean;
    Shutdown(): boolean;
    WatchGameServer(callback: WatchGameServerCallback): void;


}
    
interface GameServer {
    ObjectMeta: GameServerObjectMeta;
    Spec: GameServerSpec;
    Status: GameServerStatus;



    Equals(input: unknown): boolean;
    Equals(input: GameServer): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface GameServerObjectMeta {
    readonly Name: string;
    readonly Namespace: string;
    readonly Uid: string;
    readonly ResourceVersion: string;
    readonly Generation: number;
    readonly CreationTimestamp: string;
    readonly DeletionTimestamp?: string;
    readonly Annotations: CSDictionary<string, string>;
    readonly Labels: CSDictionary<string, string>;



    Equals(input: unknown): boolean;
    Equals(input: GameServerObjectMeta): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface GameServerObjectMetaConstructor {


    new(data: CSDictionary<string, unknown>): GameServerObjectMeta;



}
declare const GameServerObjectMeta: GameServerObjectMetaConstructor;
    
interface GameServerSpec {
    Health: SpecHealth;



    Equals(input: unknown): boolean;
    Equals(input: GameServerSpec): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface SpecHealth {
    readonly Disabled: boolean;
    readonly PeriodSeconds: number;
    readonly FailureThreshold: number;
    readonly InitialDelaySeconds: number;



    Equals(input: unknown): boolean;
    Equals(input: SpecHealth): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface SpecHealthConstructor {


    new(data: CSDictionary<string, unknown>): SpecHealth;



}
declare const SpecHealth: SpecHealthConstructor;
    
interface GameServerSpecConstructor {


    new(data: CSDictionary<string, unknown>): GameServerSpec;



}
declare const GameServerSpec: GameServerSpecConstructor;
    
interface GameServerStatus {
    readonly State: string;
    readonly Address: string;
    readonly Addresses: Readonly<StatusAddresses[]>;
    readonly Ports: Readonly<StatusPort[]>;



    Equals(input: unknown): boolean;
    Equals(input: GameServerStatus): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StatusAddresses {
    readonly Address: string;
    readonly Type: string;



    Equals(input: unknown): boolean;
    Equals(input: StatusAddresses): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StatusAddressesConstructor {


    new(data: CSDictionary<string, unknown>): StatusAddresses;



}
declare const StatusAddresses: StatusAddressesConstructor;
    
interface StatusPort {
    readonly Name: string;
    readonly Port: number;



    Equals(input: unknown): boolean;
    Equals(input: StatusPort): boolean;
    GetHashCode(): number;
    ToString(): string;


}
    
interface StatusPortConstructor {


    new(data: CSDictionary<string, unknown>): StatusPort;



}
declare const StatusPort: StatusPortConstructor;
    
interface GameServerStatusConstructor {


    new(data: CSDictionary<string, unknown>): GameServerStatus;



}
declare const GameServerStatus: GameServerStatusConstructor;
    
interface GameServerConstructor {


    new(data: CSDictionary<string, unknown>): GameServer;



}
declare const GameServer: GameServerConstructor;
    
interface WatchGameServerCallback extends MulticastDelegate {



    BeginInvoke(gameServer: GameServer, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): void;
    Invoke(gameServer: GameServer): void;


}
    
interface WatchGameServerCallbackConstructor {


    new(object: unknown, method: IntPtr): WatchGameServerCallback;



}
declare const WatchGameServerCallback: WatchGameServerCallbackConstructor;
    
interface AgonesSdkConstructor {


    new(): AgonesSdk;



}
declare const AgonesSdk: AgonesSdkConstructor;
    
interface AgonesBetaSdk extends AgonesSdk {



    AppendListValue(key: string, value: string): boolean;
    DecrementCounter(key: string, amount: number): boolean;
    DeleteListValue(key: string, value: string): boolean;
    GetCounterCapacity(key: string): number;
    GetCounterCount(key: string): number;
    GetListCapacity(key: string): number;
    GetListLength(key: string): number;
    GetListValues(key: string): Readonly<string[]>;
    IncrementCounter(key: string, amount: number): boolean;
    ListContains(key: string, value: string): boolean;
    SetCounterCapacity(key: string, amount: number): boolean;
    SetCounterCount(key: string, amount: number): boolean;
    SetListCapacity(key: string, amount: number): boolean;


}
    
interface AgonesBetaSdkConstructor {


    new(): AgonesBetaSdk;



}
declare const AgonesBetaSdk: AgonesBetaSdkConstructor;
    
    
interface NetworkConnection {
    readonly connectionId: number;
    isAuthenticated: boolean;
    authenticationData: unknown;
    isReady: boolean;
    lastMessageTime: number;
    readonly owned: Readonly<NetworkIdentity[]>;
    readonly identity: NetworkIdentity;
    readonly remoteTimeStamp: number;



    Cleanup(): void;
    Disconnect(): void;
    Send<T extends NetworkMessage>(message: T, channelId: number): void;
    ToString(): string;


}
    
    
interface NetworkConnectionToClient extends NetworkConnection {
    readonly observing: Readonly<NetworkIdentity[]>;
    unbatcher: Unbatcher;
    remoteTimeline: number;
    remoteTimescale: number;
    snapshotBufferSizeLimit: number;
    readonly address: string;
    readonly bufferTime: number;
    readonly rtt: number;



    Disconnect(): void;
    OnTimeSnapshot(snapshot: TimeSnapshot): void;
    UpdateTimeInterpolation(): void;


}
    
interface Unbatcher {
    readonly BatchesCount: number;



    AddBatch(batch: Readonly<number[]>): boolean;


}
    
interface UnbatcherConstructor {


    new(): Unbatcher;



}
declare const Unbatcher: UnbatcherConstructor;
    
interface Snapshot {
    remoteTime: number;
    localTime: number;





}
    
interface TimeSnapshot extends Snapshot {
    remoteTime: number;
    localTime: number;





}
    
interface TimeSnapshotConstructor {


    new(remoteTime: number, localTime: number): TimeSnapshot;



}
declare const TimeSnapshot: TimeSnapshotConstructor;
    
interface NetworkConnectionToClientConstructor {


    new(networkConnectionId: number, clientAddress: string): NetworkConnectionToClient;



}
declare const NetworkConnectionToClient: NetworkConnectionToClientConstructor;
    
    
interface NetworkMessage {





}
    
interface NetworkConnectionConstructor {
    LocalConnectionId: number;





}
declare const NetworkConnection: NetworkConnectionConstructor;
    
interface NetworkReader {
    Position: number;
    readonly Remaining: number;
    readonly Capacity: number;



    Read<T>(): T;
    ReadByte(): number;
    ReadBytes(bytes: Readonly<number[]>, count: number): Readonly<number[]>;
    ReadBytesSegment(count: number): Readonly<number[]>;
    SetBuffer(segment: Readonly<number[]>): void;
    ToString(): string;


}
    
interface NetworkReaderConstructor {
    AllocationLimit: number;


    new(segment: Readonly<number[]>): NetworkReader;



}
declare const NetworkReader: NetworkReaderConstructor;
    
interface NetworkWriter {
    Position: number;
    readonly Capacity: number;



    Reset(): void;
    ToArray(): Readonly<number[]>;
    ToArraySegment(): Readonly<number[]>;
    ToString(): string;
    Write<T>(value: T): void;
    WriteByte(value: number): void;
    WriteBytes(array: Readonly<number[]>, offset: number, count: number): void;
    WriteBytes(ptr: Byte, offset: number, size: number): boolean;


}
    
interface NetworkWriterConstructor {
    MaxStringLength: number;
    DefaultCapacity: number;


    new(): NetworkWriter;



}
declare const NetworkWriter: NetworkWriterConstructor;
    
    
interface ServerContext extends NetworkBehaviour {
    serverId: string;
    gameId: string;
    organizationId: string;
    NetworkserverId: string;
    NetworkgameId: string;
    NetworkorganizationId: string;



    DeserializeSyncVars(reader: NetworkReader, initialState: boolean): void;
    SerializeSyncVars(writer: NetworkWriter, forceAll: boolean): void;
    Weaved(): boolean;


}
    
interface ServerContextConstructor {


    new(): ServerContext;



}
declare const ServerContext: ServerContextConstructor;
    
interface ServerBootstrapConstructor {


    new(): ServerBootstrap;



}
declare const ServerBootstrap: ServerBootstrapConstructor;
    
    
interface CreateSceneParameters {
    /**
     * See SceneManagement.LocalPhysicsMode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SceneManagement.CreateSceneParameters-localPhysicsMode.html | SceneManagement.CreateSceneParameters.localPhysicsMode}
     */
    localPhysicsMode: LocalPhysicsMode;





}
    
interface CreateSceneParametersConstructor {


    new(physicsMode: LocalPhysicsMode): CreateSceneParameters;



}
declare const CreateSceneParameters: CreateSceneParametersConstructor;
    
interface LoadSceneParameters {
    /**
     * See LoadSceneMode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SceneManagement.LoadSceneParameters-loadSceneMode.html | SceneManagement.LoadSceneParameters.loadSceneMode}
     */
    loadSceneMode: LoadSceneMode;
    /**
     * See SceneManagement.LocalPhysicsMode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SceneManagement.LoadSceneParameters-localPhysicsMode.html | SceneManagement.LoadSceneParameters.localPhysicsMode}
     */
    localPhysicsMode: LocalPhysicsMode;





}
    
interface LoadSceneParametersConstructor {


    new(mode: LoadSceneMode): LoadSceneParameters;
    new(mode: LoadSceneMode, physicsMode: LocalPhysicsMode): LoadSceneParameters;



}
declare const LoadSceneParameters: LoadSceneParametersConstructor;
    
    
interface AvatarMask extends Object {
    /**
     * Number of transforms.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AvatarMask-transformCount.html | AvatarMask.transformCount}
     */
    transformCount: number;



    AddTransformPath(transform: Transform): void;
    /**
     * Adds a transform path into the AvatarMask.
     * @param transform The transform to add into the AvatarMask.
     * @param recursive Whether to also add all children of the specified transform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AvatarMask.AddTransformPath.html | AvatarMask.AddTransformPath}
     */
    AddTransformPath(transform: Transform, recursive: boolean): void;
    /**
     * Returns true if the humanoid body part at the given index is active.
     * @param index The index of the humanoid body part.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AvatarMask.GetHumanoidBodyPartActive.html | AvatarMask.GetHumanoidBodyPartActive}
     */
    GetHumanoidBodyPartActive(index: AvatarMaskBodyPart): boolean;
    /**
     * Returns true if the transform at the given index is active.
     * @param index The index of the transform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AvatarMask.GetTransformActive.html | AvatarMask.GetTransformActive}
     */
    GetTransformActive(index: number): boolean;
    /**
     * Returns the path of the transform at the given index.
     * @param index The index of the transform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AvatarMask.GetTransformPath.html | AvatarMask.GetTransformPath}
     */
    GetTransformPath(index: number): string;
    RemoveTransformPath(transform: Transform): void;
    /**
     * Removes a transform path from the AvatarMask.
     * @param transform The Transform that should be removed from the AvatarMask.
     * @param recursive Whether to also remove all children of the specified transform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AvatarMask.RemoveTransformPath.html | AvatarMask.RemoveTransformPath}
     */
    RemoveTransformPath(transform: Transform, recursive: boolean): void;
    /**
     * Sets the humanoid body part at the given index to active or not.
     * @param index The index of the humanoid body part.
     * @param value Active or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AvatarMask.SetHumanoidBodyPartActive.html | AvatarMask.SetHumanoidBodyPartActive}
     */
    SetHumanoidBodyPartActive(index: AvatarMaskBodyPart, value: boolean): void;
    /**
     * Sets the tranform at the given index to active or not.
     * @param index The index of the transform.
     * @param value Active or not.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AvatarMask.SetTransformActive.html | AvatarMask.SetTransformActive}
     */
    SetTransformActive(index: number, value: boolean): void;
    /**
     * Sets the path of the transform at the given index.
     * @param index The index of the transform.
     * @param path The path of the transform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AvatarMask.SetTransformPath.html | AvatarMask.SetTransformPath}
     */
    SetTransformPath(index: number, path: string): void;


}
    
interface AvatarMaskConstructor {


    new(): AvatarMask;



}
declare const AvatarMask: AvatarMaskConstructor;
    
interface SkinnedMeshRenderer extends Renderer {
    /**
     * The maximum number of bones per vertex that are taken into account during skinning.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer-quality.html | SkinnedMeshRenderer.quality}
     */
    quality: SkinQuality;
    /**
     * If enabled, the Skinned Mesh will be updated when offscreen. If disabled, this also disables updating animations.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer-updateWhenOffscreen.html | SkinnedMeshRenderer.updateWhenOffscreen}
     */
    updateWhenOffscreen: boolean;
    /**
     * Forces the Skinned Mesh to recalculate its matricies when rendered
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer-forceMatrixRecalculationPerRender.html | SkinnedMeshRenderer.forceMatrixRecalculationPerRender}
     */
    forceMatrixRecalculationPerRender: boolean;
    rootBone: Transform;
    /**
     * The bones used to skin the mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer-bones.html | SkinnedMeshRenderer.bones}
     */
    bones: Readonly<Transform[]>;
    /**
     * The mesh used for skinning.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer-sharedMesh.html | SkinnedMeshRenderer.sharedMesh}
     */
    sharedMesh: Mesh;
    /**
     * Specifies whether skinned motion vectors should be used for this renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer-skinnedMotionVectors.html | SkinnedMeshRenderer.skinnedMotionVectors}
     */
    skinnedMotionVectors: boolean;
    /**
     * The intended target usage of the skinned mesh GPU vertex buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer-vertexBufferTarget.html | SkinnedMeshRenderer.vertexBufferTarget}
     */
    vertexBufferTarget: Target;



    /**
     * Creates a snapshot of SkinnedMeshRenderer and stores it in mesh.
     * @param mesh A static mesh that will receive the snapshot of the skinned mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer.BakeMesh.html | SkinnedMeshRenderer.BakeMesh}
     */
    BakeMesh(mesh: Mesh): void;
    /**
     * Creates a snapshot of SkinnedMeshRenderer and stores it in mesh.
     * @param mesh A static mesh that will receive the snapshot of the skinned mesh.
     * @param useScale Whether to compensate for the SkinnedMeshRenderer's Transform scale. If true, the baked Mesh is the same size as the original. If false, the baked Mesh matches the scaling of the SkinnedMeshRenderer's Transform component. The default value is false.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer.BakeMesh.html | SkinnedMeshRenderer.BakeMesh}
     */
    BakeMesh(mesh: Mesh, useScale: boolean): void;
    /**
     * Returns the weight of a BlendShape for this Renderer.
     * @param index The index of the BlendShape whose weight you want to retrieve. Index must be smaller than the Mesh.blendShapeCount of the Mesh attached to this Renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer.GetBlendShapeWeight.html | SkinnedMeshRenderer.GetBlendShapeWeight}
     */
    GetBlendShapeWeight(index: number): number;
    /**
     * Retrieves a GraphicsBuffer that provides direct access to the GPU vertex buffer for this skinned mesh, for the previous frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer.GetPreviousVertexBuffer.html | SkinnedMeshRenderer.GetPreviousVertexBuffer}
     */
    GetPreviousVertexBuffer(): GraphicsBuffer;
    /**
     * Retrieves a GraphicsBuffer that provides direct access to the GPU vertex buffer for this skinned mesh, for the current frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer.GetVertexBuffer.html | SkinnedMeshRenderer.GetVertexBuffer}
     */
    GetVertexBuffer(): GraphicsBuffer;
    /**
     * Sets the weight of a BlendShape for this Renderer.
     * @param index The index of the BlendShape to modify. Index must be smaller than the Mesh.blendShapeCount of the Mesh attached to this Renderer.
     * @param value The weight for this BlendShape.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SkinnedMeshRenderer.SetBlendShapeWeight.html | SkinnedMeshRenderer.SetBlendShapeWeight}
     */
    SetBlendShapeWeight(index: number, value: number): void;


}
    
interface SkinnedMeshRendererConstructor {


    new(): SkinnedMeshRenderer;



}
declare const SkinnedMeshRenderer: SkinnedMeshRendererConstructor;
    
interface GizmoUtils extends Debug {





}
    
interface GizmoUtilsConstructor {


    new(): GizmoUtils;


    DrawArc(startAngle: number, endAngle: number, position: Vector3, orientation: Quaternion, radius: number, color: Color, drawChord: boolean, drawSector: boolean, arcSegments: number, durationSec: number): void;
    DrawBox(position: Vector3, orientation: Quaternion, halfSize: Vector3, color: Color, durationSec: number): void;
    DrawCircle(position: Vector3, rotation: Quaternion, radius: number, segments: number, color: Color, durationSec: number): void;
    DrawQuad(pointA: Vector3, pointB: Vector3, pointC: Vector3, pointD: Vector3, color: Color, durationSec: number): void;
    DrawRect(origin: Vector3, orientation: Quaternion, extent: Vector2, color: Color, durationSec: number): void;
    DrawSingleLine(startPosition: Vector3, endPosition: Vector3, color: Color, durationSec: number): void;
    DrawSphere(position: Vector3, radius: number, color: Color, segments: number, durationSec: number): void;
    TogglePauseEngine(): void;

}
declare const GizmoUtils: GizmoUtilsConstructor;
    
interface CollisionWatcher extends MonoBehaviour {

    readonly OnCollide: MonoSignal<Collision>;




}
    
interface Collision {
    /**
     * The total impulse applied to this contact pair to resolve the collision.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision-impulse.html | Collision.impulse}
     */
    readonly impulse: Vector3;
    /**
     * The relative linear velocity of the two colliding objects (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision-relativeVelocity.html | Collision.relativeVelocity}
     */
    readonly relativeVelocity: Vector3;
    /**
     * The Rigidbody we hit (Read Only). This is null if the object we hit is a collider with no rigidbody attached.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision-rigidbody.html | Collision.rigidbody}
     */
    readonly rigidbody: Rigidbody;
    /**
     * The ArticulationBody of the collider that your GameObject collides with (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision-articulationBody.html | Collision.articulationBody}
     */
    readonly articulationBody: ArticulationBody;
    /**
     * The Rigidbody or ArticulationBody of the collider that your Component collides with (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision-body.html | Collision.body}
     */
    readonly body: Component;
    /**
     * The Collider we hit (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision-collider.html | Collision.collider}
     */
    readonly collider: Collider;
    /**
     * The Transform of the object we hit (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision-transform.html | Collision.transform}
     */
    readonly transform: Transform;
    /**
     * The GameObject whose collider you are colliding with. (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision-gameObject.html | Collision.gameObject}
     */
    readonly gameObject: GameObject;
    /**
     * Gets the number of contacts for this collision.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision-contactCount.html | Collision.contactCount}
     */
    readonly contactCount: number;
    /**
     * The contact points generated by the physics engine. You should avoid using this as it produces memory garbage. Use GetContact or GetContacts instead.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision-contacts.html | Collision.contacts}
     */
    readonly contacts: Readonly<ContactPoint[]>;



    /**
     * Gets the contact point at the specified index.
     * @param index The index of the contact to retrieve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision.GetContact.html | Collision.GetContact}
     */
    GetContact(index: number): ContactPoint;
    /**
     * Retrieves all contact points for this collision.
     * @param contacts An array of ContactPoint used to receive the results.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Collision.GetContacts.html | Collision.GetContacts}
     */
    GetContacts(contacts: Readonly<ContactPoint[]>): number;
    GetContacts(contacts: Readonly<ContactPoint[]>): number;


}
    
interface ContactPoint {
    /**
     * The point of contact.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint-point.html | ContactPoint.point}
     */
    readonly point: Vector3;
    /**
     * Normal of the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint-normal.html | ContactPoint.normal}
     */
    readonly normal: Vector3;
    /**
     * The impulse applied to this contact pair to resolve the collision.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint-impulse.html | ContactPoint.impulse}
     */
    readonly impulse: Vector3;
    /**
     * The first collider in contact at the point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint-thisCollider.html | ContactPoint.thisCollider}
     */
    readonly thisCollider: Collider;
    /**
     * The other collider in contact at the point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint-otherCollider.html | ContactPoint.otherCollider}
     */
    readonly otherCollider: Collider;
    /**
     * The distance between the colliders at the contact point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ContactPoint-separation.html | ContactPoint.separation}
     */
    readonly separation: number;





}
    
interface CollisionConstructor {


    new(): Collision;



}
declare const Collision: CollisionConstructor;
    
interface CollisionWatcherConstructor {


    new(): CollisionWatcher;



}
declare const CollisionWatcher: CollisionWatcherConstructor;
    
interface TriggerWatcher extends MonoBehaviour {

    readonly OnEnter: MonoSignal<Collider>;




}
    
interface TriggerWatcherConstructor {


    new(): TriggerWatcher;



}
declare const TriggerWatcher: TriggerWatcherConstructor;
    
interface PhysicsExt {





}
    
interface SphereCastReturnData {
    readonly HitCount: number;
    readonly RaycastHits: Readonly<RaycastHit[]>;





}
    
interface SphereCastReturnDataConstructor {


    new(hitCount: number, raycastHits: Readonly<RaycastHit[]>): SphereCastReturnData;



}
declare const SphereCastReturnData: SphereCastReturnDataConstructor;
    
interface PhysicsExtConstructor {


    new(): PhysicsExt;


    EasySphereCast(start: Vector3, direction: Vector3, radius: number, distance: number, layerMask: number): SphereCastReturnData;

}
declare const PhysicsExt: PhysicsExtConstructor;
    
interface Joint extends Component {
    /**
     * A reference to another rigidbody this joint connects to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-connectedBody.html | Joint.connectedBody}
     */
    connectedBody: Rigidbody;
    /**
     * A reference to an articulation body this joint connects to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-connectedArticulationBody.html | Joint.connectedArticulationBody}
     */
    connectedArticulationBody: ArticulationBody;
    /**
     * The Direction of the axis around which the body is constrained.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-axis.html | Joint.axis}
     */
    axis: Vector3;
    /**
     * The Position of the anchor around which the joints motion is constrained.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-anchor.html | Joint.anchor}
     */
    anchor: Vector3;
    /**
     * Position of the anchor relative to the connected Rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-connectedAnchor.html | Joint.connectedAnchor}
     */
    connectedAnchor: Vector3;
    /**
     * Should the connectedAnchor be calculated automatically?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-autoConfigureConnectedAnchor.html | Joint.autoConfigureConnectedAnchor}
     */
    autoConfigureConnectedAnchor: boolean;
    /**
     * The force that needs to be applied for this joint to break.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-breakForce.html | Joint.breakForce}
     */
    breakForce: number;
    /**
     * The torque that needs to be applied for this joint to break. To be able to break, a joint must be _Locked_ or _Limited_ on the axis of rotation where the torque is being applied. This means that some joints cannot break, such as an unconstrained Configurable Joint.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-breakTorque.html | Joint.breakTorque}
     */
    breakTorque: number;
    /**
     * Enable collision between bodies connected with the joint.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-enableCollision.html | Joint.enableCollision}
     */
    enableCollision: boolean;
    /**
     * Toggle preprocessing for this joint.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-enablePreprocessing.html | Joint.enablePreprocessing}
     */
    enablePreprocessing: boolean;
    /**
     * The scale to apply to the inverse mass and inertia tensor of the body prior to solving the constraints.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-massScale.html | Joint.massScale}
     */
    massScale: number;
    /**
     * The scale to apply to the inverse mass and inertia tensor of the connected body prior to solving the constraints.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-connectedMassScale.html | Joint.connectedMassScale}
     */
    connectedMassScale: number;
    /**
     * The force applied by the solver to satisfy all constraints.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-currentForce.html | Joint.currentForce}
     */
    readonly currentForce: Vector3;
    /**
     * The torque applied by the solver to satisfy all constraints.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Joint-currentTorque.html | Joint.currentTorque}
     */
    readonly currentTorque: Vector3;





}
    
interface JointConstructor {


    new(): Joint;



}
declare const Joint: JointConstructor;
    
interface CharacterJoint extends Joint {
    /**
     * The secondary axis around which the joint can rotate.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterJoint-swingAxis.html | CharacterJoint.swingAxis}
     */
    swingAxis: Vector3;
    /**
     * The configuration of the spring attached to the twist limits of the joint.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterJoint-twistLimitSpring.html | CharacterJoint.twistLimitSpring}
     */
    twistLimitSpring: SoftJointLimitSpring;
    /**
     * The configuration of the spring attached to the swing limits of the joint.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterJoint-swingLimitSpring.html | CharacterJoint.swingLimitSpring}
     */
    swingLimitSpring: SoftJointLimitSpring;
    /**
     * The lower limit around the primary axis of the character joint.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterJoint-lowTwistLimit.html | CharacterJoint.lowTwistLimit}
     */
    lowTwistLimit: SoftJointLimit;
    /**
     * The upper limit around the primary axis of the character joint.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterJoint-highTwistLimit.html | CharacterJoint.highTwistLimit}
     */
    highTwistLimit: SoftJointLimit;
    /**
     * The angular limit of rotation (in degrees) around the primary axis of the character joint.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterJoint-swing1Limit.html | CharacterJoint.swing1Limit}
     */
    swing1Limit: SoftJointLimit;
    /**
     * The angular limit of rotation (in degrees) around the primary axis of the character joint.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterJoint-swing2Limit.html | CharacterJoint.swing2Limit}
     */
    swing2Limit: SoftJointLimit;
    /**
     * Brings violated constraints back into alignment even when the solver fails.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterJoint-enableProjection.html | CharacterJoint.enableProjection}
     */
    enableProjection: boolean;
    /**
     * Set the linear tolerance threshold for projection.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterJoint-projectionDistance.html | CharacterJoint.projectionDistance}
     */
    projectionDistance: number;
    /**
     * Set the angular tolerance threshold (in degrees) for projection.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterJoint-projectionAngle.html | CharacterJoint.projectionAngle}
     */
    projectionAngle: number;





}
    
interface SoftJointLimitSpring {
    /**
     * The stiffness of the spring limit. When stiffness is zero the limit is hard, otherwise soft.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SoftJointLimitSpring-spring.html | SoftJointLimitSpring.spring}
     */
    spring: number;
    /**
     * The damping of the spring limit. In effect when the stiffness of the sprint limit is not zero.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SoftJointLimitSpring-damper.html | SoftJointLimitSpring.damper}
     */
    damper: number;





}
    
interface SoftJointLimit {
    /**
     * The limit position/angle of the joint (in degrees).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SoftJointLimit-limit.html | SoftJointLimit.limit}
     */
    limit: number;
    /**
     * When the joint hits the limit, it can be made to bounce off it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SoftJointLimit-bounciness.html | SoftJointLimit.bounciness}
     */
    bounciness: number;
    /**
     * Determines how far ahead in space the solver can &quot;see&quot; the joint limit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SoftJointLimit-contactDistance.html | SoftJointLimit.contactDistance}
     */
    contactDistance: number;





}
    
interface CharacterJointConstructor {


    new(): CharacterJoint;



}
declare const CharacterJoint: CharacterJointConstructor;
    
    
    
interface Application {





}
    
interface AdvertisingIdentifierCallback extends MulticastDelegate {



    BeginInvoke(advertisingId: string, trackingEnabled: boolean, errorMsg: string, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): void;
    Invoke(advertisingId: string, trackingEnabled: boolean, errorMsg: string): void;


}
    
interface AdvertisingIdentifierCallbackConstructor {


    new(object: unknown, method: IntPtr): AdvertisingIdentifierCallback;



}
declare const AdvertisingIdentifierCallback: AdvertisingIdentifierCallbackConstructor;
    
interface ApplicationConstructor {
    /**
     * Returns true when called in any kind of built Player, or when called in the Editor in Play mode (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-isPlaying.html | Application.isPlaying}
     */
    readonly isPlaying: boolean;
    /**
     * Whether the Player currently has focus (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-isFocused.html | Application.isFocused}
     */
    readonly isFocused: boolean;
    /**
     * Returns a GUID for this build (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-buildGUID.html | Application.buildGUID}
     */
    readonly buildGUID: string;
    /**
     * Determines whether the Player should run when the application is in the background
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-runInBackground.html | Application.runInBackground}
     */
    runInBackground: boolean;
    /**
     * Returns true when Unity is launched with the -batchmode flag from the command line (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-isBatchMode.html | Application.isBatchMode}
     */
    readonly isBatchMode: boolean;
    /**
     * Contains the path to the game data folder on the target device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-dataPath.html | Application.dataPath}
     */
    readonly dataPath: string;
    /**
     * The path to the StreamingAssets  folder (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-streamingAssetsPath.html | Application.streamingAssetsPath}
     */
    readonly streamingAssetsPath: string;
    /**
     * Contains the path to a persistent data directory (Read-only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-persistentDataPath.html | Application.persistentDataPath}
     */
    readonly persistentDataPath: string;
    /**
     * Contains the path to a temporary data / cache directory (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-temporaryCachePath.html | Application.temporaryCachePath}
     */
    readonly temporaryCachePath: string;
    /**
     * The URL of the document. For WebGL, this is a web URL. For Android, iOS, or Universal Windows Platform (UWP) this is a deep link URL (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-absoluteURL.html | Application.absoluteURL}
     */
    readonly absoluteURL: string;
    /**
     * The version of the Unity runtime used to play the content.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-unityVersion.html | Application.unityVersion}
     */
    readonly unityVersion: string;
    /**
     * Returns application version number (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-version.html | Application.version}
     */
    readonly version: string;
    /**
     * Returns the name of the store or package that installed the application (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-installerName.html | Application.installerName}
     */
    readonly installerName: string;
    /**
     * Returns the application identifier at runtime.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-identifier.html | Application.identifier}
     */
    readonly identifier: string;
    /**
     * Returns application install mode (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-installMode.html | Application.installMode}
     */
    readonly installMode: ApplicationInstallMode;
    /**
     * Returns application running in a sandbox environment (Read-only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-sandboxType.html | Application.sandboxType}
     */
    readonly sandboxType: ApplicationSandboxType;
    /**
     * Returns application product name (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-productName.html | Application.productName}
     */
    readonly productName: string;
    /**
     * Returns application company name (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-companyName.html | Application.companyName}
     */
    readonly companyName: string;
    /**
     * A unique cloud project identifier. It is unique for every project (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-cloudProjectId.html | Application.cloudProjectId}
     */
    readonly cloudProjectId: string;
    /**
     * Specifies the target frame rate at which Unity tries to render your game.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-targetFrameRate.html | Application.targetFrameRate}
     */
    targetFrameRate: number;
    /**
     * Returns the path to the console log file, or an empty string if the current platform does not support log files.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-consoleLogPath.html | Application.consoleLogPath}
     */
    readonly consoleLogPath: string;
    /**
     * Priority of background loading thread.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-backgroundLoadingPriority.html | Application.backgroundLoadingPriority}
     */
    backgroundLoadingPriority: ThreadPriority;
    /**
     * Returns false if application is altered in any way after it was built.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-genuine.html | Application.genuine}
     */
    readonly genuine: boolean;
    /**
     * Returns true if application integrity can be confirmed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-genuineCheckAvailable.html | Application.genuineCheckAvailable}
     */
    readonly genuineCheckAvailable: boolean;
    /**
     * Returns the platform the game is running on (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-platform.html | Application.platform}
     */
    readonly platform: RuntimePlatform;
    /**
     * Identifies whether the current Runtime platform is a known mobile platform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-isMobilePlatform.html | Application.isMobilePlatform}
     */
    readonly isMobilePlatform: boolean;
    /**
     * Is the current Runtime platform a known console platform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-isConsolePlatform.html | Application.isConsolePlatform}
     */
    readonly isConsolePlatform: boolean;
    /**
     * The language in which the user's operating system is running in.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-systemLanguage.html | Application.systemLanguage}
     */
    readonly systemLanguage: SystemLanguage;
    /**
     * Returns the type of internet reachability currently possible on the device.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-internetReachability.html | Application.internetReachability}
     */
    readonly internetReachability: NetworkReachability;
    /**
     * Cancellation token raised on exiting Play mode (Editor) or on quitting the application (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-exitCancellationToken.html | Application.exitCancellationToken}
     */
    readonly exitCancellationToken: CancellationToken;
    /**
     * Whether the game is running inside the Unity Editor (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Application-isEditor.html | Application.isEditor}
     */
    readonly isEditor: boolean;


    new(): Application;


    CanStreamedLevelBeLoaded(levelIndex: number): boolean;
    CanStreamedLevelBeLoaded(levelName: string): boolean;
    GetStackTraceLogType(logType: LogType): StackTraceLogType;
    HasProLicense(): boolean;
    HasUserAuthorization(mode: UserAuthorization): boolean;
    IsPlaying(obj: Object): boolean;
    OpenURL(url: string): void;
    Quit(exitCode: number): void;
    Quit(): void;
    RequestAdvertisingIdentifierAsync(delegateMethod: AdvertisingIdentifierCallback): boolean;
    RequestUserAuthorization(mode: UserAuthorization): AsyncOperation;
    SetStackTraceLogType(logType: LogType, stackTraceType: StackTraceLogType): void;
    Unload(): void;

    readonly lowMemory: MonoSignal<void>;
    readonly memoryUsageChanged: MonoSignal<void>;
    readonly logMessageReceived: MonoSignal<void>;
    readonly logMessageReceivedThreaded: MonoSignal<void>;
    readonly onBeforeRender: MonoSignal<void>;
    readonly focusChanged: MonoSignal<boolean>;
    readonly deepLinkActivated: MonoSignal<string>;
    readonly wantsToQuit: MonoSignal<boolean>;
    readonly quitting: MonoSignal<void>;
    readonly unloading: MonoSignal<void>;
}
declare const Application: ApplicationConstructor;
    
interface ClientNetworkConnector extends MonoBehaviour {
    expectingDisconnect: boolean;
    reconnectAttempt: number;



    NetworkClient_OnConnected(): void;
    NetworkClient_OnDisconnected(): void;


}
    
interface ClientNetworkConnectorConstructor {


    new(): ClientNetworkConnector;



}
declare const ClientNetworkConnector: ClientNetworkConnectorConstructor;
    
interface ParticleSystem extends Component {
    /**
     * Determines whether the Particle System is playing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-isPlaying.html | ParticleSystem.isPlaying}
     */
    readonly isPlaying: boolean;
    /**
     * Determines whether the Particle System is emitting particles. A Particle System may stop emitting when its emission module has finished, it has been paused or if the system has been stopped using ParticleSystem.Stop|Stop with the ParticleSystemStopBehavior.StopEmitting|StopEmitting flag. Resume emitting by calling ParticleSystem.Play|Play.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-isEmitting.html | ParticleSystem.isEmitting}
     */
    readonly isEmitting: boolean;
    /**
     * Determines whether the Particle System is in the stopped state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-isStopped.html | ParticleSystem.isStopped}
     */
    readonly isStopped: boolean;
    /**
     * Determines whether the Particle System is paused.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-isPaused.html | ParticleSystem.isPaused}
     */
    readonly isPaused: boolean;
    /**
     * The current number of particles (Read Only). The number doesn't include particles of child Particle Systems
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-particleCount.html | ParticleSystem.particleCount}
     */
    readonly particleCount: number;
    /**
     * Playback position in seconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-time.html | ParticleSystem.time}
     */
    time: number;
    /**
     * Total playback time in seconds, including the Start Delay setting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-totalTime.html | ParticleSystem.totalTime}
     */
    readonly totalTime: number;
    /**
     * Override the random seed used for the Particle System emission.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-randomSeed.html | ParticleSystem.randomSeed}
     */
    randomSeed: number;
    /**
     * Controls whether the Particle System uses an automatically-generated random number to seed the random number generator.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-useAutoRandomSeed.html | ParticleSystem.useAutoRandomSeed}
     */
    useAutoRandomSeed: boolean;
    /**
     * Determines whether this system supports Procedural Simulation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-proceduralSimulationSupported.html | ParticleSystem.proceduralSimulationSupported}
     */
    readonly proceduralSimulationSupported: boolean;
    /**
     * Determines whether the Particle System rotates its particles around only the Z axis, or whether the system specifies separate values for the X, Y and Z axes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-has3DParticleRotations.html | ParticleSystem.has3DParticleRotations}
     */
    readonly has3DParticleRotations: boolean;
    /**
     * Determines whether the Particle System uses a single value for the width and height (and depth, when using meshes), or if the system specifies different values for each axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-hasNonUniformParticleSizes.html | ParticleSystem.hasNonUniformParticleSizes}
     */
    readonly hasNonUniformParticleSizes: boolean;
    /**
     * Access the main Particle System settings.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-main.html | ParticleSystem.main}
     */
    readonly main: MainModule;
    /**
     * Script interface for the EmissionModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-emission.html | ParticleSystem.emission}
     */
    readonly emission: EmissionModule;
    /**
     * Script interface for the ShapeModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-shape.html | ParticleSystem.shape}
     */
    readonly shape: ShapeModule;
    /**
     * Script interface for the VelocityOverLifetimeModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-velocityOverLifetime.html | ParticleSystem.velocityOverLifetime}
     */
    readonly velocityOverLifetime: VelocityOverLifetimeModule;
    /**
     * Script interface for the LimitVelocityOverLifetimeModule of a Particle System. .
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-limitVelocityOverLifetime.html | ParticleSystem.limitVelocityOverLifetime}
     */
    readonly limitVelocityOverLifetime: LimitVelocityOverLifetimeModule;
    /**
     * Script interface for the InheritVelocityModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-inheritVelocity.html | ParticleSystem.inheritVelocity}
     */
    readonly inheritVelocity: InheritVelocityModule;
    /**
     * Script interface for the Particle System Lifetime By Emitter Speed module.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-lifetimeByEmitterSpeed.html | ParticleSystem.lifetimeByEmitterSpeed}
     */
    readonly lifetimeByEmitterSpeed: LifetimeByEmitterSpeedModule;
    /**
     * Script interface for the ForceOverLifetimeModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-forceOverLifetime.html | ParticleSystem.forceOverLifetime}
     */
    readonly forceOverLifetime: ForceOverLifetimeModule;
    /**
     * Script interface for the ColorOverLifetimeModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-colorOverLifetime.html | ParticleSystem.colorOverLifetime}
     */
    readonly colorOverLifetime: ColorOverLifetimeModule;
    /**
     * Script interface for the ColorByLifetimeModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-colorBySpeed.html | ParticleSystem.colorBySpeed}
     */
    readonly colorBySpeed: ColorBySpeedModule;
    /**
     * Script interface for the SizeOverLifetimeModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-sizeOverLifetime.html | ParticleSystem.sizeOverLifetime}
     */
    readonly sizeOverLifetime: SizeOverLifetimeModule;
    /**
     * Script interface for the SizeBySpeedModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-sizeBySpeed.html | ParticleSystem.sizeBySpeed}
     */
    readonly sizeBySpeed: SizeBySpeedModule;
    /**
     * Script interface for the RotationOverLifetimeModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-rotationOverLifetime.html | ParticleSystem.rotationOverLifetime}
     */
    readonly rotationOverLifetime: RotationOverLifetimeModule;
    /**
     * Script interface for the RotationBySpeedModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-rotationBySpeed.html | ParticleSystem.rotationBySpeed}
     */
    readonly rotationBySpeed: RotationBySpeedModule;
    /**
     * Script interface for the ExternalForcesModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-externalForces.html | ParticleSystem.externalForces}
     */
    readonly externalForces: ExternalForcesModule;
    /**
     * Script interface for the NoiseModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-noise.html | ParticleSystem.noise}
     */
    readonly noise: NoiseModule;
    /**
     * Script interface for the CollisionModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-collision.html | ParticleSystem.collision}
     */
    readonly collision: CollisionModule;
    /**
     * Script interface for the TriggerModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-trigger.html | ParticleSystem.trigger}
     */
    readonly trigger: TriggerModule;
    /**
     * Script interface for the SubEmittersModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-subEmitters.html | ParticleSystem.subEmitters}
     */
    readonly subEmitters: SubEmittersModule;
    /**
     * Script interface for the TextureSheetAnimationModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-textureSheetAnimation.html | ParticleSystem.textureSheetAnimation}
     */
    readonly textureSheetAnimation: TextureSheetAnimationModule;
    /**
     * Script interface for the LightsModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-lights.html | ParticleSystem.lights}
     */
    readonly lights: LightsModule;
    /**
     * Script interface for the TrailsModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-trails.html | ParticleSystem.trails}
     */
    readonly trails: TrailModule;
    /**
     * Script interface for the CustomDataModule of a Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem-customData.html | ParticleSystem.customData}
     */
    readonly customData: CustomDataModule;



    /**
     * Ensures that the ParticleSystemJobs.ParticleSystemJobData._axisOfRotations|axisOfRotations particle attribute array is allocated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.AllocateAxisOfRotationAttribute.html | ParticleSystem.AllocateAxisOfRotationAttribute}
     */
    AllocateAxisOfRotationAttribute(): void;
    /**
     * Ensures that the ParticleSystemJobs.ParticleSystemJobData.customData1|customData1 and ParticleSystemJobs.ParticleSystemJobData.customData1|customData2 particle attribute arrays are allocated.
     * @param stream The custom data stream to allocate.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.AllocateCustomDataAttribute.html | ParticleSystem.AllocateCustomDataAttribute}
     */
    AllocateCustomDataAttribute(stream: ParticleSystemCustomData): void;
    /**
     * Ensures that the ParticleSystemJobs.ParticleSystemJobData._meshIndices|meshIndices particle attribute array is allocated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.AllocateMeshIndexAttribute.html | ParticleSystem.AllocateMeshIndexAttribute}
     */
    AllocateMeshIndexAttribute(): void;
    /**
     * Remove all particles in the Particle System.
     * @param withChildren Clear all child Particle Systems as well.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Clear.html | ParticleSystem.Clear}
     */
    Clear(withChildren: boolean): void;
    /**
     * Remove all particles in the Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Clear.html | ParticleSystem.Clear}
     */
    Clear(): void;
    /**
     * Emit count particles immediately.
     * @param count Number of particles to emit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Emit.html | ParticleSystem.Emit}
     */
    Emit(count: number): void;
    Emit(emitParams: EmitParams, count: number): void;
    GetCustomParticleData(customData: Readonly<Vector4[]>, streamIndex: ParticleSystemCustomData): number;
    /**
     * Returns all the data that relates to the current internal state of the Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.GetPlaybackState.html | ParticleSystem.GetPlaybackState}
     */
    GetPlaybackState(): PlaybackState;
    /**
     * Returns all the data relating to the current internal state of the Particle System Trails.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.GetTrails.html | ParticleSystem.GetTrails}
     */
    GetTrails(): Trails;
    GetTrails(trailData: Trails): number;
    /**
     * Does the Particle System contain any live particles, or will it produce more?
     * @param withChildren Check all child Particle Systems as well.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.IsAlive.html | ParticleSystem.IsAlive}
     */
    IsAlive(withChildren: boolean): boolean;
    /**
     * Does the Particle System contain any live particles, or will it produce more?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.IsAlive.html | ParticleSystem.IsAlive}
     */
    IsAlive(): boolean;
    /**
     * Pauses the system so no new particles are emitted and the existing particles are not updated.
     * @param withChildren Pause all child Particle Systems as well.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Pause.html | ParticleSystem.Pause}
     */
    Pause(withChildren: boolean): void;
    /**
     * Pauses the system so no new particles are emitted and the existing particles are not updated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Pause.html | ParticleSystem.Pause}
     */
    Pause(): void;
    /**
     * Starts the Particle System.
     * @param withChildren Play all child Particle Systems as well.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Play.html | ParticleSystem.Play}
     */
    Play(withChildren: boolean): void;
    /**
     * Starts the Particle System.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Play.html | ParticleSystem.Play}
     */
    Play(): void;
    SetCustomParticleData(customData: Readonly<Vector4[]>, streamIndex: ParticleSystemCustomData): void;
    SetPlaybackState(playbackState: PlaybackState): void;
    SetTrails(trailData: Trails): void;
    /**
     * Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
     * @param t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
     * @param withChildren Fast-forward all child Particle Systems as well.
     * @param restart Restart and start from the beginning.
     * @param fixedTimeStep Only update the system at fixed intervals, based on the value in &quot;Fixed Time&quot; in the Time options.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Simulate.html | ParticleSystem.Simulate}
     */
    Simulate(t: number, withChildren: boolean, restart: boolean, fixedTimeStep: boolean): void;
    /**
     * Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
     * @param t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
     * @param withChildren Fast-forward all child Particle Systems as well.
     * @param restart Restart and start from the beginning.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Simulate.html | ParticleSystem.Simulate}
     */
    Simulate(t: number, withChildren: boolean, restart: boolean): void;
    /**
     * Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
     * @param t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
     * @param withChildren Fast-forward all child Particle Systems as well.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Simulate.html | ParticleSystem.Simulate}
     */
    Simulate(t: number, withChildren: boolean): void;
    /**
     * Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
     * @param t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Simulate.html | ParticleSystem.Simulate}
     */
    Simulate(t: number): void;
    /**
     * Stops playing the Particle System using the supplied stop behaviour.
     * @param withChildren Stop all child Particle Systems as well.
     * @param stopBehavior Stop emitting or stop emitting and clear the system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Stop.html | ParticleSystem.Stop}
     */
    Stop(withChildren: boolean, stopBehavior: ParticleSystemStopBehavior): void;
    /**
     * Stops playing the Particle System using the supplied stop behaviour.
     * @param withChildren Stop all child Particle Systems as well.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Stop.html | ParticleSystem.Stop}
     */
    Stop(withChildren: boolean): void;
    /**
     * Stops playing the Particle System using the supplied stop behaviour.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.Stop.html | ParticleSystem.Stop}
     */
    Stop(): void;
    /**
     * Triggers the specified sub emitter on all particles of the Particle System.
     * @param subEmitterIndex Index of the sub emitter to trigger.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystem.TriggerSubEmitter.html | ParticleSystem.TriggerSubEmitter}
     */
    TriggerSubEmitter(subEmitterIndex: number): void;
    TriggerSubEmitter(subEmitterIndex: number, particle: Particle): void;
    TriggerSubEmitter(subEmitterIndex: number, particles: Readonly<Particle[]>): void;


}
    
interface MainModule {
    emitterVelocity: Vector3;
    duration: number;
    loop: boolean;
    prewarm: boolean;
    startDelay: MinMaxCurve;
    startDelayMultiplier: number;
    startLifetime: MinMaxCurve;
    startLifetimeMultiplier: number;
    startSpeed: MinMaxCurve;
    startSpeedMultiplier: number;
    startSize3D: boolean;
    startSize: MinMaxCurve;
    startSizeMultiplier: number;
    startSizeX: MinMaxCurve;
    startSizeXMultiplier: number;
    startSizeY: MinMaxCurve;
    startSizeYMultiplier: number;
    startSizeZ: MinMaxCurve;
    startSizeZMultiplier: number;
    startRotation3D: boolean;
    startRotation: MinMaxCurve;
    startRotationMultiplier: number;
    startRotationX: MinMaxCurve;
    startRotationXMultiplier: number;
    startRotationY: MinMaxCurve;
    startRotationYMultiplier: number;
    startRotationZ: MinMaxCurve;
    startRotationZMultiplier: number;
    flipRotation: number;
    startColor: MinMaxGradient;
    gravitySource: ParticleSystemGravitySource;
    gravityModifier: MinMaxCurve;
    gravityModifierMultiplier: number;
    simulationSpace: ParticleSystemSimulationSpace;
    customSimulationSpace: Transform;
    simulationSpeed: number;
    useUnscaledTime: boolean;
    scalingMode: ParticleSystemScalingMode;
    playOnAwake: boolean;
    maxParticles: number;
    emitterVelocityMode: ParticleSystemEmitterVelocityMode;
    stopAction: ParticleSystemStopAction;
    ringBufferMode: ParticleSystemRingBufferMode;
    ringBufferLoopRange: Vector2;
    cullingMode: ParticleSystemCullingMode;





}
    
interface MinMaxCurve {
    mode: ParticleSystemCurveMode;
    curveMultiplier: number;
    curveMax: AnimationCurve;
    curveMin: AnimationCurve;
    constantMax: number;
    constantMin: number;
    constant: number;
    curve: AnimationCurve;



    Evaluate(time: number): number;
    Evaluate(time: number, lerpFactor: number): number;


}
    
interface MinMaxCurveConstructor {


    new(constant: number): MinMaxCurve;
    new(multiplier: number, curve: AnimationCurve): MinMaxCurve;
    new(multiplier: number, min: AnimationCurve, max: AnimationCurve): MinMaxCurve;
    new(min: number, max: number): MinMaxCurve;



}
declare const MinMaxCurve: MinMaxCurveConstructor;
    
interface MinMaxGradient {
    mode: ParticleSystemGradientMode;
    gradientMax: Gradient;
    gradientMin: Gradient;
    colorMax: Color;
    colorMin: Color;
    color: Color;
    gradient: Gradient;



    Evaluate(time: number): Color;
    Evaluate(time: number, lerpFactor: number): Color;


}
    
interface MinMaxGradientConstructor {


    new(color: Color): MinMaxGradient;
    new(gradient: Gradient): MinMaxGradient;
    new(min: Color, max: Color): MinMaxGradient;
    new(min: Gradient, max: Gradient): MinMaxGradient;



}
declare const MinMaxGradient: MinMaxGradientConstructor;
    
interface EmissionModule {
    enabled: boolean;
    rateOverTime: MinMaxCurve;
    rateOverTimeMultiplier: number;
    rateOverDistance: MinMaxCurve;
    rateOverDistanceMultiplier: number;
    burstCount: number;



    GetBurst(index: number): Burst;
    GetBursts(bursts: Readonly<Burst[]>): number;
    SetBurst(index: number, burst: Burst): void;
    SetBursts(bursts: Readonly<Burst[]>): void;
    SetBursts(bursts: Readonly<Burst[]>, size: number): void;


}
    
interface Burst {
    time: number;
    count: MinMaxCurve;
    minCount: number;
    maxCount: number;
    cycleCount: number;
    repeatInterval: number;
    probability: number;





}
    
interface BurstConstructor {


    new(_time: number, _count: number): Burst;
    new(_time: number, _minCount: number, _maxCount: number): Burst;
    new(_time: number, _minCount: number, _maxCount: number, _cycleCount: number, _repeatInterval: number): Burst;
    new(_time: number, _count: MinMaxCurve): Burst;
    new(_time: number, _count: MinMaxCurve, _cycleCount: number, _repeatInterval: number): Burst;



}
declare const Burst: BurstConstructor;
    
interface ShapeModule {
    enabled: boolean;
    shapeType: ParticleSystemShapeType;
    randomDirectionAmount: number;
    sphericalDirectionAmount: number;
    randomPositionAmount: number;
    alignToDirection: boolean;
    radius: number;
    radiusMode: ParticleSystemShapeMultiModeValue;
    radiusSpread: number;
    radiusSpeed: MinMaxCurve;
    radiusSpeedMultiplier: number;
    radiusThickness: number;
    angle: number;
    length: number;
    boxThickness: Vector3;
    meshShapeType: ParticleSystemMeshShapeType;
    mesh: Mesh;
    meshRenderer: MeshRenderer;
    skinnedMeshRenderer: SkinnedMeshRenderer;
    sprite: Sprite;
    spriteRenderer: SpriteRenderer;
    useMeshMaterialIndex: boolean;
    meshMaterialIndex: number;
    useMeshColors: boolean;
    normalOffset: number;
    meshSpawnMode: ParticleSystemShapeMultiModeValue;
    meshSpawnSpread: number;
    meshSpawnSpeed: MinMaxCurve;
    meshSpawnSpeedMultiplier: number;
    arc: number;
    arcMode: ParticleSystemShapeMultiModeValue;
    arcSpread: number;
    arcSpeed: MinMaxCurve;
    arcSpeedMultiplier: number;
    donutRadius: number;
    position: Vector3;
    rotation: Vector3;
    scale: Vector3;
    texture: Texture2D;
    textureClipChannel: ParticleSystemShapeTextureChannel;
    textureClipThreshold: number;
    textureColorAffectsParticles: boolean;
    textureAlphaAffectsParticles: boolean;
    textureBilinearFiltering: boolean;
    textureUVChannel: number;





}
    
interface SpriteRenderer extends Renderer {
    /**
     * The Sprite to render.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SpriteRenderer-sprite.html | SpriteRenderer.sprite}
     */
    sprite: Sprite;
    /**
     * The current draw mode of the Sprite Renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SpriteRenderer-drawMode.html | SpriteRenderer.drawMode}
     */
    drawMode: SpriteDrawMode;
    /**
     * Property to set or get the size to render when the SpriteRenderer.drawMode is set to SpriteDrawMode.Sliced or SpriteDrawMode.Tiled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SpriteRenderer-size.html | SpriteRenderer.size}
     */
    size: Vector2;
    /**
     * The current threshold for Sprite Renderer tiling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SpriteRenderer-adaptiveModeThreshold.html | SpriteRenderer.adaptiveModeThreshold}
     */
    adaptiveModeThreshold: number;
    /**
     * The current tile mode of the Sprite Renderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SpriteRenderer-tileMode.html | SpriteRenderer.tileMode}
     */
    tileMode: SpriteTileMode;
    /**
     * Rendering color for the Sprite graphic.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SpriteRenderer-color.html | SpriteRenderer.color}
     */
    color: Color;
    /**
     * Specifies how the sprite interacts with the masks.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SpriteRenderer-maskInteraction.html | SpriteRenderer.maskInteraction}
     */
    maskInteraction: SpriteMaskInteraction;
    /**
     * Flips the sprite on the X axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SpriteRenderer-flipX.html | SpriteRenderer.flipX}
     */
    flipX: boolean;
    /**
     * Flips the sprite on the Y axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SpriteRenderer-flipY.html | SpriteRenderer.flipY}
     */
    flipY: boolean;
    /**
     * Determines the position of the Sprite used for sorting the SpriteRenderer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SpriteRenderer-spriteSortPoint.html | SpriteRenderer.spriteSortPoint}
     */
    spriteSortPoint: SpriteSortPoint;



    RegisterSpriteChangeCallback(callback: UnityAction<SpriteRenderer>): void;
    UnregisterSpriteChangeCallback(callback: UnityAction<SpriteRenderer>): void;


}
    
interface UnityAction<T0> extends MulticastDelegate {



    BeginInvoke(arg0: T0, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): void;
    Invoke(arg0: T0): void;


}
    
interface UnityActionConstructor {


    new(object: unknown, method: IntPtr): UnityAction<T0>;



}
declare const UnityAction: UnityActionConstructor;
    
interface SpriteRendererConstructor {


    new(): SpriteRenderer;



}
declare const SpriteRenderer: SpriteRendererConstructor;
    
interface VelocityOverLifetimeModule {
    enabled: boolean;
    x: MinMaxCurve;
    y: MinMaxCurve;
    z: MinMaxCurve;
    xMultiplier: number;
    yMultiplier: number;
    zMultiplier: number;
    orbitalX: MinMaxCurve;
    orbitalY: MinMaxCurve;
    orbitalZ: MinMaxCurve;
    orbitalXMultiplier: number;
    orbitalYMultiplier: number;
    orbitalZMultiplier: number;
    orbitalOffsetX: MinMaxCurve;
    orbitalOffsetY: MinMaxCurve;
    orbitalOffsetZ: MinMaxCurve;
    orbitalOffsetXMultiplier: number;
    orbitalOffsetYMultiplier: number;
    orbitalOffsetZMultiplier: number;
    radial: MinMaxCurve;
    radialMultiplier: number;
    speedModifier: MinMaxCurve;
    speedModifierMultiplier: number;
    space: ParticleSystemSimulationSpace;





}
    
interface LimitVelocityOverLifetimeModule {
    enabled: boolean;
    limitX: MinMaxCurve;
    limitXMultiplier: number;
    limitY: MinMaxCurve;
    limitYMultiplier: number;
    limitZ: MinMaxCurve;
    limitZMultiplier: number;
    limit: MinMaxCurve;
    limitMultiplier: number;
    dampen: number;
    separateAxes: boolean;
    space: ParticleSystemSimulationSpace;
    drag: MinMaxCurve;
    dragMultiplier: number;
    multiplyDragByParticleSize: boolean;
    multiplyDragByParticleVelocity: boolean;





}
    
interface InheritVelocityModule {
    enabled: boolean;
    mode: ParticleSystemInheritVelocityMode;
    curve: MinMaxCurve;
    curveMultiplier: number;





}
    
interface LifetimeByEmitterSpeedModule {
    enabled: boolean;
    curve: MinMaxCurve;
    curveMultiplier: number;
    range: Vector2;





}
    
interface ForceOverLifetimeModule {
    enabled: boolean;
    x: MinMaxCurve;
    y: MinMaxCurve;
    z: MinMaxCurve;
    xMultiplier: number;
    yMultiplier: number;
    zMultiplier: number;
    space: ParticleSystemSimulationSpace;
    randomized: boolean;





}
    
interface ColorOverLifetimeModule {
    enabled: boolean;
    color: MinMaxGradient;





}
    
interface ColorBySpeedModule {
    enabled: boolean;
    color: MinMaxGradient;
    range: Vector2;





}
    
interface SizeOverLifetimeModule {
    enabled: boolean;
    size: MinMaxCurve;
    sizeMultiplier: number;
    x: MinMaxCurve;
    xMultiplier: number;
    y: MinMaxCurve;
    yMultiplier: number;
    z: MinMaxCurve;
    zMultiplier: number;
    separateAxes: boolean;





}
    
interface SizeBySpeedModule {
    enabled: boolean;
    size: MinMaxCurve;
    sizeMultiplier: number;
    x: MinMaxCurve;
    xMultiplier: number;
    y: MinMaxCurve;
    yMultiplier: number;
    z: MinMaxCurve;
    zMultiplier: number;
    separateAxes: boolean;
    range: Vector2;





}
    
interface RotationOverLifetimeModule {
    enabled: boolean;
    x: MinMaxCurve;
    xMultiplier: number;
    y: MinMaxCurve;
    yMultiplier: number;
    z: MinMaxCurve;
    zMultiplier: number;
    separateAxes: boolean;





}
    
interface RotationBySpeedModule {
    enabled: boolean;
    x: MinMaxCurve;
    xMultiplier: number;
    y: MinMaxCurve;
    yMultiplier: number;
    z: MinMaxCurve;
    zMultiplier: number;
    separateAxes: boolean;
    range: Vector2;





}
    
interface ExternalForcesModule {
    enabled: boolean;
    multiplier: number;
    multiplierCurve: MinMaxCurve;
    influenceFilter: ParticleSystemGameObjectFilter;
    influenceMask: LayerMask;
    readonly influenceCount: number;



    AddInfluence(field: ParticleSystemForceField): void;
    GetInfluence(index: number): ParticleSystemForceField;
    IsAffectedBy(field: ParticleSystemForceField): boolean;
    RemoveAllInfluences(): void;
    RemoveInfluence(index: number): void;
    RemoveInfluence(field: ParticleSystemForceField): void;
    SetInfluence(index: number, field: ParticleSystemForceField): void;


}
    
interface ParticleSystemForceField extends Behaviour {
    /**
     * Selects the type of shape used for influencing particles.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-shape.html | ParticleSystemForceField.shape}
     */
    shape: ParticleSystemForceFieldShape;
    /**
     * Setting a value greater than 0 creates a hollow Force Field shape. This will cause particles to not be affected by the Force Field when closer to the center of the volume than the startRange property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-startRange.html | ParticleSystemForceField.startRange}
     */
    startRange: number;
    /**
     * Determines the size of the shape used for influencing particles.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-endRange.html | ParticleSystemForceField.endRange}
     */
    endRange: number;
    /**
     * Describes the length of the Cylinder when using the Cylinder Force Field shape to influence particles.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-length.html | ParticleSystemForceField.length}
     */
    length: number;
    /**
     * When using the gravity force, set this value between 0 and 1 to control the focal point of the gravity effect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-gravityFocus.html | ParticleSystemForceField.gravityFocus}
     */
    gravityFocus: number;
    /**
     * Apply randomness to the Force Field axis that particles will travel around.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-rotationRandomness.html | ParticleSystemForceField.rotationRandomness}
     */
    rotationRandomness: Vector2;
    /**
     * When using Drag, the drag strength will be multiplied by the size of the particles if this toggle is enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-multiplyDragByParticleSize.html | ParticleSystemForceField.multiplyDragByParticleSize}
     */
    multiplyDragByParticleSize: boolean;
    /**
     * When using Drag, the drag strength will be multiplied by the speed of the particles if this toggle is enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-multiplyDragByParticleVelocity.html | ParticleSystemForceField.multiplyDragByParticleVelocity}
     */
    multiplyDragByParticleVelocity: boolean;
    /**
     * Apply forces to particles within the volume of the Force Field, by using a 3D texture containing vector field data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-vectorField.html | ParticleSystemForceField.vectorField}
     */
    vectorField: Texture3D;
    /**
     * Apply a linear force along the local X axis to particles within the volume of the Force Field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-directionX.html | ParticleSystemForceField.directionX}
     */
    directionX: MinMaxCurve;
    /**
     * Apply a linear force along the local Y axis to particles within the volume of the Force Field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-directionY.html | ParticleSystemForceField.directionY}
     */
    directionY: MinMaxCurve;
    /**
     * Apply a linear force along the local Z axis to particles within the volume of the Force Field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-directionZ.html | ParticleSystemForceField.directionZ}
     */
    directionZ: MinMaxCurve;
    /**
     * Apply gravity to particles within the volume of the Force Field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-gravity.html | ParticleSystemForceField.gravity}
     */
    gravity: MinMaxCurve;
    /**
     * The speed at which particles are propelled around a vortex.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-rotationSpeed.html | ParticleSystemForceField.rotationSpeed}
     */
    rotationSpeed: MinMaxCurve;
    /**
     * Controls how strongly particles are dragged into the vortex motion.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-rotationAttraction.html | ParticleSystemForceField.rotationAttraction}
     */
    rotationAttraction: MinMaxCurve;
    /**
     * Apply drag to particles within the volume of the Force Field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-drag.html | ParticleSystemForceField.drag}
     */
    drag: MinMaxCurve;
    /**
     * The speed at which particles are propelled through the vector field.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-vectorFieldSpeed.html | ParticleSystemForceField.vectorFieldSpeed}
     */
    vectorFieldSpeed: MinMaxCurve;
    /**
     * Controls how strongly particles are dragged into the vector field motion.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemForceField-vectorFieldAttraction.html | ParticleSystemForceField.vectorFieldAttraction}
     */
    vectorFieldAttraction: MinMaxCurve;





}
    
interface Texture3D extends Texture {
    /**
     * The depth of the texture (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D-depth.html | Texture3D.depth}
     */
    readonly depth: number;
    /**
     * The format of the pixel data in the texture (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D-format.html | Texture3D.format}
     */
    readonly format: TextureFormat;
    readonly isReadable: boolean;



    /**
     * Copies changes you've made in a CPU texture to the GPU.
     * @param updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
     * @param makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.Apply.html | Texture3D.Apply}
     */
    Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
    Apply(updateMipmaps: boolean): void;
    Apply(): void;
    /**
     * Copies pixel data from another texture on the CPU.
     * @param src The source texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.CopyPixels.html | Texture3D.CopyPixels}
     */
    CopyPixels(src: Texture): void;
    /**
     * Copies pixel data from another texture on the CPU.
     * @param src The source texture.
     * @param srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
     * @param srcMip The mipmap level to copy from. The range is 0 through the source texture's Texture.mipmapCount. The default value is 0.
     * @param dstElement The depth slice to copy to in this 3D texture.
     * @param dstMip The mipmap level to write to. The range is 0 through this texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.CopyPixels.html | Texture3D.CopyPixels}
     */
    CopyPixels(src: Texture, srcElement: number, srcMip: number, dstElement: number, dstMip: number): void;
    /**
     * Copies pixel data from another texture on the CPU.
     * @param src The source texture.
     * @param srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
     * @param srcMip The mipmap level to copy from. The range is 0 through the source texture's Texture.mipmapCount. The default value is 0.
     * @param srcX The starting x coordinate of src to copy from. 0 is the left of the texture.
     * @param srcY The starting y coordinate of src to copy from. 0 is the bottom of the texture.
     * @param srcWidth The width of src to copy.
     * @param srcHeight The height of src to copy.
     * @param dstElement The depth slice to copy to in this 3D texture.
     * @param dstMip The mipmap level to write to. The range is 0 through this texture's Texture.mipmapCount. The default value is 0.
     * @param dstX The x coordinate of this texture to copy to.
     * @param dstY The y coordinate to this texture to copy to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.CopyPixels.html | Texture3D.CopyPixels}
     */
    CopyPixels(src: Texture, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dstElement: number, dstMip: number, dstX: number, dstY: number): void;
    /**
     * Gets the pixel color at coordinates (x, y, z).
     * @param x The x coordinate of the pixel to get. The range is 0 through the (texture width - 1).
     * @param y The y coordinate of the pixel to get. The range is 0 through the (texture height - 1).
     * @param z The z coordinate of the pixel to get. The range is 0 through the (texture depth - 1).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.GetPixel.html | Texture3D.GetPixel}
     */
    GetPixel(x: number, y: number, z: number): Color;
    /**
     * Gets the pixel color at coordinates (x, y, z).
     * @param x The x coordinate of the pixel to get. The range is 0 through the (texture width - 1).
     * @param y The y coordinate of the pixel to get. The range is 0 through the (texture height - 1).
     * @param z The z coordinate of the pixel to get. The range is 0 through the (texture depth - 1).
     * @param mipLevel The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.GetPixel.html | Texture3D.GetPixel}
     */
    GetPixel(x: number, y: number, z: number, mipLevel: number): Color;
    /**
     * Gets the filtered pixel color at the normalized coordinates (u, v, w).
     * @param u The u coordinate of the pixel to get.
     * @param v The v coordinate of the pixel to get.
     * @param w The w coordinate of the pixel to get.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.GetPixelBilinear.html | Texture3D.GetPixelBilinear}
     */
    GetPixelBilinear(u: number, v: number, w: number): Color;
    /**
     * Gets the filtered pixel color at the normalized coordinates (u, v, w).
     * @param u The u coordinate of the pixel to get.
     * @param v The v coordinate of the pixel to get.
     * @param w The w coordinate of the pixel to get.
     * @param mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.GetPixelBilinear.html | Texture3D.GetPixelBilinear}
     */
    GetPixelBilinear(u: number, v: number, w: number, mipLevel: number): Color;
    /**
     * Gets the raw data from a texture.
     * @param mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.GetPixelData.html | Texture3D.GetPixelData}
     */
    GetPixelData<T>(mipLevel: number): Readonly<T[]>;
    /**
     * Gets the pixel color data for a mipmap level as Color structs.
     * @param miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.GetPixels.html | Texture3D.GetPixels}
     */
    GetPixels(miplevel: number): Readonly<Color[]>;
    /**
     * Gets the pixel color data for a mipmap level as Color structs.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.GetPixels.html | Texture3D.GetPixels}
     */
    GetPixels(): Readonly<Color[]>;
    /**
     * Gets the pixel color data for a mipmap level as Color32 structs.
     * @param miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.GetPixels32.html | Texture3D.GetPixels32}
     */
    GetPixels32(miplevel: number): Readonly<Color32[]>;
    /**
     * Gets the pixel color data for a mipmap level as Color32 structs.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.GetPixels32.html | Texture3D.GetPixels32}
     */
    GetPixels32(): Readonly<Color32[]>;
    /**
     * Sets the pixel color at coordinates (x, y, z).
     * @param x The x coordinate of the pixel to set. The range is 0 through the (texture width - 1).
     * @param y The y coordinate of the pixel to set. The range is 0 through the (texture height - 1).
     * @param z The z coordinate of the pixel to set. The range is 0 through the (texture depth - 1).
     * @param color The color to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.SetPixel.html | Texture3D.SetPixel}
     */
    SetPixel(x: number, y: number, z: number, color: Color): void;
    /**
     * Sets the pixel color at coordinates (x, y, z).
     * @param x The x coordinate of the pixel to set. The range is 0 through the (texture width - 1).
     * @param y The y coordinate of the pixel to set. The range is 0 through the (texture height - 1).
     * @param z The z coordinate of the pixel to set. The range is 0 through the (texture depth - 1).
     * @param color The color to set.
     * @param mipLevel The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.SetPixel.html | Texture3D.SetPixel}
     */
    SetPixel(x: number, y: number, z: number, color: Color, mipLevel: number): void;
    SetPixelData<T>(data: Readonly<T[]>, mipLevel: number, sourceDataStartIndex: number): void;
    SetPixelData<T>(data: Readonly<T[]>, mipLevel: number, sourceDataStartIndex: number): void;
    /**
     * Sets the pixel colors of an entire mipmap level.
     * @param colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
     * @param miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.SetPixels.html | Texture3D.SetPixels}
     */
    SetPixels(colors: Readonly<Color[]>, miplevel: number): void;
    /**
     * Sets the pixel colors of an entire mipmap level.
     * @param colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.SetPixels.html | Texture3D.SetPixels}
     */
    SetPixels(colors: Readonly<Color[]>): void;
    /**
     * Sets the pixel colors of an entire mipmap level.
     * @param colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
     * @param miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.SetPixels32.html | Texture3D.SetPixels32}
     */
    SetPixels32(colors: Readonly<Color32[]>, miplevel: number): void;
    /**
     * Sets the pixel colors of an entire mipmap level.
     * @param colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.SetPixels32.html | Texture3D.SetPixels32}
     */
    SetPixels32(colors: Readonly<Color32[]>): void;
    /**
     * Updates Unity texture to use different native texture object.
     * @param nativeTex Native 3D texture object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Texture3D.UpdateExternalTexture.html | Texture3D.UpdateExternalTexture}
     */
    UpdateExternalTexture(nativeTex: IntPtr): void;


}
    
interface Texture3DConstructor {


    new(width: number, height: number, depth: number, format: DefaultFormat, flags: TextureCreationFlags): Texture3D;
    new(width: number, height: number, depth: number, format: DefaultFormat, flags: TextureCreationFlags, mipCount: number): Texture3D;
    new(width: number, height: number, depth: number, format: GraphicsFormat, flags: TextureCreationFlags): Texture3D;
    new(width: number, height: number, depth: number, format: GraphicsFormat, flags: TextureCreationFlags, mipCount: number): Texture3D;
    new(width: number, height: number, depth: number, textureFormat: TextureFormat, mipCount: number): Texture3D;
    new(width: number, height: number, depth: number, textureFormat: TextureFormat, mipCount: number, nativeTex: IntPtr): Texture3D;
    new(width: number, height: number, depth: number, textureFormat: TextureFormat, mipCount: number, nativeTex: IntPtr, createUninitialized: boolean): Texture3D;
    new(width: number, height: number, depth: number, textureFormat: TextureFormat, mipChain: boolean): Texture3D;
    new(width: number, height: number, depth: number, textureFormat: TextureFormat, mipChain: boolean, createUninitialized: boolean): Texture3D;
    new(width: number, height: number, depth: number, textureFormat: TextureFormat, mipChain: boolean, nativeTex: IntPtr): Texture3D;


    CreateExternalTexture(width: number, height: number, depth: number, format: TextureFormat, mipChain: boolean, nativeTex: IntPtr): Texture3D;

}
declare const Texture3D: Texture3DConstructor;
    
interface ParticleSystemForceFieldConstructor {


    new(): ParticleSystemForceField;


    FindAll(): Readonly<ParticleSystemForceField[]>;

}
declare const ParticleSystemForceField: ParticleSystemForceFieldConstructor;
    
interface NoiseModule {
    enabled: boolean;
    separateAxes: boolean;
    strength: MinMaxCurve;
    strengthMultiplier: number;
    strengthX: MinMaxCurve;
    strengthXMultiplier: number;
    strengthY: MinMaxCurve;
    strengthYMultiplier: number;
    strengthZ: MinMaxCurve;
    strengthZMultiplier: number;
    frequency: number;
    damping: boolean;
    octaveCount: number;
    octaveMultiplier: number;
    octaveScale: number;
    quality: ParticleSystemNoiseQuality;
    scrollSpeed: MinMaxCurve;
    scrollSpeedMultiplier: number;
    remapEnabled: boolean;
    remap: MinMaxCurve;
    remapMultiplier: number;
    remapX: MinMaxCurve;
    remapXMultiplier: number;
    remapY: MinMaxCurve;
    remapYMultiplier: number;
    remapZ: MinMaxCurve;
    remapZMultiplier: number;
    positionAmount: MinMaxCurve;
    rotationAmount: MinMaxCurve;
    sizeAmount: MinMaxCurve;





}
    
interface CollisionModule {
    enabled: boolean;
    type: ParticleSystemCollisionType;
    mode: ParticleSystemCollisionMode;
    dampen: MinMaxCurve;
    dampenMultiplier: number;
    bounce: MinMaxCurve;
    bounceMultiplier: number;
    lifetimeLoss: MinMaxCurve;
    lifetimeLossMultiplier: number;
    minKillSpeed: number;
    maxKillSpeed: number;
    collidesWith: LayerMask;
    enableDynamicColliders: boolean;
    maxCollisionShapes: number;
    quality: ParticleSystemCollisionQuality;
    voxelSize: number;
    radiusScale: number;
    sendCollisionMessages: boolean;
    colliderForce: number;
    multiplyColliderForceByCollisionAngle: boolean;
    multiplyColliderForceByParticleSpeed: boolean;
    multiplyColliderForceByParticleSize: boolean;
    readonly planeCount: number;



    AddPlane(transform: Transform): void;
    GetPlane(index: number): Transform;
    RemovePlane(index: number): void;
    RemovePlane(transform: Transform): void;
    SetPlane(index: number, transform: Transform): void;


}
    
interface TriggerModule {
    enabled: boolean;
    inside: ParticleSystemOverlapAction;
    outside: ParticleSystemOverlapAction;
    enter: ParticleSystemOverlapAction;
    exit: ParticleSystemOverlapAction;
    colliderQueryMode: ParticleSystemColliderQueryMode;
    radiusScale: number;
    readonly colliderCount: number;



    AddCollider(collider: Component): void;
    GetCollider(index: number): Component;
    RemoveCollider(index: number): void;
    RemoveCollider(collider: Component): void;
    SetCollider(index: number, collider: Component): void;


}
    
interface SubEmittersModule {
    enabled: boolean;
    readonly subEmittersCount: number;



    AddSubEmitter(subEmitter: ParticleSystem, type: ParticleSystemSubEmitterType, properties: ParticleSystemSubEmitterProperties, emitProbability: number): void;
    AddSubEmitter(subEmitter: ParticleSystem, type: ParticleSystemSubEmitterType, properties: ParticleSystemSubEmitterProperties): void;
    GetSubEmitterEmitProbability(index: number): number;
    GetSubEmitterProperties(index: number): ParticleSystemSubEmitterProperties;
    GetSubEmitterSystem(index: number): ParticleSystem;
    GetSubEmitterType(index: number): ParticleSystemSubEmitterType;
    RemoveSubEmitter(index: number): void;
    RemoveSubEmitter(subEmitter: ParticleSystem): void;
    SetSubEmitterEmitProbability(index: number, emitProbability: number): void;
    SetSubEmitterProperties(index: number, properties: ParticleSystemSubEmitterProperties): void;
    SetSubEmitterSystem(index: number, subEmitter: ParticleSystem): void;
    SetSubEmitterType(index: number, type: ParticleSystemSubEmitterType): void;


}
    
interface TextureSheetAnimationModule {
    enabled: boolean;
    mode: ParticleSystemAnimationMode;
    timeMode: ParticleSystemAnimationTimeMode;
    fps: number;
    numTilesX: number;
    numTilesY: number;
    animation: ParticleSystemAnimationType;
    rowMode: ParticleSystemAnimationRowMode;
    frameOverTime: MinMaxCurve;
    frameOverTimeMultiplier: number;
    startFrame: MinMaxCurve;
    startFrameMultiplier: number;
    cycleCount: number;
    rowIndex: number;
    uvChannelMask: UVChannelFlags;
    readonly spriteCount: number;
    speedRange: Vector2;



    AddSprite(sprite: Sprite): void;
    GetSprite(index: number): Sprite;
    RemoveSprite(index: number): void;
    SetSprite(index: number, sprite: Sprite): void;


}
    
interface LightsModule {
    enabled: boolean;
    ratio: number;
    useRandomDistribution: boolean;
    light: Light;
    useParticleColor: boolean;
    sizeAffectsRange: boolean;
    alphaAffectsIntensity: boolean;
    range: MinMaxCurve;
    rangeMultiplier: number;
    intensity: MinMaxCurve;
    intensityMultiplier: number;
    maxLights: number;





}
    
interface TrailModule {
    enabled: boolean;
    mode: ParticleSystemTrailMode;
    ratio: number;
    lifetime: MinMaxCurve;
    lifetimeMultiplier: number;
    minVertexDistance: number;
    textureMode: ParticleSystemTrailTextureMode;
    textureScale: Vector2;
    worldSpace: boolean;
    dieWithParticles: boolean;
    sizeAffectsWidth: boolean;
    sizeAffectsLifetime: boolean;
    inheritParticleColor: boolean;
    colorOverLifetime: MinMaxGradient;
    widthOverTrail: MinMaxCurve;
    widthOverTrailMultiplier: number;
    colorOverTrail: MinMaxGradient;
    generateLightingData: boolean;
    ribbonCount: number;
    shadowBias: number;
    splitSubEmitterRibbons: boolean;
    attachRibbonsToTransform: boolean;





}
    
interface CustomDataModule {
    enabled: boolean;



    GetColor(stream: ParticleSystemCustomData): MinMaxGradient;
    GetMode(stream: ParticleSystemCustomData): ParticleSystemCustomDataMode;
    GetVector(stream: ParticleSystemCustomData, component: number): MinMaxCurve;
    GetVectorComponentCount(stream: ParticleSystemCustomData): number;
    SetColor(stream: ParticleSystemCustomData, gradient: MinMaxGradient): void;
    SetMode(stream: ParticleSystemCustomData, mode: ParticleSystemCustomDataMode): void;
    SetVector(stream: ParticleSystemCustomData, component: number, curve: MinMaxCurve): void;
    SetVectorComponentCount(stream: ParticleSystemCustomData, count: number): void;


}
    
interface EmitParams {
    particle: Particle;
    position: Vector3;
    applyShapeToPosition: boolean;
    velocity: Vector3;
    startLifetime: number;
    startSize: number;
    startSize3D: Vector3;
    axisOfRotation: Vector3;
    rotation: number;
    rotation3D: Vector3;
    angularVelocity: number;
    angularVelocity3D: Vector3;
    startColor: Color32;
    randomSeed: number;
    meshIndex: number;



    ResetAngularVelocity(): void;
    ResetAxisOfRotation(): void;
    ResetMeshIndex(): void;
    ResetPosition(): void;
    ResetRandomSeed(): void;
    ResetRotation(): void;
    ResetStartColor(): void;
    ResetStartLifetime(): void;
    ResetStartSize(): void;
    ResetVelocity(): void;


}
    
interface Particle {
    position: Vector3;
    velocity: Vector3;
    readonly animatedVelocity: Vector3;
    readonly totalVelocity: Vector3;
    remainingLifetime: number;
    startLifetime: number;
    startColor: Color32;
    randomSeed: number;
    axisOfRotation: Vector3;
    startSize: number;
    startSize3D: Vector3;
    rotation: number;
    rotation3D: Vector3;
    angularVelocity: number;
    angularVelocity3D: Vector3;



    GetCurrentColor(system: ParticleSystem): Color32;
    GetCurrentSize(system: ParticleSystem): number;
    GetCurrentSize3D(system: ParticleSystem): Vector3;
    GetMeshIndex(system: ParticleSystem): number;
    SetMeshIndex(index: number): void;


}
    
interface PlaybackState {





}
    
interface Trails {
    capacity: number;





}
    
interface ParticleSystemConstructor {


    new(): ParticleSystem;


    ResetPreMappedBufferMemory(): void;
    SetMaximumPreMappedBufferCounts(vertexBuffersCount: number, indexBuffersCount: number): void;

}
declare const ParticleSystem: ParticleSystemConstructor;
    
interface ParticleSystemRenderer extends Renderer {
    /**
     * Control the direction that particles face.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-alignment.html | ParticleSystemRenderer.alignment}
     */
    alignment: ParticleSystemRenderSpace;
    /**
     * Specifies how the system draws particles.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-renderMode.html | ParticleSystemRenderer.renderMode}
     */
    renderMode: ParticleSystemRenderMode;
    /**
     * Specifies how the system randomly assigns meshes to particles.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-meshDistribution.html | ParticleSystemRenderer.meshDistribution}
     */
    meshDistribution: ParticleSystemMeshDistribution;
    /**
     * Specifies how to sort particles within a system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-sortMode.html | ParticleSystemRenderer.sortMode}
     */
    sortMode: ParticleSystemSortMode;
    /**
     * How much are the particles stretched in their direction of motion, defined as the length of the particle compared to its width.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-lengthScale.html | ParticleSystemRenderer.lengthScale}
     */
    lengthScale: number;
    /**
     * Specifies how much particles stretch depending on their velocity.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-velocityScale.html | ParticleSystemRenderer.velocityScale}
     */
    velocityScale: number;
    /**
     * How much do the particles stretch depending on the Camera's speed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-cameraVelocityScale.html | ParticleSystemRenderer.cameraVelocityScale}
     */
    cameraVelocityScale: number;
    /**
     * Specifies how to calculate lighting for the billboard.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-normalDirection.html | ParticleSystemRenderer.normalDirection}
     */
    normalDirection: number;
    /**
     * Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the particle size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-shadowBias.html | ParticleSystemRenderer.shadowBias}
     */
    shadowBias: number;
    /**
     * Biases Particle System sorting amongst other transparencies.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-sortingFudge.html | ParticleSystemRenderer.sortingFudge}
     */
    sortingFudge: number;
    /**
     * Clamp the minimum particle size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-minParticleSize.html | ParticleSystemRenderer.minParticleSize}
     */
    minParticleSize: number;
    /**
     * Clamp the maximum particle size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-maxParticleSize.html | ParticleSystemRenderer.maxParticleSize}
     */
    maxParticleSize: number;
    /**
     * Modify the pivot point used for rotating particles.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-pivot.html | ParticleSystemRenderer.pivot}
     */
    pivot: Vector3;
    /**
     * Flip a percentage of the particles, along each axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-flip.html | ParticleSystemRenderer.flip}
     */
    flip: Vector3;
    /**
     * Specifies how the Particle System Renderer interacts with SpriteMask.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-maskInteraction.html | ParticleSystemRenderer.maskInteraction}
     */
    maskInteraction: SpriteMaskInteraction;
    /**
     * Set the Material that the TrailModule uses to attach trails to particles.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-trailMaterial.html | ParticleSystemRenderer.trailMaterial}
     */
    trailMaterial: Material;
    /**
     * Enables GPU Instancing on platforms that support it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-enableGPUInstancing.html | ParticleSystemRenderer.enableGPUInstancing}
     */
    enableGPUInstancing: boolean;
    /**
     * Allow billboard particles to roll around their z-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-allowRoll.html | ParticleSystemRenderer.allowRoll}
     */
    allowRoll: boolean;
    /**
     * Enables freeform stretching behavior.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-freeformStretching.html | ParticleSystemRenderer.freeformStretching}
     */
    freeformStretching: boolean;
    /**
     * Rotate the particles based on the direction they are stretched in. This is added on top of other particle rotation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-rotateWithStretchDirection.html | ParticleSystemRenderer.rotateWithStretchDirection}
     */
    rotateWithStretchDirection: boolean;
    /**
     * The Mesh that the particle uses instead of a billboarded Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-mesh.html | ParticleSystemRenderer.mesh}
     */
    mesh: Mesh;
    /**
     * The number of Meshes the system uses for particle rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-meshCount.html | ParticleSystemRenderer.meshCount}
     */
    readonly meshCount: number;
    /**
     * The number of currently active custom vertex streams.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-activeVertexStreamsCount.html | ParticleSystemRenderer.activeVertexStreamsCount}
     */
    readonly activeVertexStreamsCount: number;
    /**
     * The number of currently active custom trail vertex streams.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-activeTrailVertexStreamsCount.html | ParticleSystemRenderer.activeTrailVertexStreamsCount}
     */
    readonly activeTrailVertexStreamsCount: number;
    /**
     * Determines whether the Particle System can be rendered using GPU Instancing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer-supportsMeshInstancing.html | ParticleSystemRenderer.supportsMeshInstancing}
     */
    readonly supportsMeshInstancing: boolean;



    /**
     * Creates a snapshot of ParticleSystemRenderer and stores it in a mesh.
     * @param mesh A static Mesh to receive the snapshot of the particles.
     * @param options Specifies whether to include the rotation and scale of the Transform in the baked Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.BakeMesh.html | ParticleSystemRenderer.BakeMesh}
     */
    BakeMesh(mesh: Mesh, options: ParticleSystemBakeMeshOptions): void;
    /**
     * Creates a snapshot of ParticleSystemRenderer and stores it in a mesh.
     * @param mesh A static Mesh to receive the snapshot of the particles.
     * @param camera The Camera used to determine which way camera-space particles face.
     * @param options Specifies whether to include the rotation and scale of the Transform in the baked Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.BakeMesh.html | ParticleSystemRenderer.BakeMesh}
     */
    BakeMesh(mesh: Mesh, camera: Camera, options: ParticleSystemBakeMeshOptions): void;
    /**
     * Creates a snapshot of ParticleSystemRenderer and stores it in a Texture2D.
     * @param verticesTexture A Texture2D to receive the snapshot of the particle vertices.
     * @param options Specifies whether to include the rotation and scale of the Transform in the baked Texture2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.BakeTexture.html | ParticleSystemRenderer.BakeTexture}
     */
    BakeTexture(verticesTexture: Texture2D, options: ParticleSystemBakeTextureOptions): number;
    /**
     * Creates a snapshot of ParticleSystemRenderer and stores it in a Texture2D.
     * @param verticesTexture A Texture2D to receive the snapshot of the particle vertices.
     * @param camera The Camera used to determine which way camera-space particles face.
     * @param options Specifies whether to include the rotation and scale of the Transform in the baked Texture2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.BakeTexture.html | ParticleSystemRenderer.BakeTexture}
     */
    BakeTexture(verticesTexture: Texture2D, camera: Camera, options: ParticleSystemBakeTextureOptions): number;
    /**
     * Creates a snapshot of ParticleSystemRenderer and stores it in a Texture2D.
     * @param verticesTexture A Texture2D to receive the snapshot of the particle vertices.
     * @param indicesTexture An optional Texture2D to receive the snapshot of the particle indices.
     * @param options Specifies whether to include the rotation and scale of the Transform in the baked Texture2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.BakeTexture.html | ParticleSystemRenderer.BakeTexture}
     */
    BakeTexture(verticesTexture: Texture2D, indicesTexture: Texture2D, options: ParticleSystemBakeTextureOptions): number;
    /**
     * Creates a snapshot of ParticleSystemRenderer and stores it in a Texture2D.
     * @param verticesTexture A Texture2D to receive the snapshot of the particle vertices.
     * @param indicesTexture An optional Texture2D to receive the snapshot of the particle indices.
     * @param camera The Camera used to determine which way camera-space particles face.
     * @param options Specifies whether to include the rotation and scale of the Transform in the baked Texture2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.BakeTexture.html | ParticleSystemRenderer.BakeTexture}
     */
    BakeTexture(verticesTexture: Texture2D, indicesTexture: Texture2D, camera: Camera, options: ParticleSystemBakeTextureOptions): number;
    /**
     * Creates a snapshot of ParticleSystem Trails and stores them in a mesh.
     * @param mesh A static Mesh to receive the snapshot of the particle trails.
     * @param options Specifies whether to include the rotation and scale of the Transform in the baked Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.BakeTrailsMesh.html | ParticleSystemRenderer.BakeTrailsMesh}
     */
    BakeTrailsMesh(mesh: Mesh, options: ParticleSystemBakeMeshOptions): void;
    /**
     * Creates a snapshot of ParticleSystem Trails and stores them in a mesh.
     * @param mesh A static Mesh to receive the snapshot of the particle trails.
     * @param camera The Camera used to determine which way camera-space trails face.
     * @param options Specifies whether to include the rotation and scale of the Transform in the baked Mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.BakeTrailsMesh.html | ParticleSystemRenderer.BakeTrailsMesh}
     */
    BakeTrailsMesh(mesh: Mesh, camera: Camera, options: ParticleSystemBakeMeshOptions): void;
    /**
     * Creates a snapshot of ParticleSystem Trails and stores them in a Texture2D.
     * @param verticesTexture A Texture2D to receive the snapshot of the particle trail vertices.
     * @param indicesTexture A Texture2D to receive the snapshot of the particle trail indices.
     * @param options Specifies whether to include the rotation and scale of the Transform in the baked Texture2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.BakeTrailsTexture.html | ParticleSystemRenderer.BakeTrailsTexture}
     */
    BakeTrailsTexture(verticesTexture: Texture2D, indicesTexture: Texture2D, options: ParticleSystemBakeTextureOptions): number;
    /**
     * Creates a snapshot of ParticleSystem Trails and stores them in a Texture2D.
     * @param verticesTexture A Texture2D to receive the snapshot of the particle trail vertices.
     * @param indicesTexture A Texture2D to receive the snapshot of the particle trail indices.
     * @param camera The Camera used to determine which way camera-space particles face.
     * @param options Specifies whether to include the rotation and scale of the Transform in the baked Texture2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.BakeTrailsTexture.html | ParticleSystemRenderer.BakeTrailsTexture}
     */
    BakeTrailsTexture(verticesTexture: Texture2D, indicesTexture: Texture2D, camera: Camera, options: ParticleSystemBakeTextureOptions): number;
    GetActiveTrailVertexStreams(streams: Readonly<ParticleSystemVertexStream[]>): void;
    GetActiveVertexStreams(streams: Readonly<ParticleSystemVertexStream[]>): void;
    SetActiveTrailVertexStreams(streams: Readonly<ParticleSystemVertexStream[]>): void;
    SetActiveVertexStreams(streams: Readonly<ParticleSystemVertexStream[]>): void;
    /**
     * Sets the Meshes that the ParticleSystemRenderer uses to display particles when the ParticleSystemRenderer.renderMode is set to ParticleSystemRenderMode.Mesh.
     * @param meshes The array of Meshes to use.
     * @param size The number of elements from the Mesh array to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.SetMeshes.html | ParticleSystemRenderer.SetMeshes}
     */
    SetMeshes(meshes: Readonly<Mesh[]>, size: number): void;
    /**
     * Sets the Meshes that the ParticleSystemRenderer uses to display particles when the ParticleSystemRenderer.renderMode is set to ParticleSystemRenderMode.Mesh.
     * @param meshes The array of Meshes to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.SetMeshes.html | ParticleSystemRenderer.SetMeshes}
     */
    SetMeshes(meshes: Readonly<Mesh[]>): void;
    /**
     * Sets the weights that the ParticleSystemRenderer uses to assign Meshes to particles.
     * @param weightings The array of weights to use.
     * @param size The number of elements from the weighting array to apply.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.SetMeshWeightings.html | ParticleSystemRenderer.SetMeshWeightings}
     */
    SetMeshWeightings(weightings: Readonly<number[]>, size: number): void;
    /**
     * Sets the weights that the ParticleSystemRenderer uses to assign Meshes to particles.
     * @param weightings The array of weights to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ParticleSystemRenderer.SetMeshWeightings.html | ParticleSystemRenderer.SetMeshWeightings}
     */
    SetMeshWeightings(weightings: Readonly<number[]>): void;


}
    
interface ParticleSystemRendererConstructor {


    new(): ParticleSystemRenderer;



}
declare const ParticleSystemRenderer: ParticleSystemRendererConstructor;
    
interface Profiler {





}
    
interface ProfilerCategory {
    /**
     * Gets Profiler category name.
     */
    readonly Name: string;
    /**
     * Gets Profiler category color.
     */
    readonly Color: Color32;



    ToString(): string;


}
    
interface ProfilerCategoryConstructor {
    /**
     * Rendering system Profiler category.
     */
    readonly Render: ProfilerCategory;
    /**
     * Generic C# code Profiler category.
     */
    readonly Scripts: ProfilerCategory;
    /**
     * UI Profiler category.
     */
    readonly Gui: ProfilerCategory;
    /**
     * Physics system Profiler category.
     */
    readonly Physics: ProfilerCategory;
    /**
     * The Physics 2D system category for the Profiler.
     */
    readonly Physics2D: ProfilerCategory;
    /**
     * Animation Profiler category.
     */
    readonly Animation: ProfilerCategory;
    /**
     * AI and NavMesh Profiler category.
     */
    readonly Ai: ProfilerCategory;
    /**
     * Audio system Profiler category.
     */
    readonly Audio: ProfilerCategory;
    /**
     * Video system Profiler category.
     */
    readonly Video: ProfilerCategory;
    /**
     * Particle system Profiler category.
     */
    readonly Particles: ProfilerCategory;
    /**
     * Global Illumination Profiler category.
     */
    readonly Lighting: ProfilerCategory;
    /**
     * Networking system Profiler category.
     */
    readonly Network: ProfilerCategory;
    /**
     * Loading system Profiler category.
     */
    readonly Loading: ProfilerCategory;
    /**
     * VR systen Profiler category.
     */
    readonly Vr: ProfilerCategory;
    /**
     * Input system Profiler category.
     */
    readonly Input: ProfilerCategory;
    /**
     * Memory allocation Profiler category.
     */
    readonly Memory: ProfilerCategory;
    /**
     * Virtual Texturing system Profiler category.
     */
    readonly VirtualTexturing: ProfilerCategory;
    /**
     * File IO Profiler category.
     */
    readonly FileIO: ProfilerCategory;
    /**
     * Internal Unity systems Profiler category.
     */
    readonly Internal: ProfilerCategory;


    new(categoryName: string): ProfilerCategory;
    new(categoryName: string, color: ProfilerCategoryColor): ProfilerCategory;



}
declare const ProfilerCategory: ProfilerCategoryConstructor;
    
interface ProfilerConstructor {
    readonly supported: boolean;
    /**
     * Specifies the file to use when writing profiling data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Profiler-logFile.html | Profiling.Profiler.logFile}
     */
    logFile: string;
    /**
     * Enables the logging of profiling data to a file.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Profiler-enableBinaryLog.html | Profiling.Profiler.enableBinaryLog}
     */
    enableBinaryLog: boolean;
    /**
     * Sets the maximum amount of memory that Profiler uses for buffering data. This property is expressed in bytes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Profiler-maxUsedMemory.html | Profiling.Profiler.maxUsedMemory}
     */
    maxUsedMemory: number;
    /**
     * Enables the Profiler.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Profiler-enabled.html | Profiling.Profiler.enabled}
     */
    enabled: boolean;
    /**
     * Enables the recording of callstacks for managed allocations.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Profiler-enableAllocationCallstacks.html | Profiling.Profiler.enableAllocationCallstacks}
     */
    enableAllocationCallstacks: boolean;
    /**
     * The number of ProfilerArea|Profiler Areas that you can profile.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Profiler-areaCount.html | Profiling.Profiler.areaCount}
     */
    readonly areaCount: number;
    /**
     * Returns the number of bytes that Unity has allocated. This does not include bytes allocated by external libraries or drivers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Profiling.Profiler-usedHeapSizeLong.html | Profiling.Profiler.usedHeapSizeLong}
     */
    readonly usedHeapSizeLong: number;




    AddFramesFromFile(file: string): void;
    BeginSample(name: string): void;
    BeginSample(name: string, targetObject: Object): void;
    BeginThreadProfiling(threadGroupName: string, threadName: string): void;
    EmitFrameMetaData(id: Guid, tag: number, data: Array): void;
    EmitFrameMetaData<T>(id: Guid, tag: number, data: Readonly<T[]>): void;
    EmitFrameMetaData<T>(id: Guid, tag: number, data: Readonly<T[]>): void;
    EmitSessionMetaData(id: Guid, tag: number, data: Array): void;
    EmitSessionMetaData<T>(id: Guid, tag: number, data: Readonly<T[]>): void;
    EmitSessionMetaData<T>(id: Guid, tag: number, data: Readonly<T[]>): void;
    EndSample(): void;
    EndThreadProfiling(): void;
    GetAllCategories(categories: Readonly<ProfilerCategory[]>): void;
    GetAllCategories(categories: Readonly<ProfilerCategory[]>): void;
    GetAllocatedMemoryForGraphicsDriver(): number;
    GetAreaEnabled(area: ProfilerArea): boolean;
    GetCategoriesCount(): number;
    GetMonoHeapSizeLong(): number;
    GetMonoUsedSizeLong(): number;
    GetRuntimeMemorySizeLong(o: Object): number;
    GetTempAllocatorSize(): number;
    GetTotalAllocatedMemoryLong(): number;
    GetTotalFragmentationInfo(stats: Readonly<number[]>): number;
    GetTotalReservedMemoryLong(): number;
    GetTotalUnusedReservedMemoryLong(): number;
    IsCategoryEnabled(category: ProfilerCategory): boolean;
    SetAreaEnabled(area: ProfilerArea, enabled: boolean): void;
    SetCategoryEnabled(category: ProfilerCategory, enabled: boolean): void;
    SetTempAllocatorRequestedSize(size: number): boolean;

}
declare const Profiler: ProfilerConstructor;
    
interface ICancelHandler extends IEventSystemHandler {



    OnCancel(eventData: BaseEventData): void;


}
    
interface IBeginDragHandler extends IEventSystemHandler {



    OnBeginDrag(eventData: PointerEventData): void;


}
    
interface IDragHandler extends IEventSystemHandler {



    OnDrag(eventData: PointerEventData): void;


}
    
interface IEndDragHandler extends IEventSystemHandler {



    OnEndDrag(eventData: PointerEventData): void;


}
    
interface IScrollHandler extends IEventSystemHandler {



    OnScroll(eventData: PointerEventData): void;


}
    
interface IUpdateSelectedHandler extends IEventSystemHandler {



    OnUpdateSelected(eventData: BaseEventData): void;


}
    
interface TMP_InputField extends Selectable, ISubmitHandler, IPointerClickHandler, ICancelHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, ICanvasElement, IScrollHandler, IUpdateSelectedHandler, ILayoutElement {
    isAlert: boolean;
    shouldActivateOnSelect: boolean;
    shouldHideMobileInput: boolean;
    shouldHideSoftKeyboard: boolean;
    text: string;
    readonly isFocused: boolean;
    caretBlinkRate: number;
    caretWidth: number;
    textViewport: RectTransform;
    textComponent: TMP_Text;
    placeholder: Graphic;
    verticalScrollbar: Scrollbar;
    scrollSensitivity: number;
    caretColor: Color;
    customCaretColor: boolean;
    selectionColor: Color;
    onValidateInput: OnValidateInput;
    characterLimit: number;
    pointSize: number;
    fontAsset: TMP_FontAsset;
    onFocusSelectAll: boolean;
    resetOnDeActivation: boolean;
    keepTextSelectionVisible: boolean;
    restoreOriginalTextOnEscape: boolean;
    isRichTextEditingAllowed: boolean;
    contentType: ContentType;
    lineType: LineType;
    lineLimit: number;
    inputType: InputType;
    readonly touchScreenKeyboard: TouchScreenKeyboard;
    keyboardType: TouchScreenKeyboardType;
    characterValidation: CharacterValidation;
    inputValidator: TMP_InputValidator;
    readOnly: boolean;
    richText: boolean;
    readonly multiLine: boolean;
    asteriskChar: string;
    readonly wasCanceled: boolean;
    caretPosition: number;
    selectionAnchorPosition: number;
    selectionFocusPosition: number;
    stringPosition: number;
    selectionStringAnchorPosition: number;
    selectionStringFocusPosition: number;
    readonly minWidth: number;
    readonly preferredWidth: number;
    readonly flexibleWidth: number;
    readonly minHeight: number;
    readonly preferredHeight: number;
    readonly flexibleHeight: number;
    readonly layoutPriority: number;

    readonly onEndEdit: MonoSignal<void>;
    readonly onSubmit: MonoSignal<void>;
    readonly onSelect: MonoSignal<void>;
    readonly onDeselect: MonoSignal<void>;
    readonly onTextSelection: MonoSignal<void>;
    readonly onEndTextSelection: MonoSignal<void>;
    readonly onValueChanged: MonoSignal<void>;
    readonly onTouchScreenKeyboardStatusChanged: MonoSignal<void>;


    ActivateInputField(): void;
    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    DeactivateInputField(clearSelection: boolean): void;
    ForceLabelUpdate(): void;
    GraphicUpdateComplete(): void;
    LayoutComplete(): void;
    MoveTextEnd(shift: boolean): void;
    MoveTextStart(shift: boolean): void;
    MoveToEndOfLine(shift: boolean, ctrl: boolean): void;
    MoveToStartOfLine(shift: boolean, ctrl: boolean): void;
    OnBeginDrag(eventData: PointerEventData): void;
    OnCancel(eventData: BaseEventData): void;
    OnControlClick(): void;
    OnDeselect(eventData: BaseEventData): void;
    OnDrag(eventData: PointerEventData): void;
    OnEndDrag(eventData: PointerEventData): void;
    OnMove(eventData: AxisEventData): void;
    OnPointerClick(eventData: PointerEventData): void;
    OnPointerDown(eventData: PointerEventData): void;
    OnScroll(eventData: PointerEventData): void;
    OnSelect(eventData: BaseEventData): void;
    OnSubmit(eventData: BaseEventData): void;
    OnUpdateSelected(eventData: BaseEventData): void;
    ProcessEvent(e: Event): void;
    Rebuild(update: CanvasUpdate): void;
    ReleaseSelection(): void;
    SetGlobalFontAsset(fontAsset: TMP_FontAsset): void;
    SetGlobalPointSize(pointSize: number): void;
    SetTextWithoutNotify(input: string): void;


}
    
interface IInitializePotentialDragHandler extends IEventSystemHandler {



    OnInitializePotentialDrag(eventData: PointerEventData): void;


}
    
interface Scrollbar extends Selectable, IBeginDragHandler, IInitializePotentialDragHandler, IDragHandler, ICanvasElement {
    handleRect: RectTransform;
    direction: Direction;
    value: number;
    size: number;
    numberOfSteps: number;

    readonly onValueChanged: MonoSignal<void>;


    FindSelectableOnDown(): Selectable;
    FindSelectableOnLeft(): Selectable;
    FindSelectableOnRight(): Selectable;
    FindSelectableOnUp(): Selectable;
    GraphicUpdateComplete(): void;
    LayoutComplete(): void;
    OnBeginDrag(eventData: PointerEventData): void;
    OnDrag(eventData: PointerEventData): void;
    OnInitializePotentialDrag(eventData: PointerEventData): void;
    OnMove(eventData: AxisEventData): void;
    OnPointerDown(eventData: PointerEventData): void;
    OnPointerUp(eventData: PointerEventData): void;
    Rebuild(executing: CanvasUpdate): void;
    SetDirection(direction: Direction, includeRectLayouts: boolean): void;
    SetValueWithoutNotify(input: number): void;


}
    
interface OnValidateInput extends MulticastDelegate {



    BeginInvoke(text: string, charIndex: number, addedChar: string, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): string;
    Invoke(text: string, charIndex: number, addedChar: string): string;


}
    
interface OnValidateInputConstructor {


    new(object: unknown, method: IntPtr): OnValidateInput;



}
declare const OnValidateInput: OnValidateInputConstructor;
    
interface TMP_InputValidator extends ScriptableObject {



    Validate(text: Readonly<string[]>, pos: Int32, ch: string): string;


}
    
interface Slider extends Selectable, IInitializePotentialDragHandler, IDragHandler, ICanvasElement {
    fillRect: RectTransform;
    handleRect: RectTransform;
    direction: Direction;
    minValue: number;
    maxValue: number;
    wholeNumbers: boolean;
    value: number;
    normalizedValue: number;

    readonly onValueChanged: MonoSignal<void>;


    FindSelectableOnDown(): Selectable;
    FindSelectableOnLeft(): Selectable;
    FindSelectableOnRight(): Selectable;
    FindSelectableOnUp(): Selectable;
    GraphicUpdateComplete(): void;
    LayoutComplete(): void;
    OnDrag(eventData: PointerEventData): void;
    OnInitializePotentialDrag(eventData: PointerEventData): void;
    OnMove(eventData: AxisEventData): void;
    OnPointerDown(eventData: PointerEventData): void;
    Rebuild(executing: CanvasUpdate): void;
    SetDirection(direction: Direction, includeRectLayouts: boolean): void;
    SetValueWithoutNotify(input: number): void;


}
    
interface Dropdown extends Selectable, ISubmitHandler, IPointerClickHandler, ICancelHandler {
    template: RectTransform;
    captionText: Text;
    captionImage: Image;
    itemText: Text;
    itemImage: Image;
    options: Readonly<OptionData[]>;
    alphaFadeSpeed: number;
    value: number;

    readonly onValueChanged: MonoSignal<void>;


    AddOptions(options: Readonly<OptionData[]>): void;
    AddOptions(options: Readonly<string[]>): void;
    AddOptions(options: Readonly<Sprite[]>): void;
    ClearOptions(): void;
    Hide(): void;
    OnCancel(eventData: BaseEventData): void;
    OnPointerClick(eventData: PointerEventData): void;
    OnSubmit(eventData: BaseEventData): void;
    RefreshShownValue(): void;
    SetValueWithoutNotify(input: number): void;
    Show(): void;


}
    
interface Text extends MaskableGraphic, ILayoutElement {
    readonly cachedTextGenerator: TextGenerator;
    readonly cachedTextGeneratorForLayout: TextGenerator;
    readonly mainTexture: Texture;
    font: Font;
    text: string;
    supportRichText: boolean;
    resizeTextForBestFit: boolean;
    resizeTextMinSize: number;
    resizeTextMaxSize: number;
    alignment: TextAnchor;
    alignByGeometry: boolean;
    fontSize: number;
    horizontalOverflow: HorizontalWrapMode;
    verticalOverflow: VerticalWrapMode;
    lineSpacing: number;
    fontStyle: FontStyle;
    readonly pixelsPerUnit: number;
    readonly minWidth: number;
    readonly preferredWidth: number;
    readonly flexibleWidth: number;
    readonly minHeight: number;
    readonly preferredHeight: number;
    readonly flexibleHeight: number;
    readonly layoutPriority: number;



    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    FontTextureChanged(): void;
    GetGenerationSettings(extents: Vector2): TextGenerationSettings;
    OnRebuildRequested(): void;


}
    
interface TextGenerator {
    /**
     * The number of characters that have been generated and are included in the visible lines.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator-characterCountVisible.html | TextGenerator.characterCountVisible}
     */
    readonly characterCountVisible: number;
    /**
     * Array of generated vertices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator-verts.html | TextGenerator.verts}
     */
    readonly verts: Readonly<UIVertex[]>;
    /**
     * Array of generated characters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator-characters.html | TextGenerator.characters}
     */
    readonly characters: Readonly<UICharInfo[]>;
    /**
     * Information about each generated text line.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator-lines.html | TextGenerator.lines}
     */
    readonly lines: Readonly<UILineInfo[]>;
    /**
     * Extents of the generated text in rect format.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator-rectExtents.html | TextGenerator.rectExtents}
     */
    readonly rectExtents: Rect;
    /**
     * Number of vertices generated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator-vertexCount.html | TextGenerator.vertexCount}
     */
    readonly vertexCount: number;
    /**
     * The number of characters that have been generated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator-characterCount.html | TextGenerator.characterCount}
     */
    readonly characterCount: number;
    /**
     * Number of text lines generated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator-lineCount.html | TextGenerator.lineCount}
     */
    readonly lineCount: number;
    /**
     * The size of the font that was found if using best fit mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator-fontSizeUsedForBestFit.html | TextGenerator.fontSizeUsedForBestFit}
     */
    readonly fontSizeUsedForBestFit: number;



    GetCharacters(characters: Readonly<UICharInfo[]>): void;
    /**
     * Returns the current UICharInfo.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator.GetCharactersArray.html | TextGenerator.GetCharactersArray}
     */
    GetCharactersArray(): Readonly<UICharInfo[]>;
    GetLines(lines: Readonly<UILineInfo[]>): void;
    /**
     * Returns the current UILineInfo.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator.GetLinesArray.html | TextGenerator.GetLinesArray}
     */
    GetLinesArray(): Readonly<UILineInfo[]>;
    /**
     * Given a string and settings, returns the preferred height for a container that would hold this text.
     * @param str Generation text.
     * @param settings Settings for generation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator.GetPreferredHeight.html | TextGenerator.GetPreferredHeight}
     */
    GetPreferredHeight(str: string, settings: TextGenerationSettings): number;
    /**
     * Given a string and settings, returns the preferred width for a container that would hold this text.
     * @param str Generation text.
     * @param settings Settings for generation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator.GetPreferredWidth.html | TextGenerator.GetPreferredWidth}
     */
    GetPreferredWidth(str: string, settings: TextGenerationSettings): number;
    GetVertices(vertices: Readonly<UIVertex[]>): void;
    /**
     * Returns the current UIVertex array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator.GetVerticesArray.html | TextGenerator.GetVerticesArray}
     */
    GetVerticesArray(): Readonly<UIVertex[]>;
    /**
     * Mark the text generator as invalid. This will force a full text generation the next time Populate is called.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator.Invalidate.html | TextGenerator.Invalidate}
     */
    Invalidate(): void;
    /**
     * Will generate the vertices and other data for the given string with the given settings.
     * @param str String to generate.
     * @param settings Settings.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator.Populate.html | TextGenerator.Populate}
     */
    Populate(str: string, settings: TextGenerationSettings): boolean;
    /**
     * Will generate the vertices and other data for the given string with the given settings.
     * @param str String to generate.
     * @param settings Generation settings.
     * @param context The object used as context of the error log message, if necessary.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextGenerator.PopulateWithErrors.html | TextGenerator.PopulateWithErrors}
     */
    PopulateWithErrors(str: string, settings: TextGenerationSettings, context: GameObject): boolean;


}
    
interface UICharInfo {
    cursorPos: Vector2;
    charWidth: number;





}
    
interface UILineInfo {
    startCharIdx: number;
    height: number;
    topY: number;
    leading: number;





}
    
interface TextGenerationSettings {
    font: Font;
    color: Color;
    fontSize: number;
    lineSpacing: number;
    richText: boolean;
    scaleFactor: number;
    fontStyle: FontStyle;
    textAnchor: TextAnchor;
    alignByGeometry: boolean;
    resizeTextForBestFit: boolean;
    resizeTextMinSize: number;
    resizeTextMaxSize: number;
    updateBounds: boolean;
    verticalOverflow: VerticalWrapMode;
    horizontalOverflow: HorizontalWrapMode;
    generationExtents: Vector2;
    pivot: Vector2;
    generateOutOfBounds: boolean;



    Equals(other: TextGenerationSettings): boolean;


}
    
interface TextGeneratorConstructor {


    new(): TextGenerator;
    new(initialCapacity: number): TextGenerator;



}
declare const TextGenerator: TextGeneratorConstructor;
    
interface TextConstructor {




    GetTextAnchorPivot(anchor: TextAnchor): Vector2;

}
declare const Text: TextConstructor;
    
interface OptionData {
    text: string;
    image: Sprite;





}
    
interface OptionDataConstructor {


    new(): OptionData;
    new(text: string): OptionData;
    new(image: Sprite): OptionData;
    new(text: string, image: Sprite): OptionData;



}
declare const OptionData: OptionDataConstructor;
    
interface TMP_Dropdown extends Selectable, ISubmitHandler, IPointerClickHandler, ICancelHandler {
    template: RectTransform;
    captionText: TMP_Text;
    captionImage: Image;
    placeholder: Graphic;
    itemText: TMP_Text;
    itemImage: Image;
    options: Readonly<OptionData[]>;
    alphaFadeSpeed: number;
    value: number;
    readonly IsExpanded: boolean;
    MultiSelect: boolean;

    readonly onValueChanged: MonoSignal<void>;


    AddOptions(options: Readonly<OptionData[]>): void;
    AddOptions(options: Readonly<string[]>): void;
    AddOptions(options: Readonly<Sprite[]>): void;
    ClearOptions(): void;
    Hide(): void;
    OnCancel(eventData: BaseEventData): void;
    OnPointerClick(eventData: PointerEventData): void;
    OnSubmit(eventData: BaseEventData): void;
    RefreshShownValue(): void;
    SetValueWithoutNotify(input: number): void;
    Show(): void;


}
    
interface OptionData {
    text: string;
    image: Sprite;
    color: Color;





}
    
interface OptionDataConstructor {


    new(): OptionData;
    new(text: string): OptionData;
    new(image: Sprite): OptionData;
    new(text: string, image: Sprite, color: Color): OptionData;



}
declare const OptionData: OptionDataConstructor;
    
interface CanvasHitDetector extends MonoBehaviour {



    IsPointerOverTarget(target: GameObject): boolean;
    IsPointerOverUI(): boolean;


}
    
interface CanvasHitDetectorConstructor {


    new(): CanvasHitDetector;



}
declare const CanvasHitDetector: CanvasHitDetectorConstructor;
    
interface AudioBehaviour extends Behaviour {





}
    
interface AudioBehaviourConstructor {


    new(): AudioBehaviour;



}
declare const AudioBehaviour: AudioBehaviourConstructor;
    
interface AudioSource extends AudioBehaviour {
    /**
     * The volume of the audio source (0.0 to 1.0).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-volume.html | AudioSource.volume}
     */
    volume: number;
    /**
     * The pitch of the audio source.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-pitch.html | AudioSource.pitch}
     */
    pitch: number;
    /**
     * Playback position in seconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-time.html | AudioSource.time}
     */
    time: number;
    /**
     * Playback position in PCM samples.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-timeSamples.html | AudioSource.timeSamples}
     */
    timeSamples: number;
    /**
     * The default AudioClip to play.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-clip.html | AudioSource.clip}
     */
    clip: AudioClip;
    /**
     * The default AudioResource to play.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-resource.html | AudioSource.resource}
     */
    resource: AudioResource;
    /**
     * The target group to which the AudioSource should route its signal.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-outputAudioMixerGroup.html | AudioSource.outputAudioMixerGroup}
     */
    outputAudioMixerGroup: AudioMixerGroup;
    /**
     * Gets or sets the gamepad audio output type for this audio source.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-gamepadSpeakerOutputType.html | AudioSource.gamepadSpeakerOutputType}
     */
    gamepadSpeakerOutputType: GamepadSpeakerOutputType;
    /**
     * Returns whether the AudioSource is currently playing an AudioResource(Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-isPlaying.html | AudioSource.isPlaying}
     */
    readonly isPlaying: boolean;
    /**
     * True if all sounds played by the AudioSource, such as main sound started by Play() or playOnAwake, and one-shots are culled by the audio system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-isVirtual.html | AudioSource.isVirtual}
     */
    readonly isVirtual: boolean;
    /**
     * Checks if the audio clip is looping
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-loop.html | AudioSource.loop}
     */
    loop: boolean;
    /**
     * This makes the audio source not take into account the volume of the audio listener.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-ignoreListenerVolume.html | AudioSource.ignoreListenerVolume}
     */
    ignoreListenerVolume: boolean;
    /**
     * If set to true, the audio source will automatically start playing on awake.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-playOnAwake.html | AudioSource.playOnAwake}
     */
    playOnAwake: boolean;
    /**
     * Allows AudioSource to play even though AudioListener.pause is set to true. This is useful for the menu element sounds or background music in pause menus.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-ignoreListenerPause.html | AudioSource.ignoreListenerPause}
     */
    ignoreListenerPause: boolean;
    /**
     * Whether the Audio Source should be updated in the fixed or dynamic update.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-velocityUpdateMode.html | AudioSource.velocityUpdateMode}
     */
    velocityUpdateMode: AudioVelocityUpdateMode;
    /**
     * Pans a playing sound in a stereo way (left or right). This only applies to sounds that are Mono or Stereo.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-panStereo.html | AudioSource.panStereo}
     */
    panStereo: number;
    /**
     * Sets how much this AudioSource is affected by 3D spatialisation calculations (attenuation, doppler etc). 0.0 makes the sound full 2D, 1.0 makes it full 3D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-spatialBlend.html | AudioSource.spatialBlend}
     */
    spatialBlend: number;
    /**
     * Enables or disables spatialization.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-spatialize.html | AudioSource.spatialize}
     */
    spatialize: boolean;
    /**
     * Determines if the spatializer effect is inserted before or after the effect filters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-spatializePostEffects.html | AudioSource.spatializePostEffects}
     */
    spatializePostEffects: boolean;
    /**
     * The amount by which the signal from the AudioSource will be mixed into the global reverb associated with the Reverb Zones.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-reverbZoneMix.html | AudioSource.reverbZoneMix}
     */
    reverbZoneMix: number;
    /**
     * Bypass effects (Applied from filter components or global listener filters).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-bypassEffects.html | AudioSource.bypassEffects}
     */
    bypassEffects: boolean;
    /**
     * When set, global effects on the AudioListener doesn't apply to the audio signal generated by the AudioSource. It also does'nt apply, if the AudioSource is playing into a mixer group.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-bypassListenerEffects.html | AudioSource.bypassListenerEffects}
     */
    bypassListenerEffects: boolean;
    /**
     * When set, it doesn't route the signal from an AudioSource into the global reverb associated with reverb zones.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-bypassReverbZones.html | AudioSource.bypassReverbZones}
     */
    bypassReverbZones: boolean;
    /**
     * Sets the Doppler scale for this AudioSource.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-dopplerLevel.html | AudioSource.dopplerLevel}
     */
    dopplerLevel: number;
    /**
     * Sets the spread angle (in degrees) of a 3d stereo or multichannel sound in speaker space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-spread.html | AudioSource.spread}
     */
    spread: number;
    /**
     * Sets the priority of the AudioSource.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-priority.html | AudioSource.priority}
     */
    priority: number;
    /**
     * Un- / Mutes the AudioSource. Mute sets the volume=0, Un-Mute restore the original volume.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-mute.html | AudioSource.mute}
     */
    mute: boolean;
    /**
     * Within the Min distance the AudioSource will cease to grow louder in volume.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-minDistance.html | AudioSource.minDistance}
     */
    minDistance: number;
    /**
     * (Logarithmic rolloff) MaxDistance is the distance a sound stops attenuating at.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-maxDistance.html | AudioSource.maxDistance}
     */
    maxDistance: number;
    /**
     * Sets/Gets how the AudioSource attenuates over distance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource-rolloffMode.html | AudioSource.rolloffMode}
     */
    rolloffMode: AudioRolloffMode;



    /**
     * Disables audio output to a gamepad for this audio source.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.DisableGamepadOutput.html | AudioSource.DisableGamepadOutput}
     */
    DisableGamepadOutput(): boolean;
    /**
     * Get the current custom curve for the given AudioSourceCurveType.
     * @param type The curve type to get.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.GetCustomCurve.html | AudioSource.GetCustomCurve}
     */
    GetCustomCurve(type: AudioSourceCurveType): AnimationCurve;
    /**
     * Provides a block of the currently playing source's output data.
     * @param samples The array to populate with audio samples. Its length must be a power of 2.
     * @param channel The channel to sample from.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.GetOutputData.html | AudioSource.GetOutputData}
     */
    GetOutputData(samples: Readonly<number[]>, channel: number): void;
    /**
     * Provides the block of audio frequencies (spectrum data) of the AudioSource that is currently playing.
     * @param samples The array to populate with frequency domain representations of audio samples. The array length must be a power of 2 (such as 128, 256, 512). Also, the length must not be less than 64 or greater than 8192.
     * @param channel The channel to sample from.
     * @param window The FFTWindow type to use when sampling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.GetSpectrumData.html | AudioSource.GetSpectrumData}
     */
    GetSpectrumData(samples: Readonly<number[]>, channel: number, window: FFTWindow): void;
    /**
     * Pauses playing the clip.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.Pause.html | AudioSource.Pause}
     */
    Pause(): void;
    /**
     * Plays the clip.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.Play.html | AudioSource.Play}
     */
    Play(): void;
    /**
     * Plays the clip.
     * @param delay Deprecated. Delay in number of samples, assuming a 44100Hz sample rate (meaning that Play(44100) will delay the playing by exactly 1 sec).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.Play.html | AudioSource.Play}
     */
    Play(delay: number): void;
    /**
     * Plays the clip with a delay specified in seconds. Users are advised to use this function instead of the old Play(delay) function that took a delay specified in samples relative to a reference rate of 44.1 kHz as an argument.
     * @param delay Delay time specified in seconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.PlayDelayed.html | AudioSource.PlayDelayed}
     */
    PlayDelayed(delay: number): void;
    /**
     * Plays an AudioClip, and scales the AudioSource volume by volumeScale.
     * @param clip The clip being played.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.PlayOneShot.html | AudioSource.PlayOneShot}
     */
    PlayOneShot(clip: AudioClip): void;
    /**
     * Plays an AudioClip, and scales the AudioSource volume by volumeScale.
     * @param clip The clip being played.
     * @param volumeScale The scale of the volume. Unity automatically clamps negative scales to zero. Note: Scales larger than one might cause clipping.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.PlayOneShot.html | AudioSource.PlayOneShot}
     */
    PlayOneShot(clip: AudioClip, volumeScale: number): void;
    /**
     * Enable playing of audio source though a specfic gamepad.
     * @param slot Slot number of the gamepad (0-3).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.PlayOnGamepad.html | AudioSource.PlayOnGamepad}
     */
    PlayOnGamepad(slot: number): boolean;
    /**
     * Plays the clip at a specific time on the absolute time-line that AudioSettings.dspTime reads from.
     * @param time Time in seconds on the absolute time-line that AudioSettings.dspTime refers to for when the sound should start playing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.PlayScheduled.html | AudioSource.PlayScheduled}
     */
    PlayScheduled(time: number): void;
    /**
     * Sets a user-defined parameter of a custom ambisonic decoder effect that is attached to an AudioSource.
     * @param index Zero-based index of user-defined parameter to be set.
     * @param value New value of the user-defined parameter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.SetAmbisonicDecoderFloat.html | AudioSource.SetAmbisonicDecoderFloat}
     */
    SetAmbisonicDecoderFloat(index: number, value: number): boolean;
    /**
     * Set the custom curve for the given AudioSourceCurveType.
     * @param type The curve type that should be set.
     * @param curve The curve that should be applied to the given curve type.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.SetCustomCurve.html | AudioSource.SetCustomCurve}
     */
    SetCustomCurve(type: AudioSourceCurveType, curve: AnimationCurve): void;
    SetGamepadSpeakerMixLevel(slot: number, mixLevel: number): boolean;
    SetGamepadSpeakerMixLevelDefault(slot: number): boolean;
    SetGamepadSpeakerRestrictedAudio(slot: number, restricted: boolean): boolean;
    /**
     * Changes the time at which a sound that has already been scheduled to play will end. Notice that depending on the timing not all rescheduling requests can be fulfilled.
     * @param time Time in seconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.SetScheduledEndTime.html | AudioSource.SetScheduledEndTime}
     */
    SetScheduledEndTime(time: number): void;
    /**
     * Changes the time at which a sound that has already been scheduled to play will start.
     * @param time Time in seconds.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.SetScheduledStartTime.html | AudioSource.SetScheduledStartTime}
     */
    SetScheduledStartTime(time: number): void;
    /**
     * Sets a user-defined parameter of a custom spatializer effect that is attached to an AudioSource.
     * @param index Zero-based index of user-defined parameter to be set.
     * @param value New value of the user-defined parameter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.SetSpatializerFloat.html | AudioSource.SetSpatializerFloat}
     */
    SetSpatializerFloat(index: number, value: number): boolean;
    /**
     * Stops playing the clip.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.Stop.html | AudioSource.Stop}
     */
    Stop(): void;
    /**
     * Unpause the paused playback of this AudioSource.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioSource.UnPause.html | AudioSource.UnPause}
     */
    UnPause(): void;


}
    
interface AudioResource extends Object {





}
    
interface AudioClip extends AudioResource {
    /**
     * The length of the audio clip in seconds. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip-length.html | AudioClip.length}
     */
    readonly length: number;
    /**
     * The length of the audio clip in samples. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip-samples.html | AudioClip.samples}
     */
    readonly samples: number;
    /**
     * The number of channels in the audio clip. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip-channels.html | AudioClip.channels}
     */
    readonly channels: number;
    /**
     * The sample frequency of the clip in Hertz. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip-frequency.html | AudioClip.frequency}
     */
    readonly frequency: number;
    /**
     * The load type of the clip (read-only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip-loadType.html | AudioClip.loadType}
     */
    readonly loadType: AudioClipLoadType;
    /**
     * Preloads audio data of the clip when the clip asset is loaded. When this flag is off, scripts have to call AudioClip.LoadAudioData() to load the data before the clip can be played. Properties like length, channels and format are available before the audio data has been loaded.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip-preloadAudioData.html | AudioClip.preloadAudioData}
     */
    readonly preloadAudioData: boolean;
    /**
     * Returns true if this audio clip is ambisonic (read-only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip-ambisonic.html | AudioClip.ambisonic}
     */
    readonly ambisonic: boolean;
    /**
     * Corresponding to the &quot;Load In Background&quot; flag in the inspector, when this flag is set, the loading will happen delayed without blocking the main thread.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip-loadInBackground.html | AudioClip.loadInBackground}
     */
    readonly loadInBackground: boolean;
    /**
     * Returns the current load state of the audio data associated with an AudioClip.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip-loadState.html | AudioClip.loadState}
     */
    readonly loadState: AudioDataLoadState;



    GetData(data: Span<number>, offsetSamples: number): boolean;
    /**
     * Fills an array with sample data from the clip.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip.GetData.html | AudioClip.GetData}
     */
    GetData(data: Readonly<number[]>, offsetSamples: number): boolean;
    /**
     * Loads the audio data of a clip. Clips that have &quot;Preload Audio Data&quot; set will load the audio data automatically.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip.LoadAudioData.html | AudioClip.LoadAudioData}
     */
    LoadAudioData(): boolean;
    /**
     * Set sample data in a clip.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip.SetData.html | AudioClip.SetData}
     */
    SetData(data: Readonly<number[]>, offsetSamples: number): boolean;
    SetData(data: ReadOnlySpan<number>, offsetSamples: number): boolean;
    /**
     * Unloads the audio data associated with the clip. This works only for AudioClips that are based on actual sound file assets.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AudioClip.UnloadAudioData.html | AudioClip.UnloadAudioData}
     */
    UnloadAudioData(): boolean;


}
    
interface PCMReaderCallback extends MulticastDelegate {



    BeginInvoke(data: Readonly<number[]>, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): void;
    Invoke(data: Readonly<number[]>): void;


}
    
interface PCMReaderCallbackConstructor {


    new(object: unknown, method: IntPtr): PCMReaderCallback;



}
declare const PCMReaderCallback: PCMReaderCallbackConstructor;
    
interface PCMSetPositionCallback extends MulticastDelegate {



    BeginInvoke(position: number, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): void;
    Invoke(position: number): void;


}
    
interface PCMSetPositionCallbackConstructor {


    new(object: unknown, method: IntPtr): PCMSetPositionCallback;



}
declare const PCMSetPositionCallback: PCMSetPositionCallbackConstructor;
    
interface AudioClipConstructor {




    Create(name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean): AudioClip;
    Create(name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean, pcmreadercallback: PCMReaderCallback): AudioClip;
    Create(name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean, pcmreadercallback: PCMReaderCallback, pcmsetpositioncallback: PCMSetPositionCallback): AudioClip;

}
declare const AudioClip: AudioClipConstructor;
    
interface ISubAssetNotDuplicatable {





}
    
interface AudioMixerGroup extends Object, ISubAssetNotDuplicatable {
    readonly audioMixer: AudioMixer;





}
    
interface AudioMixer extends Object {
    /**
     * Routing target.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Audio.AudioMixer-outputAudioMixerGroup.html | Audio.AudioMixer.outputAudioMixerGroup}
     */
    outputAudioMixerGroup: AudioMixerGroup;
    /**
     * How time should progress for this AudioMixer. Used during Snapshot transitions.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Audio.AudioMixer-updateMode.html | Audio.AudioMixer.updateMode}
     */
    updateMode: AudioMixerUpdateMode;



    /**
     * Resets an exposed parameter to its initial value.
     * @param name Exposed parameter.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Audio.AudioMixer.ClearFloat.html | Audio.AudioMixer.ClearFloat}
     */
    ClearFloat(name: string): boolean;
    /**
     * Connected groups in the mixer form a path from the mixer's master group to the leaves. This path has the format Master GroupChild of Master GroupGrandchild of Master Group, and so on. For example, in the hierarchy below, the group DROPS has the path MasterWATERDROPS.  To return only the group called DROPS, enter DROPS. The substring MasterAMBIENCE returns three groups, AMBIENCECROWD, AMBIENCEROAD, and AMBIENCE. The substring R would return both ROAD and RIVER.
     * @param subPath Path sub-strings to match with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Audio.AudioMixer.FindMatchingGroups.html | Audio.AudioMixer.FindMatchingGroups}
     */
    FindMatchingGroups(subPath: string): Readonly<AudioMixerGroup[]>;
    /**
     * The name must be an exact match.
     * @param name Name of snapshot object to be returned.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Audio.AudioMixer.FindSnapshot.html | Audio.AudioMixer.FindSnapshot}
     */
    FindSnapshot(name: string): AudioMixerSnapshot;
    /**
     * Sets the value of the exposed parameter specified. When a parameter is exposed, it is not controlled by mixer snapshots. You can only change the parameter with this function.
     * @param name The name of an exposed Audio Mixer group parameter. To expose a parameter, go to the Audio Mixer group's Inspector window, right click the parameter you want to expose, and choose Expose [parameter name] to script.
     * @param value Use to set the exposed Audio Mixer group parameter to a new value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Audio.AudioMixer.SetFloat.html | Audio.AudioMixer.SetFloat}
     */
    SetFloat(name: string, value: number): boolean;
    /**
     * Transitions to a weighted mixture of the snapshots specified. This can be used for games that specify the game state as a continuum between states or for interpolating snapshots from a triangulated map location.
     * @param snapshots The set of snapshots to be mixed.
     * @param weights The mix weights for the snapshots specified.
     * @param timeToReach Relative time after which the mixture should be reached from any current state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Audio.AudioMixer.TransitionToSnapshots.html | Audio.AudioMixer.TransitionToSnapshots}
     */
    TransitionToSnapshots(snapshots: Readonly<AudioMixerSnapshot[]>, weights: Readonly<number[]>, timeToReach: number): void;


}
    
interface AudioMixerSnapshot extends Object, ISubAssetNotDuplicatable {
    readonly audioMixer: AudioMixer;



    /**
     * Performs an interpolated transition towards this snapshot over the time interval specified.
     * @param timeToReach Relative time after which this snapshot should be reached from any current state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Audio.AudioMixerSnapshot.TransitionTo.html | Audio.AudioMixerSnapshot.TransitionTo}
     */
    TransitionTo(timeToReach: number): void;


}
    
interface AudioSourceConstructor {


    new(): AudioSource;


    GamepadSpeakerSupportsOutputType(outputType: GamepadSpeakerOutputType): boolean;
    PlayClipAtPoint(clip: AudioClip, position: Vector3): void;
    PlayClipAtPoint(clip: AudioClip, position: Vector3, volume: number): void;

}
declare const AudioSource: AudioSourceConstructor;
    
interface ITween {



    Cancel(): void;
    GetTotalDuration(includeDelay: boolean): number;


}
    
interface Tween<DriverValueType> extends MonoBehaviour, ITween {



    Await(): void;
    Cancel(): void;
    GetTotalDuration(includeDelay: boolean): number;
    OnGetFrom(): DriverValueType;
    OnInitialize(): boolean;
    OnUpdate(easedTime: number): void;
    SetDelay(delay: number, goToFirstFrameImmediately: boolean): Tween<DriverValueType>;
    SetEase(ease: EaseType): Tween<DriverValueType>;
    SetEaseBackIn(): Tween<DriverValueType>;
    SetEaseBackInOut(): Tween<DriverValueType>;
    SetEaseBackOut(): Tween<DriverValueType>;
    SetEaseBounceIn(): Tween<DriverValueType>;
    SetEaseBounceInOut(): Tween<DriverValueType>;
    SetEaseBounceOut(): Tween<DriverValueType>;
    SetEaseCircIn(): Tween<DriverValueType>;
    SetEaseCircInOut(): Tween<DriverValueType>;
    SetEaseCircOut(): Tween<DriverValueType>;
    SetEaseCubicIn(): Tween<DriverValueType>;
    SetEaseCubicInOut(): Tween<DriverValueType>;
    SetEaseCubicOut(): Tween<DriverValueType>;
    SetEaseElasticIn(): Tween<DriverValueType>;
    SetEaseElasticInOut(): Tween<DriverValueType>;
    SetEaseElasticOut(): Tween<DriverValueType>;
    SetEaseExpoIn(): Tween<DriverValueType>;
    SetEaseExpoInOut(): Tween<DriverValueType>;
    SetEaseExpoOut(): Tween<DriverValueType>;
    SetEaseLinear(): Tween<DriverValueType>;
    SetEaseQuadIn(): Tween<DriverValueType>;
    SetEaseQuadInOut(): Tween<DriverValueType>;
    SetEaseQuadOut(): Tween<DriverValueType>;
    SetEaseQuartIn(): Tween<DriverValueType>;
    SetEaseQuartInOut(): Tween<DriverValueType>;
    SetEaseQuartOut(): Tween<DriverValueType>;
    SetEaseQuintIn(): Tween<DriverValueType>;
    SetEaseQuintInOut(): Tween<DriverValueType>;
    SetEaseQuintOut(): Tween<DriverValueType>;
    SetEaseSineIn(): Tween<DriverValueType>;
    SetEaseSineInOut(): Tween<DriverValueType>;
    SetEaseSineOut(): Tween<DriverValueType>;
    SetInfinite(): Tween<DriverValueType>;
    SetLoopCount(loopCount: number): Tween<DriverValueType>;
    SetOvershooting(overshooting: number): Tween<DriverValueType>;
    SetPaused(isPaused: boolean): Tween<DriverValueType>;
    SetPingPong(): Tween<DriverValueType>;
    SetRandomTime(): Tween<DriverValueType>;
    SetTime(time: number): Tween<DriverValueType>;
    SetUseUnscaledTime(useUnscaledTime: boolean): Tween<DriverValueType>;
    Yield(): IEnumerator;


}
    
interface Bridge {





}
    
interface IChatroomNetwork {
    readonly LocalPeerId: number;
    readonly PeerIDs: Readonly<number[]>;

    readonly OnCreatedChatroom: MonoSignal<void>;
    readonly OnChatroomCreationFailed: MonoSignal<Exception>;
    readonly OnClosedChatroom: MonoSignal<void>;
    readonly OnJoinedChatroom: MonoSignal<number>;
    readonly OnChatroomJoinFailed: MonoSignal<Exception>;
    readonly OnLeftChatroom: MonoSignal<void>;
    readonly OnPeerJoinedChatroom: MonoSignal<number, number, AudioSource>;
    readonly OnPeerLeftChatroom: MonoSignal<number>;
    readonly OnAudioReceived: MonoSignal<number, ChatroomAudioSegment>;
    readonly OnAudioBroadcasted: MonoSignal<ChatroomAudioSegment>;


    BroadcastAudioSegment(data: ChatroomAudioSegment): void;
    CloseChatroom(data: unknown): void;
    HostChatroom(data: unknown): void;
    JoinChatroom(data: unknown): void;
    LeaveChatroom(data: unknown): void;


}
    
interface ChatroomAudioSegment {
    segmentIndex: number;
    frequency: number;
    channelCount: number;
    samples: Readonly<number[]>;





}
    
    
interface ChatroomAgent {
    PeerOutputs: CSDictionary<number, IAudioOutput>;
    OnModeChanged: Action<ChatroomAgentMode>;
    PeerSettings: CSDictionary<number, ChatroomPeerSettings>;
    readonly Network: IChatroomNetwork;
    readonly AudioInput: IAudioInput;
    readonly AudioOutputFactory: IAudioOutputFactory;
    readonly CurrentMode: ChatroomAgentMode;
    MuteOthers: boolean;
    MuteSelf: boolean;



    Dispose(): void;


}
    
interface IAudioOutput {
    ID: string;



    Feed(segmentIndex: number, frequency: number, channelCount: number, audioSamples: Readonly<number[]>): void;
    Feed(segment: ChatroomAudioSegment): void;


}
    
interface ChatroomPeerSettings {
    muteThem: boolean;
    muteSelf: boolean;





}
    
interface ChatroomPeerSettingsConstructor {


    new(): ChatroomPeerSettings;



}
declare const ChatroomPeerSettings: ChatroomPeerSettingsConstructor;
    
interface IAudioInput {
    readonly Frequency: number;
    readonly ChannelCount: number;
    readonly SegmentRate: number;

    readonly OnSegmentReady: MonoSignal<number, Readonly<number[]>>;




}
    
interface IAudioOutputFactory {



    Create(frequency: number, channelCount: number, samplesLen: number, audioSource: AudioSource): IAudioOutput;


}
    
interface ChatroomAgentConstructor {


    new(chatroomNetwork: IChatroomNetwork, audioInput: IAudioInput, audioOutputFactory: IAudioOutputFactory): ChatroomAgent;



}
declare const ChatroomAgent: ChatroomAgentConstructor;
    
    
interface float3 {
    x: number;
    y: number;
    z: number;
    readonly xxxx: float4;
    readonly xxxy: float4;
    readonly xxxz: float4;
    readonly xxyx: float4;
    readonly xxyy: float4;
    readonly xxyz: float4;
    readonly xxzx: float4;
    readonly xxzy: float4;
    readonly xxzz: float4;
    readonly xyxx: float4;
    readonly xyxy: float4;
    readonly xyxz: float4;
    readonly xyyx: float4;
    readonly xyyy: float4;
    readonly xyyz: float4;
    readonly xyzx: float4;
    readonly xyzy: float4;
    readonly xyzz: float4;
    readonly xzxx: float4;
    readonly xzxy: float4;
    readonly xzxz: float4;
    readonly xzyx: float4;
    readonly xzyy: float4;
    readonly xzyz: float4;
    readonly xzzx: float4;
    readonly xzzy: float4;
    readonly xzzz: float4;
    readonly yxxx: float4;
    readonly yxxy: float4;
    readonly yxxz: float4;
    readonly yxyx: float4;
    readonly yxyy: float4;
    readonly yxyz: float4;
    readonly yxzx: float4;
    readonly yxzy: float4;
    readonly yxzz: float4;
    readonly yyxx: float4;
    readonly yyxy: float4;
    readonly yyxz: float4;
    readonly yyyx: float4;
    readonly yyyy: float4;
    readonly yyyz: float4;
    readonly yyzx: float4;
    readonly yyzy: float4;
    readonly yyzz: float4;
    readonly yzxx: float4;
    readonly yzxy: float4;
    readonly yzxz: float4;
    readonly yzyx: float4;
    readonly yzyy: float4;
    readonly yzyz: float4;
    readonly yzzx: float4;
    readonly yzzy: float4;
    readonly yzzz: float4;
    readonly zxxx: float4;
    readonly zxxy: float4;
    readonly zxxz: float4;
    readonly zxyx: float4;
    readonly zxyy: float4;
    readonly zxyz: float4;
    readonly zxzx: float4;
    readonly zxzy: float4;
    readonly zxzz: float4;
    readonly zyxx: float4;
    readonly zyxy: float4;
    readonly zyxz: float4;
    readonly zyyx: float4;
    readonly zyyy: float4;
    readonly zyyz: float4;
    readonly zyzx: float4;
    readonly zyzy: float4;
    readonly zyzz: float4;
    readonly zzxx: float4;
    readonly zzxy: float4;
    readonly zzxz: float4;
    readonly zzyx: float4;
    readonly zzyy: float4;
    readonly zzyz: float4;
    readonly zzzx: float4;
    readonly zzzy: float4;
    readonly zzzz: float4;
    readonly xxx: float3;
    readonly xxy: float3;
    readonly xxz: float3;
    readonly xyx: float3;
    readonly xyy: float3;
    xyz: float3;
    readonly xzx: float3;
    xzy: float3;
    readonly xzz: float3;
    readonly yxx: float3;
    readonly yxy: float3;
    yxz: float3;
    readonly yyx: float3;
    readonly yyy: float3;
    readonly yyz: float3;
    yzx: float3;
    readonly yzy: float3;
    readonly yzz: float3;
    readonly zxx: float3;
    zxy: float3;
    readonly zxz: float3;
    zyx: float3;
    readonly zyy: float3;
    readonly zyz: float3;
    readonly zzx: float3;
    readonly zzy: float3;
    readonly zzz: float3;
    readonly xx: float2;
    xy: float2;
    xz: float2;
    yx: float2;
    readonly yy: float2;
    yz: float2;
    zx: float2;
    zy: float2;
    readonly zz: float2;
    Item: number;



    Equals(rhs: float3): boolean;
    Equals(o: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;
    ToString(format: string, formatProvider: IFormatProvider): string;


}
    
interface float4 {
    x: number;
    y: number;
    z: number;
    w: number;
    readonly xxxx: float4;
    readonly xxxy: float4;
    readonly xxxz: float4;
    readonly xxxw: float4;
    readonly xxyx: float4;
    readonly xxyy: float4;
    readonly xxyz: float4;
    readonly xxyw: float4;
    readonly xxzx: float4;
    readonly xxzy: float4;
    readonly xxzz: float4;
    readonly xxzw: float4;
    readonly xxwx: float4;
    readonly xxwy: float4;
    readonly xxwz: float4;
    readonly xxww: float4;
    readonly xyxx: float4;
    readonly xyxy: float4;
    readonly xyxz: float4;
    readonly xyxw: float4;
    readonly xyyx: float4;
    readonly xyyy: float4;
    readonly xyyz: float4;
    readonly xyyw: float4;
    readonly xyzx: float4;
    readonly xyzy: float4;
    readonly xyzz: float4;
    xyzw: float4;
    readonly xywx: float4;
    readonly xywy: float4;
    xywz: float4;
    readonly xyww: float4;
    readonly xzxx: float4;
    readonly xzxy: float4;
    readonly xzxz: float4;
    readonly xzxw: float4;
    readonly xzyx: float4;
    readonly xzyy: float4;
    readonly xzyz: float4;
    xzyw: float4;
    readonly xzzx: float4;
    readonly xzzy: float4;
    readonly xzzz: float4;
    readonly xzzw: float4;
    readonly xzwx: float4;
    xzwy: float4;
    readonly xzwz: float4;
    readonly xzww: float4;
    readonly xwxx: float4;
    readonly xwxy: float4;
    readonly xwxz: float4;
    readonly xwxw: float4;
    readonly xwyx: float4;
    readonly xwyy: float4;
    xwyz: float4;
    readonly xwyw: float4;
    readonly xwzx: float4;
    xwzy: float4;
    readonly xwzz: float4;
    readonly xwzw: float4;
    readonly xwwx: float4;
    readonly xwwy: float4;
    readonly xwwz: float4;
    readonly xwww: float4;
    readonly yxxx: float4;
    readonly yxxy: float4;
    readonly yxxz: float4;
    readonly yxxw: float4;
    readonly yxyx: float4;
    readonly yxyy: float4;
    readonly yxyz: float4;
    readonly yxyw: float4;
    readonly yxzx: float4;
    readonly yxzy: float4;
    readonly yxzz: float4;
    yxzw: float4;
    readonly yxwx: float4;
    readonly yxwy: float4;
    yxwz: float4;
    readonly yxww: float4;
    readonly yyxx: float4;
    readonly yyxy: float4;
    readonly yyxz: float4;
    readonly yyxw: float4;
    readonly yyyx: float4;
    readonly yyyy: float4;
    readonly yyyz: float4;
    readonly yyyw: float4;
    readonly yyzx: float4;
    readonly yyzy: float4;
    readonly yyzz: float4;
    readonly yyzw: float4;
    readonly yywx: float4;
    readonly yywy: float4;
    readonly yywz: float4;
    readonly yyww: float4;
    readonly yzxx: float4;
    readonly yzxy: float4;
    readonly yzxz: float4;
    yzxw: float4;
    readonly yzyx: float4;
    readonly yzyy: float4;
    readonly yzyz: float4;
    readonly yzyw: float4;
    readonly yzzx: float4;
    readonly yzzy: float4;
    readonly yzzz: float4;
    readonly yzzw: float4;
    yzwx: float4;
    readonly yzwy: float4;
    readonly yzwz: float4;
    readonly yzww: float4;
    readonly ywxx: float4;
    readonly ywxy: float4;
    ywxz: float4;
    readonly ywxw: float4;
    readonly ywyx: float4;
    readonly ywyy: float4;
    readonly ywyz: float4;
    readonly ywyw: float4;
    ywzx: float4;
    readonly ywzy: float4;
    readonly ywzz: float4;
    readonly ywzw: float4;
    readonly ywwx: float4;
    readonly ywwy: float4;
    readonly ywwz: float4;
    readonly ywww: float4;
    readonly zxxx: float4;
    readonly zxxy: float4;
    readonly zxxz: float4;
    readonly zxxw: float4;
    readonly zxyx: float4;
    readonly zxyy: float4;
    readonly zxyz: float4;
    zxyw: float4;
    readonly zxzx: float4;
    readonly zxzy: float4;
    readonly zxzz: float4;
    readonly zxzw: float4;
    readonly zxwx: float4;
    zxwy: float4;
    readonly zxwz: float4;
    readonly zxww: float4;
    readonly zyxx: float4;
    readonly zyxy: float4;
    readonly zyxz: float4;
    zyxw: float4;
    readonly zyyx: float4;
    readonly zyyy: float4;
    readonly zyyz: float4;
    readonly zyyw: float4;
    readonly zyzx: float4;
    readonly zyzy: float4;
    readonly zyzz: float4;
    readonly zyzw: float4;
    zywx: float4;
    readonly zywy: float4;
    readonly zywz: float4;
    readonly zyww: float4;
    readonly zzxx: float4;
    readonly zzxy: float4;
    readonly zzxz: float4;
    readonly zzxw: float4;
    readonly zzyx: float4;
    readonly zzyy: float4;
    readonly zzyz: float4;
    readonly zzyw: float4;
    readonly zzzx: float4;
    readonly zzzy: float4;
    readonly zzzz: float4;
    readonly zzzw: float4;
    readonly zzwx: float4;
    readonly zzwy: float4;
    readonly zzwz: float4;
    readonly zzww: float4;
    readonly zwxx: float4;
    zwxy: float4;
    readonly zwxz: float4;
    readonly zwxw: float4;
    zwyx: float4;
    readonly zwyy: float4;
    readonly zwyz: float4;
    readonly zwyw: float4;
    readonly zwzx: float4;
    readonly zwzy: float4;
    readonly zwzz: float4;
    readonly zwzw: float4;
    readonly zwwx: float4;
    readonly zwwy: float4;
    readonly zwwz: float4;
    readonly zwww: float4;
    readonly wxxx: float4;
    readonly wxxy: float4;
    readonly wxxz: float4;
    readonly wxxw: float4;
    readonly wxyx: float4;
    readonly wxyy: float4;
    wxyz: float4;
    readonly wxyw: float4;
    readonly wxzx: float4;
    wxzy: float4;
    readonly wxzz: float4;
    readonly wxzw: float4;
    readonly wxwx: float4;
    readonly wxwy: float4;
    readonly wxwz: float4;
    readonly wxww: float4;
    readonly wyxx: float4;
    readonly wyxy: float4;
    wyxz: float4;
    readonly wyxw: float4;
    readonly wyyx: float4;
    readonly wyyy: float4;
    readonly wyyz: float4;
    readonly wyyw: float4;
    wyzx: float4;
    readonly wyzy: float4;
    readonly wyzz: float4;
    readonly wyzw: float4;
    readonly wywx: float4;
    readonly wywy: float4;
    readonly wywz: float4;
    readonly wyww: float4;
    readonly wzxx: float4;
    wzxy: float4;
    readonly wzxz: float4;
    readonly wzxw: float4;
    wzyx: float4;
    readonly wzyy: float4;
    readonly wzyz: float4;
    readonly wzyw: float4;
    readonly wzzx: float4;
    readonly wzzy: float4;
    readonly wzzz: float4;
    readonly wzzw: float4;
    readonly wzwx: float4;
    readonly wzwy: float4;
    readonly wzwz: float4;
    readonly wzww: float4;
    readonly wwxx: float4;
    readonly wwxy: float4;
    readonly wwxz: float4;
    readonly wwxw: float4;
    readonly wwyx: float4;
    readonly wwyy: float4;
    readonly wwyz: float4;
    readonly wwyw: float4;
    readonly wwzx: float4;
    readonly wwzy: float4;
    readonly wwzz: float4;
    readonly wwzw: float4;
    readonly wwwx: float4;
    readonly wwwy: float4;
    readonly wwwz: float4;
    readonly wwww: float4;
    readonly xxx: float3;
    readonly xxy: float3;
    readonly xxz: float3;
    readonly xxw: float3;
    readonly xyx: float3;
    readonly xyy: float3;
    xyz: float3;
    xyw: float3;
    readonly xzx: float3;
    xzy: float3;
    readonly xzz: float3;
    xzw: float3;
    readonly xwx: float3;
    xwy: float3;
    xwz: float3;
    readonly xww: float3;
    readonly yxx: float3;
    readonly yxy: float3;
    yxz: float3;
    yxw: float3;
    readonly yyx: float3;
    readonly yyy: float3;
    readonly yyz: float3;
    readonly yyw: float3;
    yzx: float3;
    readonly yzy: float3;
    readonly yzz: float3;
    yzw: float3;
    ywx: float3;
    readonly ywy: float3;
    ywz: float3;
    readonly yww: float3;
    readonly zxx: float3;
    zxy: float3;
    readonly zxz: float3;
    zxw: float3;
    zyx: float3;
    readonly zyy: float3;
    readonly zyz: float3;
    zyw: float3;
    readonly zzx: float3;
    readonly zzy: float3;
    readonly zzz: float3;
    readonly zzw: float3;
    zwx: float3;
    zwy: float3;
    readonly zwz: float3;
    readonly zww: float3;
    readonly wxx: float3;
    wxy: float3;
    wxz: float3;
    readonly wxw: float3;
    wyx: float3;
    readonly wyy: float3;
    wyz: float3;
    readonly wyw: float3;
    wzx: float3;
    wzy: float3;
    readonly wzz: float3;
    readonly wzw: float3;
    readonly wwx: float3;
    readonly wwy: float3;
    readonly wwz: float3;
    readonly www: float3;
    readonly xx: float2;
    xy: float2;
    xz: float2;
    xw: float2;
    yx: float2;
    readonly yy: float2;
    yz: float2;
    yw: float2;
    zx: float2;
    zy: float2;
    readonly zz: float2;
    zw: float2;
    wx: float2;
    wy: float2;
    wz: float2;
    readonly ww: float2;
    Item: number;



    Equals(rhs: float4): boolean;
    Equals(o: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;
    ToString(format: string, formatProvider: IFormatProvider): string;


}
    
interface float2 {
    x: number;
    y: number;
    readonly xxxx: float4;
    readonly xxxy: float4;
    readonly xxyx: float4;
    readonly xxyy: float4;
    readonly xyxx: float4;
    readonly xyxy: float4;
    readonly xyyx: float4;
    readonly xyyy: float4;
    readonly yxxx: float4;
    readonly yxxy: float4;
    readonly yxyx: float4;
    readonly yxyy: float4;
    readonly yyxx: float4;
    readonly yyxy: float4;
    readonly yyyx: float4;
    readonly yyyy: float4;
    readonly xxx: float3;
    readonly xxy: float3;
    readonly xyx: float3;
    readonly xyy: float3;
    readonly yxx: float3;
    readonly yxy: float3;
    readonly yyx: float3;
    readonly yyy: float3;
    readonly xx: float2;
    xy: float2;
    yx: float2;
    readonly yy: float2;
    Item: number;



    Equals(rhs: float2): boolean;
    Equals(o: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;
    ToString(format: string, formatProvider: IFormatProvider): string;


}
    
interface float2Constructor {
    readonly zero: float2;


    new(x: number, y: number): float2;
    new(xy: float2): float2;
    new(v: number): float2;
    new(v: boolean): float2;
    new(v: bool2): float2;
    new(v: number): float2;
    new(v: int2): float2;
    new(v: number): float2;
    new(v: uint2): float2;
    new(v: half): float2;
    new(v: half2): float2;
    new(v: number): float2;
    new(v: double2): float2;



}
declare const float2: float2Constructor;
    
interface float4Constructor {
    readonly zero: float4;


    new(x: number, y: number, z: number, w: number): float4;
    new(x: number, y: number, zw: float2): float4;
    new(x: number, yz: float2, w: number): float4;
    new(x: number, yzw: float3): float4;
    new(xy: float2, z: number, w: number): float4;
    new(xy: float2, zw: float2): float4;
    new(xyz: float3, w: number): float4;
    new(xyzw: float4): float4;
    new(v: number): float4;
    new(v: boolean): float4;
    new(v: bool4): float4;
    new(v: number): float4;
    new(v: int4): float4;
    new(v: number): float4;
    new(v: uint4): float4;
    new(v: half): float4;
    new(v: half4): float4;
    new(v: number): float4;
    new(v: double4): float4;



}
declare const float4: float4Constructor;
    
interface float3Constructor {
    readonly zero: float3;


    new(x: number, y: number, z: number): float3;
    new(x: number, yz: float2): float3;
    new(xy: float2, z: number): float3;
    new(xyz: float3): float3;
    new(v: number): float3;
    new(v: boolean): float3;
    new(v: bool3): float3;
    new(v: number): float3;
    new(v: int3): float3;
    new(v: number): float3;
    new(v: uint3): float3;
    new(v: half): float3;
    new(v: half3): float3;
    new(v: number): float3;
    new(v: double3): float3;



}
declare const float3: float3Constructor;
    
interface BridgeConstructor {




    ClearAllMaterials(ren: Renderer): void;
    ClearMaterial(ren: Renderer, materialI: number): void;
    CopyToClipboard(text: string): void;
    DownloadTexture2DYielding(url: string): Texture2D;
    GetActiveScene(): Scene;
    GetAirshipVoiceChatNetwork(): AirshipUniVoiceNetwork;
    GetAllocatedRam(): number;
    GetAverageFPS(): number;
    GetCurrentFPS(): number;
    GetCurrentMicDeviceIndex(): number;
    GetMicDevices(): Readonly<string[]>;
    GetMonoRam(): number;
    GetReservedRam(): number;
    GetScene(sceneName: string): Scene;
    GetScenes(): Readonly<Scene[]>;
    GetVolume(): number;
    HasMicrophonePermission(): boolean;
    IsFullScreen(): boolean;
    IsLowEndDevice(): boolean;
    IsMicRecording(): boolean;
    IsSceneLoading(): boolean;
    LoadGlobalSceneByName(sceneName: string): void;
    LoadScene(sceneName: string, restartLuau: boolean, loadSceneMode: LoadSceneMode): void;
    LoadSceneAsyncFromAssetBundle(sceneName: string, loadSceneMode: LoadSceneMode): void;
    LoadSceneForConnection(conn: NetworkConnection, sceneName: string, makeActiveScene: boolean): void;
    MakeColorArray(size: number): Readonly<Color[]>;
    MakeDefaultRenderTexture(width: number, height: number): RenderTexture;
    MakeDefaultSprite(texture: Texture2D): Sprite;
    MakeDefaultTexture2D(width: number, height: number): Texture2D;
    MakeFloat3(v: Vector3): float3;
    MakeFloatArray(size: number): Readonly<number[]>;
    MakeIntArray(size: number): Readonly<number[]>;
    MakeMaterialPropertyBlock(): MaterialPropertyBlock;
    MakeMesh(): Mesh;
    MakeSprite(texture2D: Texture2D): Sprite;
    MakeSprite(texture: Texture2D, rect: Rect, pivot: Vector2, pixelsPerUnit: number): Sprite;
    MakeTexture2D(width: number, height: number, format: TextureFormat, mipChain: boolean, linear: boolean): Texture2D;
    MakeVector3Array(size: number): Readonly<Vector3[]>;
    MoveGameObjectToScene(gameObject: GameObject, scene: Scene): void;
    OpenDevConsole(): void;
    RemoveMaterial(ren: Renderer, materialI: number): void;
    RemoveRichText(input: string): string;
    RequestMicrophonePermissionAsync(): void;
    ScreenPointToLocalPointInRectangle(rectTransform: RectTransform, screenPoint: Vector2): Vector2;
    SetFullScreen(value: boolean): void;
    SetMicDeviceIndex(i: number): void;
    SetParentToSceneRoot(transform: Transform): void;
    SetSkyboxMaterial(material: Material): void;
    SetVolume(volume: number): void;
    StartMicRecording(frequency: number, sampleLength: number): void;
    StopMicRecording(): void;
    UnloadGlobalSceneByName(sceneName: string): void;
    UnloadScene(sceneName: string): void;
    UnloadSceneForConnection(conn: NetworkConnection, sceneName: string): void;
    UpdateLayout(xform: Transform, recursive: boolean): void;

}
declare const Bridge: BridgeConstructor;
    
interface CanvasGroup extends Behaviour, ICanvasRaycastFilter {
    /**
     * Set the alpha of the group.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasGroup-alpha.html | CanvasGroup.alpha}
     */
    alpha: number;
    /**
     * Is the group interactable (are the elements beneath the group enabled).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasGroup-interactable.html | CanvasGroup.interactable}
     */
    interactable: boolean;
    /**
     * Does this group block raycasting (allow collision).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasGroup-blocksRaycasts.html | CanvasGroup.blocksRaycasts}
     */
    blocksRaycasts: boolean;
    /**
     * Should the group ignore parent groups?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasGroup-ignoreParentGroups.html | CanvasGroup.ignoreParentGroups}
     */
    ignoreParentGroups: boolean;



    /**
     * Returns true if the Group allows raycasts.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CanvasGroup.IsRaycastLocationValid.html | CanvasGroup.IsRaycastLocationValid}
     */
    IsRaycastLocationValid(sp: Vector2, eventCamera: Camera): boolean;


}
    
interface CanvasGroupConstructor {


    new(): CanvasGroup;



}
declare const CanvasGroup: CanvasGroupConstructor;
    
interface AutoShutdownBridge extends MonoBehaviour {



    SetBundlesLoaded(assetBundlesLoaded: boolean): void;


}
    
interface AutoShutdownBridgeConstructor {


    new(): AutoShutdownBridge;



}
declare const AutoShutdownBridge: AutoShutdownBridgeConstructor;
    
interface ScreenCapture {





}
    
interface ScreenCaptureConstructor {




    CaptureScreenshot(filename: string): void;
    CaptureScreenshot(filename: string, superSize: number): void;
    CaptureScreenshot(filename: string, stereoCaptureMode: StereoScreenCaptureMode): void;
    CaptureScreenshotAsTexture(): Texture2D;
    CaptureScreenshotAsTexture(superSize: number): Texture2D;
    CaptureScreenshotAsTexture(stereoCaptureMode: StereoScreenCaptureMode): Texture2D;
    CaptureScreenshotIntoRenderTexture(renderTexture: RenderTexture): void;

}
declare const ScreenCapture: ScreenCaptureConstructor;
    
interface VoxelBlocks extends MonoBehaviour {
    maxResolution: number;
    atlasWidthTextures: number;
    pointFiltering: boolean;
    atlasMaterial: Material;
    atlas: TexturePacker;
    loadedBlocks: Readonly<BlockDefinition[]>;
    rootAssetPath: string;
    m_bundlePaths: Readonly<string[]>;
    blockDefinitionLists: Readonly<VoxelBlockDefinitionList[]>;
    readonly atlasSize: number;



    AddSolidMaskToVoxelValue(voxelValue: number): number;
    GetBlock(index: number): BlockDefinition;
    GetBlockDefinitionByStringId(blockTypeId: string): BlockDefinition;
    GetBlockDefinitionFromBlockId(index: number): BlockDefinition;
    GetBlockIdFromStringId(stringId: string): number;
    GetStringIdFromBlockId(blockVoxelId: number): string;
    Load(loadTexturesDirectlyFromDisk: boolean): void;
    Reload(useTexturesDirectlyFromDisk: boolean): void;
    SearchForBlockIdByString(stringId: string): number;
    UpdateVoxelBlockId(voxelValue: number, blockId: number): number;
    WaitForLoaded(): void;


}
    
interface TexturePacker {
    diffuse: RenderTexture;
    normals: RenderTexture;



    Dispose(): void;
    GetUVs(sourceTexture: Texture2D): Rect;
    PackTextures(textures: CSDictionary<number, TextureSet>, desiredPadding: number, width: number, height: number, numMips: number, normalizedSize: number): void;


}
    
interface TextureSet {
    diffuse: Texture2D;
    normals: Texture2D;
    smoothTexture: Texture2D;
    metalTexture: Texture2D;
    emissiveTexture: Texture2D;
    smoothness: number;
    metallic: number;
    normalScale: number;
    emissive: number;
    brightness: number;





}
    
interface TextureSetConstructor {


    new(diffuse: Texture2D, normals: Texture2D, smoothTex: Texture2D, metalTex: Texture2D, emissiveTex: Texture2D, smoothness: number, metallic: number, normalScale: number, emissive: number, brightness: number): TextureSet;



}
declare const TextureSet: TextureSetConstructor;
    
interface TexturePackerConstructor {


    new(): TexturePacker;


    CustomBlit(renderTarget: RenderTexture, sourceTexture: Texture, material: Material, destX: number, destY: number, destWidth: number, destHeight: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number): void;
    DoPadding(target: RenderTexture, source: Texture2D, rect: Rect, pad: number, flipMaterial: Material): void;

}
declare const TexturePacker: TexturePackerConstructor;
    
interface BlockDefinition {
    definition: VoxelBlockDefinition;
    detail: boolean;
    doOcclusion: boolean;
    mesh: LodSet;
    meshTiles: Readonly<LodSet[]>;
    meshTileProcessingOrder: Readonly<number[]>;
    meshContexts: Readonly<Readonly<VoxelMeshCopy[]>[]>;
    meshContextsRandomTable: Readonly<number[]>;
    editorTexture: Texture2D;
    topUvs: Rect;
    bottomUvs: Rect;
    sideUvs: Rect;
    materials: Readonly<Material[]>;
    materialInstanceIds: Readonly<number[]>;
    meshMaterialInstanceId: number;
    minecraftConversions: Readonly<string[]>;
    blockId: number;
    blockTypeId: string;
    meshMaterial: Material;



    GetUvsForFace(i: number): Rect;


}
    
interface VoxelBlockDefinition extends ScriptableObject {
    blockName: string;
    description: string;
    contextStyle: ContextStyle;
    meshMaterial: Material;
    halfBlock: boolean;
    topTexture: TextureSet;
    sideTexture: TextureSet;
    bottomTexture: TextureSet;
    quarterBlockMeshes: Readonly<VoxelQuarterBlockMeshDefinition[]>;
    prefab: GameObject;
    staticMeshLOD0: GameObject;
    staticMeshLOD1: GameObject;
    staticMeshLOD2: GameObject;
    meshTile1x1x1: MeshSet;
    meshTile2x2x2: MeshSet;
    meshTile3x3x3: MeshSet;
    meshTile4x4x4: MeshSet;
    rotatedPlacement: boolean;
    metallic: number;
    smoothness: number;
    normalScale: number;
    emissive: number;
    brightness: number;
    solid: boolean;
    collisionType: CollisionType;
    randomRotation: boolean;





}
    
interface TextureSet {
    material: Material;
    diffuse: Texture2D;
    normal: Texture2D;
    smooth: Texture2D;
    metallic: Texture2D;
    emissive: Texture2D;





}
    
interface TextureSetConstructor {


    new(): TextureSet;



}
declare const TextureSet: TextureSetConstructor;
    
interface VoxelQuarterBlockMeshDefinition extends ScriptableObject {
    UA: GameObject;
    UB: GameObject;
    UC: GameObject;
    UD: GameObject;
    UE: GameObject;
    UF: GameObject;
    UG: GameObject;
    UH: GameObject;
    UI: GameObject;
    UJ: GameObject;
    UK: GameObject;
    UL: GameObject;
    UM: GameObject;
    UN: GameObject;
    DA: GameObject;
    DB: GameObject;
    DC: GameObject;
    DD: GameObject;
    DE: GameObject;
    DF: GameObject;
    DG: GameObject;
    DH: GameObject;
    DI: GameObject;
    DJ: GameObject;
    DK: GameObject;
    DL: GameObject;
    DM: GameObject;
    DN: GameObject;
    probablity: number;



    GetQuarterBlockMesh(blockName: string): GameObject;


}
    
interface VoxelQuarterBlockMeshDefinitionConstructor {


    new(): VoxelQuarterBlockMeshDefinition;



}
declare const VoxelQuarterBlockMeshDefinition: VoxelQuarterBlockMeshDefinitionConstructor;
    
interface MeshSet {
    mesh_LOD0: GameObject;
    mesh_LOD1: GameObject;
    mesh_LOD2: GameObject;





}
    
interface MeshSetConstructor {


    new(): MeshSet;



}
declare const MeshSet: MeshSetConstructor;
    
interface VoxelBlockDefinitionConstructor {


    new(): VoxelBlockDefinition;



}
declare const VoxelBlockDefinition: VoxelBlockDefinitionConstructor;
    
interface LodSet {
    lod0: VoxelMeshCopy;
    lod1: VoxelMeshCopy;
    lod2: VoxelMeshCopy;





}
    
interface VoxelMeshCopy {
    quaternions: Readonly<KeyValuePair<Rotations, Quaternion>[]>;
    flip: Readonly<PrecalculatedFlip[]>;
    rotation: Readonly<PrecalculatedRotation[]>;
    srcUvs: Readonly<Vector2[]>;
    srcColors: Readonly<Color32[]>;
    srcVertices: Readonly<Vector3[]>;
    srcNormals: Readonly<Vector3[]>;
    surfaces: Readonly<Surface[]>;



    AdjustUVs(uvs: Rect): void;
    ApplyMaterial(meshMaterial: Material): void;


}
    
interface PrecalculatedFlip {
    vertices: Readonly<Vector3[]>;
    normals: Readonly<Vector3[]>;
    surfaces: Readonly<Surface[]>;





}
    
interface Surface {
    triangles: Readonly<number[]>;
    meshMaterial: Material;
    meshMaterialName: string;
    meshMaterialId: number;



    Clone(): Surface;
    Invert(): void;


}
    
interface SurfaceConstructor {


    new(triangles: Readonly<number[]>, material: Material, materialName: string, materialId: number): Surface;
    new(): Surface;



}
declare const Surface: SurfaceConstructor;
    
interface PrecalculatedFlipConstructor {


    new(srcVertices: Readonly<Vector3[]>, srcNormals: Readonly<Vector3[]>, srcSurfaces: Readonly<Surface[]>, flip: Flips): PrecalculatedFlip;



}
declare const PrecalculatedFlip: PrecalculatedFlipConstructor;
    
interface PrecalculatedRotation {
    vertices: Readonly<Vector3[]>;
    normals: Readonly<Vector3[]>;





}
    
interface PrecalculatedRotationConstructor {


    new(srcVertices: Readonly<Vector3[]>, srcNormals: Readonly<Vector3[]>, rot: Rotations, quat: Quaternion): PrecalculatedRotation;



}
declare const PrecalculatedRotation: PrecalculatedRotationConstructor;
    
interface VoxelMeshCopyConstructor {


    new(obj: GameObject): VoxelMeshCopy;
    new(src: VoxelMeshCopy): VoxelMeshCopy;
    new(assetPath: string, showError: boolean): VoxelMeshCopy;



}
declare const VoxelMeshCopy: VoxelMeshCopyConstructor;
    
interface LodSetConstructor {


    new(): LodSet;



}
declare const LodSet: LodSetConstructor;
    
interface BlockDefinitionConstructor {


    new(): BlockDefinition;



}
declare const BlockDefinition: BlockDefinitionConstructor;
    
interface VoxelBlockDefinitionList extends ScriptableObject {
    scope: string;
    blockDefinitions: Readonly<VoxelBlockDefinition[]>;





}
    
interface VoxelBlockDefinitionListConstructor {


    new(): VoxelBlockDefinitionList;



}
declare const VoxelBlockDefinitionList: VoxelBlockDefinitionListConstructor;
    
    
    
interface VoxelBlocksConstructor {
    allTileSizes: Readonly<number[]>;
    meshTileOffsets: CSDictionary<number, Vector3>;
    meshTileSizes: CSDictionary<number, Vector3>;
    TileSizeNames: Readonly<string[]>;
    ContextBlockNames: Readonly<string[]>;
    QuarterBlockNames: Readonly<string[]>;
    QuarterBlockSubstitutions: Readonly<number[]>;


    new(): VoxelBlocks;


    GetRandomMeshContext(block: BlockDefinition): Readonly<VoxelMeshCopy[]>;
    GetRandomMeshContext(block: BlockDefinition, origin: Vector3, offset: number): Readonly<VoxelMeshCopy[]>;

}
declare const VoxelBlocks: VoxelBlocksConstructor;
    
interface CharacterController extends Collider {
    /**
     * The current relative velocity of the Character (see notes).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-velocity.html | CharacterController.velocity}
     */
    readonly velocity: Vector3;
    /**
     * Was the CharacterController touching the ground during the last move?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-isGrounded.html | CharacterController.isGrounded}
     */
    readonly isGrounded: boolean;
    /**
     * What part of the capsule collided with the environment during the last CharacterController.Move call.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-collisionFlags.html | CharacterController.collisionFlags}
     */
    readonly collisionFlags: CollisionFlags;
    /**
     * The radius of the character's capsule.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-radius.html | CharacterController.radius}
     */
    radius: number;
    /**
     * The height of the character's capsule.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-height.html | CharacterController.height}
     */
    height: number;
    /**
     * The center of the character's capsule relative to the transform's position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-center.html | CharacterController.center}
     */
    center: Vector3;
    /**
     * The character controllers slope limit in degrees.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-slopeLimit.html | CharacterController.slopeLimit}
     */
    slopeLimit: number;
    /**
     * The character controllers step offset in meters.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-stepOffset.html | CharacterController.stepOffset}
     */
    stepOffset: number;
    /**
     * The character's collision skin width.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-skinWidth.html | CharacterController.skinWidth}
     */
    skinWidth: number;
    /**
     * Gets or sets the minimum move distance of the character controller.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-minMoveDistance.html | CharacterController.minMoveDistance}
     */
    minMoveDistance: number;
    /**
     * Determines whether other rigidbodies or character controllers collide with this character controller (by default this is always enabled).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-detectCollisions.html | CharacterController.detectCollisions}
     */
    detectCollisions: boolean;
    /**
     * Enables or disables overlap recovery.
 Enables or disables overlap recovery. Used to depenetrate character controllers from static objects when an overlap is detected.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController-enableOverlapRecovery.html | CharacterController.enableOverlapRecovery}
     */
    enableOverlapRecovery: boolean;



    /**
     * Supplies the movement of a GameObject with an attached CharacterController component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController.Move.html | CharacterController.Move}
     */
    Move(motion: Vector3): CollisionFlags;
    /**
     * Moves the character with speed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CharacterController.SimpleMove.html | CharacterController.SimpleMove}
     */
    SimpleMove(speed: Vector3): boolean;


}
    
interface CharacterControllerConstructor {


    new(): CharacterController;



}
declare const CharacterController: CharacterControllerConstructor;
    
interface TrailRenderer extends Renderer {
    /**
     * How long does the trail take to fade out.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-time.html | TrailRenderer.time}
     */
    time: number;
    /**
     * The width of the trail at the spawning point.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-startWidth.html | TrailRenderer.startWidth}
     */
    startWidth: number;
    /**
     * The width of the trail at the end of the trail.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-endWidth.html | TrailRenderer.endWidth}
     */
    endWidth: number;
    /**
     * Set an overall multiplier that is applied to the TrailRenderer.widthCurve to get the final width of the trail.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-widthMultiplier.html | TrailRenderer.widthMultiplier}
     */
    widthMultiplier: number;
    /**
     * Does the GameObject of this Trail Renderer auto destruct?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-autodestruct.html | TrailRenderer.autodestruct}
     */
    autodestruct: boolean;
    /**
     * Creates trails when the GameObject moves.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-emitting.html | TrailRenderer.emitting}
     */
    emitting: boolean;
    /**
     * Set this to a value greater than 0, to get rounded corners between each segment of the trail.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-numCornerVertices.html | TrailRenderer.numCornerVertices}
     */
    numCornerVertices: number;
    /**
     * Set this to a value greater than 0, to get rounded corners on each end of the trail.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-numCapVertices.html | TrailRenderer.numCapVertices}
     */
    numCapVertices: number;
    /**
     * Set the minimum distance the trail can travel before a new vertex is added to it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-minVertexDistance.html | TrailRenderer.minVertexDistance}
     */
    minVertexDistance: number;
    /**
     * Set the color at the start of the trail.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-startColor.html | TrailRenderer.startColor}
     */
    startColor: Color;
    /**
     * Set the color at the end of the trail.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-endColor.html | TrailRenderer.endColor}
     */
    endColor: Color;
    /**
     * Get the number of line segments in the trail.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-positionCount.html | TrailRenderer.positionCount}
     */
    readonly positionCount: number;
    /**
     * A multiplier for the UV coordinates of the trail texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-textureScale.html | TrailRenderer.textureScale}
     */
    textureScale: Vector2;
    /**
     * Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the trail width at each segment.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-shadowBias.html | TrailRenderer.shadowBias}
     */
    shadowBias: number;
    /**
     * Configures a trail to generate Normals and Tangents. With this data, Scene lighting can affect the trail via Normal Maps and the Unity Standard Shader, or your own custom-built Shaders.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-generateLightingData.html | TrailRenderer.generateLightingData}
     */
    generateLightingData: boolean;
    /**
     * Choose whether the U coordinate of the trail texture is tiled or stretched.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-textureMode.html | TrailRenderer.textureMode}
     */
    textureMode: LineTextureMode;
    /**
     * Select whether the trail will face the camera, or the orientation of the Transform Component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-alignment.html | TrailRenderer.alignment}
     */
    alignment: LineAlignment;
    /**
     * Specifies how the TrailRenderer interacts with SpriteMask.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-maskInteraction.html | TrailRenderer.maskInteraction}
     */
    maskInteraction: SpriteMaskInteraction;
    /**
     * Set the curve describing the width of the trail at various points along its length.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-widthCurve.html | TrailRenderer.widthCurve}
     */
    widthCurve: AnimationCurve;
    /**
     * Set the color gradient describing the color of the trail at various points along its length.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer-colorGradient.html | TrailRenderer.colorGradient}
     */
    colorGradient: Gradient;



    /**
     * Adds a position to the trail.
     * @param position The position to add to the trail.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer.AddPosition.html | TrailRenderer.AddPosition}
     */
    AddPosition(position: Vector3): void;
    /**
     * Add an array of positions to the trail.
     * @param positions The positions to add to the trail.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer.AddPositions.html | TrailRenderer.AddPositions}
     */
    AddPositions(positions: Readonly<Vector3[]>): void;
    /**
     * Creates a snapshot of TrailRenderer and stores it in mesh.
     * @param mesh A static mesh that will receive the snapshot of the trail.
     * @param useTransform Include the rotation and scale of the Transform in the baked mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer.BakeMesh.html | TrailRenderer.BakeMesh}
     */
    BakeMesh(mesh: Mesh, useTransform: boolean): void;
    /**
     * Creates a snapshot of TrailRenderer and stores it in mesh.
     * @param mesh A static mesh that will receive the snapshot of the trail.
     * @param camera The camera used for determining which way camera-space trails will face.
     * @param useTransform Include the rotation and scale of the Transform in the baked mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer.BakeMesh.html | TrailRenderer.BakeMesh}
     */
    BakeMesh(mesh: Mesh, camera: Camera, useTransform: boolean): void;
    /**
     * Removes all points from the TrailRenderer.
Useful for restarting a trail from a new position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer.Clear.html | TrailRenderer.Clear}
     */
    Clear(): void;
    /**
     * Get the position of a vertex in the trail.
     * @param index The index of the position to retrieve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer.GetPosition.html | TrailRenderer.GetPosition}
     */
    GetPosition(index: number): Vector3;
    /**
     * Set the position of a vertex in the trail.
     * @param index Which position to set.
     * @param position The new position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer.SetPosition.html | TrailRenderer.SetPosition}
     */
    SetPosition(index: number, position: Vector3): void;
    /**
     * Sets the positions of all vertices in the trail.
     * @param positions The array of positions to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TrailRenderer.SetPositions.html | TrailRenderer.SetPositions}
     */
    SetPositions(positions: Readonly<Vector3[]>): void;
    SetPositions(positions: Readonly<Vector3[]>): void;
    SetPositions(positions: Readonly<Vector3[]>): void;


}
    
interface TrailRendererConstructor {


    new(): TrailRenderer;



}
declare const TrailRenderer: TrailRendererConstructor;
    
interface WindowCore {





}
    
interface WindowProxy extends MonoBehaviour {

    readonly windowFocus: MonoSignal<void>;


    HasFocus(): boolean;


}
    
interface WindowProxyConstructor {


    new(): WindowProxy;



}
declare const WindowProxy: WindowProxyConstructor;
    
interface WindowCoreConstructor {
    Window: WindowProxy;




    SetWindowProxy(window: WindowProxy): void;

}
declare const WindowCore: WindowCoreConstructor;
    
interface MaterialColorURP extends MonoBehaviour {
    colorSettings: Readonly<ColorSetting[]>;
    addedByEditorScript: boolean;



    Clear(): void;
    CopyFrom(other: MaterialColorURP): void;
    DoUpdate(): void;
    EditorFirstTimeSetup(): void;
    GetColorSettingByMaterial(mat: Material): ColorSetting;
    InitializeColorsFromCurrentMaterials(): void;
    SetColor(indx: number, newColor: Color): void;
    SetColorOnAll(newColor: Color): void;


}
    
interface ColorSetting {
    baseColor: Color;
    reference: string;



    CopyFrom(otherSettings: ColorSetting): void;


}
    
interface ColorSettingConstructor {


    new(baseColor: Color): ColorSetting;



}
declare const ColorSetting: ColorSettingConstructor;
    
interface MaterialColorURPConstructor {


    new(): MaterialColorURP;



}
declare const MaterialColorURP: MaterialColorURPConstructor;
    
interface MainMenuLoadingScreen extends BundleLoadingScreen {
    canvas: Canvas;
    progressText: TMP_Text;
    continueButton: Button;
    spinner: GameObject;
    errorWrapper: GameObject;
    logo: RectTransform;
    errorText: TMP_Text;
    sceneManager: MainMenuSceneManager;
    mainContent: RectTransform;
    mainContentCanvasGroup: CanvasGroup;



    ClickContinueButton(): void;
    Close(): void;
    Retry(): void;
    SetError(msg: string): void;
    SetProgress(text: string, percent: number): void;
    SetTotalDownloadSize(sizeBytes: number): void;
    Show(): void;


}
    
interface MainMenuSceneManager extends MonoBehaviour {
    loadingScreen: MainMenuLoadingScreen;



    CheckForFailedStartup(): IEnumerator;
    CompletedTSLoad(): void;
    Retry(): void;


}
    
interface PackageVersionResponse {
    package: Package;





}
    
interface Package {
    assetVersionNumber: number;
    codeVersionNumber: number;
    publishNumber: number;





}
    
interface PackageConstructor {


    new(): Package;



}
declare const Package: PackageConstructor;
    
interface PackageVersionResponseConstructor {


    new(): PackageVersionResponse;



}
declare const PackageVersionResponse: PackageVersionResponseConstructor;
    
interface IPromise<PromisedT> {
    readonly Id: number;



    Catch(onRejected: Action<Exception>): IPromise;
    Catch(onRejected: Func<Exception, PromisedT>): IPromise<PromisedT>;
    ContinueWith(onResolved: Func<IPromise>): IPromise;
    ContinueWith<ConvertedT>(onComplete: Func<IPromise<ConvertedT>>): IPromise<ConvertedT>;
    Done(onResolved: Action<PromisedT>, onRejected: Action<Exception>): void;
    Done(onResolved: Action<PromisedT>): void;
    Done(): void;
    Finally(onComplete: Action): IPromise<PromisedT>;
    Progress(onProgress: Action<number>): IPromise<PromisedT>;
    Then<ConvertedT>(onResolved: Func<PromisedT, IPromise<ConvertedT>>): IPromise<ConvertedT>;
    Then(onResolved: Func<PromisedT, IPromise>): IPromise;
    Then(onResolved: Action<PromisedT>): IPromise;
    Then<ConvertedT>(onResolved: Func<PromisedT, IPromise<ConvertedT>>, onRejected: Func<Exception, IPromise<ConvertedT>>): IPromise<ConvertedT>;
    Then(onResolved: Func<PromisedT, IPromise>, onRejected: Action<Exception>): IPromise;
    Then(onResolved: Action<PromisedT>, onRejected: Action<Exception>): IPromise;
    Then<ConvertedT>(onResolved: Func<PromisedT, IPromise<ConvertedT>>, onRejected: Func<Exception, IPromise<ConvertedT>>, onProgress: Action<number>): IPromise<ConvertedT>;
    Then(onResolved: Func<PromisedT, IPromise>, onRejected: Action<Exception>, onProgress: Action<number>): IPromise;
    Then(onResolved: Action<PromisedT>, onRejected: Action<Exception>, onProgress: Action<number>): IPromise;
    Then<ConvertedT>(transform: Func<PromisedT, ConvertedT>): IPromise<ConvertedT>;
    ThenAll<ConvertedT>(chain: Func<PromisedT, Readonly<IPromise<ConvertedT>[]>>): IPromise<Readonly<ConvertedT[]>>;
    ThenAll(chain: Func<PromisedT, Readonly<IPromise[]>>): IPromise;
    ThenRace<ConvertedT>(chain: Func<PromisedT, Readonly<IPromise<ConvertedT>[]>>): IPromise<ConvertedT>;
    ThenRace(chain: Func<PromisedT, Readonly<IPromise[]>>): IPromise;
    WithName(name: string): IPromise<PromisedT>;


}
    
interface IPromise {
    readonly Id: number;



    Catch(onRejected: Action<Exception>): IPromise;
    ContinueWith(onResolved: Func<IPromise>): IPromise;
    ContinueWith<ConvertedT>(onComplete: Func<IPromise<ConvertedT>>): IPromise<ConvertedT>;
    Done(onResolved: Action, onRejected: Action<Exception>): void;
    Done(onResolved: Action): void;
    Done(): void;
    Finally(onComplete: Action): IPromise;
    Progress(onProgress: Action<number>): IPromise;
    Then<ConvertedT>(onResolved: Func<IPromise<ConvertedT>>): IPromise<ConvertedT>;
    Then(onResolved: Func<IPromise>): IPromise;
    Then(onResolved: Action): IPromise;
    Then<ConvertedT>(onResolved: Func<IPromise<ConvertedT>>, onRejected: Func<Exception, IPromise<ConvertedT>>): IPromise<ConvertedT>;
    Then(onResolved: Func<IPromise>, onRejected: Action<Exception>): IPromise;
    Then(onResolved: Action, onRejected: Action<Exception>): IPromise;
    Then<ConvertedT>(onResolved: Func<IPromise<ConvertedT>>, onRejected: Func<Exception, IPromise<ConvertedT>>, onProgress: Action<number>): IPromise<ConvertedT>;
    Then(onResolved: Func<IPromise>, onRejected: Action<Exception>, onProgress: Action<number>): IPromise;
    Then(onResolved: Action, onRejected: Action<Exception>, onProgress: Action<number>): IPromise;
    ThenAll(chain: Func<Readonly<IPromise[]>>): IPromise;
    ThenAll<ConvertedT>(chain: Func<Readonly<IPromise<ConvertedT>[]>>): IPromise<Readonly<ConvertedT[]>>;
    ThenRace(chain: Func<Readonly<IPromise[]>>): IPromise;
    ThenRace<ConvertedT>(chain: Func<Readonly<IPromise<ConvertedT>[]>>): IPromise<ConvertedT>;
    ThenSequence(chain: Func<Readonly<Func<IPromise>[]>>): IPromise;
    WithName(name: string): IPromise;


}
    
interface MainMenuSceneManagerConstructor {


    new(): MainMenuSceneManager;


    GetLatestPackageVersion(packageId: string): IPromise<PackageVersionResponse>;

}
declare const MainMenuSceneManager: MainMenuSceneManagerConstructor;
    
interface MainMenuLoadingScreenConstructor {


    new(): MainMenuLoadingScreen;



}
declare const MainMenuLoadingScreen: MainMenuLoadingScreenConstructor;
    
interface HttpManager {





}
    
interface HttpResponse {
    success: boolean;
    data: string;
    error: string;
    statusCode: number;
    headers: CSDictionary<string, string>;



    GetHeader(headerName: string): string;


}
    
interface RequestHelper {
    Uri: string;
    Method: string;
    Body: unknown;
    BodyString: string;
    BodyRaw: Readonly<number[]>;
    Timeout?: number;
    ContentType: string;
    Retries: number;
    RetrySecondsDelay: number;
    RetryCallbackOnlyOnNetworkErrors: boolean;
    RetryCallback: Action<RequestException, number>;
    ProgressCallback: Action<number>;
    EnableDebug: boolean;
    UseHttpContinue?: boolean;
    RedirectLimit?: number;
    IgnoreHttpException: boolean;
    FormData: WWWForm;
    SimpleForm: CSDictionary<string, string>;
    FormSections: Readonly<IMultipartFormSection[]>;
    CertificateHandler: CertificateHandler;
    UploadHandler: UploadHandler;
    DownloadHandler: DownloadHandler;
    Headers: CSDictionary<string, string>;
    Params: CSDictionary<string, string>;
    ParseResponseBody: boolean;
    Request: UnityWebRequest;
    readonly UploadProgress: number;
    readonly UploadedBytes: number;
    readonly DownloadProgress: number;
    readonly DownloadedBytes: number;
    IsAborted: boolean;
    DefaultContentType: boolean;



    Abort(): void;
    GetHeader(name: string): string;


}
    
interface RequestException extends Exception {
    readonly Request: RequestHelper;
    readonly IsHttpError: boolean;
    readonly IsNetworkError: boolean;
    readonly StatusCode: number;
    ServerMessage: string;
    Response: string;





}
    
interface RequestExceptionConstructor {


    new(): RequestException;
    new(message: string): RequestException;
    new(request: RequestHelper, message: string, isHttpError: boolean, isNetworkError: boolean, statusCode: number, response: string): RequestException;



}
declare const RequestException: RequestExceptionConstructor;
    
interface WWWForm {
    /**
     * (Read Only) Returns the correct request headers for posting the form using the WWW class.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WWWForm-headers.html | WWWForm.headers}
     */
    readonly headers: CSDictionary<string, string>;
    /**
     * (Read Only) The raw data to pass as the POST request body when sending the form.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WWWForm-data.html | WWWForm.data}
     */
    readonly data: Readonly<number[]>;



    /**
     * Add binary data to the form.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WWWForm.AddBinaryData.html | WWWForm.AddBinaryData}
     */
    AddBinaryData(fieldName: string, contents: Readonly<number[]>): void;
    /**
     * Add binary data to the form.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WWWForm.AddBinaryData.html | WWWForm.AddBinaryData}
     */
    AddBinaryData(fieldName: string, contents: Readonly<number[]>, fileName: string): void;
    /**
     * Add binary data to the form.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WWWForm.AddBinaryData.html | WWWForm.AddBinaryData}
     */
    AddBinaryData(fieldName: string, contents: Readonly<number[]>, fileName: string, mimeType: string): void;
    /**
     * Add a simple field to the form.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WWWForm.AddField.html | WWWForm.AddField}
     */
    AddField(fieldName: string, value: string): void;
    /**
     * Add a simple field to the form.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WWWForm.AddField.html | WWWForm.AddField}
     */
    AddField(fieldName: string, value: string, e: Encoding): void;
    /**
     * Adds a simple field to the form.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WWWForm.AddField.html | WWWForm.AddField}
     */
    AddField(fieldName: string, i: number): void;


}
    
interface WWWFormConstructor {


    new(): WWWForm;



}
declare const WWWForm: WWWFormConstructor;
    
interface IMultipartFormSection {
    /**
     * Returns the name of this section, if any.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.IMultipartFormSection-sectionName.html | Networking.IMultipartFormSection.sectionName}
     */
    readonly sectionName: string;
    /**
     * Returns the raw binary data contained in this section. Must not return null or a zero-length array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.IMultipartFormSection-sectionData.html | Networking.IMultipartFormSection.sectionData}
     */
    readonly sectionData: Readonly<number[]>;
    /**
     * Returns a string denoting the desired filename of this section on the destination server.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.IMultipartFormSection-fileName.html | Networking.IMultipartFormSection.fileName}
     */
    readonly fileName: string;
    /**
     * Returns the value to use in the Content-Type header for this form section.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.IMultipartFormSection-contentType.html | Networking.IMultipartFormSection.contentType}
     */
    readonly contentType: string;





}
    
interface CertificateHandler {



    /**
     * Signals that this [CertificateHandler] is no longer being used, and should clean up any resources it is using.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.CertificateHandler.Dispose.html | Networking.CertificateHandler.Dispose}
     */
    Dispose(): void;


}
    
interface UploadHandler {
    /**
     * The raw data which will be transmitted to the remote server as body data. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UploadHandler-data.html | Networking.UploadHandler.data}
     */
    readonly data: Readonly<number[]>;
    /**
     * Determines the default Content-Type header which will be transmitted with the outbound HTTP request.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UploadHandler-contentType.html | Networking.UploadHandler.contentType}
     */
    contentType: string;
    /**
     * Returns the proportion of data uploaded to the remote server compared to the total amount of data to upload. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UploadHandler-progress.html | Networking.UploadHandler.progress}
     */
    readonly progress: number;



    /**
     * Signals that this UploadHandler is no longer being used, and should clean up any resources it is using.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UploadHandler.Dispose.html | Networking.UploadHandler.Dispose}
     */
    Dispose(): void;


}
    
interface DownloadHandler {
    /**
     * Returns true if this DownloadHandler has been informed by its parent UnityWebRequest that all data has been received, and this DownloadHandler has completed any necessary post-download processing. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.DownloadHandler-isDone.html | Networking.DownloadHandler.isDone}
     */
    readonly isDone: boolean;
    /**
     * Error message describing a failure that occurred inside the download handler.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.DownloadHandler-error.html | Networking.DownloadHandler.error}
     */
    readonly error: string;
    /**
     * Provides direct access to downloaded data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.DownloadHandler-nativeData.html | Networking.DownloadHandler.nativeData}
     */
    readonly nativeData: Readonly<number[]>;
    /**
     * Returns the raw bytes downloaded from the remote server, or null. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.DownloadHandler-data.html | Networking.DownloadHandler.data}
     */
    readonly data: Readonly<number[]>;
    /**
     * Convenience property. Returns the bytes from data interpreted as a UTF8 string. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.DownloadHandler-text.html | Networking.DownloadHandler.text}
     */
    readonly text: string;



    /**
     * Signals that this DownloadHandler is no longer being used, and should clean up any resources it is using.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.DownloadHandler.Dispose.html | Networking.DownloadHandler.Dispose}
     */
    Dispose(): void;


}
    
interface UnityWebRequest {
    /**
     * If true, any CertificateHandler attached to this UnityWebRequest will have CertificateHandler.Dispose called automatically when UnityWebRequest.Dispose is called.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-disposeCertificateHandlerOnDispose.html | Networking.UnityWebRequest.disposeCertificateHandlerOnDispose}
     */
    disposeCertificateHandlerOnDispose: boolean;
    /**
     * If true, any DownloadHandler attached to this UnityWebRequest will have DownloadHandler.Dispose called automatically when UnityWebRequest.Dispose is called.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-disposeDownloadHandlerOnDispose.html | Networking.UnityWebRequest.disposeDownloadHandlerOnDispose}
     */
    disposeDownloadHandlerOnDispose: boolean;
    /**
     * If true, any UploadHandler attached to this UnityWebRequest will have UploadHandler.Dispose called automatically when UnityWebRequest.Dispose is called.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-disposeUploadHandlerOnDispose.html | Networking.UnityWebRequest.disposeUploadHandlerOnDispose}
     */
    disposeUploadHandlerOnDispose: boolean;
    /**
     * Defines the HTTP verb used by this UnityWebRequest, such as GET or POST.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-method.html | Networking.UnityWebRequest.method}
     */
    method: string;
    /**
     * A human-readable string describing any system errors encountered by this UnityWebRequest object while handling HTTP requests or responses. The default value is null. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-error.html | Networking.UnityWebRequest.error}
     */
    readonly error: string;
    /**
     * Determines whether this UnityWebRequest will include Expect: 100-Continue in its outgoing request headers. (Default: true).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-useHttpContinue.html | Networking.UnityWebRequest.useHttpContinue}
     */
    useHttpContinue: boolean;
    /**
     * Defines the target URL for the UnityWebRequest to communicate with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-url.html | Networking.UnityWebRequest.url}
     */
    url: string;
    /**
     * Defines the target URI for the UnityWebRequest to communicate with.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-uri.html | Networking.UnityWebRequest.uri}
     */
    uri: Uri;
    /**
     * The numeric HTTP response code returned by the server, such as 200, 404 or 500. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-responseCode.html | Networking.UnityWebRequest.responseCode}
     */
    readonly responseCode: number;
    /**
     * Returns a floating-point value between 0.0 and 1.0, indicating the progress of uploading body data to the server.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-uploadProgress.html | Networking.UnityWebRequest.uploadProgress}
     */
    readonly uploadProgress: number;
    /**
     * Returns true while a UnityWebRequest&#8217;s configuration properties can be altered. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-isModifiable.html | Networking.UnityWebRequest.isModifiable}
     */
    readonly isModifiable: boolean;
    /**
     * Returns true after the UnityWebRequest has finished communicating with the remote server. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-isDone.html | Networking.UnityWebRequest.isDone}
     */
    readonly isDone: boolean;
    /**
     * The result of this UnityWebRequest.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-result.html | Networking.UnityWebRequest.result}
     */
    readonly result: Result;
    /**
     * Returns a floating-point value between 0.0 and 1.0, indicating the progress of downloading body data from the server. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-downloadProgress.html | Networking.UnityWebRequest.downloadProgress}
     */
    readonly downloadProgress: number;
    /**
     * Returns the number of bytes of body data the system has uploaded to the remote server. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-uploadedBytes.html | Networking.UnityWebRequest.uploadedBytes}
     */
    readonly uploadedBytes: number;
    /**
     * Returns the number of bytes of body data the system has downloaded from the remote server. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-downloadedBytes.html | Networking.UnityWebRequest.downloadedBytes}
     */
    readonly downloadedBytes: number;
    /**
     * Indicates the number of redirects that this UnityWebRequest follows before halting with a Redirect Limit Exceeded system error.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-redirectLimit.html | Networking.UnityWebRequest.redirectLimit}
     */
    redirectLimit: number;
    /**
     * Holds a reference to the UploadHandler object which manages body data to be uploaded to the remote server.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-uploadHandler.html | Networking.UnityWebRequest.uploadHandler}
     */
    uploadHandler: UploadHandler;
    /**
     * Holds a reference to a DownloadHandler object, which manages body data received from the remote server by this UnityWebRequest.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-downloadHandler.html | Networking.UnityWebRequest.downloadHandler}
     */
    downloadHandler: DownloadHandler;
    /**
     * Holds a reference to a CertificateHandler object, which manages certificate validation for this UnityWebRequest.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-certificateHandler.html | Networking.UnityWebRequest.certificateHandler}
     */
    certificateHandler: CertificateHandler;
    /**
     * Sets UnityWebRequest to attempt to abort after the number of seconds in timeout have passed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest-timeout.html | Networking.UnityWebRequest.timeout}
     */
    timeout: number;



    /**
     * If in progress, halts the UnityWebRequest as soon as possible.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.Abort.html | Networking.UnityWebRequest.Abort}
     */
    Abort(): void;
    /**
     * Signals that this UnityWebRequest is no longer being used, and should clean up any resources it is using.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.Dispose.html | Networking.UnityWebRequest.Dispose}
     */
    Dispose(): void;
    /**
     * Retrieves the value of a custom request header.
     * @param name Name of the custom request header. Case-insensitive.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.GetRequestHeader.html | Networking.UnityWebRequest.GetRequestHeader}
     */
    GetRequestHeader(name: string): string;
    /**
     * Retrieves the value of a response header from the latest HTTP response received.
     * @param name The name of the HTTP header to retrieve. Case-insensitive.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.GetResponseHeader.html | Networking.UnityWebRequest.GetResponseHeader}
     */
    GetResponseHeader(name: string): string;
    /**
     * Retrieves a dictionary containing all the response headers received by this UnityWebRequest in the latest HTTP response.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.GetResponseHeaders.html | Networking.UnityWebRequest.GetResponseHeaders}
     */
    GetResponseHeaders(): CSDictionary<string, string>;
    /**
     * Begin communicating with the remote server.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.SendWebRequest.html | Networking.UnityWebRequest.SendWebRequest}
     */
    SendWebRequest(): UnityWebRequestAsyncOperation;
    /**
     * Set a HTTP request header to a custom value.
     * @param name The key of the header to be set. Case-sensitive.
     * @param value The header's intended value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.SetRequestHeader.html | Networking.UnityWebRequest.SetRequestHeader}
     */
    SetRequestHeader(name: string, value: string): void;


}
    
interface UnityWebRequestAsyncOperation extends AsyncOperation {
    /**
     * Returns the associated UnityWebRequest that created the operation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequestAsyncOperation-webRequest.html | Networking.UnityWebRequestAsyncOperation.webRequest}
     */
    readonly webRequest: UnityWebRequest;





}
    
interface UnityWebRequestAsyncOperationConstructor {


    new(): UnityWebRequestAsyncOperation;



}
declare const UnityWebRequestAsyncOperation: UnityWebRequestAsyncOperationConstructor;
    
interface UnityWebRequestConstructor {
    kHttpVerbGET: string;
    kHttpVerbHEAD: string;
    kHttpVerbPOST: string;
    kHttpVerbPUT: string;
    kHttpVerbCREATE: string;
    kHttpVerbDELETE: string;


    new(): UnityWebRequest;
    new(url: string): UnityWebRequest;
    new(uri: Uri): UnityWebRequest;
    new(url: string, method: string): UnityWebRequest;
    new(uri: Uri, method: string): UnityWebRequest;
    new(url: string, method: string, downloadHandler: DownloadHandler, uploadHandler: UploadHandler): UnityWebRequest;
    new(uri: Uri, method: string, downloadHandler: DownloadHandler, uploadHandler: UploadHandler): UnityWebRequest;


    ClearCookieCache(): void;
    ClearCookieCache(uri: Uri): void;
    Delete(uri: string): UnityWebRequest;
    Delete(uri: Uri): UnityWebRequest;
    EscapeURL(s: string): string;
    EscapeURL(s: string, e: Encoding): string;
    GenerateBoundary(): Readonly<number[]>;
    Get(uri: string): UnityWebRequest;
    Get(uri: Uri): UnityWebRequest;
    Head(uri: string): UnityWebRequest;
    Head(uri: Uri): UnityWebRequest;
    Post(uri: string, postData: string, contentType: string): UnityWebRequest;
    Post(uri: Uri, postData: string, contentType: string): UnityWebRequest;
    Post(uri: string, formData: WWWForm): UnityWebRequest;
    Post(uri: Uri, formData: WWWForm): UnityWebRequest;
    Post(uri: string, multipartFormSections: Readonly<IMultipartFormSection[]>): UnityWebRequest;
    Post(uri: Uri, multipartFormSections: Readonly<IMultipartFormSection[]>): UnityWebRequest;
    Post(uri: string, multipartFormSections: Readonly<IMultipartFormSection[]>, boundary: Readonly<number[]>): UnityWebRequest;
    Post(uri: Uri, multipartFormSections: Readonly<IMultipartFormSection[]>, boundary: Readonly<number[]>): UnityWebRequest;
    Post(uri: string, formFields: CSDictionary<string, string>): UnityWebRequest;
    Post(uri: Uri, formFields: CSDictionary<string, string>): UnityWebRequest;
    PostWwwForm(uri: string, form: string): UnityWebRequest;
    PostWwwForm(uri: Uri, form: string): UnityWebRequest;
    Put(uri: string, bodyData: Readonly<number[]>): UnityWebRequest;
    Put(uri: Uri, bodyData: Readonly<number[]>): UnityWebRequest;
    Put(uri: string, bodyData: string): UnityWebRequest;
    Put(uri: Uri, bodyData: string): UnityWebRequest;
    SerializeFormSections(multipartFormSections: Readonly<IMultipartFormSection[]>, boundary: Readonly<number[]>): Readonly<number[]>;
    SerializeSimpleForm(formFields: CSDictionary<string, string>): Readonly<number[]>;
    UnEscapeURL(s: string): string;
    UnEscapeURL(s: string, e: Encoding): string;

}
declare const UnityWebRequest: UnityWebRequestConstructor;
    
interface RequestHelperConstructor {


    new(): RequestHelper;



}
declare const RequestHelper: RequestHelperConstructor;
    
interface HttpManagerConstructor {
    loggingEnabled: boolean;


    new(): HttpManager;


    DeleteAsync(url: string): HttpResponse;
    DeleteAsync(url: string, headers: string): HttpResponse;
    GetAsync(url: string, headers: string): HttpResponse;
    GetAsync(url: string): HttpResponse;
    PatchAsync(url: string, data: string): HttpResponse;
    PatchAsync(url: string, data: string, headers: string): HttpResponse;
    PostAsync(url: string, data: string): HttpResponse;
    PostAsync(url: string, data: string, headers: string): HttpResponse;
    PutAsync(url: string, data: string): HttpResponse;
    PutAsync(url: string, data: string, headers: string): HttpResponse;
    PutAsync(options: RequestHelper, headers: string): HttpResponse;
    SetLoggingEnabled(val: boolean): void;

}
declare const HttpManager: HttpManagerConstructor;
    
interface InternalHttpManager {





}
    
interface InternalHttpManagerConstructor {
    editorUserId: string;
    editorAuthToken: string;
    authToken: string;




    DeleteAsync(url: string): HttpResponse;
    GetAsync(url: string): HttpResponse;
    GetAsyncWithHeaders(url: string, headers: string): HttpResponse;
    PatchAsync(url: string, data: string): HttpResponse;
    PostAsync(url: string, data: string): HttpResponse;
    PostAsync(url: string): HttpResponse;
    PutAsync(url: string, data: string): HttpResponse;
    PutImageAsync(url: string, filePath: string): HttpResponse;
    SetAuthToken(authToken: string): void;
    SetEditorAuthToken(authToken: string): void;

}
declare const InternalHttpManager: InternalHttpManagerConstructor;
    
interface UdpPingTool {





}
    
interface UdpPingToolConstructor {


    new(): UdpPingTool;


    GetPing(serverUrl: string, timeoutMilliseconds: number): number;

}
declare const UdpPingTool: UdpPingToolConstructor;
    
interface CrossSceneState {





}
    
interface ServerTransferData {
    address: string;
    port: number;
    gameId: string;
    loadingImageUrl: string;





}
    
interface ServerTransferDataConstructor {


    new(): ServerTransferData;



}
declare const ServerTransferData: ServerTransferDataConstructor;
    
interface CrossSceneStateConstructor {
    ServerTransferData: ServerTransferData;
    UseLocalBundles: boolean;
    kickMessage: string;
    kickForceLogout: boolean;
    disconnectKicked: boolean;




    IsLocalServer(): boolean;

}
declare const CrossSceneState: CrossSceneStateConstructor;
    
interface Toggle extends Selectable, ISubmitHandler, IPointerClickHandler, ICanvasElement {
    toggleTransition: ToggleTransition;
    graphic: Graphic;
    group: ToggleGroup;
    isOn: boolean;



    GraphicUpdateComplete(): void;
    LayoutComplete(): void;
    OnPointerClick(eventData: PointerEventData): void;
    OnSubmit(eventData: BaseEventData): void;
    Rebuild(executing: CanvasUpdate): void;
    SetIsOnWithoutNotify(value: boolean): void;


}
    
interface ToggleGroup extends UIBehaviour {
    allowSwitchOff: boolean;



    ActiveToggles(): Readonly<Toggle[]>;
    AnyTogglesOn(): boolean;
    EnsureValidState(): void;
    GetFirstActiveToggle(): Toggle;
    NotifyToggleOn(toggle: Toggle, sendCallback: boolean): void;
    RegisterToggle(toggle: Toggle): void;
    SetAllTogglesOff(sendCallback: boolean): void;
    UnregisterToggle(toggle: Toggle): void;


}
    
interface ILayoutController {



    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;


}
    
interface ILayoutGroup extends ILayoutController {





}
    
interface LayoutGroup extends UIBehaviour, ILayoutGroup, ILayoutElement {
    padding: RectOffset;
    childAlignment: TextAnchor;
    readonly minWidth: number;
    readonly preferredWidth: number;
    readonly flexibleWidth: number;
    readonly minHeight: number;
    readonly preferredHeight: number;
    readonly flexibleHeight: number;
    readonly layoutPriority: number;



    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;


}
    
interface RectOffset {
    /**
     * Left edge size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectOffset-left.html | RectOffset.left}
     */
    left: number;
    /**
     * Right edge size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectOffset-right.html | RectOffset.right}
     */
    right: number;
    /**
     * Top edge size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectOffset-top.html | RectOffset.top}
     */
    top: number;
    /**
     * Bottom edge size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectOffset-bottom.html | RectOffset.bottom}
     */
    bottom: number;
    /**
     * Shortcut for left + right. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectOffset-horizontal.html | RectOffset.horizontal}
     */
    readonly horizontal: number;
    /**
     * Shortcut for top + bottom. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectOffset-vertical.html | RectOffset.vertical}
     */
    readonly vertical: number;



    /**
     * Add the border offsets to a rect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectOffset.Add.html | RectOffset.Add}
     */
    Add(rect: Rect): Rect;
    /**
     * Remove the border offsets from a rect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectOffset.Remove.html | RectOffset.Remove}
     */
    Remove(rect: Rect): Rect;
    /**
     * Returns a formatted string for this RectOffset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectOffset.ToString.html | RectOffset.ToString}
     */
    ToString(): string;
    /**
     * Returns a formatted string for this RectOffset.
     * @param format A numeric format string.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectOffset.ToString.html | RectOffset.ToString}
     */
    ToString(format: string): string;
    /**
     * Returns a formatted string for this RectOffset.
     * @param format A numeric format string.
     * @param formatProvider An object that specifies culture-specific formatting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RectOffset.ToString.html | RectOffset.ToString}
     */
    ToString(format: string, formatProvider: IFormatProvider): string;


}
    
interface RectOffsetConstructor {


    new(): RectOffset;
    new(left: number, right: number, top: number, bottom: number): RectOffset;



}
declare const RectOffset: RectOffsetConstructor;
    
interface HorizontalOrVerticalLayoutGroup extends LayoutGroup {
    spacing: number;
    childForceExpandWidth: boolean;
    childForceExpandHeight: boolean;
    childControlWidth: boolean;
    childControlHeight: boolean;
    childScaleWidth: boolean;
    childScaleHeight: boolean;
    reverseArrangement: boolean;





}
    
interface HorizontalLayoutGroup extends HorizontalOrVerticalLayoutGroup {



    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;


}
    
interface VerticalLayoutGroup extends HorizontalOrVerticalLayoutGroup {



    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;


}
    
interface ILayoutSelfController extends ILayoutController {





}
    
interface ContentSizeFitter extends UIBehaviour, ILayoutSelfController {
    horizontalFit: FitMode;
    verticalFit: FitMode;



    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;


}
    
interface AspectRatioFitter extends UIBehaviour, ILayoutSelfController {
    aspectMode: AspectMode;
    aspectRatio: number;



    IsAspectModeValid(): boolean;
    IsComponentValidOnObject(): boolean;
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;


}
    
interface LayoutRebuilder extends ICanvasElement {
    readonly transform: Transform;



    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    GraphicUpdateComplete(): void;
    IsDestroyed(): boolean;
    LayoutComplete(): void;
    Rebuild(executing: CanvasUpdate): void;
    ToString(): string;


}
    
interface LayoutRebuilderConstructor {


    new(): LayoutRebuilder;


    ForceRebuildLayoutImmediate(layoutRoot: RectTransform): void;
    MarkLayoutForRebuild(rect: RectTransform): void;

}
declare const LayoutRebuilder: LayoutRebuilderConstructor;
    
interface RectTransformUtility {





}
    
interface RectTransformUtilityConstructor {




    CalculateRelativeRectTransformBounds(root: Transform, child: Transform): Bounds;
    CalculateRelativeRectTransformBounds(trans: Transform): Bounds;
    FlipLayoutAxes(rect: RectTransform, keepPositioning: boolean, recursive: boolean): void;
    FlipLayoutOnAxis(rect: RectTransform, axis: number, keepPositioning: boolean, recursive: boolean): void;
    PixelAdjustPoint(point: Vector2, elementTransform: Transform, canvas: Canvas): Vector2;
    PixelAdjustRect(rectTransform: RectTransform, canvas: Canvas): Rect;
    RectangleContainsScreenPoint(rect: RectTransform, screenPoint: Vector2): boolean;
    RectangleContainsScreenPoint(rect: RectTransform, screenPoint: Vector2, cam: Camera): boolean;
    RectangleContainsScreenPoint(rect: RectTransform, screenPoint: Vector2, cam: Camera, offset: Vector4): boolean;
    ScreenPointToRay(cam: Camera, screenPos: Vector2): Ray;
    WorldToScreenPoint(cam: Camera, worldPoint: Vector3): Vector2;

}
declare const RectTransformUtility: RectTransformUtilityConstructor;
    
interface ScrollRect extends UIBehaviour, ILayoutGroup, IBeginDragHandler, IInitializePotentialDragHandler, IDragHandler, IEndDragHandler, ICanvasElement, IScrollHandler, ILayoutElement {
    content: RectTransform;
    horizontal: boolean;
    vertical: boolean;
    movementType: MovementType;
    elasticity: number;
    inertia: boolean;
    decelerationRate: number;
    scrollSensitivity: number;
    viewport: RectTransform;
    horizontalScrollbar: Scrollbar;
    verticalScrollbar: Scrollbar;
    horizontalScrollbarVisibility: ScrollbarVisibility;
    verticalScrollbarVisibility: ScrollbarVisibility;
    horizontalScrollbarSpacing: number;
    verticalScrollbarSpacing: number;
    velocity: Vector2;
    normalizedPosition: Vector2;
    horizontalNormalizedPosition: number;
    verticalNormalizedPosition: number;
    readonly minWidth: number;
    readonly preferredWidth: number;
    readonly flexibleWidth: number;
    readonly minHeight: number;
    readonly preferredHeight: number;
    readonly flexibleHeight: number;
    readonly layoutPriority: number;

    readonly onValueChanged: MonoSignal<void>;


    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    GraphicUpdateComplete(): void;
    IsActive(): boolean;
    LayoutComplete(): void;
    OnBeginDrag(eventData: PointerEventData): void;
    OnDrag(eventData: PointerEventData): void;
    OnEndDrag(eventData: PointerEventData): void;
    OnInitializePotentialDrag(eventData: PointerEventData): void;
    OnScroll(data: PointerEventData): void;
    Rebuild(executing: CanvasUpdate): void;
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;
    StopMovement(): void;


}
    
interface DevConsole {





}
    
interface DevConsoleMono extends MonoBehaviour {
    bottom: GameObject;
    loggingEnabled: boolean;
    activeContext: LogContext;



    ClearActiveConsoleContext(): void;
    CloseConsole(): void;
    OnClientTabClick(): void;
    OnLogMessageCallback(logString: string, stackTrace: string, type: LogType): void;
    OnLogMessageReceived(logString: string, stackTrace: string, type: LogType, context: LogContext, time: string, prepend: boolean): void;
    OnMemoryTabClick(): void;
    OnRepositionButtonPointerDown(eventData: BaseEventData): void;
    OnRepositionButtonPointerUp(_: BaseEventData): void;
    OnServerTabClick(): void;
    OpenLogFile(): void;
    OpenLogsFolder(): void;
    OpenProfilesFolder(): void;
    SetActiveContext(context: LogContext): void;


}
    
interface DevConsoleMonoConstructor {


    new(): DevConsoleMono;



}
declare const DevConsoleMono: DevConsoleMonoConstructor;
    
interface Command {
    readonly Name: string;
    readonly HelpText: string;
    readonly IsCustomCommand: boolean;



    GetAliases(): Readonly<string[]>;
    GetFormattedName(): string;
    GetFormattedParameter(parameterIndex: number): string;
    GetParameters(): Readonly<Parameter[]>;
    ToFormattedString(): string;
    ToString(): string;


}
    
interface Parameter {
    readonly Type: Type;
    readonly FriendlyTypeName: string;
    readonly Name: string;
    readonly HelpText: string;



    ToFormattedString(): string;
    ToString(): string;


}
    
interface ParameterConstructor {




    Create(name: string, helpText: string): Parameter;

}
declare const Parameter: ParameterConstructor;
    
interface CommandConstructor {




    Create(name: string, aliases: string, helpText: string, callback: Action): Command;
    Create<T1>(name: string, aliases: string, helpText: string, p1: Parameter, callback: Action<T1>, defaultCallback: Action): Command;
    Create<T1, T2>(name: string, aliases: string, helpText: string, p1: Parameter, p2: Parameter, callback: Action<T1, T2>, defaultCallback: Action): Command;
    Create<T1, T2, T3>(name: string, aliases: string, helpText: string, p1: Parameter, p2: Parameter, p3: Parameter, callback: Action<T1, T2, T3>, defaultCallback: Action): Command;
    Create<T1, T2, T3, T4>(name: string, aliases: string, helpText: string, p1: Parameter, p2: Parameter, p3: Parameter, p4: Parameter, callback: Action<T1, T2, T3, T4>, defaultCallback: Action): Command;
    Create<T1, T2, T3, T4, T5>(name: string, aliases: string, helpText: string, p1: Parameter, p2: Parameter, p3: Parameter, p4: Parameter, p5: Parameter, callback: Action<T1, T2, T3, T4, T5>, defaultCallback: Action): Command;

}
declare const Command: CommandConstructor;
    
interface DevConsoleConstructor {
    console: DevConsoleMono;
    clearConsoleOnServerConnect: boolean;
    IsEnabled: boolean;
    IsOpen: boolean;
    readonly IsOpenAndFocused: boolean;
    IsKeyBindingsEnabled: boolean;
    ToggleKey?: Key;
    readonly AverageFps: number;
    readonly AverageMs: number;




    AddCommand(command: Command, onlyInDevBuild: boolean): boolean;
    AddParameterType<T>(parseFunc: Func<string, T>): boolean;
    ClearActiveConsoleContext(): void;
    ClearConsole(): void;
    CloseConsole(): void;
    DisableConsole(): void;
    DisableToggleKey(): void;
    EnableConsole(): void;
    GetCommand(name: string): Command;
    InvokeCoroutine(enumerator: IEnumerator): Coroutine;
    InvokeDelayed(action: Action, delay: number): Coroutine;
    Log(message: unknown, context: LogContext, prepend: boolean): void;
    Log(message: unknown, colour: Color, context: LogContext, prepend: boolean): void;
    LogCollection<T>(collection: Readonly<T[]>, toString: Func<T, string>, prefix: string, suffix: string): void;
    LogCommand(): void;
    LogCommand(name: string): void;
    LogError(message: unknown, context: LogContext, prepend: boolean): void;
    LogException(exception: Exception, context: LogContext, prepend: boolean): void;
    LogSeperator(message: unknown): void;
    LogSuccess(message: unknown, context: LogContext): void;
    LogVariable(variableName: string, value: unknown, suffix: string): void;
    LogWarning(message: unknown, context: LogContext, prepend: boolean): void;
    OpenConsole(): void;
    RemoveCommand(name: string): boolean;
    RemoveTrackedStat(name: string): boolean;
    RunCommand(input: string): boolean;
    SetToggleKey(toggleKey: Nullable<Key>): void;
    SetTrackedStat(name: string, func: Func<unknown>, startEnabled: boolean): void;

    readonly OnConsoleEnabled: MonoSignal<void>;
    readonly OnConsoleDisabled: MonoSignal<void>;
    readonly OnConsoleOpened: MonoSignal<boolean>;
    readonly OnConsoleClosed: MonoSignal<boolean>;
    readonly OnConsoleFocused: MonoSignal<void>;
    readonly OnConsoleFocusLost: MonoSignal<void>;
}
declare const DevConsole: DevConsoleConstructor;
    
interface EasyShake extends MonoBehaviour {
    shakeDuration: number;
    shakeOnEnable: boolean;
    destroyComponentOnEnd: boolean;
    movementLerpMod: number;
    movementsPerSecond: number;
    minimizeShakeOverTime: boolean;
    maxPositionOffset: Vector3;
    maxRotationOffsetAngles: Vector3;



    GetRandomVector3(maxRange: Vector3): Vector3;
    SetStartingPosRot(localPosition: Vector3, localRotation: Quaternion): void;
    Shake(duration: number): void;
    ShakeForever(): void;
    StopShake(): void;


}
    
interface EasyShakeConstructor {


    new(): EasyShake;



}
declare const EasyShake: EasyShakeConstructor;
    
interface EasyMotion extends MonoBehaviour {
    refreshMode: EngineRunMode;
    transformSpace: Space;
    translate: boolean;
    translationSpeed: Vector3;
    rotate: boolean;
    angularRotationSpeed: Vector3;
    scale: boolean;
    scaleSpeed: Vector3;
    sineMotion: boolean;
    sineMod: number;
    sineOffset: number;
    randomizeOffset: boolean;





}
    
interface EasyMotionConstructor {


    new(): EasyMotion;



}
declare const EasyMotion: EasyMotionConstructor;
    
interface CloudImage extends MonoBehaviour {
    url: string;
    image: Image;
    downloadOnStart: boolean;
    releaseImageOnDisable: boolean;
    hideErrors: boolean;
    readonly loadedUrl: string;

    readonly OnFinishedLoading: MonoSignal<unknown>;


    ReleaseImage(notifyCache: boolean): void;
    StartDownload(): void;


}
    
interface CloudImageConstructor {


    new(): CloudImage;


    CleanseCache(): void;
    ClearCache(): void;
    PrintCache(): void;

}
declare const CloudImage: CloudImageConstructor;
    
interface AccessoryOutfit extends ScriptableObject {
    accessories: Readonly<AccessoryComponent[]>;
    faceDecal: AccessoryFace;
    forceSkinColor: boolean;
    skinColor: Color;





}
    
interface AccessoryComponent extends MonoBehaviour {
    accessorySlot: AccessorySlot;
    visibilityMode: VisibilityMode;
    skinnedToCharacter: boolean;
    meshLods: Readonly<Mesh[]>;
    bodyMask: number;
    serverClassId: string;
    serverClassIdStaging: string;
    localPosition: Vector3;
    localRotation: Quaternion;
    localScale: Vector3;



    Copy(other: AccessoryComponent): void;
    GetServerClassId(): string;
    GetServerInstanceId(): string;
    GetSlotNumber(): number;
    HasFlag(flag: BodyMask): boolean;
    SetInstanceId(id: string): void;


}
    
interface BodyMaskInspectorData {
    name: string;
    bodyMask: BodyMask;





}
    
interface BodyMaskInspectorDataConstructor {


    new(mask: BodyMask, name: string): BodyMaskInspectorData;



}
declare const BodyMaskInspectorData: BodyMaskInspectorDataConstructor;
    
interface AccessoryComponentConstructor {
    BodyMaskInspectorDatas: Readonly<BodyMaskInspectorData[]>;


    new(): AccessoryComponent;


    GetBodyMaskName(bit: number): string;

}
declare const AccessoryComponent: AccessoryComponentConstructor;
    
interface AccessoryFace extends ScriptableObject {
    serverClassId: string;
    serverClassIdStaging: string;
    serverInstanceId: string;
    decalTexture: Texture2D;



    GetServerClassId(): string;


}
    
interface AccessoryFaceConstructor {


    new(): AccessoryFace;



}
declare const AccessoryFace: AccessoryFaceConstructor;
    
interface AccessoryOutfitConstructor {


    new(): AccessoryOutfit;



}
declare const AccessoryOutfit: AccessoryOutfitConstructor;
    
interface LineRenderer extends Renderer {
    /**
     * Set the width at the start of the line.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-startWidth.html | LineRenderer.startWidth}
     */
    startWidth: number;
    /**
     * Set the width at the end of the line.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-endWidth.html | LineRenderer.endWidth}
     */
    endWidth: number;
    /**
     * Set an overall multiplier that is applied to the LineRenderer.widthCurve to get the final width of the line.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-widthMultiplier.html | LineRenderer.widthMultiplier}
     */
    widthMultiplier: number;
    /**
     * Set this to a value greater than 0, to get rounded corners between each segment of the line.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-numCornerVertices.html | LineRenderer.numCornerVertices}
     */
    numCornerVertices: number;
    /**
     * Set this to a value greater than 0, to get rounded corners on each end of the line. The default is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-numCapVertices.html | LineRenderer.numCapVertices}
     */
    numCapVertices: number;
    /**
     * If enabled, the lines are defined in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-useWorldSpace.html | LineRenderer.useWorldSpace}
     */
    useWorldSpace: boolean;
    /**
     * Connect the start and end positions of the line together to form a continuous loop.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-loop.html | LineRenderer.loop}
     */
    loop: boolean;
    /**
     * Set the color at the start of the line.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-startColor.html | LineRenderer.startColor}
     */
    startColor: Color;
    /**
     * Set the color at the end of the line.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-endColor.html | LineRenderer.endColor}
     */
    endColor: Color;
    /**
     * Set/get the number of vertices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-positionCount.html | LineRenderer.positionCount}
     */
    positionCount: number;
    /**
     * A multiplier for the UV coordinates of the line texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-textureScale.html | LineRenderer.textureScale}
     */
    textureScale: Vector2;
    /**
     * Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the line width at each segment.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-shadowBias.html | LineRenderer.shadowBias}
     */
    shadowBias: number;
    /**
     * Configures a line to generate Normals and Tangents. With this data, Scene lighting can affect the line via Normal Maps and the Unity Standard Shader, or your own custom-built Shaders.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-generateLightingData.html | LineRenderer.generateLightingData}
     */
    generateLightingData: boolean;
    /**
     * Choose whether the U coordinate of the line texture is tiled or stretched.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-textureMode.html | LineRenderer.textureMode}
     */
    textureMode: LineTextureMode;
    /**
     * Select whether the line will face the camera, or the orientation of the Transform Component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-alignment.html | LineRenderer.alignment}
     */
    alignment: LineAlignment;
    /**
     * Specifies how the LineRenderer interacts with SpriteMask.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-maskInteraction.html | LineRenderer.maskInteraction}
     */
    maskInteraction: SpriteMaskInteraction;
    /**
     * Set the curve describing the width of the line at various points along its length.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-widthCurve.html | LineRenderer.widthCurve}
     */
    widthCurve: AnimationCurve;
    /**
     * Set the color gradient describing the color of the line at various points along its length.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer-colorGradient.html | LineRenderer.colorGradient}
     */
    colorGradient: Gradient;



    /**
     * Creates a snapshot of LineRenderer and stores it in mesh.
     * @param mesh A static mesh that will receive the snapshot of the line.
     * @param useTransform Include the rotation and scale of the Transform in the baked mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer.BakeMesh.html | LineRenderer.BakeMesh}
     */
    BakeMesh(mesh: Mesh, useTransform: boolean): void;
    /**
     * Creates a snapshot of LineRenderer and stores it in mesh.
     * @param mesh A static mesh that will receive the snapshot of the line.
     * @param camera The camera used for determining which way camera-space lines will face.
     * @param useTransform Include the rotation and scale of the Transform in the baked mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer.BakeMesh.html | LineRenderer.BakeMesh}
     */
    BakeMesh(mesh: Mesh, camera: Camera, useTransform: boolean): void;
    /**
     * Get the position of a vertex in the line.
     * @param index The index of the position to retrieve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer.GetPosition.html | LineRenderer.GetPosition}
     */
    GetPosition(index: number): Vector3;
    /**
     * Set the position of a vertex in the line.
     * @param index Which position to set.
     * @param position The new position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer.SetPosition.html | LineRenderer.SetPosition}
     */
    SetPosition(index: number, position: Vector3): void;
    /**
     * Set the positions of all vertices in the line.
     * @param positions The array of positions to set.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer.SetPositions.html | LineRenderer.SetPositions}
     */
    SetPositions(positions: Readonly<Vector3[]>): void;
    SetPositions(positions: Readonly<Vector3[]>): void;
    SetPositions(positions: Readonly<Vector3[]>): void;
    /**
     * Generates a simplified version of the original line by removing points that fall within the specified tolerance.
     * @param tolerance This value is used to evaluate which points should be removed from the line. A higher value results in a simpler line (less points). A positive value close to zero results in a line with little to no reduction. A value of zero or less has no effect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LineRenderer.Simplify.html | LineRenderer.Simplify}
     */
    Simplify(tolerance: number): void;


}
    
interface LineRendererConstructor {


    new(): LineRenderer;



}
declare const LineRenderer: LineRendererConstructor;
    
interface AirshipRedirectScroll extends MonoBehaviour, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerEnterHandler, IPointerExitHandler {
    isDragging: boolean;
    redirectTarget: ScrollRect;
    ignoreDrag: boolean;



    OnBeginDrag(eventData: PointerEventData): void;
    OnDrag(eventData: PointerEventData): void;
    OnEndDrag(eventData: PointerEventData): void;
    OnPointerEnter(eventData: PointerEventData): void;
    OnPointerExit(eventData: PointerEventData): void;


}
    
interface AirshipRedirectScrollConstructor {


    new(): AirshipRedirectScroll;



}
declare const AirshipRedirectScroll: AirshipRedirectScrollConstructor;
    
interface IMeshModifier {



    ModifyMesh(verts: VertexHelper): void;


}
    
interface VertexHelper {
    readonly currentVertCount: number;
    readonly currentIndexCount: number;



    AddTriangle(idx0: number, idx1: number, idx2: number): void;
    AddUIVertexQuad(verts: Readonly<UIVertex[]>): void;
    AddUIVertexStream(verts: Readonly<UIVertex[]>, indices: Readonly<number[]>): void;
    AddUIVertexTriangleStream(verts: Readonly<UIVertex[]>): void;
    AddVert(position: Vector3, color: Color32, uv0: Vector4, uv1: Vector4, uv2: Vector4, uv3: Vector4, normal: Vector3, tangent: Vector4): void;
    AddVert(position: Vector3, color: Color32, uv0: Vector4, uv1: Vector4, normal: Vector3, tangent: Vector4): void;
    AddVert(position: Vector3, color: Color32, uv0: Vector4): void;
    AddVert(v: UIVertex): void;
    Clear(): void;
    Dispose(): void;
    FillMesh(mesh: Mesh): void;
    GetUIVertexStream(stream: Readonly<UIVertex[]>): void;
    PopulateUIVertex(vertex: UIVertex, i: number): void;
    SetUIVertex(vertex: UIVertex, i: number): void;


}
    
interface VertexHelperConstructor {


    new(): VertexHelper;
    new(m: Mesh): VertexHelper;



}
declare const VertexHelper: VertexHelperConstructor;
    
interface TrueShadow extends UIBehaviour, IMeshModifier, ICanvasElement {
    Size: number;
    Spread: number;
    UseGlobalAngle: boolean;
    OffsetAngle: number;
    OffsetDistance: number;
    Color: Color;
    UseCasterAlpha: boolean;
    IgnoreCasterColor: boolean;
    Inset: boolean;
    BlendMode: BlendMode;
    ColorBleedMode: ColorBleedMode;
    DisableFitCompensation: boolean;
    readonly ClearColor: Color;
    ShadowAsSibling: boolean;
    CustomHash: number;
    readonly Offset: Vector2;
    Cutout: boolean;
    readonly UsingRendererMaterialProvider: boolean;



    ApplySerializedData(): void;
    CopyTo(other: TrueShadow): void;
    CopyTo(other: GameObject): void;
    CopyToTMPSubMeshes(): void;
    GetShadowCastingMaterial(): Material;
    GetShadowRenderingMaterial(): Material;
    GraphicUpdateComplete(): void;
    LayoutComplete(): void;
    ModifyMesh(mesh: Mesh): void;
    ModifyMesh(verts: VertexHelper): void;
    ModifyShadowCastingMaterialProperties(propertyBlock: MaterialPropertyBlock): void;
    ModifyShadowCastingMesh(mesh: Mesh): void;
    ModifyShadowRendererMaterial(baseMaterial: Material): void;
    ModifyShadowRendererMesh(vertexHelper: VertexHelper): void;
    Rebuild(executing: CanvasUpdate): void;
    RefreshPlugins(): void;
    SetHierachyDirty(): void;
    SetLayoutDirty(): void;
    SetTextureDirty(): void;


}
    
interface TrueShadowConstructor {


    new(): TrueShadow;



}
declare const TrueShadow: TrueShadowConstructor;
    
interface ScalableBufferManager {





}
    
interface ScalableBufferManagerConstructor {
    /**
     * Width scale factor to control dynamic resolution.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ScalableBufferManager-widthScaleFactor.html | ScalableBufferManager.widthScaleFactor}
     */
    readonly widthScaleFactor: number;
    /**
     * Height scale factor to control dynamic resolution.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ScalableBufferManager-heightScaleFactor.html | ScalableBufferManager.heightScaleFactor}
     */
    readonly heightScaleFactor: number;




    ResizeBuffers(widthScale: number, heightScale: number): void;

}
declare const ScalableBufferManager: ScalableBufferManagerConstructor;
    
interface AirshipPlatformUtil {





}
    
interface AirshipPlatformUtilConstructor {
    livePlatforms: Readonly<number[]>;


    new(): AirshipPlatformUtil;


    FromBuildTarget(buildTarget: BuildTarget): AirshipPlatform;
    FromRuntimePlatform(runtimePlatform: RuntimePlatform): AirshipPlatform;
    GetLocalPlatform(): AirshipPlatform;
    GetStringName(platform: AirshipPlatform): string;
    IsDeviceSimulator(): boolean;
    ToBuildTarget(platform: AirshipPlatform): BuildTarget;

}
declare const AirshipPlatformUtil: AirshipPlatformUtilConstructor;
    
interface CharacterRig extends MonoBehaviour {
    bodyMesh: SkinnedMeshRenderer;
    armsMesh: SkinnedMeshRenderer;
    headMesh: SkinnedMeshRenderer;
    faceMesh: Renderer;
    viewmodelArmsMesh: SkinnedMeshRenderer;
    bodyMeshLOD: Readonly<SkinnedMeshRenderer[]>;
    armsMeshLOD: Readonly<SkinnedMeshRenderer[]>;
    headMeshLOD: Readonly<SkinnedMeshRenderer[]>;
    rigHolder: Transform;
    rootMotion: Transform;
    master: Transform;
    hips: Transform;
    spine: Transform;
    head: Transform;
    upperArmL: Transform;
    forearmL: Transform;
    handL: Transform;
    fingersL: Transform;
    thumbL: Transform;
    upperArmR: Transform;
    forearmR: Transform;
    handR: Transform;
    fingersR: Transform;
    thumbR: Transform;
    thighL: Transform;
    shinL: Transform;
    footL: Transform;
    thighR: Transform;
    shinR: Transform;
    footR: Transform;
    headTop: Transform;
    neck: Transform;
    spineChest: Transform;
    chestBack: Transform;
    chestFront: Transform;
    heldItemL: Transform;
    heldItemR: Transform;
    shoulderItemL: Transform;
    shoulderItemR: Transform;
    headColor: MaterialColorURP;
    bodyColor: MaterialColorURP;
    armsColor: MaterialColorURP;
    viewmodelArmsColor: MaterialColorURP;
    baseMeshes: Readonly<Renderer[]>;



    GetSlotTransform(slot: AccessorySlot): Transform;


}
    
interface CharacterRigConstructor {


    new(): CharacterRig;



}
declare const CharacterRig: CharacterRigConstructor;
    
interface AvatarAccessoryCollection extends ScriptableObject {
    accessories: Readonly<AccessoryComponent[]>;
    faces: Readonly<AccessoryFace[]>;
    skinColors: Readonly<Color[]>;





}
    
interface AvatarAccessoryCollectionConstructor {


    new(): AvatarAccessoryCollection;



}
declare const AvatarAccessoryCollection: AvatarAccessoryCollectionConstructor;
    
interface SystemInfo {





}
    
interface SystemInfoConstructor {
    unsupportedIdentifier: string;
    /**
     * The current battery level (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-batteryLevel.html | SystemInfo.batteryLevel}
     */
    readonly batteryLevel: number;
    /**
     * Returns the current status of the device's battery (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-batteryStatus.html | SystemInfo.batteryStatus}
     */
    readonly batteryStatus: BatteryStatus;
    /**
     * Operating system name with version (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-operatingSystem.html | SystemInfo.operatingSystem}
     */
    readonly operatingSystem: string;
    /**
     * Returns the operating system family the game is running on (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-operatingSystemFamily.html | SystemInfo.operatingSystemFamily}
     */
    readonly operatingSystemFamily: OperatingSystemFamily;
    /**
     * Processor name (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-processorType.html | SystemInfo.processorType}
     */
    readonly processorType: string;
    /**
     * Specifies the model name of the processor in the user's device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-processorModel.html | SystemInfo.processorModel}
     */
    readonly processorModel: string;
    /**
     * Specifies the manufacturer name of the processor in the user's device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-processorManufacturer.html | SystemInfo.processorManufacturer}
     */
    readonly processorManufacturer: string;
    /**
     * The processor frequency of the device in MHz (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-processorFrequency.html | SystemInfo.processorFrequency}
     */
    readonly processorFrequency: number;
    /**
     * Number of processors present (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-processorCount.html | SystemInfo.processorCount}
     */
    readonly processorCount: number;
    /**
     * Amount of system memory present (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-systemMemorySize.html | SystemInfo.systemMemorySize}
     */
    readonly systemMemorySize: number;
    /**
     * A unique device identifier. It's guaranteed to be unique for every device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-deviceUniqueIdentifier.html | SystemInfo.deviceUniqueIdentifier}
     */
    readonly deviceUniqueIdentifier: string;
    /**
     * The user defined name of the device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-deviceName.html | SystemInfo.deviceName}
     */
    readonly deviceName: string;
    /**
     * The model of the device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-deviceModel.html | SystemInfo.deviceModel}
     */
    readonly deviceModel: string;
    /**
     * Is an accelerometer available on the device?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsAccelerometer.html | SystemInfo.supportsAccelerometer}
     */
    readonly supportsAccelerometer: boolean;
    /**
     * Is a gyroscope available on the device?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsGyroscope.html | SystemInfo.supportsGyroscope}
     */
    readonly supportsGyroscope: boolean;
    /**
     * Is the device capable of reporting its location?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsLocationService.html | SystemInfo.supportsLocationService}
     */
    readonly supportsLocationService: boolean;
    /**
     * Is the device capable of providing the user haptic feedback by vibration?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsVibration.html | SystemInfo.supportsVibration}
     */
    readonly supportsVibration: boolean;
    /**
     * Is there an Audio device available for playback? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsAudio.html | SystemInfo.supportsAudio}
     */
    readonly supportsAudio: boolean;
    /**
     * Returns the kind of device the application is running on (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-deviceType.html | SystemInfo.deviceType}
     */
    readonly deviceType: DeviceType;
    /**
     * Amount of video memory present (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-graphicsMemorySize.html | SystemInfo.graphicsMemorySize}
     */
    readonly graphicsMemorySize: number;
    /**
     * The name of the graphics device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-graphicsDeviceName.html | SystemInfo.graphicsDeviceName}
     */
    readonly graphicsDeviceName: string;
    /**
     * The vendor of the graphics device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-graphicsDeviceVendor.html | SystemInfo.graphicsDeviceVendor}
     */
    readonly graphicsDeviceVendor: string;
    /**
     * The identifier code of the graphics device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-graphicsDeviceID.html | SystemInfo.graphicsDeviceID}
     */
    readonly graphicsDeviceID: number;
    /**
     * The identifier code of the graphics device vendor (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-graphicsDeviceVendorID.html | SystemInfo.graphicsDeviceVendorID}
     */
    readonly graphicsDeviceVendorID: number;
    /**
     * The graphics API type used by the graphics device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-graphicsDeviceType.html | SystemInfo.graphicsDeviceType}
     */
    readonly graphicsDeviceType: GraphicsDeviceType;
    /**
     * Returns true if the texture UV coordinate convention for this platform has Y starting at the top of the image.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-graphicsUVStartsAtTop.html | SystemInfo.graphicsUVStartsAtTop}
     */
    readonly graphicsUVStartsAtTop: boolean;
    /**
     * The graphics API type and driver version used by the graphics device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-graphicsDeviceVersion.html | SystemInfo.graphicsDeviceVersion}
     */
    readonly graphicsDeviceVersion: string;
    /**
     * Graphics device shader capability level (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-graphicsShaderLevel.html | SystemInfo.graphicsShaderLevel}
     */
    readonly graphicsShaderLevel: number;
    /**
     * Is graphics device using multi-threaded rendering (Read Only)?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-graphicsMultiThreaded.html | SystemInfo.graphicsMultiThreaded}
     */
    readonly graphicsMultiThreaded: boolean;
    /**
     * Application's actual rendering threading mode (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-renderingThreadingMode.html | SystemInfo.renderingThreadingMode}
     */
    readonly renderingThreadingMode: RenderingThreadingMode;
    /**
     * The foveated rendering technique supported on this platform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-foveatedRenderingCaps.html | SystemInfo.foveatedRenderingCaps}
     */
    readonly foveatedRenderingCaps: FoveatedRenderingCaps;
    /**
     * True if the GPU supports hidden surface removal.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-hasHiddenSurfaceRemovalOnGPU.html | SystemInfo.hasHiddenSurfaceRemovalOnGPU}
     */
    readonly hasHiddenSurfaceRemovalOnGPU: boolean;
    /**
     * Returns true when the GPU has native support for indexing uniform arrays in fragment shaders without restrictions.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-hasDynamicUniformArrayIndexingInFragmentShaders.html | SystemInfo.hasDynamicUniformArrayIndexingInFragmentShaders}
     */
    readonly hasDynamicUniformArrayIndexingInFragmentShaders: boolean;
    /**
     * Are built-in shadows supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsShadows.html | SystemInfo.supportsShadows}
     */
    readonly supportsShadows: boolean;
    /**
     * Is sampling raw depth from shadowmaps supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsRawShadowDepthSampling.html | SystemInfo.supportsRawShadowDepthSampling}
     */
    readonly supportsRawShadowDepthSampling: boolean;
    /**
     * Whether motion vectors are supported on this platform.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsMotionVectors.html | SystemInfo.supportsMotionVectors}
     */
    readonly supportsMotionVectors: boolean;
    /**
     * Are 3D (volume) textures supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supports3DTextures.html | SystemInfo.supports3DTextures}
     */
    readonly supports3DTextures: boolean;
    /**
     * Are compressed formats for 3D (volume) textures supported? (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsCompressed3DTextures.html | SystemInfo.supportsCompressed3DTextures}
     */
    readonly supportsCompressed3DTextures: boolean;
    /**
     * Are 2D Array textures supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supports2DArrayTextures.html | SystemInfo.supports2DArrayTextures}
     */
    readonly supports2DArrayTextures: boolean;
    /**
     * Are 3D (volume) RenderTextures supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supports3DRenderTextures.html | SystemInfo.supports3DRenderTextures}
     */
    readonly supports3DRenderTextures: boolean;
    /**
     * Are Cubemap Array textures supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsCubemapArrayTextures.html | SystemInfo.supportsCubemapArrayTextures}
     */
    readonly supportsCubemapArrayTextures: boolean;
    /**
     * Returns true when anisotropic filtering is supported on the device.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsAnisotropicFilter.html | SystemInfo.supportsAnisotropicFilter}
     */
    readonly supportsAnisotropicFilter: boolean;
    /**
     * Support for various Graphics.CopyTexture cases (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-copyTextureSupport.html | SystemInfo.copyTextureSupport}
     */
    readonly copyTextureSupport: CopyTextureSupport;
    /**
     * Are compute shaders supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsComputeShaders.html | SystemInfo.supportsComputeShaders}
     */
    readonly supportsComputeShaders: boolean;
    /**
     * Are geometry shaders supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsGeometryShaders.html | SystemInfo.supportsGeometryShaders}
     */
    readonly supportsGeometryShaders: boolean;
    /**
     * Are tessellation shaders supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsTessellationShaders.html | SystemInfo.supportsTessellationShaders}
     */
    readonly supportsTessellationShaders: boolean;
    /**
     * Boolean that indicates if SV_RenderTargetArrayIndex can be used in a vertex shader (true if it can be used, false if not).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsRenderTargetArrayIndexFromVertexShader.html | SystemInfo.supportsRenderTargetArrayIndexFromVertexShader}
     */
    readonly supportsRenderTargetArrayIndexFromVertexShader: boolean;
    /**
     * Is GPU draw call instancing supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsInstancing.html | SystemInfo.supportsInstancing}
     */
    readonly supportsInstancing: boolean;
    /**
     * Does the hardware support quad topology? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsHardwareQuadTopology.html | SystemInfo.supportsHardwareQuadTopology}
     */
    readonly supportsHardwareQuadTopology: boolean;
    /**
     * Are 32-bit index buffers supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supports32bitsIndexBuffer.html | SystemInfo.supports32bitsIndexBuffer}
     */
    readonly supports32bitsIndexBuffer: boolean;
    /**
     * Are sparse textures supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsSparseTextures.html | SystemInfo.supportsSparseTextures}
     */
    readonly supportsSparseTextures: boolean;
    /**
     * How many simultaneous render targets (MRTs) are supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportedRenderTargetCount.html | SystemInfo.supportedRenderTargetCount}
     */
    readonly supportedRenderTargetCount: number;
    /**
     * Returns true when the platform supports different blend modes when rendering to multiple render targets, or false otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsSeparatedRenderTargetsBlend.html | SystemInfo.supportsSeparatedRenderTargetsBlend}
     */
    readonly supportsSeparatedRenderTargetsBlend: boolean;
    /**
     * The maximum number of random write targets (UAV) that Unity supports simultaneously. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportedRandomWriteTargetCount.html | SystemInfo.supportedRandomWriteTargetCount}
     */
    readonly supportedRandomWriteTargetCount: number;
    /**
     * Returns a value of 1 or higher if multisampled textures are supported. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsMultisampledTextures.html | SystemInfo.supportsMultisampledTextures}
     */
    readonly supportsMultisampledTextures: number;
    /**
     * Boolean that indicates whether multisampled texture arrays are supported (true if supported, false if not supported).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsMultisampled2DArrayTextures.html | SystemInfo.supportsMultisampled2DArrayTextures}
     */
    readonly supportsMultisampled2DArrayTextures: boolean;
    /**
     * A boolean property that indicates whether multi-sampled back buffer is supported (true if supported, false if not supported).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsMultisampledBackBuffer.html | SystemInfo.supportsMultisampledBackBuffer}
     */
    readonly supportsMultisampledBackBuffer: boolean;
    /**
     * Returns true if multisampled textures are resolved automatically
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsMultisampleAutoResolve.html | SystemInfo.supportsMultisampleAutoResolve}
     */
    readonly supportsMultisampleAutoResolve: boolean;
    /**
     * Returns a value of 1 or higher if the 'Mirror Once' texture wrap mode is supported. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsTextureWrapMirrorOnce.html | SystemInfo.supportsTextureWrapMirrorOnce}
     */
    readonly supportsTextureWrapMirrorOnce: number;
    /**
     * This property is true if the current platform uses a reversed depth buffer (where values range from 1 at the near plane and 0 at far plane), and false if the depth buffer is normal (0 is near, 1 is far). (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-usesReversedZBuffer.html | SystemInfo.usesReversedZBuffer}
     */
    readonly usesReversedZBuffer: boolean;
    /**
     * What NPOT (non-power of two size) texture support does the GPU provide? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-npotSupport.html | SystemInfo.npotSupport}
     */
    readonly npotSupport: NPOTSupport;
    /**
     * Maximum texture size in pixels (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxTextureSize.html | SystemInfo.maxTextureSize}
     */
    readonly maxTextureSize: number;
    /**
     * Maximum 3D texture size in pixels (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxTexture3DSize.html | SystemInfo.maxTexture3DSize}
     */
    readonly maxTexture3DSize: number;
    /**
     * Maximum number of slices in a Texture array (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxTextureArraySlices.html | SystemInfo.maxTextureArraySlices}
     */
    readonly maxTextureArraySlices: number;
    /**
     * Maximum cubemap texture size in pixels (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxCubemapSize.html | SystemInfo.maxCubemapSize}
     */
    readonly maxCubemapSize: number;
    /**
     * Returns the maximum anisotropic level for anisotropic filtering that is supported on the device.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxAnisotropyLevel.html | SystemInfo.maxAnisotropyLevel}
     */
    readonly maxAnisotropyLevel: number;
    /**
     * Determines how many compute buffers Unity supports simultaneously in a vertex shader for reading. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxComputeBufferInputsVertex.html | SystemInfo.maxComputeBufferInputsVertex}
     */
    readonly maxComputeBufferInputsVertex: number;
    /**
     * Determines how many compute buffers Unity supports simultaneously in a fragment shader for reading. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxComputeBufferInputsFragment.html | SystemInfo.maxComputeBufferInputsFragment}
     */
    readonly maxComputeBufferInputsFragment: number;
    /**
     * Determines how many compute buffers Unity supports simultaneously in a geometry shader for reading. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxComputeBufferInputsGeometry.html | SystemInfo.maxComputeBufferInputsGeometry}
     */
    readonly maxComputeBufferInputsGeometry: number;
    /**
     * Determines how many compute buffers Unity supports simultaneously in a domain shader for reading. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxComputeBufferInputsDomain.html | SystemInfo.maxComputeBufferInputsDomain}
     */
    readonly maxComputeBufferInputsDomain: number;
    /**
     * Determines how many compute buffers Unity supports simultaneously in a hull shader for reading. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxComputeBufferInputsHull.html | SystemInfo.maxComputeBufferInputsHull}
     */
    readonly maxComputeBufferInputsHull: number;
    /**
     * Determines how many compute buffers Unity supports simultaneously in a compute shader for reading. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxComputeBufferInputsCompute.html | SystemInfo.maxComputeBufferInputsCompute}
     */
    readonly maxComputeBufferInputsCompute: number;
    /**
     * The largest total number of invocations in a single local work group that can be dispatched to a compute shader (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxComputeWorkGroupSize.html | SystemInfo.maxComputeWorkGroupSize}
     */
    readonly maxComputeWorkGroupSize: number;
    /**
     * The maximum number of work groups that a compute shader can use in X dimension (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxComputeWorkGroupSizeX.html | SystemInfo.maxComputeWorkGroupSizeX}
     */
    readonly maxComputeWorkGroupSizeX: number;
    /**
     * The maximum number of work groups that a compute shader can use in Y dimension (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxComputeWorkGroupSizeY.html | SystemInfo.maxComputeWorkGroupSizeY}
     */
    readonly maxComputeWorkGroupSizeY: number;
    /**
     * The maximum number of work groups that a compute shader can use in Z dimension (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxComputeWorkGroupSizeZ.html | SystemInfo.maxComputeWorkGroupSizeZ}
     */
    readonly maxComputeWorkGroupSizeZ: number;
    /**
     * Size of the compute thread group that supports efficient memory sharing on the GPU (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-computeSubGroupSize.html | SystemInfo.computeSubGroupSize}
     */
    readonly computeSubGroupSize: number;
    /**
     * Returns true when the platform supports asynchronous compute queues and false if otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsAsyncCompute.html | SystemInfo.supportsAsyncCompute}
     */
    readonly supportsAsyncCompute: boolean;
    /**
     * Specifies whether the current platform supports the GPU Recorder or not. (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsGpuRecorder.html | SystemInfo.supportsGpuRecorder}
     */
    readonly supportsGpuRecorder: boolean;
    /**
     * true if the platform supports GraphicsFences, otherwise false.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsGraphicsFence.html | SystemInfo.supportsGraphicsFence}
     */
    readonly supportsGraphicsFence: boolean;
    /**
     * Returns true if asynchronous readback of GPU data is available for this device and false otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsAsyncGPUReadback.html | SystemInfo.supportsAsyncGPUReadback}
     */
    readonly supportsAsyncGPUReadback: boolean;
    /**
     * Returns true if parallel PSO creation is available for this device and false otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsParallelPSOCreation.html | SystemInfo.supportsParallelPSOCreation}
     */
    readonly supportsParallelPSOCreation: boolean;
    /**
     * Checks if ray tracing shaders are supported by the current system configuration. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsRayTracingShaders.html | SystemInfo.supportsRayTracingShaders}
     */
    readonly supportsRayTracingShaders: boolean;
    /**
     * Checks if any ray tracing features are supported by the current system configuration. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsRayTracing.html | SystemInfo.supportsRayTracing}
     */
    readonly supportsRayTracing: boolean;
    /**
     * Is inline ray tracing (ray query) supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsInlineRayTracing.html | SystemInfo.supportsInlineRayTracing}
     */
    readonly supportsInlineRayTracing: boolean;
    /**
     * Returns true if the graphics system supports indirect ray tracing dispatch. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsIndirectDispatchRays.html | SystemInfo.supportsIndirectDispatchRays}
     */
    readonly supportsIndirectDispatchRays: boolean;
    /**
     * Does the current renderer support binding constant buffers directly? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsSetConstantBuffer.html | SystemInfo.supportsSetConstantBuffer}
     */
    readonly supportsSetConstantBuffer: boolean;
    /**
     * Minimum buffer offset (in bytes) when binding a constant buffer using Shader.SetConstantBuffer or Material.SetConstantBuffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-constantBufferOffsetAlignment.html | SystemInfo.constantBufferOffsetAlignment}
     */
    readonly constantBufferOffsetAlignment: number;
    /**
     * The maximum size of a constant buffer binding (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxConstantBufferSize.html | SystemInfo.maxConstantBufferSize}
     */
    readonly maxConstantBufferSize: number;
    /**
     * The maximum size of a graphics buffer (GraphicsBuffer, ComputeBuffer, vertex/index buffer, etc.) in bytes (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-maxGraphicsBufferSize.html | SystemInfo.maxGraphicsBufferSize}
     */
    readonly maxGraphicsBufferSize: number;
    /**
     * Returns true if the GPU supports partial mipmap chains (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-hasMipMaxLevel.html | SystemInfo.hasMipMaxLevel}
     */
    readonly hasMipMaxLevel: boolean;
    /**
     * Is streaming of texture mip maps supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsMipStreaming.html | SystemInfo.supportsMipStreaming}
     */
    readonly supportsMipStreaming: boolean;
    /**
     * True if the Graphics API takes RenderBufferLoadAction and RenderBufferStoreAction into account, false if otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-usesLoadStoreActions.html | SystemInfo.usesLoadStoreActions}
     */
    readonly usesLoadStoreActions: boolean;
    /**
     * Returns a bitwise combination of HDRDisplaySupportFlags describing the support for HDR displays on the system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-hdrDisplaySupportFlags.html | SystemInfo.hdrDisplaySupportFlags}
     */
    readonly hdrDisplaySupportFlags: HDRDisplaySupportFlags;
    /**
     * Is conservative rasterization supported? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsConservativeRaster.html | SystemInfo.supportsConservativeRaster}
     */
    readonly supportsConservativeRaster: boolean;
    /**
     * Boolean that indicates whether Multiview is supported (true if supported, false if not supported). (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsMultiview.html | SystemInfo.supportsMultiview}
     */
    readonly supportsMultiview: boolean;
    /**
     * This property is true if the graphics API of the target build platform takes RenderBufferStoreAction.StoreAndResolve into account, false if otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsStoreAndResolveAction.html | SystemInfo.supportsStoreAndResolveAction}
     */
    readonly supportsStoreAndResolveAction: boolean;
    /**
     * Returns true if the platform supports multisample resolve of depth textures.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsMultisampleResolveDepth.html | SystemInfo.supportsMultisampleResolveDepth}
     */
    readonly supportsMultisampleResolveDepth: boolean;
    /**
     * Returns true if the platform supports multisample resolve of stencil textures. Otherwise, returns false.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsMultisampleResolveStencil.html | SystemInfo.supportsMultisampleResolveStencil}
     */
    readonly supportsMultisampleResolveStencil: boolean;
    /**
     * Returns true if the graphics system supports GPU draw calls with indirect argument buffers. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsIndirectArgumentsBuffer.html | SystemInfo.supportsIndirectArgumentsBuffer}
     */
    readonly supportsIndirectArgumentsBuffer: boolean;
    /**
     * Indicates whether RenderPass can use its depth attachment as input. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SystemInfo-supportsDepthFetchInRenderPass.html | SystemInfo.supportsDepthFetchInRenderPass}
     */
    readonly supportsDepthFetchInRenderPass: boolean;


    new(): SystemInfo;


    GetCompatibleFormat(format: GraphicsFormat, usage: GraphicsFormatUsage): GraphicsFormat;
    GetGraphicsFormat(format: DefaultFormat): GraphicsFormat;
    GetRenderTextureSupportedMSAASampleCount(desc: RenderTextureDescriptor): number;
    IsFormatSupported(format: GraphicsFormat, usage: GraphicsFormatUsage): boolean;
    SupportsBlendingOnRenderTextureFormat(format: RenderTextureFormat): boolean;
    SupportsRandomWriteOnRenderTextureFormat(format: RenderTextureFormat): boolean;
    SupportsRenderTextureFormat(format: RenderTextureFormat): boolean;
    SupportsTextureFormat(format: TextureFormat): boolean;
    SupportsVertexAttributeFormat(format: VertexAttributeFormat, dimension: number): boolean;

}
declare const SystemInfo: SystemInfoConstructor;
    
interface CanvasScaler extends UIBehaviour {
    uiScaleMode: ScaleMode;
    referencePixelsPerUnit: number;
    scaleFactor: number;
    referenceResolution: Vector2;
    screenMatchMode: ScreenMatchMode;
    matchWidthOrHeight: number;
    physicalUnit: Unit;
    fallbackScreenDPI: number;
    defaultSpriteDPI: number;
    dynamicPixelsPerUnit: number;





}
    
interface GridLayoutGroup extends LayoutGroup {
    startCorner: Corner;
    startAxis: Axis;
    cellSize: Vector2;
    spacing: Vector2;
    constraint: Constraint;
    constraintCount: number;



    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;


}
    
interface ILayoutIgnorer {
    readonly ignoreLayout: boolean;





}
    
interface LayoutElement extends UIBehaviour, ILayoutIgnorer, ILayoutElement {
    ignoreLayout: boolean;
    minWidth: number;
    minHeight: number;
    preferredWidth: number;
    preferredHeight: number;
    flexibleWidth: number;
    flexibleHeight: number;
    layoutPriority: number;



    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;


}
    
interface Screen {





}
    
interface Resolution {
    /**
     * Resolution width in pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Resolution-width.html | Resolution.width}
     */
    width: number;
    /**
     * Resolution height in pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Resolution-height.html | Resolution.height}
     */
    height: number;
    /**
     * Resolution's vertical refresh rate in Hz.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Resolution-refreshRateRatio.html | Resolution.refreshRateRatio}
     */
    refreshRateRatio: RefreshRate;



    /**
     * Returns a nicely formatted string of the resolution.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Resolution.ToString.html | Resolution.ToString}
     */
    ToString(): string;


}
    
interface RefreshRate {
    numerator: number;
    denominator: number;
    /**
     * The numerical value of the refresh rate in hertz.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RefreshRate-value.html | RefreshRate.value}
     */
    readonly value: number;



    CompareTo(other: RefreshRate): number;
    Equals(other: RefreshRate): boolean;
    ToString(): string;


}
    
interface DisplayInfo {
    width: number;
    height: number;
    refreshRate: RefreshRate;
    workArea: RectInt;
    name: string;



    Equals(other: DisplayInfo): boolean;


}
    
interface ScreenConstructor {
    /**
     * The current width of the screen window in pixels (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-width.html | Screen.width}
     */
    readonly width: number;
    /**
     * The current height of the screen window in pixels (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-height.html | Screen.height}
     */
    readonly height: number;
    /**
     * The current DPI of the screen / device (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-dpi.html | Screen.dpi}
     */
    readonly dpi: number;
    /**
     * The current screen resolution (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-currentResolution.html | Screen.currentResolution}
     */
    readonly currentResolution: Resolution;
    /**
     * Returns all full-screen resolutions that the monitor supports (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-resolutions.html | Screen.resolutions}
     */
    readonly resolutions: Readonly<Resolution[]>;
    /**
     * Get the requested MSAA sample count of the screen buffer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-msaaSamples.html | Screen.msaaSamples}
     */
    readonly msaaSamples: number;
    /**
     * Enables full-screen mode for the application.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-fullScreen.html | Screen.fullScreen}
     */
    fullScreen: boolean;
    /**
     * Set this property to one of the values in FullScreenMode to change the display mode of your application.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-fullScreenMode.html | Screen.fullScreenMode}
     */
    fullScreenMode: FullScreenMode;
    /**
     * Returns the safe area of the screen in pixels (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-safeArea.html | Screen.safeArea}
     */
    readonly safeArea: Rect;
    /**
     * Returns a list of screen areas that are not functional for displaying content (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-cutouts.html | Screen.cutouts}
     */
    readonly cutouts: Readonly<Rect[]>;
    /**
     * Enables auto-rotation to portrait.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-autorotateToPortrait.html | Screen.autorotateToPortrait}
     */
    autorotateToPortrait: boolean;
    /**
     * Enables auto-rotation to portrait, upside down.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-autorotateToPortraitUpsideDown.html | Screen.autorotateToPortraitUpsideDown}
     */
    autorotateToPortraitUpsideDown: boolean;
    /**
     * Enables auto-rotation to landscape left.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-autorotateToLandscapeLeft.html | Screen.autorotateToLandscapeLeft}
     */
    autorotateToLandscapeLeft: boolean;
    /**
     * Enables auto-rotation to landscape right.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-autorotateToLandscapeRight.html | Screen.autorotateToLandscapeRight}
     */
    autorotateToLandscapeRight: boolean;
    /**
     * Specifies logical orientation of the screen.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-orientation.html | Screen.orientation}
     */
    orientation: ScreenOrientation;
    /**
     * A power saving setting, allowing the screen to dim some time after the last active user interaction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-sleepTimeout.html | Screen.sleepTimeout}
     */
    sleepTimeout: number;
    /**
     * Indicates the current brightness of the screen.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-brightness.html | Screen.brightness}
     */
    brightness: number;
    /**
     * The position of the top left corner of the main window relative to the top left corner of the display.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-mainWindowPosition.html | Screen.mainWindowPosition}
     */
    readonly mainWindowPosition: Vector2Int;
    /**
     * The display information associated with the display that the main application window is on.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Screen-mainWindowDisplayInfo.html | Screen.mainWindowDisplayInfo}
     */
    readonly mainWindowDisplayInfo: DisplayInfo;


    new(): Screen;


    GetDisplayLayout(displayLayout: Readonly<DisplayInfo[]>): void;
    MoveMainWindowTo(display: DisplayInfo, position: Vector2Int): AsyncOperation;
    SetMSAASamples(numSamples: number): void;
    SetResolution(width: number, height: number, fullscreenMode: FullScreenMode, preferredRefreshRate: RefreshRate): void;
    SetResolution(width: number, height: number, fullscreenMode: FullScreenMode): void;
    SetResolution(width: number, height: number, fullscreen: boolean): void;

}
declare const Screen: ScreenConstructor;
    
interface Gizmos {





}
    
interface GizmosConstructor {
    /**
     * Sets the Color of the gizmos that are drawn next.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gizmos-color.html | Gizmos.color}
     */
    color: Color;
    /**
     * Sets the Matrix4x4 that the Unity Editor uses to draw Gizmos.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gizmos-matrix.html | Gizmos.matrix}
     */
    matrix: Matrix4x4;
    /**
     * Set a texture that contains the exposure correction for LightProbe gizmos. The value is sampled from the red channel in the middle of the texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gizmos-exposure.html | Gizmos.exposure}
     */
    exposure: Texture;
    /**
     * Set a scale for Light Probe gizmos. This scale will be used to render the spherical harmonic preview spheres.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Gizmos-probeSize.html | Gizmos.probeSize}
     */
    readonly probeSize: number;


    new(): Gizmos;


    CalculateLOD(position: Vector3, radius: number): number;
    DrawCube(center: Vector3, size: Vector3): void;
    DrawFrustum(center: Vector3, fov: number, maxRange: number, minRange: number, aspect: number): void;
    DrawGUITexture(screenRect: Rect, texture: Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: Material): void;
    DrawGUITexture(screenRect: Rect, texture: Texture): void;
    DrawGUITexture(screenRect: Rect, texture: Texture, mat: Material): void;
    DrawGUITexture(screenRect: Rect, texture: Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number): void;
    DrawIcon(center: Vector3, name: string, allowScaling: boolean): void;
    DrawIcon(center: Vector3, name: string, allowScaling: boolean, tint: Color): void;
    DrawIcon(center: Vector3, name: string): void;
    DrawLine(from: Vector3, to: Vector3): void;
    DrawLineList(points: ReadOnlySpan<Vector3>): void;
    DrawLineStrip(points: ReadOnlySpan<Vector3>, looped: boolean): void;
    DrawMesh(mesh: Mesh, submeshIndex: number, position: Vector3, rotation: Quaternion, scale: Vector3): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion): void;
    DrawMesh(mesh: Mesh, position: Vector3): void;
    DrawMesh(mesh: Mesh): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, scale: Vector3): void;
    DrawMesh(mesh: Mesh, submeshIndex: number, position: Vector3, rotation: Quaternion): void;
    DrawMesh(mesh: Mesh, submeshIndex: number, position: Vector3): void;
    DrawMesh(mesh: Mesh, submeshIndex: number): void;
    DrawRay(r: Ray): void;
    DrawRay(from: Vector3, direction: Vector3): void;
    DrawSphere(center: Vector3, radius: number): void;
    DrawWireCube(center: Vector3, size: Vector3): void;
    DrawWireMesh(mesh: Mesh, submeshIndex: number, position: Vector3, rotation: Quaternion, scale: Vector3): void;
    DrawWireMesh(mesh: Mesh, position: Vector3, rotation: Quaternion): void;
    DrawWireMesh(mesh: Mesh, position: Vector3): void;
    DrawWireMesh(mesh: Mesh): void;
    DrawWireMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, scale: Vector3): void;
    DrawWireMesh(mesh: Mesh, submeshIndex: number, position: Vector3, rotation: Quaternion): void;
    DrawWireMesh(mesh: Mesh, submeshIndex: number, position: Vector3): void;
    DrawWireMesh(mesh: Mesh, submeshIndex: number): void;
    DrawWireSphere(center: Vector3, radius: number): void;

}
declare const Gizmos: GizmosConstructor;
    
interface DeviceBridge {





}
    
interface DeviceBridgeConstructor {
    isTablet: boolean;


    new(): DeviceBridge;


    GetDeviceType(): AirshipDeviceType;
    OnLoad(): void;

}
declare const DeviceBridge: DeviceBridgeConstructor;
    
interface Mask extends UIBehaviour, IMaterialModifier, ICanvasRaycastFilter {
    readonly rectTransform: RectTransform;
    showMaskGraphic: boolean;
    readonly graphic: Graphic;



    GetModifiedMaterial(baseMaterial: Material): Material;
    IsRaycastLocationValid(sp: Vector2, eventCamera: Camera): boolean;
    MaskEnabled(): boolean;


}
    
interface ImageWithRoundedCorners extends MonoBehaviour {
    radius: number;



    Refresh(): void;
    Validate(): void;


}
    
interface ImageWithRoundedCornersConstructor {


    new(): ImageWithRoundedCorners;



}
declare const ImageWithRoundedCorners: ImageWithRoundedCornersConstructor;
    
interface ImageWithIndependentRoundedCorners extends MonoBehaviour {
    r: Vector4;



    Refresh(): void;
    Validate(): void;


}
    
interface ImageWithIndependentRoundedCornersConstructor {


    new(): ImageWithIndependentRoundedCorners;



}
declare const ImageWithIndependentRoundedCorners: ImageWithIndependentRoundedCornersConstructor;
    
interface NavMeshAgent extends Behaviour {
    /**
     * Gets or attempts to set the destination of the agent in world-space units.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-destination.html | AI.NavMeshAgent.destination}
     */
    destination: Vector3;
    /**
     * Stop within this distance from the target position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-stoppingDistance.html | AI.NavMeshAgent.stoppingDistance}
     */
    stoppingDistance: number;
    /**
     * Access the current velocity of the NavMeshAgent component, or set a velocity to control the agent manually.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-velocity.html | AI.NavMeshAgent.velocity}
     */
    velocity: Vector3;
    /**
     * Gets or sets the simulation position of the navmesh agent.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-nextPosition.html | AI.NavMeshAgent.nextPosition}
     */
    nextPosition: Vector3;
    /**
     * Get the current steering target along the path. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-steeringTarget.html | AI.NavMeshAgent.steeringTarget}
     */
    readonly steeringTarget: Vector3;
    /**
     * The desired velocity of the agent including any potential contribution from avoidance. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-desiredVelocity.html | AI.NavMeshAgent.desiredVelocity}
     */
    readonly desiredVelocity: Vector3;
    /**
     * The distance between the agent's position and the destination on the current path. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-remainingDistance.html | AI.NavMeshAgent.remainingDistance}
     */
    readonly remainingDistance: number;
    /**
     * The relative vertical displacement of the owning GameObject.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-baseOffset.html | AI.NavMeshAgent.baseOffset}
     */
    baseOffset: number;
    /**
     * Is the agent currently positioned on an OffMeshLink? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-isOnOffMeshLink.html | AI.NavMeshAgent.isOnOffMeshLink}
     */
    readonly isOnOffMeshLink: boolean;
    /**
     * The current OffMeshLinkData.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-currentOffMeshLinkData.html | AI.NavMeshAgent.currentOffMeshLinkData}
     */
    readonly currentOffMeshLinkData: OffMeshLinkData;
    /**
     * The next OffMeshLinkData on the current path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-nextOffMeshLinkData.html | AI.NavMeshAgent.nextOffMeshLinkData}
     */
    readonly nextOffMeshLinkData: OffMeshLinkData;
    /**
     * Should the agent move across OffMeshLinks automatically?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-autoTraverseOffMeshLink.html | AI.NavMeshAgent.autoTraverseOffMeshLink}
     */
    autoTraverseOffMeshLink: boolean;
    /**
     * Should the agent brake automatically to avoid overshooting the destination point?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-autoBraking.html | AI.NavMeshAgent.autoBraking}
     */
    autoBraking: boolean;
    /**
     * Should the agent attempt to acquire a new path if the existing path becomes invalid?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-autoRepath.html | AI.NavMeshAgent.autoRepath}
     */
    autoRepath: boolean;
    /**
     * Does the agent currently have a path? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-hasPath.html | AI.NavMeshAgent.hasPath}
     */
    readonly hasPath: boolean;
    /**
     * Is a path in the process of being computed but not yet ready? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-pathPending.html | AI.NavMeshAgent.pathPending}
     */
    readonly pathPending: boolean;
    /**
     * Is the current path stale. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-isPathStale.html | AI.NavMeshAgent.isPathStale}
     */
    readonly isPathStale: boolean;
    /**
     * The status of the current path (complete, partial or invalid).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-pathStatus.html | AI.NavMeshAgent.pathStatus}
     */
    readonly pathStatus: NavMeshPathStatus;
    readonly pathEndPosition: Vector3;
    /**
     * Use this property to set, or get, whether the NavMesh agent stops or continues its movement along the current path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-isStopped.html | AI.NavMeshAgent.isStopped}
     */
    isStopped: boolean;
    /**
     * Property to get and set the current path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-path.html | AI.NavMeshAgent.path}
     */
    path: NavMeshPath;
    /**
     * Returns the owning object of the NavMesh the agent is currently placed on (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-navMeshOwner.html | AI.NavMeshAgent.navMeshOwner}
     */
    readonly navMeshOwner: Object;
    /**
     * The type ID for the agent.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-agentTypeID.html | AI.NavMeshAgent.agentTypeID}
     */
    agentTypeID: number;
    /**
     * Specifies which NavMesh areas are passable. Changing areaMask will make the path stale (see isPathStale).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-areaMask.html | AI.NavMeshAgent.areaMask}
     */
    areaMask: number;
    /**
     * Maximum movement speed when following a path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-speed.html | AI.NavMeshAgent.speed}
     */
    speed: number;
    /**
     * Maximum turning speed in (deg/s) while following a path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-angularSpeed.html | AI.NavMeshAgent.angularSpeed}
     */
    angularSpeed: number;
    /**
     * The maximum acceleration of an agent as it follows a path, given in units / sec^2.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-acceleration.html | AI.NavMeshAgent.acceleration}
     */
    acceleration: number;
    /**
     * Gets or sets whether the transform position is synchronized with the simulated agent position. The default value is true.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-updatePosition.html | AI.NavMeshAgent.updatePosition}
     */
    updatePosition: boolean;
    /**
     * Should the agent update the transform orientation?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-updateRotation.html | AI.NavMeshAgent.updateRotation}
     */
    updateRotation: boolean;
    /**
     * Allows you to specify whether the agent should be aligned to the up-axis of the NavMesh or link that it is placed on.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-updateUpAxis.html | AI.NavMeshAgent.updateUpAxis}
     */
    updateUpAxis: boolean;
    /**
     * The avoidance radius for the agent.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-radius.html | AI.NavMeshAgent.radius}
     */
    radius: number;
    /**
     * The height of the agent for purposes of passing under obstacles, etc.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-height.html | AI.NavMeshAgent.height}
     */
    height: number;
    /**
     * The level of quality of avoidance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-obstacleAvoidanceType.html | AI.NavMeshAgent.obstacleAvoidanceType}
     */
    obstacleAvoidanceType: ObstacleAvoidanceType;
    /**
     * The avoidance priority level.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-avoidancePriority.html | AI.NavMeshAgent.avoidancePriority}
     */
    avoidancePriority: number;
    /**
     * Is the agent currently bound to the navmesh? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent-isOnNavMesh.html | AI.NavMeshAgent.isOnNavMesh}
     */
    readonly isOnNavMesh: boolean;



    /**
     * Enables or disables the current off-mesh link.
     * @param activated Is the link activated?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent.ActivateCurrentOffMeshLink.html | AI.NavMeshAgent.ActivateCurrentOffMeshLink}
     */
    ActivateCurrentOffMeshLink(activated: boolean): void;
    /**
     * Calculate a path to a specified point and store the resulting path.
     * @param targetPosition The final position of the path requested.
     * @param path The resulting path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent.CalculatePath.html | AI.NavMeshAgent.CalculatePath}
     */
    CalculatePath(targetPosition: Vector3, path: NavMeshPath): boolean;
    /**
     * Completes the movement on the current OffMeshLink.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent.CompleteOffMeshLink.html | AI.NavMeshAgent.CompleteOffMeshLink}
     */
    CompleteOffMeshLink(): void;
    /**
     * Gets the cost for path calculation when crossing area of a particular type.
     * @param areaIndex Area Index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent.GetAreaCost.html | AI.NavMeshAgent.GetAreaCost}
     */
    GetAreaCost(areaIndex: number): number;
    /**
     * Apply relative movement to current position.
     * @param offset The relative movement vector.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent.Move.html | AI.NavMeshAgent.Move}
     */
    Move(offset: Vector3): void;
    /**
     * Clears the current path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent.ResetPath.html | AI.NavMeshAgent.ResetPath}
     */
    ResetPath(): void;
    /**
     * Sets the cost for traversing over areas of the area type.
     * @param areaIndex Area cost.
     * @param areaCost New cost for the specified area index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent.SetAreaCost.html | AI.NavMeshAgent.SetAreaCost}
     */
    SetAreaCost(areaIndex: number, areaCost: number): void;
    /**
     * Sets or updates the destination thus triggering the calculation for a new path.
     * @param target The target point to navigate to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent.SetDestination.html | AI.NavMeshAgent.SetDestination}
     */
    SetDestination(target: Vector3): boolean;
    /**
     * Assign a new path to this agent.
     * @param path New path to follow.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent.SetPath.html | AI.NavMeshAgent.SetPath}
     */
    SetPath(path: NavMeshPath): boolean;
    /**
     * Warps agent to the provided position.
     * @param newPosition New position to warp the agent to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent.Warp.html | AI.NavMeshAgent.Warp}
     */
    Warp(newPosition: Vector3): boolean;


}
    
interface OffMeshLinkData {
    /**
     * Is link valid (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.OffMeshLinkData-valid.html | AI.OffMeshLinkData.valid}
     */
    readonly valid: boolean;
    /**
     * Is link active (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.OffMeshLinkData-activated.html | AI.OffMeshLinkData.activated}
     */
    readonly activated: boolean;
    /**
     * Link type specifier (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.OffMeshLinkData-linkType.html | AI.OffMeshLinkData.linkType}
     */
    readonly linkType: OffMeshLinkType;
    /**
     * Link start world position (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.OffMeshLinkData-startPos.html | AI.OffMeshLinkData.startPos}
     */
    readonly startPos: Vector3;
    /**
     * Link end world position (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.OffMeshLinkData-endPos.html | AI.OffMeshLinkData.endPos}
     */
    readonly endPos: Vector3;
    /**
     * Get the object used to create the NavMesh link represented by the data in this struct.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.OffMeshLinkData-owner.html | AI.OffMeshLinkData.owner}
     */
    readonly owner: Object;





}
    
interface NavMeshPath {
    /**
     * Corner points of the path. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshPath-corners.html | AI.NavMeshPath.corners}
     */
    readonly corners: Readonly<Vector3[]>;
    /**
     * Status of the path. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshPath-status.html | AI.NavMeshPath.status}
     */
    readonly status: NavMeshPathStatus;



    /**
     * Erase all corner points from path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshPath.ClearCorners.html | AI.NavMeshPath.ClearCorners}
     */
    ClearCorners(): void;


}
    
interface NavMeshPathConstructor {


    new(): NavMeshPath;



}
declare const NavMeshPath: NavMeshPathConstructor;
    
interface NavMeshAgentConstructor {


    new(): NavMeshAgent;



}
declare const NavMeshAgent: NavMeshAgentConstructor;
    
    
interface OnNavMeshPreUpdate extends MulticastDelegate {



    BeginInvoke(callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): void;
    Invoke(): void;


}
    
interface OnNavMeshPreUpdateConstructor {


    new(object: unknown, method: IntPtr): OnNavMeshPreUpdate;



}
declare const OnNavMeshPreUpdate: OnNavMeshPreUpdateConstructor;
    
interface NavMeshLinkInstance {





}
    
interface NavMeshLinkData {
    /**
     * Start position of the link.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshLinkData-startPosition.html | AI.NavMeshLinkData.startPosition}
     */
    startPosition: Vector3;
    /**
     * End position of the link.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshLinkData-endPosition.html | AI.NavMeshLinkData.endPosition}
     */
    endPosition: Vector3;
    /**
     * If positive, overrides the pathfinder cost to traverse the link.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshLinkData-costModifier.html | AI.NavMeshLinkData.costModifier}
     */
    costModifier: number;
    /**
     * If true, the link can be traversed in both directions, otherwise only from start to end position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshLinkData-bidirectional.html | AI.NavMeshLinkData.bidirectional}
     */
    bidirectional: boolean;
    /**
     * If positive, the link will be rectangle aligned along the line from start to end.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshLinkData-width.html | AI.NavMeshLinkData.width}
     */
    width: number;
    /**
     * Area type of the link.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshLinkData-area.html | AI.NavMeshLinkData.area}
     */
    area: number;
    /**
     * Specifies which agent type this link is available for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshLinkData-agentTypeID.html | AI.NavMeshLinkData.agentTypeID}
     */
    agentTypeID: number;





}
    
interface NavMeshDataInstance {
    /**
     * True if the NavMesh data is added to the navigation system - otherwise false (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshDataInstance-valid.html | AI.NavMeshDataInstance.valid}
     */
    readonly valid: boolean;
    /**
     * Get or set the owning Object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshDataInstance-owner.html | AI.NavMeshDataInstance.owner}
     */
    owner: Object;



    /**
     * Removes this instance from the NavMesh system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshDataInstance.Remove.html | AI.NavMeshDataInstance.Remove}
     */
    Remove(): void;


}
    
interface NavMeshData extends Object {
    /**
     * Returns the bounding volume of the input geometry used to build this NavMesh (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshData-sourceBounds.html | AI.NavMeshData.sourceBounds}
     */
    readonly sourceBounds: Bounds;
    /**
     * Gets or sets the world space position of the NavMesh data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshData-position.html | AI.NavMeshData.position}
     */
    position: Vector3;
    /**
     * Gets or sets the orientation of the NavMesh data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshData-rotation.html | AI.NavMeshData.rotation}
     */
    rotation: Quaternion;





}
    
interface NavMeshDataConstructor {


    new(): NavMeshData;
    new(agentTypeID: number): NavMeshData;



}
declare const NavMeshData: NavMeshDataConstructor;
    
interface NavMeshQueryFilter {
    /**
     * A bitmask representing the traversable area types.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshQueryFilter-areaMask.html | AI.NavMeshQueryFilter.areaMask}
     */
    areaMask: number;
    /**
     * The agent type ID, specifying which navigation meshes to consider for the query functions.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshQueryFilter-agentTypeID.html | AI.NavMeshQueryFilter.agentTypeID}
     */
    agentTypeID: number;



    /**
     * Returns the area cost multiplier for the given area type for this filter.
     * @param areaIndex Index to retreive the cost for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshQueryFilter.GetAreaCost.html | AI.NavMeshQueryFilter.GetAreaCost}
     */
    GetAreaCost(areaIndex: number): number;
    /**
     * Sets the pathfinding cost multiplier for this filter for a given area type.
     * @param areaIndex The area index to set the cost for.
     * @param cost The cost for the supplied area index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshQueryFilter.SetAreaCost.html | AI.NavMeshQueryFilter.SetAreaCost}
     */
    SetAreaCost(areaIndex: number, cost: number): void;


}
    
interface NavMeshTriangulation {
    vertices: Readonly<Vector3[]>;
    indices: Readonly<number[]>;
    areas: Readonly<number[]>;





}
    
interface NavMeshBuildSettings {
    /**
     * The agent type ID the NavMesh will be baked for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-agentTypeID.html | AI.NavMeshBuildSettings.agentTypeID}
     */
    agentTypeID: number;
    /**
     * The radius of the agent for baking in world units.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-agentRadius.html | AI.NavMeshBuildSettings.agentRadius}
     */
    agentRadius: number;
    /**
     * The height of the agent for baking in world units.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-agentHeight.html | AI.NavMeshBuildSettings.agentHeight}
     */
    agentHeight: number;
    /**
     * The maximum slope angle which is walkable (angle in degrees).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-agentSlope.html | AI.NavMeshBuildSettings.agentSlope}
     */
    agentSlope: number;
    /**
     * The maximum vertical step size an agent can take.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-agentClimb.html | AI.NavMeshBuildSettings.agentClimb}
     */
    agentClimb: number;
    /**
     * Maximum agent drop height.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-ledgeDropHeight.html | AI.NavMeshBuildSettings.ledgeDropHeight}
     */
    ledgeDropHeight: number;
    /**
     * Maximum agent jump distance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-maxJumpAcrossDistance.html | AI.NavMeshBuildSettings.maxJumpAcrossDistance}
     */
    maxJumpAcrossDistance: number;
    /**
     * The approximate minimum area of individual NavMesh regions.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-minRegionArea.html | AI.NavMeshBuildSettings.minRegionArea}
     */
    minRegionArea: number;
    /**
     * Enables overriding the default voxel size. Additional resources: voxelSize.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-overrideVoxelSize.html | AI.NavMeshBuildSettings.overrideVoxelSize}
     */
    overrideVoxelSize: boolean;
    /**
     * Sets the voxel size in world length units.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-voxelSize.html | AI.NavMeshBuildSettings.voxelSize}
     */
    voxelSize: number;
    /**
     * Enables overriding the default tile size. Additional resources: tileSize.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-overrideTileSize.html | AI.NavMeshBuildSettings.overrideTileSize}
     */
    overrideTileSize: boolean;
    /**
     * Sets the tile size in voxel units.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-tileSize.html | AI.NavMeshBuildSettings.tileSize}
     */
    tileSize: number;
    /**
     * The maximum number of worker threads that the build process can utilize when building a NavMesh with these settings.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-maxJobWorkers.html | AI.NavMeshBuildSettings.maxJobWorkers}
     */
    maxJobWorkers: number;
    preserveTilesOutsideBounds: boolean;
    /**
     * Enables the creation of additional data needed to determine the height at any position on the NavMesh more accurately.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-buildHeightMesh.html | AI.NavMeshBuildSettings.buildHeightMesh}
     */
    buildHeightMesh: boolean;
    /**
     * Options for collecting debug data during the build process.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings-debug.html | AI.NavMeshBuildSettings.debug}
     */
    debug: NavMeshBuildDebugSettings;



    /**
     * Validates the properties of NavMeshBuildSettings.
     * @param buildBounds Describes the volume to build NavMesh for.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildSettings.ValidationReport.html | AI.NavMeshBuildSettings.ValidationReport}
     */
    ValidationReport(buildBounds: Bounds): Readonly<string[]>;


}
    
interface NavMeshBuildDebugSettings {
    /**
     * Specify which types of debug data to collect when building the NavMesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshBuildDebugSettings-flags.html | AI.NavMeshBuildDebugSettings.flags}
     */
    flags: NavMeshBuildDebugFlags;





}
    
    
interface NavMeshObstacle extends Behaviour {
    /**
     * Height of the obstacle's cylinder shape.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshObstacle-height.html | AI.NavMeshObstacle.height}
     */
    height: number;
    /**
     * Radius of the obstacle's capsule shape.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshObstacle-radius.html | AI.NavMeshObstacle.radius}
     */
    radius: number;
    /**
     * Velocity at which the obstacle moves around the NavMesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshObstacle-velocity.html | AI.NavMeshObstacle.velocity}
     */
    velocity: Vector3;
    /**
     * Should this obstacle make a cut-out in the navmesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshObstacle-carving.html | AI.NavMeshObstacle.carving}
     */
    carving: boolean;
    /**
     * Should this obstacle be carved when it is constantly moving?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshObstacle-carveOnlyStationary.html | AI.NavMeshObstacle.carveOnlyStationary}
     */
    carveOnlyStationary: boolean;
    /**
     * Threshold distance for updating a moving carved hole (when carving is enabled).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshObstacle-carvingMoveThreshold.html | AI.NavMeshObstacle.carvingMoveThreshold}
     */
    carvingMoveThreshold: number;
    /**
     * Time to wait until obstacle is treated as stationary (when carving and carveOnlyStationary are enabled).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshObstacle-carvingTimeToStationary.html | AI.NavMeshObstacle.carvingTimeToStationary}
     */
    carvingTimeToStationary: number;
    /**
     * The shape of the obstacle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshObstacle-shape.html | AI.NavMeshObstacle.shape}
     */
    shape: NavMeshObstacleShape;
    /**
     * The center of the obstacle, measured in the object's local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshObstacle-center.html | AI.NavMeshObstacle.center}
     */
    center: Vector3;
    /**
     * The size of the obstacle, measured in the object's local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshObstacle-size.html | AI.NavMeshObstacle.size}
     */
    size: Vector3;





}
    
interface NavMeshObstacleConstructor {


    new(): NavMeshObstacle;



}
declare const NavMeshObstacle: NavMeshObstacleConstructor;
    
interface ScrollView extends VisualElement {
    /**
     * Specifies whether the horizontal scroll bar is visible.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-horizontalScrollerVisibility.html | UIElements.ScrollView.horizontalScrollerVisibility}
     */
    horizontalScrollerVisibility: ScrollerVisibility;
    /**
     * Specifies whether the vertical scroll bar is visible.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-verticalScrollerVisibility.html | UIElements.ScrollView.verticalScrollerVisibility}
     */
    verticalScrollerVisibility: ScrollerVisibility;
    /**
     * The minimum amount of time, in milliseconds, between executions of elastic spring animation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-elasticAnimationIntervalMs.html | UIElements.ScrollView.elasticAnimationIntervalMs}
     */
    elasticAnimationIntervalMs: number;
    /**
     * The current scrolling position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-scrollOffset.html | UIElements.ScrollView.scrollOffset}
     */
    scrollOffset: Vector2;
    /**
     * This property controls the speed of the horizontal scrolling when using a keyboard or the on-screen scrollbar buttons (arrows and handle), based on the size of the page.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-horizontalPageSize.html | UIElements.ScrollView.horizontalPageSize}
     */
    horizontalPageSize: number;
    /**
     * This property controls the speed of the vertical scrolling when using a keyboard or the on-screen scrollbar buttons (arrows and handle), based on the size of the page.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-verticalPageSize.html | UIElements.ScrollView.verticalPageSize}
     */
    verticalPageSize: number;
    /**
     * This property controls the scrolling speed only when using a mouse scroll wheel, based on the size of the page. It takes precedence over the --unity-metrics-single_line-height USS variable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-mouseWheelScrollSize.html | UIElements.ScrollView.mouseWheelScrollSize}
     */
    mouseWheelScrollSize: number;
    /**
     * Controls the rate at which the scrolling movement slows after a user scrolls using a touch interaction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-scrollDecelerationRate.html | UIElements.ScrollView.scrollDecelerationRate}
     */
    scrollDecelerationRate: number;
    /**
     * The amount of elasticity to use when a user tries to scroll past the boundaries of the scroll view.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-elasticity.html | UIElements.ScrollView.elasticity}
     */
    elasticity: number;
    /**
     * The behavior to use when a user tries to scroll past the boundaries of the ScrollView content using a touch interaction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-touchScrollBehavior.html | UIElements.ScrollView.touchScrollBehavior}
     */
    touchScrollBehavior: TouchScrollBehavior;
    /**
     * The behavior to use when scrolling reaches limits of a nested ScrollView.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-nestedInteractionKind.html | UIElements.ScrollView.nestedInteractionKind}
     */
    nestedInteractionKind: NestedInteractionKind;
    /**
     * Represents the visible part of contentContainer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-contentViewport.html | UIElements.ScrollView.contentViewport}
     */
    readonly contentViewport: VisualElement;
    /**
     * Horizontal scrollbar.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-horizontalScroller.html | UIElements.ScrollView.horizontalScroller}
     */
    readonly horizontalScroller: Scroller;
    /**
     * Vertical Scrollbar.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-verticalScroller.html | UIElements.ScrollView.verticalScroller}
     */
    readonly verticalScroller: Scroller;
    /**
     * Contains full content, potentially partially visible.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-contentContainer.html | UIElements.ScrollView.contentContainer}
     */
    readonly contentContainer: VisualElement;
    /**
     * Controls how the ScrollView allows the user to scroll the contents.
 ScrollViewMode
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView-mode.html | UIElements.ScrollView.mode}
     */
    mode: ScrollViewMode;



    /**
     * Scroll to a specific child element.
     * @param child The child to scroll to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.ScrollView.ScrollTo.html | UIElements.ScrollView.ScrollTo}
     */
    ScrollTo(child: VisualElement): void;


}
    
interface Scroller extends VisualElement {
    /**
     * The slider used by this scroller.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller-slider.html | UIElements.Scroller.slider}
     */
    readonly slider: Slider;
    /**
     * Bottom or left scroll button.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller-lowButton.html | UIElements.Scroller.lowButton}
     */
    readonly lowButton: RepeatButton;
    /**
     * Top or right scroll button.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller-highButton.html | UIElements.Scroller.highButton}
     */
    readonly highButton: RepeatButton;
    /**
     * Value that defines the slider position. It lies between lowValue and highValue.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller-value.html | UIElements.Scroller.value}
     */
    value: number;
    /**
     * Minimum value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller-lowValue.html | UIElements.Scroller.lowValue}
     */
    lowValue: number;
    /**
     * Maximum value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller-highValue.html | UIElements.Scroller.highValue}
     */
    highValue: number;
    /**
     * Direction of this scrollbar.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller-direction.html | UIElements.Scroller.direction}
     */
    direction: SliderDirection;

    readonly valueChanged: MonoSignal<number>;


    /**
     * Updates the slider element size as a ratio of total range. A value greater than or equal to 1 will disable the Scroller.
     * @param factor Slider size ratio.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller.Adjust.html | UIElements.Scroller.Adjust}
     */
    Adjust(factor: number): void;
    /**
     * Will change the value according to the current slider pageSize.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller.ScrollPageDown.html | UIElements.Scroller.ScrollPageDown}
     */
    ScrollPageDown(): void;
    /**
     * Will change the value according to the current slider pageSize.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller.ScrollPageDown.html | UIElements.Scroller.ScrollPageDown}
     */
    ScrollPageDown(factor: number): void;
    /**
     * Will change the value according to the current slider pageSize.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller.ScrollPageUp.html | UIElements.Scroller.ScrollPageUp}
     */
    ScrollPageUp(): void;
    /**
     * Will change the value according to the current slider pageSize.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/UIElements.Scroller.ScrollPageUp.html | UIElements.Scroller.ScrollPageUp}
     */
    ScrollPageUp(factor: number): void;


}
    
interface IValueField<T> {
    value: T;



    ApplyInputDeviceDelta(delta: Vector3, speed: DeltaSpeed, startValue: T): void;
    StartDragging(): void;
    StopDragging(): void;


}
    
interface BaseSlider<TValueType> extends BaseField<TValueType>, IValueField<TValueType> {
    lowValue: TValueType;
    highValue: TValueType;
    readonly range: TValueType;
    pageSize: number;
    showInputField: boolean;
    fill: boolean;
    value: TValueType;
    direction: SliderDirection;
    inverted: boolean;



    AdjustDragElement(factor: number): void;
    ApplyInputDeviceDelta(delta: Vector3, speed: DeltaSpeed, startValue: TValueType): void;
    SetValueWithoutNotify(newValue: TValueType): void;


}
    
interface BaseSliderConstructor {
    readonly ussClassName: string;
    readonly labelUssClassName: string;
    readonly inputUssClassName: string;
    readonly horizontalVariantUssClassName: string;
    readonly verticalVariantUssClassName: string;
    readonly dragContainerUssClassName: string;
    readonly trackerUssClassName: string;
    readonly draggerUssClassName: string;
    readonly draggerBorderUssClassName: string;
    readonly textFieldClassName: string;
    readonly fillUssClassName: string;
    readonly movableUssClassName: string;





}
declare const BaseSlider: BaseSliderConstructor;
    
interface Slider extends BaseSlider<number> {



    ApplyInputDeviceDelta(delta: Vector3, speed: DeltaSpeed, startValue: number): void;


}
    
interface SliderConstructor {
    readonly ussClassName: string;
    readonly labelUssClassName: string;
    readonly inputUssClassName: string;


    new(): Slider;
    new(start: number, end: number, direction: SliderDirection, pageSize: number): Slider;
    new(label: string, start: number, end: number, direction: SliderDirection, pageSize: number): Slider;



}
declare const Slider: SliderConstructor;
    
interface RepeatButton extends TextElement {



    SetAction(clickEvent: Action, delay: number, interval: number): void;


}
    
interface RepeatButtonConstructor {
    readonly ussClassName: string;


    new(): RepeatButton;
    new(clickEvent: Action, delay: number, interval: number): RepeatButton;



}
declare const RepeatButton: RepeatButtonConstructor;
    
interface ScrollerConstructor {
    readonly ussClassName: string;
    readonly horizontalVariantUssClassName: string;
    readonly verticalVariantUssClassName: string;
    readonly sliderUssClassName: string;
    readonly lowButtonUssClassName: string;
    readonly highButtonUssClassName: string;


    new(): Scroller;
    new(lowValue: number, highValue: number, valueChanged: Action<number>, direction: SliderDirection): Scroller;



}
declare const Scroller: ScrollerConstructor;
    
interface ScrollViewConstructor {
    readonly ussClassName: string;
    readonly viewportUssClassName: string;
    readonly horizontalVariantViewportUssClassName: string;
    readonly verticalVariantViewportUssClassName: string;
    readonly verticalHorizontalVariantViewportUssClassName: string;
    readonly contentAndVerticalScrollUssClassName: string;
    readonly contentUssClassName: string;
    readonly horizontalVariantContentUssClassName: string;
    readonly verticalVariantContentUssClassName: string;
    readonly verticalHorizontalVariantContentUssClassName: string;
    readonly hScrollerUssClassName: string;
    readonly vScrollerUssClassName: string;
    readonly horizontalVariantUssClassName: string;
    readonly verticalVariantUssClassName: string;
    readonly verticalHorizontalVariantUssClassName: string;
    readonly scrollVariantUssClassName: string;


    new(): ScrollView;
    new(scrollViewMode: ScrollViewMode): ScrollView;



}
declare const ScrollView: ScrollViewConstructor;
    
interface AirshipLongPress extends MonoBehaviour, IBeginDragHandler, IDragHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler {
    holdTime: number;

    readonly OnClick: MonoSignal<void>;
    readonly OnLongPress: MonoSignal<unknown>;


    OnBeginDrag(eventData: PointerEventData): void;
    OnDrag(eventData: PointerEventData): void;
    OnPointerDown(eventData: PointerEventData): void;
    OnPointerExit(eventData: PointerEventData): void;
    OnPointerUp(eventData: PointerEventData): void;
    Update(): void;


}
    
interface AirshipLongPressConstructor {


    new(): AirshipLongPress;



}
declare const AirshipLongPress: AirshipLongPressConstructor;
    
interface DecalProjector extends MonoBehaviour {
    material: Material;
    drawDistance: number;
    fadeScale: number;
    startAngleFade: number;
    endAngleFade: number;
    uvScale: Vector2;
    uvBias: Vector2;
    renderingLayerMask: number;
    scaleMode: DecalScaleMode;
    pivot: Vector3;
    size: Vector3;
    fadeFactor: number;



    IsValid(): boolean;


}
    
interface DecalProjectorConstructor {


    new(): DecalProjector;



}
declare const DecalProjector: DecalProjectorConstructor;
    
interface Time {





}
    
interface RationalTime {
    /**
     * Returns the number of ticks.
     */
    readonly Count: number;
    /**
     * Returns the number of ticks per second.
     */
    readonly Ticks: TicksPerSecond;





}
    
interface TicksPerSecond {
    readonly Numerator: number;
    readonly Denominator: number;
    readonly Valid: boolean;



    Equals(rhs: TicksPerSecond): boolean;
    Equals(rhs: unknown): boolean;
    GetHashCode(): number;


}
    
interface TicksPerSecondConstructor {
    readonly DefaultTicksPerSecond: TicksPerSecond;
    readonly TicksPerSecond24: TicksPerSecond;
    readonly TicksPerSecond25: TicksPerSecond;
    readonly TicksPerSecond30: TicksPerSecond;
    readonly TicksPerSecond50: TicksPerSecond;
    readonly TicksPerSecond60: TicksPerSecond;
    readonly TicksPerSecond120: TicksPerSecond;
    readonly TicksPerSecond2397: TicksPerSecond;
    readonly TicksPerSecond2425: TicksPerSecond;
    readonly TicksPerSecond2997: TicksPerSecond;
    readonly TicksPerSecond5994: TicksPerSecond;
    readonly TicksPerSecond11988: TicksPerSecond;


    new(num: number, den: number): TicksPerSecond;



}
declare const TicksPerSecond: TicksPerSecondConstructor;
    
interface RationalTimeConstructor {


    new(count: number, ticks: TicksPerSecond): RationalTime;


    FromDouble(t: number, ticksPerSecond: TicksPerSecond): RationalTime;

}
declare const RationalTime: RationalTimeConstructor;
    
interface TimeConstructor {
    /**
     * The time at the beginning of the current frame in seconds since the start of the application (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-time.html | Time.time}
     */
    readonly time: number;
    /**
     * The double precision time at the beginning of this frame (Read Only). This is the time in seconds since the start of the game.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-timeAsDouble.html | Time.timeAsDouble}
     */
    readonly timeAsDouble: number;
    /**
     * The time this frame has started (Read Only). This is the time in seconds since the start of the game represented as a RationalTime.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-timeAsRational.html | Time.timeAsRational}
     */
    readonly timeAsRational: RationalTime;
    /**
     * The time in seconds since the last non-additive scene finished loading (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-timeSinceLevelLoad.html | Time.timeSinceLevelLoad}
     */
    readonly timeSinceLevelLoad: number;
    /**
     * The double precision time in seconds since the last non-additive scene finished loading (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-timeSinceLevelLoadAsDouble.html | Time.timeSinceLevelLoadAsDouble}
     */
    readonly timeSinceLevelLoadAsDouble: number;
    /**
     * The interval in seconds from the last frame to the current one (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-deltaTime.html | Time.deltaTime}
     */
    readonly deltaTime: number;
    /**
     * The time at which the current MonoBehaviour.FixedUpdate started in seconds since the start of the game (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-fixedTime.html | Time.fixedTime}
     */
    readonly fixedTime: number;
    /**
     * The double precision time since the last MonoBehaviour.FixedUpdate started (Read Only). This is the time in seconds since the start of the game.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-fixedTimeAsDouble.html | Time.fixedTimeAsDouble}
     */
    readonly fixedTimeAsDouble: number;
    /**
     * The timeScale-independent time for this frame (Read Only). This is the time in seconds since the start of the game.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-unscaledTime.html | Time.unscaledTime}
     */
    readonly unscaledTime: number;
    /**
     * The double precision timeScale-independent time for this frame (Read Only). This is the time in seconds since the start of the game.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-unscaledTimeAsDouble.html | Time.unscaledTimeAsDouble}
     */
    readonly unscaledTimeAsDouble: number;
    /**
     * The timeScale-independent time at the beginning of the last MonoBehaviour.FixedUpdate phase (Read Only). This is the time in seconds since the start of the game.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-fixedUnscaledTime.html | Time.fixedUnscaledTime}
     */
    readonly fixedUnscaledTime: number;
    /**
     * The double precision timeScale-independent time at the beginning of the last MonoBehaviour.FixedUpdate (Read Only). This is the time in seconds since the start of the game.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-fixedUnscaledTimeAsDouble.html | Time.fixedUnscaledTimeAsDouble}
     */
    readonly fixedUnscaledTimeAsDouble: number;
    /**
     * The timeScale-independent interval in seconds from the last frame to the current one (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-unscaledDeltaTime.html | Time.unscaledDeltaTime}
     */
    readonly unscaledDeltaTime: number;
    /**
     * The interval in seconds of timeScale-independent (&quot;real&quot;) time at which physics and other fixed frame rate updates (like MonoBehaviour's MonoBehaviour.FixedUpdate) are performed.(Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-fixedUnscaledDeltaTime.html | Time.fixedUnscaledDeltaTime}
     */
    readonly fixedUnscaledDeltaTime: number;
    /**
     * The interval in seconds of in-game time at which physics and other fixed frame rate updates (like MonoBehaviour's MonoBehaviour.FixedUpdate) are performed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-fixedDeltaTime.html | Time.fixedDeltaTime}
     */
    fixedDeltaTime: number;
    /**
     * The maximum value of Time.deltaTime in any given frame. This is a time in seconds that limits the increase of Time.time between two frames.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-maximumDeltaTime.html | Time.maximumDeltaTime}
     */
    maximumDeltaTime: number;
    /**
     * A smoothed out Time.deltaTime (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-smoothDeltaTime.html | Time.smoothDeltaTime}
     */
    readonly smoothDeltaTime: number;
    /**
     * The maximum time a frame can spend on particle updates. If the frame takes longer than this, then updates are split into multiple smaller updates.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-maximumParticleDeltaTime.html | Time.maximumParticleDeltaTime}
     */
    maximumParticleDeltaTime: number;
    /**
     * The scale at which time passes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-timeScale.html | Time.timeScale}
     */
    timeScale: number;
    /**
     * The total number of frames since the start of the game (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-frameCount.html | Time.frameCount}
     */
    readonly frameCount: number;
    readonly renderedFrameCount: number;
    /**
     * The real time in seconds since the game started (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-realtimeSinceStartup.html | Time.realtimeSinceStartup}
     */
    readonly realtimeSinceStartup: number;
    /**
     * The real time in seconds since the game started (Read Only). Double precision version of Time.realtimeSinceStartup.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-realtimeSinceStartupAsDouble.html | Time.realtimeSinceStartupAsDouble}
     */
    readonly realtimeSinceStartupAsDouble: number;
    /**
     * Slows your application&#8217;s playback time to allow Unity to save screenshots in between frames.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-captureDeltaTime.html | Time.captureDeltaTime}
     */
    captureDeltaTime: number;
    /**
     * Slows your application&#8217;s playback time to allow Unity to save screenshots in between frames.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-captureDeltaTimeRational.html | Time.captureDeltaTimeRational}
     */
    captureDeltaTimeRational: RationalTime;
    /**
     * The reciprocal of Time.captureDeltaTime.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-captureFramerate.html | Time.captureFramerate}
     */
    captureFramerate: number;
    /**
     * Returns true if called inside a fixed time step callback (like MonoBehaviour's MonoBehaviour.FixedUpdate), otherwise returns false (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Time-inFixedTimeStep.html | Time.inFixedTimeStep}
     */
    readonly inFixedTimeStep: boolean;


    new(): Time;



}
declare const Time: TimeConstructor;
    
interface BoxCollider2D extends Collider2D {
    /**
     * The width and height of the rectangle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoxCollider2D-size.html | BoxCollider2D.size}
     */
    size: Vector2;
    /**
     * Controls the radius of all edges created by the collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoxCollider2D-edgeRadius.html | BoxCollider2D.edgeRadius}
     */
    edgeRadius: number;
    /**
     * Determines whether the BoxCollider2D's shape is automatically updated based on a SpriteRenderer's tiling properties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoxCollider2D-autoTiling.html | BoxCollider2D.autoTiling}
     */
    autoTiling: boolean;





}
    
interface BoxCollider2DConstructor {


    new(): BoxCollider2D;



}
declare const BoxCollider2D: BoxCollider2DConstructor;
    
interface CircleCollider2D extends Collider2D {
    /**
     * Radius of the circle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CircleCollider2D-radius.html | CircleCollider2D.radius}
     */
    radius: number;





}
    
interface CircleCollider2DConstructor {


    new(): CircleCollider2D;



}
declare const CircleCollider2D: CircleCollider2DConstructor;
    
interface CapsuleCollider2D extends Collider2D {
    /**
     * The width and height of the capsule area.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CapsuleCollider2D-size.html | CapsuleCollider2D.size}
     */
    size: Vector2;
    /**
     * The direction that the capsule sides can extend.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CapsuleCollider2D-direction.html | CapsuleCollider2D.direction}
     */
    direction: CapsuleDirection2D;





}
    
interface CapsuleCollider2DConstructor {


    new(): CapsuleCollider2D;



}
declare const CapsuleCollider2D: CapsuleCollider2DConstructor;
    
interface PolygonCollider2D extends Collider2D {
    /**
     * When the value is true, the Collider uses an additional Delaunay triangulation step to produce the Collider mesh. When the value is false, this additional step does not occur.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PolygonCollider2D-useDelaunayMesh.html | PolygonCollider2D.useDelaunayMesh}
     */
    useDelaunayMesh: boolean;
    /**
     * Determines whether the PolygonCollider2D's shape is automatically updated based on a SpriteRenderer's tiling properties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PolygonCollider2D-autoTiling.html | PolygonCollider2D.autoTiling}
     */
    autoTiling: boolean;
    /**
     * Corner points that define the collider's shape in local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PolygonCollider2D-points.html | PolygonCollider2D.points}
     */
    points: Readonly<Vector2[]>;
    /**
     * The number of paths in the polygon.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PolygonCollider2D-pathCount.html | PolygonCollider2D.pathCount}
     */
    pathCount: number;



    CreatePrimitive(sides: number): void;
    CreatePrimitive(sides: number, scale: Vector2): void;
    /**
     * Creates as regular primitive polygon with the specified number of sides.
     * @param sides The number of sides in the polygon.  This must be greater than two.
     * @param scale The X/Y scale of the polygon.  These must be greater than zero.
     * @param offset The X/Y offset of the polygon.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PolygonCollider2D.CreatePrimitive.html | PolygonCollider2D.CreatePrimitive}
     */
    CreatePrimitive(sides: number, scale: Vector2, offset: Vector2): void;
    /**
     * Gets a path from the Collider by its index.
     * @param index The index of the path to retrieve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PolygonCollider2D.GetPath.html | PolygonCollider2D.GetPath}
     */
    GetPath(index: number): Readonly<Vector2[]>;
    GetPath(index: number, points: Readonly<Vector2[]>): number;
    /**
     * Return the total number of points in the polygon in all paths.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PolygonCollider2D.GetTotalPointCount.html | PolygonCollider2D.GetTotalPointCount}
     */
    GetTotalPointCount(): number;
    /**
     * Define a path by its constituent points.
     * @param index Index of the path to set.
     * @param points An ordered array of the vertices (points) that define the path.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PolygonCollider2D.SetPath.html | PolygonCollider2D.SetPath}
     */
    SetPath(index: number, points: Readonly<Vector2[]>): void;
    SetPath(index: number, points: Readonly<Vector2[]>): void;


}
    
interface PolygonCollider2DConstructor {


    new(): PolygonCollider2D;



}
declare const PolygonCollider2D: PolygonCollider2DConstructor;
    
interface CustomCollider2D extends Collider2D {
    /**
     * The total number of custom PhysicsShape2D assigned to the Collider. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CustomCollider2D-customShapeCount.html | CustomCollider2D.customShapeCount}
     */
    readonly customShapeCount: number;
    /**
     * The total number of Vector2|vertices used by the Collider. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CustomCollider2D-customVertexCount.html | CustomCollider2D.customVertexCount}
     */
    readonly customVertexCount: number;



    /**
     * Deletes a specific number of shapes defined by shapeCount starting at shapeIndex along with all associated vertices those shapes use.
     * @param shapeIndex The index of the shape stored in the Collider.
     * @param shapeCount The number of shapes to delete starting at the specified index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CustomCollider2D.ClearCustomShapes.html | CustomCollider2D.ClearCustomShapes}
     */
    ClearCustomShapes(shapeIndex: number, shapeCount: number): void;
    /**
     * Deletes all the shapes and associated vertices for those shapes from the Collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CustomCollider2D.ClearCustomShapes.html | CustomCollider2D.ClearCustomShapes}
     */
    ClearCustomShapes(): void;
    /**
     * Gets all the physics shapes and vertices in the Collider and places them in the specified PhysicsShapeGroup2D.
     * @param physicsShapeGroup The physics shape group that will receive all the PhysicsShape2D|physics shapes and Vector2|vertices from the Collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CustomCollider2D.GetCustomShapes.html | CustomCollider2D.GetCustomShapes}
     */
    GetCustomShapes(physicsShapeGroup: PhysicsShapeGroup2D): number;
    /**
     * Gets a specified number of physics shapes defined byshapeCount starting at shapeIndex along with all associated vertices those shapes use and places them in the specified PhysicsShapeGroup2D.
     * @param physicsShapeGroup The physics shape group that will receive the PhysicsShape2D|physics shapes and Vector2|vertices from the Collider.
     * @param shapeIndex The shape index within the Collider to start retrieving shapes from.
     * @param shapeCount The total number of shapes starting at the shapeIndex to retrieve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CustomCollider2D.GetCustomShapes.html | CustomCollider2D.GetCustomShapes}
     */
    GetCustomShapes(physicsShapeGroup: PhysicsShapeGroup2D, shapeIndex: number, shapeCount: number): number;
    GetCustomShapes(shapes: Readonly<PhysicsShape2D[]>, vertices: Readonly<Vector2[]>): number;
    /**
     * Sets a single shape and all associated shape vertices from the specified physicsShapeGroup into the Collider.
     * @param physicsShapeGroup The PhysicsShapeGroup2D to use as the source of shapes and vertices.
     * @param srcShapeIndex The source shape index within the physicsShapeGroup used to assign to the Collider.
     * @param dstShapeIndex The destination shape index within the Collider to copy the source shape to.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CustomCollider2D.SetCustomShape.html | CustomCollider2D.SetCustomShape}
     */
    SetCustomShape(physicsShapeGroup: PhysicsShapeGroup2D, srcShapeIndex: number, dstShapeIndex: number): void;
    SetCustomShape(shapes: Readonly<PhysicsShape2D[]>, vertices: Readonly<Vector2[]>, srcShapeIndex: number, dstShapeIndex: number): void;
    /**
     * Sets all the shapes and vertices in the Collider to those represented by the specified PhysicsShapeGroup2D.
     * @param physicsShapeGroup The PhysicsShapeGroup2D to use as the source of shapes and vertices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CustomCollider2D.SetCustomShapes.html | CustomCollider2D.SetCustomShapes}
     */
    SetCustomShapes(physicsShapeGroup: PhysicsShapeGroup2D): void;
    SetCustomShapes(shapes: Readonly<PhysicsShape2D[]>, vertices: Readonly<Vector2[]>): void;


}
    
interface CustomCollider2DConstructor {


    new(): CustomCollider2D;



}
declare const CustomCollider2D: CustomCollider2DConstructor;
    
interface EdgeCollider2D extends Collider2D {
    /**
     * Controls the radius of all edges created by the collider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/EdgeCollider2D-edgeRadius.html | EdgeCollider2D.edgeRadius}
     */
    edgeRadius: number;
    /**
     * Gets the number of edges.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/EdgeCollider2D-edgeCount.html | EdgeCollider2D.edgeCount}
     */
    readonly edgeCount: number;
    /**
     * Gets the number of points.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/EdgeCollider2D-pointCount.html | EdgeCollider2D.pointCount}
     */
    readonly pointCount: number;
    /**
     * Get or set the points defining multiple continuous edges.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/EdgeCollider2D-points.html | EdgeCollider2D.points}
     */
    points: Readonly<Vector2[]>;
    /**
     * Set this to true to use the adjacentStartPoint to form the collision normal that is used to calculate the collision response when a collision occurs at the Edge Collider's start point. Set this to false to not use the adjacentStartPoint, and the collision normal becomes the direction of motion of the collision.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/EdgeCollider2D-useAdjacentStartPoint.html | EdgeCollider2D.useAdjacentStartPoint}
     */
    useAdjacentStartPoint: boolean;
    /**
     * Set this to true to use the adjacentEndPoint to form the collision normal that is used to calculate the collision response when a collision occurs at the Edge Collider's end point. Set this to false to not use the adjacentEndPoint, and the collision normal becomes the direction of motion of the collision.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/EdgeCollider2D-useAdjacentEndPoint.html | EdgeCollider2D.useAdjacentEndPoint}
     */
    useAdjacentEndPoint: boolean;
    /**
     * Defines the position of a virtual point adjacent to the start point of the EdgeCollider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/EdgeCollider2D-adjacentStartPoint.html | EdgeCollider2D.adjacentStartPoint}
     */
    adjacentStartPoint: Vector2;
    /**
     * Defines the position of a virtual point adjacent to the end point of the EdgeCollider2D.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/EdgeCollider2D-adjacentEndPoint.html | EdgeCollider2D.adjacentEndPoint}
     */
    adjacentEndPoint: Vector2;



    GetPoints(points: Readonly<Vector2[]>): number;
    /**
     * Reset to a single edge consisting of two points.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/EdgeCollider2D.Reset.html | EdgeCollider2D.Reset}
     */
    Reset(): void;
    SetPoints(points: Readonly<Vector2[]>): boolean;


}
    
interface EdgeCollider2DConstructor {


    new(): EdgeCollider2D;



}
declare const EdgeCollider2D: EdgeCollider2DConstructor;
    
interface TilemapCollider2D extends Collider2D {
    /**
     * When the value is true, the Collider uses an additional Delaunay triangulation step to produce the Collider mesh. When the value is false, this additional step does not occur.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Tilemaps.TilemapCollider2D-useDelaunayMesh.html | Tilemaps.TilemapCollider2D.useDelaunayMesh}
     */
    useDelaunayMesh: boolean;
    /**
     * Maximum number of Tile Changes accumulated before doing a full collider rebuild instead of an incremental rebuild.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Tilemaps.TilemapCollider2D-maximumTileChangeCount.html | Tilemaps.TilemapCollider2D.maximumTileChangeCount}
     */
    maximumTileChangeCount: number;
    /**
     * The amount of Collider shapes each Tile extrudes to facilitate compositing with neighboring Tiles. This eliminates fine gaps between Tiles when using a CompositeCollider2D. This is calculated in Unity units within world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Tilemaps.TilemapCollider2D-extrusionFactor.html | Tilemaps.TilemapCollider2D.extrusionFactor}
     */
    extrusionFactor: number;
    /**
     * Returns true if there are Tilemap changes that require processing for Collider updates. Returns false otherwise.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Tilemaps.TilemapCollider2D-hasTilemapChanges.html | Tilemaps.TilemapCollider2D.hasTilemapChanges}
     */
    readonly hasTilemapChanges: boolean;



    /**
     * Processes Tilemap changes for Collider updates immediately, if there are any.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Tilemaps.TilemapCollider2D.ProcessTilemapChanges.html | Tilemaps.TilemapCollider2D.ProcessTilemapChanges}
     */
    ProcessTilemapChanges(): void;


}
    
interface TilemapCollider2DConstructor {


    new(): TilemapCollider2D;



}
declare const TilemapCollider2D: TilemapCollider2DConstructor;
    
interface SphereCollider extends Collider {
    /**
     * The center of the sphere in the object's local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SphereCollider-center.html | SphereCollider.center}
     */
    center: Vector3;
    /**
     * The radius of the sphere measured in the object's local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/SphereCollider-radius.html | SphereCollider.radius}
     */
    radius: number;





}
    
interface SphereColliderConstructor {


    new(): SphereCollider;



}
declare const SphereCollider: SphereColliderConstructor;
    
interface BoxCollider extends Collider {
    /**
     * The center of the box, measured in the object's local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoxCollider-center.html | BoxCollider.center}
     */
    center: Vector3;
    /**
     * The size of the box, measured in the object's local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/BoxCollider-size.html | BoxCollider.size}
     */
    size: Vector3;





}
    
interface BoxColliderConstructor {


    new(): BoxCollider;



}
declare const BoxCollider: BoxColliderConstructor;
    
interface CapsuleCollider extends Collider {
    /**
     * The center of the capsule, measured in the object's local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CapsuleCollider-center.html | CapsuleCollider.center}
     */
    center: Vector3;
    /**
     * The radius of the sphere, measured in the object's local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CapsuleCollider-radius.html | CapsuleCollider.radius}
     */
    radius: number;
    /**
     * The height of the capsule measured in the object's local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CapsuleCollider-height.html | CapsuleCollider.height}
     */
    height: number;
    /**
     * The direction of the capsule.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/CapsuleCollider-direction.html | CapsuleCollider.direction}
     */
    direction: number;





}
    
interface CapsuleColliderConstructor {


    new(): CapsuleCollider;



}
declare const CapsuleCollider: CapsuleColliderConstructor;
    
interface MeshCollider extends Collider {
    /**
     * The mesh object used for collision detection.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MeshCollider-sharedMesh.html | MeshCollider.sharedMesh}
     */
    sharedMesh: Mesh;
    /**
     * Use a convex collider from the mesh.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MeshCollider-convex.html | MeshCollider.convex}
     */
    convex: boolean;
    /**
     * Options used to enable or disable certain features in mesh cooking.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/MeshCollider-cookingOptions.html | MeshCollider.cookingOptions}
     */
    cookingOptions: MeshColliderCookingOptions;





}
    
interface MeshColliderConstructor {


    new(): MeshCollider;



}
declare const MeshCollider: MeshColliderConstructor;
    
interface WheelCollider extends Collider {
    /**
     * The center of the wheel, measured in the object's local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-center.html | WheelCollider.center}
     */
    center: Vector3;
    /**
     * The radius of the wheel, measured in local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-radius.html | WheelCollider.radius}
     */
    radius: number;
    /**
     * Maximum extension distance of wheel suspension, measured in local space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-suspensionDistance.html | WheelCollider.suspensionDistance}
     */
    suspensionDistance: number;
    /**
     * The parameters of wheel's suspension. The suspension attempts to reach a target position by applying a linear force and a damping force.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-suspensionSpring.html | WheelCollider.suspensionSpring}
     */
    suspensionSpring: JointSpring;
    /**
     * Limits the expansion velocity of the Wheel Collider's suspension. If you set this property on a Rigidbody that has several Wheel Colliders, such as a vehicle, then it affects all other Wheel Colliders on the Rigidbody.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-suspensionExpansionLimited.html | WheelCollider.suspensionExpansionLimited}
     */
    suspensionExpansionLimited: boolean;
    /**
     * Application point of the suspension and tire forces measured from the base of the resting wheel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-forceAppPointDistance.html | WheelCollider.forceAppPointDistance}
     */
    forceAppPointDistance: number;
    /**
     * The mass of the wheel, expressed in kilograms. Must be larger than zero. Typical values would be in range (20,80).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-mass.html | WheelCollider.mass}
     */
    mass: number;
    /**
     * The damping rate of the wheel. Must be larger than zero.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-wheelDampingRate.html | WheelCollider.wheelDampingRate}
     */
    wheelDampingRate: number;
    /**
     * Properties of tire friction in the direction the wheel is pointing in.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-forwardFriction.html | WheelCollider.forwardFriction}
     */
    forwardFriction: WheelFrictionCurve;
    /**
     * Properties of tire friction in the sideways direction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-sidewaysFriction.html | WheelCollider.sidewaysFriction}
     */
    sidewaysFriction: WheelFrictionCurve;
    /**
     * Motor torque on the wheel axle expressed in Newton metres. Positive or negative depending on direction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-motorTorque.html | WheelCollider.motorTorque}
     */
    motorTorque: number;
    /**
     * Brake torque expressed in Newton metres.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-brakeTorque.html | WheelCollider.brakeTorque}
     */
    brakeTorque: number;
    /**
     * Steering angle in degrees, always around the local y-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-steerAngle.html | WheelCollider.steerAngle}
     */
    steerAngle: number;
    /**
     * Indicates whether the wheel currently collides with something (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-isGrounded.html | WheelCollider.isGrounded}
     */
    readonly isGrounded: boolean;
    /**
     * Current wheel axle rotation speed, in rotations per minute (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-rpm.html | WheelCollider.rpm}
     */
    readonly rpm: number;
    /**
     * The mass supported by this WheelCollider.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-sprungMass.html | WheelCollider.sprungMass}
     */
    sprungMass: number;
    /**
     * Rotation speed of the wheel, measured in degrees per second.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider-rotationSpeed.html | WheelCollider.rotationSpeed}
     */
    rotationSpeed: number;



    /**
     * Configure vehicle sub-stepping parameters.
     * @param speedThreshold The speed threshold of the sub-stepping algorithm.
     * @param stepsBelowThreshold Amount of simulation sub-steps when vehicle's speed is below speedThreshold.
     * @param stepsAboveThreshold Amount of simulation sub-steps when vehicle's speed is above speedThreshold.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider.ConfigureVehicleSubsteps.html | WheelCollider.ConfigureVehicleSubsteps}
     */
    ConfigureVehicleSubsteps(speedThreshold: number, stepsBelowThreshold: number, stepsAboveThreshold: number): void;
    /**
     * Reset the sprung masses of the vehicle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelCollider.ResetSprungMasses.html | WheelCollider.ResetSprungMasses}
     */
    ResetSprungMasses(): void;


}
    
interface JointSpring {
    spring: number;
    damper: number;
    targetPosition: number;





}
    
interface WheelFrictionCurve {
    /**
     * Extremum point slip (default 1).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelFrictionCurve-extremumSlip.html | WheelFrictionCurve.extremumSlip}
     */
    extremumSlip: number;
    /**
     * Force at the extremum slip (default 20000).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelFrictionCurve-extremumValue.html | WheelFrictionCurve.extremumValue}
     */
    extremumValue: number;
    /**
     * Asymptote point slip (default 2).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelFrictionCurve-asymptoteSlip.html | WheelFrictionCurve.asymptoteSlip}
     */
    asymptoteSlip: number;
    /**
     * Force at the asymptote slip (default 10000).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelFrictionCurve-asymptoteValue.html | WheelFrictionCurve.asymptoteValue}
     */
    asymptoteValue: number;
    /**
     * Multiplier for the extremumValue and asymptoteValue values (default 1).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelFrictionCurve-stiffness.html | WheelFrictionCurve.stiffness}
     */
    stiffness: number;





}
    
interface WheelColliderConstructor {


    new(): WheelCollider;



}
declare const WheelCollider: WheelColliderConstructor;
    
interface TerrainCollider extends Collider {
    /**
     * The terrain that stores the heightmap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainCollider-terrainData.html | TerrainCollider.terrainData}
     */
    terrainData: TerrainData;





}
    
interface TerrainData extends Object {
    /**
     * Returns the heightmap texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-heightmapTexture.html | TerrainData.heightmapTexture}
     */
    readonly heightmapTexture: RenderTexture;
    /**
     * The size of the heightmap in texels for either the width or the height.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-heightmapResolution.html | TerrainData.heightmapResolution}
     */
    heightmapResolution: number;
    /**
     * Returns a Vector3 where the x and z components are the size of each heightmap sample (i.e. the space between two neighboring heightmap samples), and the y component is the entire Terrain's height range in world space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-heightmapScale.html | TerrainData.heightmapScale}
     */
    readonly heightmapScale: Vector3;
    /**
     * Returns the Terrain holes Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-holesTexture.html | TerrainData.holesTexture}
     */
    readonly holesTexture: Texture;
    /**
     * Enable the Terrain holes Texture compression.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-enableHolesTextureCompression.html | TerrainData.enableHolesTextureCompression}
     */
    enableHolesTextureCompression: boolean;
    /**
     * Returns the Terrain holes resolution for both the data and the Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-holesResolution.html | TerrainData.holesResolution}
     */
    readonly holesResolution: number;
    /**
     * The total size in world units of the terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-size.html | TerrainData.size}
     */
    size: Vector3;
    /**
     * The local bounding box of the TerrainData object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-bounds.html | TerrainData.bounds}
     */
    readonly bounds: Bounds;
    /**
     * Strength of the waving grass in the terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-wavingGrassStrength.html | TerrainData.wavingGrassStrength}
     */
    wavingGrassStrength: number;
    /**
     * Amount of waving grass in the terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-wavingGrassAmount.html | TerrainData.wavingGrassAmount}
     */
    wavingGrassAmount: number;
    /**
     * Speed of the waving grass.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-wavingGrassSpeed.html | TerrainData.wavingGrassSpeed}
     */
    wavingGrassSpeed: number;
    /**
     * Color of the waving grass that the terrain has.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-wavingGrassTint.html | TerrainData.wavingGrassTint}
     */
    wavingGrassTint: Color;
    /**
     * The resolution of the detail data stored in TerrainData.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-detailWidth.html | TerrainData.detailWidth}
     */
    readonly detailWidth: number;
    /**
     * The resolution of the detail data stored in TerrainData.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-detailHeight.html | TerrainData.detailHeight}
     */
    readonly detailHeight: number;
    /**
     * The maximum value of each sample in the detail map of the terrain data.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-maxDetailScatterPerRes.html | TerrainData.maxDetailScatterPerRes}
     */
    readonly maxDetailScatterPerRes: number;
    /**
     * The number of patches along a terrain tile edge. This is squared to make a grid of patches.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-detailPatchCount.html | TerrainData.detailPatchCount}
     */
    readonly detailPatchCount: number;
    /**
     * Detail Resolution of the TerrainData.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-detailResolution.html | TerrainData.detailResolution}
     */
    readonly detailResolution: number;
    /**
     * Detail Resolution of each patch. A larger value will decrease the number of batches used by detail objects.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-detailResolutionPerPatch.html | TerrainData.detailResolutionPerPatch}
     */
    readonly detailResolutionPerPatch: number;
    /**
     * Additional resources: DetailScatterMode
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-detailScatterMode.html | TerrainData.detailScatterMode}
     */
    readonly detailScatterMode: DetailScatterMode;
    /**
     * Contains the detail texture/meshes that the Terrain has.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-detailPrototypes.html | TerrainData.detailPrototypes}
     */
    detailPrototypes: Readonly<DetailPrototype[]>;
    /**
     * Contains the current trees placed in the terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-treeInstances.html | TerrainData.treeInstances}
     */
    treeInstances: Readonly<TreeInstance[]>;
    /**
     * Returns the number of tree instances.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-treeInstanceCount.html | TerrainData.treeInstanceCount}
     */
    readonly treeInstanceCount: number;
    /**
     * The list of tree prototypes available in the inspector.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-treePrototypes.html | TerrainData.treePrototypes}
     */
    treePrototypes: Readonly<TreePrototype[]>;
    /**
     * Number of alpha map layers.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-alphamapLayers.html | TerrainData.alphamapLayers}
     */
    readonly alphamapLayers: number;
    /**
     * The size of the alpha map in texels for either the width or the height.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-alphamapResolution.html | TerrainData.alphamapResolution}
     */
    alphamapResolution: number;
    /**
     * Width of the alpha map.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-alphamapWidth.html | TerrainData.alphamapWidth}
     */
    readonly alphamapWidth: number;
    /**
     * Height of the alpha map. (Read only.)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-alphamapHeight.html | TerrainData.alphamapHeight}
     */
    readonly alphamapHeight: number;
    /**
     * Resolution of the base map used for rendering far patches on the terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-baseMapResolution.html | TerrainData.baseMapResolution}
     */
    baseMapResolution: number;
    /**
     * Returns the number of alphamap textures.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-alphamapTextureCount.html | TerrainData.alphamapTextureCount}
     */
    readonly alphamapTextureCount: number;
    /**
     * Alpha map textures used by the Terrain. Used by Terrain Inspector for undo.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-alphamapTextures.html | TerrainData.alphamapTextures}
     */
    readonly alphamapTextures: Readonly<Texture2D[]>;
    /**
     * Retrieves the terrain layers used by the current terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-terrainLayers.html | TerrainData.terrainLayers}
     */
    terrainLayers: Readonly<TerrainLayer[]>;



    /**
     * This function computes and returns the coverage (how many instances fit in a square unit) of a detail prototype, given its index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.ComputeDetailCoverage.html | TerrainData.ComputeDetailCoverage}
     */
    ComputeDetailCoverage(detailPrototypeIndex: number): number;
    /**
     * Copies the specified part of the active RenderTexture to the Terrain heightmap texture.
     * @param sourceRect The part of the active Render Texture to copy.
     * @param dest The X and Y coordinates of the heightmap texture to copy into.
     * @param syncControl Controls how CPU synchronization is performed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.CopyActiveRenderTextureToHeightmap.html | TerrainData.CopyActiveRenderTextureToHeightmap}
     */
    CopyActiveRenderTextureToHeightmap(sourceRect: RectInt, dest: Vector2Int, syncControl: TerrainHeightmapSyncControl): void;
    /**
     * Copies the specified part of the active RenderTexture to the Terrain texture.
     * @param textureName The name of the Terrain texture to copy into.
     * @param textureIndex The index of the Terrain texture to copy into.
     * @param sourceRect The part of the active Render Texture to copy.
     * @param dest The X and Y coordinates of the Terrain texture to copy into.
     * @param allowDelayedCPUSync Specifies whether to allow delayed CPU synchronization of the texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.CopyActiveRenderTextureToTexture.html | TerrainData.CopyActiveRenderTextureToTexture}
     */
    CopyActiveRenderTextureToTexture(textureName: string, textureIndex: number, sourceRect: RectInt, dest: Vector2Int, allowDelayedCPUSync: boolean): void;
    /**
     * Marks the specified part of the heightmap as dirty.
     * @param region The rectangular region to mark as dirty.
     * @param syncControl Controls how CPU synchronization is performed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.DirtyHeightmapRegion.html | TerrainData.DirtyHeightmapRegion}
     */
    DirtyHeightmapRegion(region: RectInt, syncControl: TerrainHeightmapSyncControl): void;
    /**
     * Marks the specified part of the Terrain texture as dirty.
     * @param textureName The name of the Terrain texture.
     * @param region The rectangular region to mark as dirty.
     * @param allowDelayedCPUSync Specifies whether to allow delayed CPU synchronization of the texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.DirtyTextureRegion.html | TerrainData.DirtyTextureRegion}
     */
    DirtyTextureRegion(textureName: string, region: RectInt, allowDelayedCPUSync: boolean): void;
    /**
     * Returns the alpha map at a position x, y given a width and height.
     * @param x The x offset to read from.
     * @param y The y offset to read from.
     * @param width The width of the alpha map area to read.
     * @param height The height of the alpha map area to read.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetAlphamaps.html | TerrainData.GetAlphamaps}
     */
    GetAlphamaps(x: number, y: number, width: number, height: number): Single[,,];
    /**
     * Returns the alphamap texture at the specified index.
     * @param index Index of the alphamap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetAlphamapTexture.html | TerrainData.GetAlphamapTexture}
     */
    GetAlphamapTexture(index: number): Texture2D;
    /**
     * Returns an array of detail patches, which are each identified by X-Z coordinates. Detail objects in the patches are clamped to the maximum count.
     * @param density The detail density value. See Terrain.detailObjectDensity.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetClampedDetailPatches.html | TerrainData.GetClampedDetailPatches}
     */
    GetClampedDetailPatches(density: number): Readonly<Vector2Int[]>;
    /**
     * Returns a 2D array of the detail object density (i.e. the number of detail objects for this layer) in the specific location.
     * @param xBase First x index of detail object density data to retrieve.
     * @param yBase First y index of detail object density data to retrieve.
     * @param width The amount of detail object density data to retrieve along the Terrain's x axis.
     * @param height The amount of detail object density data to retrieve along the Terrain's z axis.
     * @param layer The index of the detail in the TerrainData.detailPrototypes array.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetDetailLayer.html | TerrainData.GetDetailLayer}
     */
    GetDetailLayer(xBase: number, yBase: number, width: number, height: number, layer: number): Int32[,];
    GetDetailLayer(positionBase: Vector2Int, size: Vector2Int, layer: number): Int32[,];
    /**
     * Gets the world space height of the Terrain at a certain point x,y without adding the Terrain's world position y.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetHeight.html | TerrainData.GetHeight}
     */
    GetHeight(x: number, y: number): number;
    /**
     * Gets an array of heightmap samples.
     * @param xBase First index of heightmap samples to retrieve along the Terrain's x axis.
     * @param yBase First index of heightmap samples to retrieve along the Terrain's z axis.
     * @param width Number of samples to retrieve along the Terrain's x axis.
     * @param height Number of samples to retrieve along the Terrain's z axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetHeights.html | TerrainData.GetHeights}
     */
    GetHeights(xBase: number, yBase: number, width: number, height: number): Single[,];
    /**
     * Gets an array of Terrain holes samples.
     * @param xBase First x index of Terrain holes samples to retrieve.
     * @param yBase First y index of Terrain holes samples to retrieve.
     * @param width Number of samples to retrieve along the Terrain holes x axis.
     * @param height Number of samples to retrieve along the Terrain holes y axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetHoles.html | TerrainData.GetHoles}
     */
    GetHoles(xBase: number, yBase: number, width: number, height: number): Boolean[,];
    /**
     * Gets an interpolated height at a point x,y. The x and y coordinates are clamped to [0, 1].
     * @param x X coordinate of the point in the range of [0, 1].
     * @param y Y coordinate of the point in the range of [0, 1].
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetInterpolatedHeight.html | TerrainData.GetInterpolatedHeight}
     */
    GetInterpolatedHeight(x: number, y: number): number;
    /**
     * Gets an array of terrain height values using the normalized x,y coordinates.
     * @param xBase The base x coordinate.
     * @param yBase The base y coordinate.
     * @param xCount The number of queries along the X axis.
     * @param yCount The number of queries along the Y axis.
     * @param xInterval The interval between each query along the X axis.
     * @param yInterval The interval between each query along the Y axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetInterpolatedHeights.html | TerrainData.GetInterpolatedHeights}
     */
    GetInterpolatedHeights(xBase: number, yBase: number, xCount: number, yCount: number, xInterval: number, yInterval: number): Single[,];
    /**
     * Fills the array with Terrain height values using normalized x,y coordinates.
     * @param results The array to fill with height values.
     * @param resultXOffset The offset from the beginning of the array, along the X axis, at which to start filling in height values.
     * @param resultYOffset The offset from the beginning of the array, along the Y axis, at which to start filling in height values.
     * @param xBase The base x coordinate.
     * @param yBase The base y coordinate.
     * @param xCount The number of queries along the X axis.
     * @param yCount The number of queries along the Y axis.
     * @param xInterval The interval between each query along the X axis.
     * @param yInterval The interval between each query along the Y axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetInterpolatedHeights.html | TerrainData.GetInterpolatedHeights}
     */
    GetInterpolatedHeights(results: Single[,], resultXOffset: number, resultYOffset: number, xBase: number, yBase: number, xCount: number, yCount: number, xInterval: number, yInterval: number): void;
    /**
     * Get an interpolated normal at a given location.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetInterpolatedNormal.html | TerrainData.GetInterpolatedNormal}
     */
    GetInterpolatedNormal(x: number, y: number): Vector3;
    /**
     * Returns an array of tesselation maximum height error values per renderable terrain patch.  The returned array can be modified and passed to OverrideMaximumHeightError.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetMaximumHeightError.html | TerrainData.GetMaximumHeightError}
     */
    GetMaximumHeightError(): Readonly<number[]>;
    /**
     * Returns an array of min max height values for all the renderable patches in a terrain.  The returned array can be modified and then passed to OverrideMinMaxPatchHeights.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetPatchMinMaxHeights.html | TerrainData.GetPatchMinMaxHeights}
     */
    GetPatchMinMaxHeights(): Readonly<PatchExtents[]>;
    /**
     * Gets the gradient of the terrain at point (x,y). The gradient's value is always positive.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetSteepness.html | TerrainData.GetSteepness}
     */
    GetSteepness(x: number, y: number): number;
    /**
     * Returns an array of all supported detail layer indices in the area.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetSupportedLayers.html | TerrainData.GetSupportedLayers}
     */
    GetSupportedLayers(xBase: number, yBase: number, totalWidth: number, totalHeight: number): Readonly<number[]>;
    /**
     * Returns an array of all supported detail layer indices in the area.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetSupportedLayers.html | TerrainData.GetSupportedLayers}
     */
    GetSupportedLayers(positionBase: Vector2Int, size: Vector2Int): Readonly<number[]>;
    /**
     * Gets the tree instance at the specified index. It is used as a faster version of treeInstances[index] as this function doesn't create the entire tree instances array.
     * @param index The index of the tree instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.GetTreeInstance.html | TerrainData.GetTreeInstance}
     */
    GetTreeInstance(index: number): TreeInstance;
    /**
     * Gets whether a certain point at x,y is a hole.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.IsHole.html | TerrainData.IsHole}
     */
    IsHole(x: number, y: number): boolean;
    /**
     * Override the maximum tessellation height error with user provided values.  Note that the overriden values get reset when the terrain resolution is changed and stays unchanged when the terrain heightmap is painted or changed via script.
     * @param maxError Provided maximum height error values.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.OverrideMaximumHeightError.html | TerrainData.OverrideMaximumHeightError}
     */
    OverrideMaximumHeightError(maxError: Readonly<number[]>): void;
    /**
     * Override the minimum and maximum patch heights for every renderable terrain patch.  Note that the overriden values get reset when the terrain resolution is changed and stays unchanged when the terrain heightmap is painted or changed via script.
     * @param minMaxHeights Array of minimum and maximum terrain patch height values.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.OverrideMinMaxPatchHeights.html | TerrainData.OverrideMinMaxPatchHeights}
     */
    OverrideMinMaxPatchHeights(minMaxHeights: Readonly<PatchExtents[]>): void;
    /**
     * Reloads all the values of the available prototypes (ie, detail mesh assets) in the TerrainData Object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.RefreshPrototypes.html | TerrainData.RefreshPrototypes}
     */
    RefreshPrototypes(): void;
    /**
     * Removes the detail prototype at the specified index.
     * @param index The index of the detail prototype.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.RemoveDetailPrototype.html | TerrainData.RemoveDetailPrototype}
     */
    RemoveDetailPrototype(index: number): void;
    /**
     * Assign all splat values in the given map area.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetAlphamaps.html | TerrainData.SetAlphamaps}
     */
    SetAlphamaps(x: number, y: number, map: Single[,,]): void;
    /**
     * Marks the terrain data as dirty to trigger an update of the terrain basemap texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetBaseMapDirty.html | TerrainData.SetBaseMapDirty}
     */
    SetBaseMapDirty(): void;
    /**
     * Sets the detail layer density map.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetDetailLayer.html | TerrainData.SetDetailLayer}
     */
    SetDetailLayer(xBase: number, yBase: number, layer: number, details: Int32[,]): void;
    SetDetailLayer(basePosition: Vector2Int, layer: number, details: Int32[,]): void;
    /**
     * Sets the resolution of the detail map.
     * @param detailResolution Specifies the number of pixels in the detail resolution map. A larger detailResolution, leads to more accurate detail object painting.
     * @param resolutionPerPatch Specifies the size in pixels of each individually rendered detail patch. A larger number reduces draw calls, but might increase triangle count since detail patches are culled on a per batch basis. A recommended value is 16. If you use a very large detail object distance and your grass is very sparse, it makes sense to increase the value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetDetailResolution.html | TerrainData.SetDetailResolution}
     */
    SetDetailResolution(detailResolution: number, resolutionPerPatch: number): void;
    /**
     * Sets the DetailScatterMode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetDetailScatterMode.html | TerrainData.SetDetailScatterMode}
     */
    SetDetailScatterMode(scatterMode: DetailScatterMode): void;
    /**
     * Sets an array of heightmap samples.
     * @param xBase First x index of heightmap samples to set.
     * @param yBase First y index of heightmap samples to set.
     * @param heights Array of heightmap samples to set (values range from 0 to 1, array indexed as [y,x]).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetHeights.html | TerrainData.SetHeights}
     */
    SetHeights(xBase: number, yBase: number, heights: Single[,]): void;
    /**
     * Sets an array of heightmap samples.
     * @param xBase First x index of heightmap samples to set.
     * @param yBase First y index of heightmap samples to set.
     * @param heights Array of heightmap samples to set (values range from 0 to 1, array indexed as [y,x]).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetHeightsDelayLOD.html | TerrainData.SetHeightsDelayLOD}
     */
    SetHeightsDelayLOD(xBase: number, yBase: number, heights: Single[,]): void;
    /**
     * Sets an array of Terrain holes samples.
     * @param xBase First x index of Terrain holes samples to set.
     * @param yBase First y index of Terrain holes samples to set.
     * @param holes Array of Terrain holes samples to set (array indexed as [y,x]).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetHoles.html | TerrainData.SetHoles}
     */
    SetHoles(xBase: number, yBase: number, holes: Boolean[,]): void;
    /**
     * Sets an array of Terrain holes samples.
     * @param xBase First x index of Terrain holes samples to set.
     * @param yBase First y index of Terrain holes samples to set.
     * @param holes Array of Terrain holes samples to set (array indexed as [y,x]).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetHolesDelayLOD.html | TerrainData.SetHolesDelayLOD}
     */
    SetHolesDelayLOD(xBase: number, yBase: number, holes: Boolean[,]): void;
    /**
     * This function sets the terrainLayers property, and in addition, registers the action to the Editor's undo stack.
     * @param terrainLayers The Terrain Layer assets to set.
     * @param undoName The name of the Editor's undo action.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetTerrainLayersRegisterUndo.html | TerrainData.SetTerrainLayersRegisterUndo}
     */
    SetTerrainLayersRegisterUndo(terrainLayers: Readonly<TerrainLayer[]>, undoName: string): void;
    /**
     * Sets the tree instance with new parameters at the specified index. However, you cannot change TreeInstance.prototypeIndex and TreeInstance.position. If you change them, the method throws an ArgumentException.
     * @param index The index of the tree instance.
     * @param instance The new TreeInstance value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetTreeInstance.html | TerrainData.SetTreeInstance}
     */
    SetTreeInstance(index: number, instance: TreeInstance): void;
    /**
     * Sets the Tree Instance array, and optionally snaps Trees onto the surface of the Terrain heightmap.
     * @param instances The array of TreeInstance objects.
     * @param snapToHeightmap Specifies whether to snap Trees to the Terrain heightmap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SetTreeInstances.html | TerrainData.SetTreeInstances}
     */
    SetTreeInstances(instances: Readonly<TreeInstance[]>, snapToHeightmap: boolean): void;
    /**
     * Performs synchronization queued by previous calls to CopyActiveRenderTextureToHeightmap and DirtyHeightmapRegion, which makes the height data and LOD data used for tessellation up to date.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SyncHeightmap.html | TerrainData.SyncHeightmap}
     */
    SyncHeightmap(): void;
    /**
     * Performs synchronization queued by previous calls to CopyActiveRenderTextureToTexture and DirtyTextureRegion, which makes CPU data of the Terrain textures up to date.
     * @param textureName The name of the Terrain texture to synchronize.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData.SyncTexture.html | TerrainData.SyncTexture}
     */
    SyncTexture(textureName: string): void;


}
    
interface DetailPrototype {
    /**
     * GameObject used by the DetailPrototype.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-prototype.html | DetailPrototype.prototype}
     */
    prototype: GameObject;
    /**
     * Texture used by the DetailPrototype.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-prototypeTexture.html | DetailPrototype.prototypeTexture}
     */
    prototypeTexture: Texture2D;
    /**
     * Minimum width of the grass billboards (if render mode is GrassBillboard).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-minWidth.html | DetailPrototype.minWidth}
     */
    minWidth: number;
    /**
     * Maximum width of the grass billboards (if render mode is GrassBillboard).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-maxWidth.html | DetailPrototype.maxWidth}
     */
    maxWidth: number;
    /**
     * Minimum height of the grass billboards (if render mode is GrassBillboard).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-minHeight.html | DetailPrototype.minHeight}
     */
    minHeight: number;
    /**
     * Maximum height of the grass billboards (if render mode is GrassBillboard).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-maxHeight.html | DetailPrototype.maxHeight}
     */
    maxHeight: number;
    /**
     * Specifies the random seed value for detail object placement.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-noiseSeed.html | DetailPrototype.noiseSeed}
     */
    noiseSeed: number;
    /**
     * Controls the spatial frequency of the noise pattern used to vary the scale and color of the detail objects.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-noiseSpread.html | DetailPrototype.noiseSpread}
     */
    noiseSpread: number;
    /**
     * Controls detail density for this detail prototype, relative to it's size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-density.html | DetailPrototype.density}
     */
    density: number;
    /**
     * Controls how far away detail objects are from the edge of the hole area.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-holeEdgePadding.html | DetailPrototype.holeEdgePadding}
     */
    holeEdgePadding: number;
    /**
     * Color when the DetailPrototypes are &quot;healthy&quot;.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-healthyColor.html | DetailPrototype.healthyColor}
     */
    healthyColor: Color;
    /**
     * Color when the DetailPrototypes are &quot;dry&quot;.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-dryColor.html | DetailPrototype.dryColor}
     */
    dryColor: Color;
    /**
     * Render mode for the DetailPrototype.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-renderMode.html | DetailPrototype.renderMode}
     */
    renderMode: DetailRenderMode;
    /**
     * Indicates whether this detail prototype uses the Mesh object from the GameObject specified by prototype.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-usePrototypeMesh.html | DetailPrototype.usePrototypeMesh}
     */
    usePrototypeMesh: boolean;
    /**
     * Indicates whether this detail prototype uses for rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-useInstancing.html | DetailPrototype.useInstancing}
     */
    useInstancing: boolean;
    /**
     * Controls the detail's target coverage.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-targetCoverage.html | DetailPrototype.targetCoverage}
     */
    targetCoverage: number;
    /**
     * Indicates the global density scale set in the terrain settings affects this detail prototype.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-useDensityScaling.html | DetailPrototype.useDensityScaling}
     */
    useDensityScaling: boolean;
    /**
     * Rotate detail axis parallel to the ground's normal direction, so that the detail is perpendicular to the ground.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-alignToGround.html | DetailPrototype.alignToGround}
     */
    alignToGround: number;
    /**
     * Controls how Unity generates the detail positions.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype-positionJitter.html | DetailPrototype.positionJitter}
     */
    positionJitter: number;



    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    /**
     * Returns true if the detail prototype is valid and the Terrain can accept it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/DetailPrototype.Validate.html | DetailPrototype.Validate}
     */
    Validate(): boolean;


}
    
interface DetailPrototypeConstructor {


    new(): DetailPrototype;
    new(other: DetailPrototype): DetailPrototype;



}
declare const DetailPrototype: DetailPrototypeConstructor;
    
interface TreeInstance {
    position: Vector3;
    widthScale: number;
    heightScale: number;
    rotation: number;
    color: Color32;
    lightmapColor: Color32;
    prototypeIndex: number;





}
    
interface TreePrototype {
    /**
     * Retrieves the actual GameObject used by the tree.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TreePrototype-prefab.html | TreePrototype.prefab}
     */
    prefab: GameObject;
    /**
     * Bend factor of the tree prototype.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TreePrototype-bendFactor.html | TreePrototype.bendFactor}
     */
    bendFactor: number;
    /**
     * The LOD index of a Tree LODGroup that Unity uses to generate a NavMesh. It uses this value only for Trees with a LODGroup, and ignores this value for regular Trees.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TreePrototype-navMeshLod.html | TreePrototype.navMeshLod}
     */
    navMeshLod: number;



    Equals(obj: unknown): boolean;
    GetHashCode(): number;


}
    
interface TreePrototypeConstructor {


    new(): TreePrototype;
    new(other: TreePrototype): TreePrototype;



}
declare const TreePrototype: TreePrototypeConstructor;
    
interface TerrainLayer extends Object {
    /**
     * The diffuse texture used by the terrain layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-diffuseTexture.html | TerrainLayer.diffuseTexture}
     */
    diffuseTexture: Texture2D;
    /**
     * Normal map texture used by the terrain layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-normalMapTexture.html | TerrainLayer.normalMapTexture}
     */
    normalMapTexture: Texture2D;
    /**
     * The mask map texture used by the terrain layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-maskMapTexture.html | TerrainLayer.maskMapTexture}
     */
    maskMapTexture: Texture2D;
    /**
     * UV Tiling size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-tileSize.html | TerrainLayer.tileSize}
     */
    tileSize: Vector2;
    /**
     * UV tiling offset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-tileOffset.html | TerrainLayer.tileOffset}
     */
    tileOffset: Vector2;
    /**
     * Specular color.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-specular.html | TerrainLayer.specular}
     */
    specular: Color;
    /**
     * Metallic factor used by the terrain layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-metallic.html | TerrainLayer.metallic}
     */
    metallic: number;
    /**
     * Smoothness of the specular reflection.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-smoothness.html | TerrainLayer.smoothness}
     */
    smoothness: number;
    /**
     * A float value that scales the normal vector. The minimum value is 0, the maximum value is 1.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-normalScale.html | TerrainLayer.normalScale}
     */
    normalScale: number;
    /**
     * A Vector4 value specifying the minimum RGBA value that the diffuse texture maps to when the value of the channel is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-diffuseRemapMin.html | TerrainLayer.diffuseRemapMin}
     */
    diffuseRemapMin: Vector4;
    /**
     * A Vector4 value specifying the maximum RGBA value that the diffuse texture maps to when the value of the channel is 1.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-diffuseRemapMax.html | TerrainLayer.diffuseRemapMax}
     */
    diffuseRemapMax: Vector4;
    /**
     * A Vector4 value specifying the minimum RGBA value that the mask map texture maps to when the value of the channel is 0.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-maskMapRemapMin.html | TerrainLayer.maskMapRemapMin}
     */
    maskMapRemapMin: Vector4;
    /**
     * A Vector4 value specifying the maximum RGBA value that the mask map texture maps to when the value of the channel is 1.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-maskMapRemapMax.html | TerrainLayer.maskMapRemapMax}
     */
    maskMapRemapMax: Vector4;
    /**
     * Choose the source for smoothness value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainLayer-smoothnessSource.html | TerrainLayer.smoothnessSource}
     */
    smoothnessSource: TerrainLayerSmoothnessSource;





}
    
interface TerrainLayerConstructor {


    new(): TerrainLayer;



}
declare const TerrainLayer: TerrainLayerConstructor;
    
interface PatchExtents {
    /**
     * Minimum height of a terrain patch.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PatchExtents-min.html | PatchExtents.min}
     */
    min: number;
    /**
     * Maximum height of a terrain patch.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/PatchExtents-max.html | PatchExtents.max}
     */
    max: number;





}
    
interface TerrainDataConstructor {
    /**
     * The name for the Terrain alpha map textures.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-AlphamapTextureName.html | TerrainData.AlphamapTextureName}
     */
    readonly AlphamapTextureName: string;
    /**
     * The name for the Terrain holes Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TerrainData-HolesTextureName.html | TerrainData.HolesTextureName}
     */
    readonly HolesTextureName: string;


    new(): TerrainData;



}
declare const TerrainData: TerrainDataConstructor;
    
interface TerrainColliderConstructor {


    new(): TerrainCollider;



}
declare const TerrainCollider: TerrainColliderConstructor;
    
interface NavMeshHit {
    /**
     * Position of hit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshHit-position.html | AI.NavMeshHit.position}
     */
    position: Vector3;
    /**
     * Normal at the point of hit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshHit-normal.html | AI.NavMeshHit.normal}
     */
    normal: Vector3;
    /**
     * Distance to the point of hit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshHit-distance.html | AI.NavMeshHit.distance}
     */
    distance: number;
    /**
     * Mask specifying NavMesh area at point of hit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshHit-mask.html | AI.NavMeshHit.mask}
     */
    mask: number;
    /**
     * Flag set when hit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/AI.NavMeshHit-hit.html | AI.NavMeshHit.hit}
     */
    hit: boolean;





}
    
interface Graphics {





}
    
interface LightProbeProxyVolume extends Behaviour {
    /**
     * The world-space bounding box in which the 3D grid of interpolated Light Probes is generated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-boundsGlobal.html | LightProbeProxyVolume.boundsGlobal}
     */
    readonly boundsGlobal: Bounds;
    /**
     * The size of the bounding box in which the 3D grid of interpolated Light Probes is generated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-sizeCustom.html | LightProbeProxyVolume.sizeCustom}
     */
    sizeCustom: Vector3;
    /**
     * The local-space origin of the bounding box in which the 3D grid of interpolated Light Probes is generated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-originCustom.html | LightProbeProxyVolume.originCustom}
     */
    originCustom: Vector3;
    /**
     * Interpolated Light Probe density.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-probeDensity.html | LightProbeProxyVolume.probeDensity}
     */
    probeDensity: number;
    /**
     * The 3D grid resolution on the x-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-gridResolutionX.html | LightProbeProxyVolume.gridResolutionX}
     */
    gridResolutionX: number;
    /**
     * The 3D grid resolution on the y-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-gridResolutionY.html | LightProbeProxyVolume.gridResolutionY}
     */
    gridResolutionY: number;
    /**
     * The 3D grid resolution on the z-axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-gridResolutionZ.html | LightProbeProxyVolume.gridResolutionZ}
     */
    gridResolutionZ: number;
    /**
     * The bounding box mode for generating the 3D grid of interpolated Light Probes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-boundingBoxMode.html | LightProbeProxyVolume.boundingBoxMode}
     */
    boundingBoxMode: BoundingBoxMode;
    /**
     * The resolution mode for generating the grid of interpolated Light Probes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-resolutionMode.html | LightProbeProxyVolume.resolutionMode}
     */
    resolutionMode: ResolutionMode;
    /**
     * The mode in which the interpolated Light Probe positions are generated.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-probePositionMode.html | LightProbeProxyVolume.probePositionMode}
     */
    probePositionMode: ProbePositionMode;
    /**
     * Sets the way the Light Probe Proxy Volume refreshes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-refreshMode.html | LightProbeProxyVolume.refreshMode}
     */
    refreshMode: RefreshMode;
    /**
     * Determines how many Spherical Harmonics bands will be evaluated to compute the ambient color.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-qualityMode.html | LightProbeProxyVolume.qualityMode}
     */
    qualityMode: QualityMode;
    /**
     * The texture data format used by the Light Probe Proxy Volume 3D texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-dataFormat.html | LightProbeProxyVolume.dataFormat}
     */
    dataFormat: DataFormat;



    /**
     * Triggers an update of the Light Probe Proxy Volume.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume.Update.html | LightProbeProxyVolume.Update}
     */
    Update(): void;


}
    
interface LightProbeProxyVolumeConstructor {
    /**
     * Checks if Light Probe Proxy Volumes are supported.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/LightProbeProxyVolume-isFeatureSupported.html | LightProbeProxyVolume.isFeatureSupported}
     */
    readonly isFeatureSupported: boolean;


    new(): LightProbeProxyVolume;



}
declare const LightProbeProxyVolume: LightProbeProxyVolumeConstructor;
    
interface RenderParams {
    /**
     * Layer used for rendering. to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-layer.html | RenderParams.layer}
     */
    layer: number;
    /**
     * Renderer layer mask used for rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-renderingLayerMask.html | RenderParams.renderingLayerMask}
     */
    renderingLayerMask: number;
    /**
     * Renderer priority.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-rendererPriority.html | RenderParams.rendererPriority}
     */
    rendererPriority: number;
    /**
     * The instance ID of the GameObject that issues the draw. Provide an instanceID to make a rendered GameObject pickable in the scene view when you click on it. The default value is 0, which means that you can't pick or outline the procedural GameObject in the scene view.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-instanceID.html | RenderParams.instanceID}
     */
    instanceID: number;
    /**
     * Defines world space bounds for the geometry. Used to cull and sort the rendered geometry.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-worldBounds.html | RenderParams.worldBounds}
     */
    worldBounds: Bounds;
    /**
     * The camera used for rendering. If set to null (default) renders for all cameras.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-camera.html | RenderParams.camera}
     */
    camera: Camera;
    /**
     * Motion vector mode used for rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-motionVectorMode.html | RenderParams.motionVectorMode}
     */
    motionVectorMode: MotionVectorGenerationMode;
    /**
     * The type of reflection probe used for rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-reflectionProbeUsage.html | RenderParams.reflectionProbeUsage}
     */
    reflectionProbeUsage: ReflectionProbeUsage;
    /**
     * Material used for rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-material.html | RenderParams.material}
     */
    material: Material;
    /**
     * Material properties used for rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-matProps.html | RenderParams.matProps}
     */
    matProps: MaterialPropertyBlock;
    /**
     * Describes if geometry should cast shadows.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-shadowCastingMode.html | RenderParams.shadowCastingMode}
     */
    shadowCastingMode: ShadowCastingMode;
    /**
     * Descripes if the rendered geometry should receive shadows.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-receiveShadows.html | RenderParams.receiveShadows}
     */
    receiveShadows: boolean;
    /**
     * The type of light probe usage.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-lightProbeUsage.html | RenderParams.lightProbeUsage}
     */
    lightProbeUsage: LightProbeUsage;
    /**
     * Light Probe Proxy Volume (LPPV) used for rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-lightProbeProxyVolume.html | RenderParams.lightProbeProxyVolume}
     */
    lightProbeProxyVolume: LightProbeProxyVolume;
    /**
     * Uses the RenderParams.sceneCullingMask property to specify a custom SceneManagement.SceneCullingMasks. This property is only available in the Editor, you can still access it in a Player but it'll be ignored.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-overrideSceneCullingMask.html | RenderParams.overrideSceneCullingMask}
     */
    overrideSceneCullingMask: boolean;
    /**
     * Overrides the scene culling mask for the rendered object. This can help you control prefab stage visibility or entities sub-scene visibiliy. This property is only available in the Editor, you can still access it in a Player but it'll be ignored..
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/RenderParams-sceneCullingMask.html | RenderParams.sceneCullingMask}
     */
    sceneCullingMask: number;





}
    
interface RenderParamsConstructor {


    new(mat: Material): RenderParams;



}
declare const RenderParams: RenderParamsConstructor;
    
interface RenderTargetSetup {
    color: Readonly<RenderBuffer[]>;
    depth: RenderBuffer;
    mipLevel: number;
    cubemapFace: CubemapFace;
    depthSlice: number;
    colorLoad: Readonly<number[]>;
    colorStore: Readonly<number[]>;
    depthLoad: RenderBufferLoadAction;
    depthStore: RenderBufferStoreAction;





}
    
interface RenderTargetSetupConstructor {


    new(color: Readonly<RenderBuffer[]>, depth: RenderBuffer, mip: number, face: CubemapFace, colorLoad: Readonly<number[]>, colorStore: Readonly<number[]>, depthLoad: RenderBufferLoadAction, depthStore: RenderBufferStoreAction): RenderTargetSetup;
    new(color: RenderBuffer, depth: RenderBuffer): RenderTargetSetup;
    new(color: RenderBuffer, depth: RenderBuffer, mipLevel: number): RenderTargetSetup;
    new(color: RenderBuffer, depth: RenderBuffer, mipLevel: number, face: CubemapFace): RenderTargetSetup;
    new(color: RenderBuffer, depth: RenderBuffer, mipLevel: number, face: CubemapFace, depthSlice: number): RenderTargetSetup;
    new(color: Readonly<RenderBuffer[]>, depth: RenderBuffer): RenderTargetSetup;
    new(color: Readonly<RenderBuffer[]>, depth: RenderBuffer, mipLevel: number): RenderTargetSetup;
    new(color: Readonly<RenderBuffer[]>, depth: RenderBuffer, mip: number, face: CubemapFace): RenderTargetSetup;



}
declare const RenderTargetSetup: RenderTargetSetupConstructor;
    
interface GraphicsConstructor {
    /**
     * Returns the currently active color gamut.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Graphics-activeColorGamut.html | Graphics.activeColorGamut}
     */
    readonly activeColorGamut: ColorGamut;
    /**
     * The GraphicsTier for the current device.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Graphics-activeTier.html | Graphics.activeTier}
     */
    activeTier: GraphicsTier;
    /**
     * True when rendering over native UI is enabled in Player Settings (readonly).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Graphics-preserveFramebufferAlpha.html | Graphics.preserveFramebufferAlpha}
     */
    readonly preserveFramebufferAlpha: boolean;
    /**
     * The minimum OpenGL ES version. The value is specified in PlayerSettings.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Graphics-minOpenGLESVersion.html | Graphics.minOpenGLESVersion}
     */
    readonly minOpenGLESVersion: OpenGLESVersion;
    /**
     * Currently active color buffer (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Graphics-activeColorBuffer.html | Graphics.activeColorBuffer}
     */
    readonly activeColorBuffer: RenderBuffer;
    /**
     * Currently active depth/stencil buffer (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Graphics-activeDepthBuffer.html | Graphics.activeDepthBuffer}
     */
    readonly activeDepthBuffer: RenderBuffer;


    new(): Graphics;


    Blit(source: Texture, dest: RenderTexture): void;
    Blit(source: Texture, dest: RenderTexture, sourceDepthSlice: number, destDepthSlice: number): void;
    Blit(source: Texture, dest: RenderTexture, scale: Vector2, offset: Vector2): void;
    Blit(source: Texture, dest: RenderTexture, scale: Vector2, offset: Vector2, sourceDepthSlice: number, destDepthSlice: number): void;
    Blit(source: Texture, dest: RenderTexture, mat: Material, pass: number): void;
    Blit(source: Texture, dest: RenderTexture, mat: Material, pass: number, destDepthSlice: number): void;
    Blit(source: Texture, dest: RenderTexture, mat: Material): void;
    Blit(source: Texture, mat: Material, pass: number): void;
    Blit(source: Texture, mat: Material, pass: number, destDepthSlice: number): void;
    Blit(source: Texture, mat: Material): void;
    Blit(source: Texture, dest: GraphicsTexture): void;
    Blit(source: Texture, dest: GraphicsTexture, sourceDepthSlice: number, destDepthSlice: number): void;
    Blit(source: Texture, dest: GraphicsTexture, scale: Vector2, offset: Vector2): void;
    Blit(source: Texture, dest: GraphicsTexture, scale: Vector2, offset: Vector2, sourceDepthSlice: number, destDepthSlice: number): void;
    Blit(source: Texture, dest: GraphicsTexture, mat: Material, pass: number): void;
    Blit(source: Texture, dest: GraphicsTexture, mat: Material, pass: number, destDepthSlice: number): void;
    Blit(source: Texture, dest: GraphicsTexture, mat: Material): void;
    BlitMultiTap(source: Texture, dest: RenderTexture, mat: Material, offsets: Readonly<Vector2[]>): void;
    BlitMultiTap(source: Texture, dest: RenderTexture, mat: Material, destDepthSlice: number, offsets: Readonly<Vector2[]>): void;
    BlitMultiTap(source: Texture, dest: GraphicsTexture, mat: Material, offsets: Readonly<Vector2[]>): void;
    BlitMultiTap(source: Texture, dest: GraphicsTexture, mat: Material, destDepthSlice: number, offsets: Readonly<Vector2[]>): void;
    ClearRandomWriteTargets(): void;
    ConvertTexture(src: Texture, dst: Texture): boolean;
    ConvertTexture(src: Texture, srcElement: number, dst: Texture, dstElement: number): boolean;
    ConvertTexture(src: GraphicsTexture, dst: GraphicsTexture): boolean;
    ConvertTexture(src: GraphicsTexture, srcElement: number, dst: GraphicsTexture, dstElement: number): boolean;
    CopyBuffer(source: GraphicsBuffer, dest: GraphicsBuffer): void;
    CopyTexture(src: Texture, dst: Texture): void;
    CopyTexture(src: Texture, srcElement: number, dst: Texture, dstElement: number): void;
    CopyTexture(src: Texture, srcElement: number, srcMip: number, dst: Texture, dstElement: number, dstMip: number): void;
    CopyTexture(src: Texture, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dst: Texture, dstElement: number, dstMip: number, dstX: number, dstY: number): void;
    CopyTexture(src: GraphicsTexture, dst: GraphicsTexture): void;
    CopyTexture(src: GraphicsTexture, srcElement: number, dst: GraphicsTexture, dstElement: number): void;
    CopyTexture(src: GraphicsTexture, srcElement: number, srcMip: number, dst: GraphicsTexture, dstElement: number, dstMip: number): void;
    CopyTexture(src: GraphicsTexture, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dst: GraphicsTexture, dstElement: number, dstMip: number, dstX: number, dstY: number): void;
    CreateAsyncGraphicsFence(stage: SynchronisationStage): GraphicsFence;
    CreateAsyncGraphicsFence(): GraphicsFence;
    CreateGraphicsFence(fenceType: GraphicsFenceType, stage: SynchronisationStageFlags): GraphicsFence;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean, useLightProbes: boolean): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, probeAnchor: Transform, useLightProbes: boolean): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean, useLightProbes: boolean): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, probeAnchor: Transform, lightProbeUsage: LightProbeUsage, lightProbeProxyVolume: LightProbeProxyVolume): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, material: Material, layer: number): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, material: Material, layer: number, camera: Camera): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, material: Material, layer: number, camera: Camera, submeshIndex: number): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: boolean): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean): void;
    DrawMesh(mesh: Mesh, position: Vector3, rotation: Quaternion, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, probeAnchor: Transform): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera, submeshIndex: number): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: boolean): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, probeAnchor: Transform): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, probeAnchor: Transform, useLightProbes: boolean): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, layer: number, camera: Camera, submeshIndex: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, probeAnchor: Transform, lightProbeUsage: LightProbeUsage): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, count: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number, camera: Camera, lightProbeUsage: LightProbeUsage, lightProbeProxyVolume: LightProbeProxyVolume): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number, camera: Camera, lightProbeUsage: LightProbeUsage, lightProbeProxyVolume: LightProbeProxyVolume): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, count: number): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, count: number, properties: MaterialPropertyBlock): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, count: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, count: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, count: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, count: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number, camera: Camera): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, count: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number, camera: Camera, lightProbeUsage: LightProbeUsage): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, properties: MaterialPropertyBlock): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number, camera: Camera): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, matrices: Readonly<Matrix4x4[]>, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number, camera: Camera, lightProbeUsage: LightProbeUsage): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, bounds: Bounds, bufferWithArgs: ComputeBuffer, argsOffset: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number, camera: Camera, lightProbeUsage: LightProbeUsage, lightProbeProxyVolume: LightProbeProxyVolume): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, bounds: Bounds, bufferWithArgs: GraphicsBuffer, argsOffset: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number, camera: Camera, lightProbeUsage: LightProbeUsage, lightProbeProxyVolume: LightProbeProxyVolume): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, bounds: Bounds, bufferWithArgs: ComputeBuffer, argsOffset: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number, camera: Camera, lightProbeUsage: LightProbeUsage): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, bounds: Bounds, bufferWithArgs: GraphicsBuffer, argsOffset: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number, camera: Camera, lightProbeUsage: LightProbeUsage): void;
    DrawMeshInstancedProcedural(mesh: Mesh, submeshIndex: number, material: Material, bounds: Bounds, count: number, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number, camera: Camera, lightProbeUsage: LightProbeUsage, lightProbeProxyVolume: LightProbeProxyVolume): void;
    DrawMeshNow(mesh: Mesh, position: Vector3, rotation: Quaternion, materialIndex: number): void;
    DrawMeshNow(mesh: Mesh, matrix: Matrix4x4, materialIndex: number): void;
    DrawMeshNow(mesh: Mesh, position: Vector3, rotation: Quaternion): void;
    DrawMeshNow(mesh: Mesh, matrix: Matrix4x4): void;
    DrawProcedural(material: Material, bounds: Bounds, topology: MeshTopology, vertexCount: number, instanceCount: number, camera: Camera, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number): void;
    DrawProcedural(material: Material, bounds: Bounds, topology: MeshTopology, indexBuffer: GraphicsBuffer, indexCount: number, instanceCount: number, camera: Camera, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number): void;
    DrawProceduralIndirect(material: Material, bounds: Bounds, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number, camera: Camera, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number): void;
    DrawProceduralIndirect(material: Material, bounds: Bounds, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number, camera: Camera, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number): void;
    DrawProceduralIndirect(material: Material, bounds: Bounds, topology: MeshTopology, indexBuffer: GraphicsBuffer, bufferWithArgs: ComputeBuffer, argsOffset: number, camera: Camera, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number): void;
    DrawProceduralIndirect(material: Material, bounds: Bounds, topology: MeshTopology, indexBuffer: GraphicsBuffer, bufferWithArgs: GraphicsBuffer, argsOffset: number, camera: Camera, properties: MaterialPropertyBlock, castShadows: ShadowCastingMode, receiveShadows: boolean, layer: number): void;
    DrawProceduralIndirectNow(topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number): void;
    DrawProceduralIndirectNow(topology: MeshTopology, indexBuffer: GraphicsBuffer, bufferWithArgs: ComputeBuffer, argsOffset: number): void;
    DrawProceduralIndirectNow(topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number): void;
    DrawProceduralIndirectNow(topology: MeshTopology, indexBuffer: GraphicsBuffer, bufferWithArgs: GraphicsBuffer, argsOffset: number): void;
    DrawProceduralNow(topology: MeshTopology, vertexCount: number, instanceCount: number): void;
    DrawProceduralNow(topology: MeshTopology, indexBuffer: GraphicsBuffer, indexCount: number, instanceCount: number): void;
    DrawTexture(screenRect: Rect, texture: Texture, sourceRect: Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: Color, mat: Material, pass: number): void;
    DrawTexture(screenRect: Rect, texture: Texture, sourceRect: Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: Material, pass: number): void;
    DrawTexture(screenRect: Rect, texture: Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: Material, pass: number): void;
    DrawTexture(screenRect: Rect, texture: Texture, mat: Material, pass: number): void;
    DrawTexture(screenRect: Rect, texture: Texture, sourceRect: Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: Color, mat: Material): void;
    DrawTexture(screenRect: Rect, texture: Texture, sourceRect: Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: Color): void;
    DrawTexture(screenRect: Rect, texture: Texture, sourceRect: Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: Material): void;
    DrawTexture(screenRect: Rect, texture: Texture, sourceRect: Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number): void;
    DrawTexture(screenRect: Rect, texture: Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: Material): void;
    DrawTexture(screenRect: Rect, texture: Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number): void;
    DrawTexture(screenRect: Rect, texture: Texture, mat: Material): void;
    DrawTexture(screenRect: Rect, texture: Texture): void;
    ExecuteCommandBuffer(buffer: CommandBuffer): void;
    ExecuteCommandBufferAsync(buffer: CommandBuffer, queueType: ComputeQueueType): void;
    RenderMesh(rparams: RenderParams, mesh: Mesh, submeshIndex: number, objectToWorld: Matrix4x4, prevObjectToWorld: Nullable<Matrix4x4>): void;
    RenderMeshIndirect(rparams: RenderParams, mesh: Mesh, commandBuffer: GraphicsBuffer, commandCount: number, startCommand: number): void;
    RenderMeshInstanced<T>(rparams: RenderParams, mesh: Mesh, submeshIndex: number, instanceData: Readonly<T[]>, instanceCount: number, startInstance: number): void;
    RenderMeshInstanced<T>(rparams: RenderParams, mesh: Mesh, submeshIndex: number, instanceData: Readonly<T[]>, instanceCount: number, startInstance: number): void;
    RenderMeshInstanced<T>(rparams: RenderParams, mesh: Mesh, submeshIndex: number, instanceData: Readonly<T[]>, instanceCount: number, startInstance: number): void;
    RenderMeshPrimitives(rparams: RenderParams, mesh: Mesh, submeshIndex: number, instanceCount: number): void;
    RenderPrimitives(rparams: RenderParams, topology: MeshTopology, vertexCount: number, instanceCount: number): void;
    RenderPrimitivesIndexed(rparams: RenderParams, topology: MeshTopology, indexBuffer: GraphicsBuffer, indexCount: number, startIndex: number, instanceCount: number): void;
    RenderPrimitivesIndexedIndirect(rparams: RenderParams, topology: MeshTopology, indexBuffer: GraphicsBuffer, commandBuffer: GraphicsBuffer, commandCount: number, startCommand: number): void;
    RenderPrimitivesIndirect(rparams: RenderParams, topology: MeshTopology, commandBuffer: GraphicsBuffer, commandCount: number, startCommand: number): void;
    SetRandomWriteTarget(index: number, uav: RenderTexture): void;
    SetRandomWriteTarget(index: number, uav: ComputeBuffer, preserveCounterValue: boolean): void;
    SetRandomWriteTarget(index: number, uav: GraphicsBuffer, preserveCounterValue: boolean): void;
    SetRandomWriteTarget(index: number, uav: ComputeBuffer): void;
    SetRandomWriteTarget(index: number, uav: GraphicsBuffer): void;
    SetRenderTarget(rt: RenderTexture, mipLevel: number, face: CubemapFace, depthSlice: number): void;
    SetRenderTarget(rt: GraphicsTexture, mipLevel: number, face: CubemapFace, depthSlice: number): void;
    SetRenderTarget(colorBuffer: RenderBuffer, depthBuffer: RenderBuffer, mipLevel: number, face: CubemapFace, depthSlice: number): void;
    SetRenderTarget(colorBuffers: Readonly<RenderBuffer[]>, depthBuffer: RenderBuffer): void;
    SetRenderTarget(setup: RenderTargetSetup): void;
    SetRenderTarget(rt: RenderTexture): void;
    SetRenderTarget(rt: RenderTexture, mipLevel: number): void;
    SetRenderTarget(rt: RenderTexture, mipLevel: number, face: CubemapFace): void;
    SetRenderTarget(colorBuffer: RenderBuffer, depthBuffer: RenderBuffer): void;
    SetRenderTarget(colorBuffer: RenderBuffer, depthBuffer: RenderBuffer, mipLevel: number): void;
    SetRenderTarget(colorBuffer: RenderBuffer, depthBuffer: RenderBuffer, mipLevel: number, face: CubemapFace): void;
    WaitOnAsyncGraphicsFence(fence: GraphicsFence): void;
    WaitOnAsyncGraphicsFence(fence: GraphicsFence, stage: SynchronisationStage): void;

}
declare const Graphics: GraphicsConstructor;
    
interface StandaloneFileBrowser {





}
    
interface ExtensionFilter {
    Name: string;
    Extensions: Readonly<string[]>;





}
    
interface ExtensionFilterConstructor {


    new(filterName: string, filterExtensions: Readonly<string[]>): ExtensionFilter;



}
declare const ExtensionFilter: ExtensionFilterConstructor;
    
interface StandaloneFileBrowserConstructor {


    new(): StandaloneFileBrowser;


    OpenFilePanel(title: string, directory: string, extension: string, multiselect: boolean): Readonly<string[]>;
    OpenFilePanel(title: string, directory: string, extensions: Readonly<ExtensionFilter[]>, multiselect: boolean): Readonly<string[]>;
    OpenFilePanelAsync(title: string, directory: string, extension: string, multiselect: boolean, cb: Action<Readonly<string[]>>): void;
    OpenFilePanelAsync(title: string, directory: string, extensions: Readonly<ExtensionFilter[]>, multiselect: boolean, cb: Action<Readonly<string[]>>): void;
    OpenFolderPanel(title: string, directory: string, multiselect: boolean): Readonly<string[]>;
    OpenFolderPanelAsync(title: string, directory: string, multiselect: boolean, cb: Action<Readonly<string[]>>): void;
    SaveFilePanel(title: string, directory: string, defaultName: string, extension: string): string;
    SaveFilePanel(title: string, directory: string, defaultName: string, extensions: Readonly<ExtensionFilter[]>): string;
    SaveFilePanelAsync(title: string, directory: string, defaultName: string, extension: string, cb: Action<string>): void;
    SaveFilePanelAsync(title: string, directory: string, defaultName: string, extensions: Readonly<ExtensionFilter[]>, cb: Action<string>): void;

}
declare const StandaloneFileBrowser: StandaloneFileBrowserConstructor;
    
interface UnityWebRequestTexture {





}
    
interface DownloadedTextureParams {
    flags: DownloadedTextureFlags;
    mipmapCount: number;
    /**
     * Check or change the flag for readability in flags variable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.DownloadedTextureParams-readable.html | Networking.DownloadedTextureParams.readable}
     */
    readable: boolean;
    /**
     * Check or change the flag for mipmaps in flags variable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.DownloadedTextureParams-mipmapChain.html | Networking.DownloadedTextureParams.mipmapChain}
     */
    mipmapChain: boolean;
    /**
     * Check or change the flag for linear color space in flags variable.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.DownloadedTextureParams-linearColorSpace.html | Networking.DownloadedTextureParams.linearColorSpace}
     */
    linearColorSpace: boolean;





}
    
interface DownloadedTextureParamsConstructor {
    /**
     * Returns parameters set to recommended values. It is recommended to use this for the initial values and modify only specific parameters that you need.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.DownloadedTextureParams-Default.html | Networking.DownloadedTextureParams.Default}
     */
    readonly Default: DownloadedTextureParams;





}
declare const DownloadedTextureParams: DownloadedTextureParamsConstructor;
    
interface UnityWebRequestTextureConstructor {




    GetTexture(uri: string): UnityWebRequest;
    GetTexture(uri: Uri): UnityWebRequest;
    GetTexture(uri: string, nonReadable: boolean): UnityWebRequest;
    GetTexture(uri: Uri, nonReadable: boolean): UnityWebRequest;
    GetTexture(uri: string, parameters: DownloadedTextureParams): UnityWebRequest;
    GetTexture(uri: Uri, parameters: DownloadedTextureParams): UnityWebRequest;

}
declare const UnityWebRequestTexture: UnityWebRequestTextureConstructor;
    
interface DownloadHandlerTexture extends DownloadHandler {
    /**
     * Returns the downloaded Texture, or null. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Networking.DownloadHandlerTexture-texture.html | Networking.DownloadHandlerTexture.texture}
     */
    readonly texture: Texture2D;



    Dispose(): void;


}
    
interface DownloadHandlerTextureConstructor {


    new(): DownloadHandlerTexture;
    new(readable: boolean): DownloadHandlerTexture;
    new(parameters: DownloadedTextureParams): DownloadHandlerTexture;


    GetContent(www: UnityWebRequest): Texture2D;

}
declare const DownloadHandlerTexture: DownloadHandlerTextureConstructor;
    
interface UIOutline extends Graphic {
    readonly mainTexture: Texture;





}
    
interface UIOutlineConstructor {


    new(): UIOutline;



}
declare const UIOutline: UIOutlineConstructor;
    
interface IDropHandler extends IEventSystemHandler {



    OnDrop(eventData: PointerEventData): void;


}
    
interface EventTrigger extends MonoBehaviour, ISubmitHandler, IPointerClickHandler, ICancelHandler, IBeginDragHandler, IInitializePotentialDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, IPointerEnterHandler, ISelectHandler, IPointerExitHandler, IDeselectHandler, IPointerDownHandler, IMoveHandler, IPointerUpHandler {
    triggers: Readonly<Entry[]>;



    OnBeginDrag(eventData: PointerEventData): void;
    OnCancel(eventData: BaseEventData): void;
    OnDeselect(eventData: BaseEventData): void;
    OnDrag(eventData: PointerEventData): void;
    OnDrop(eventData: PointerEventData): void;
    OnEndDrag(eventData: PointerEventData): void;
    OnInitializePotentialDrag(eventData: PointerEventData): void;
    OnMove(eventData: AxisEventData): void;
    OnPointerClick(eventData: PointerEventData): void;
    OnPointerDown(eventData: PointerEventData): void;
    OnPointerEnter(eventData: PointerEventData): void;
    OnPointerExit(eventData: PointerEventData): void;
    OnPointerUp(eventData: PointerEventData): void;
    OnScroll(eventData: PointerEventData): void;
    OnSelect(eventData: BaseEventData): void;
    OnSubmit(eventData: BaseEventData): void;
    OnUpdateSelected(eventData: BaseEventData): void;


}
    
interface Entry {
    eventID: EventTriggerType;





}
    
interface EntryConstructor {


    new(): Entry;



}
declare const Entry: EntryConstructor;
    
interface Terrain extends Behaviour {
    /**
     * The Terrain Data that stores heightmaps, terrain textures, detail meshes and trees.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-terrainData.html | Terrain.terrainData}
     */
    terrainData: TerrainData;
    /**
     * The maximum distance at which trees are rendered.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-treeDistance.html | Terrain.treeDistance}
     */
    treeDistance: number;
    /**
     * Distance from the camera where trees will be rendered as billboards only.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-treeBillboardDistance.html | Terrain.treeBillboardDistance}
     */
    treeBillboardDistance: number;
    /**
     * Total distance delta that trees will use to transition from billboard orientation to mesh orientation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-treeCrossFadeLength.html | Terrain.treeCrossFadeLength}
     */
    treeCrossFadeLength: number;
    /**
     * Maximum number of trees rendered at full LOD.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-treeMaximumFullLODCount.html | Terrain.treeMaximumFullLODCount}
     */
    treeMaximumFullLODCount: number;
    /**
     * Detail objects will be displayed up to this distance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-detailObjectDistance.html | Terrain.detailObjectDistance}
     */
    detailObjectDistance: number;
    /**
     * Density of detail objects.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-detailObjectDensity.html | Terrain.detailObjectDensity}
     */
    detailObjectDensity: number;
    /**
     * An approximation of how many pixels the terrain will pop in the worst case when switching lod.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-heightmapPixelError.html | Terrain.heightmapPixelError}
     */
    heightmapPixelError: number;
    /**
     * Limits the Terrain's maximum rendering resolution.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-heightmapMaximumLOD.html | Terrain.heightmapMaximumLOD}
     */
    heightmapMaximumLOD: number;
    /**
     * Limits how simplified the rendered terrain can be.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-heightmapMinimumLODSimplification.html | Terrain.heightmapMinimumLODSimplification}
     */
    heightmapMinimumLODSimplification: number;
    /**
     * Heightmap patches beyond basemap distance will use a precomputed low res basemap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-basemapDistance.html | Terrain.basemapDistance}
     */
    basemapDistance: number;
    /**
     * The index of the baked lightmap applied to this terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-lightmapIndex.html | Terrain.lightmapIndex}
     */
    lightmapIndex: number;
    /**
     * The index of the realtime lightmap applied to this terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-realtimeLightmapIndex.html | Terrain.realtimeLightmapIndex}
     */
    realtimeLightmapIndex: number;
    /**
     * The UV scale &amp; offset used for a baked lightmap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-lightmapScaleOffset.html | Terrain.lightmapScaleOffset}
     */
    lightmapScaleOffset: Vector4;
    /**
     * The UV scale &amp; offset used for a realtime lightmap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-realtimeLightmapScaleOffset.html | Terrain.realtimeLightmapScaleOffset}
     */
    realtimeLightmapScaleOffset: Vector4;
    /**
     * Defines whether Unity frees per-Camera rendering resources for the Terrain when those resources aren't in use after a certain number of frames.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-keepUnusedRenderingResources.html | Terrain.keepUnusedRenderingResources}
     */
    keepUnusedRenderingResources: boolean;
    /**
     * Allows you to set the shadow casting mode for the terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-shadowCastingMode.html | Terrain.shadowCastingMode}
     */
    shadowCastingMode: ShadowCastingMode;
    /**
     * How reflection probes are used for terrain. See Rendering.ReflectionProbeUsage.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-reflectionProbeUsage.html | Terrain.reflectionProbeUsage}
     */
    reflectionProbeUsage: ReflectionProbeUsage;
    /**
     * The custom material Unity uses to render the Terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-materialTemplate.html | Terrain.materialTemplate}
     */
    materialTemplate: Material;
    /**
     * Indicates whether Unity draws the Terrain geometry itself.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-drawHeightmap.html | Terrain.drawHeightmap}
     */
    drawHeightmap: boolean;
    /**
     * Specifies if the terrain tile will be automatically connected to adjacent tiles.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-allowAutoConnect.html | Terrain.allowAutoConnect}
     */
    allowAutoConnect: boolean;
    /**
     * Grouping ID for auto connect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-groupingID.html | Terrain.groupingID}
     */
    groupingID: number;
    /**
     * Set to true to enable the terrain instance renderer. The default value is false.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-drawInstanced.html | Terrain.drawInstanced}
     */
    drawInstanced: boolean;
    /**
     * When this options is enabled, Terrain heightmap geometries will be added in acceleration structures used for Ray Tracing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-enableHeightmapRayTracing.html | Terrain.enableHeightmapRayTracing}
     */
    enableHeightmapRayTracing: boolean;
    /**
     * Returns the normal map texture computed from sampling the heightmap. It is only used when terrain is rendered using instancing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-normalmapTexture.html | Terrain.normalmapTexture}
     */
    readonly normalmapTexture: RenderTexture;
    /**
     * Specify if terrain trees and details should be drawn.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-drawTreesAndFoliage.html | Terrain.drawTreesAndFoliage}
     */
    drawTreesAndFoliage: boolean;
    /**
     * Set the terrain bounding box scale.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-patchBoundsMultiplier.html | Terrain.patchBoundsMultiplier}
     */
    patchBoundsMultiplier: Vector3;
    /**
     * The multiplier to the current LOD bias used for rendering LOD trees (i.e. SpeedTree trees).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-treeLODBiasMultiplier.html | Terrain.treeLODBiasMultiplier}
     */
    treeLODBiasMultiplier: number;
    /**
     * Collect detail patches from memory.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-collectDetailPatches.html | Terrain.collectDetailPatches}
     */
    collectDetailPatches: boolean;
    /**
     * When enabled, the terrain ignores the terrain overrides set in the QualitySettings.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-ignoreQualitySettings.html | Terrain.ignoreQualitySettings}
     */
    ignoreQualitySettings: boolean;
    /**
     * Controls what part of the terrain should be rendered.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-editorRenderFlags.html | Terrain.editorRenderFlags}
     */
    editorRenderFlags: TerrainRenderFlags;
    /**
     * Whether to bake an array of internal light probes for Tree Editor trees (Editor only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-bakeLightProbesForTrees.html | Terrain.bakeLightProbesForTrees}
     */
    bakeLightProbesForTrees: boolean;
    /**
     * Removes ringing from light probes on Tree Editor trees (Editor only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-deringLightProbesForTrees.html | Terrain.deringLightProbesForTrees}
     */
    deringLightProbesForTrees: boolean;
    /**
     * The motion vector rendering mode for all SpeedTree models painted on the terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-treeMotionVectorModeOverride.html | Terrain.treeMotionVectorModeOverride}
     */
    treeMotionVectorModeOverride: TreeMotionVectorModeOverride;
    /**
     * Allows you to specify how Unity chooses the for tree instances.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-preserveTreePrototypeLayers.html | Terrain.preserveTreePrototypeLayers}
     */
    preserveTreePrototypeLayers: boolean;
    /**
     * The Terrain tile to the left, which is in the negative X direction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-leftNeighbor.html | Terrain.leftNeighbor}
     */
    readonly leftNeighbor: Terrain;
    /**
     * The Terrain tile to the left, which is in the positive X direction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-rightNeighbor.html | Terrain.rightNeighbor}
     */
    readonly rightNeighbor: Terrain;
    /**
     * Terrain top neighbor.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-topNeighbor.html | Terrain.topNeighbor}
     */
    readonly topNeighbor: Terrain;
    /**
     * Terrain bottom neighbor.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-bottomNeighbor.html | Terrain.bottomNeighbor}
     */
    readonly bottomNeighbor: Terrain;
    /**
     * Determines which rendering layers the Terrain renderer lives on.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-renderingLayerMask.html | Terrain.renderingLayerMask}
     */
    renderingLayerMask: number;



    /**
     * Adds a tree instance to the terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain.AddTreeInstance.html | Terrain.AddTreeInstance}
     */
    AddTreeInstance(instance: TreeInstance): void;
    /**
     * Flushes any change done in the terrain so it takes effect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain.Flush.html | Terrain.Flush}
     */
    Flush(): void;
    GetClosestReflectionProbes(result: Readonly<ReflectionProbeBlendInfo[]>): void;
    GetKeepUnusedCameraRenderingResources(cameraInstanceID: number): boolean;
    /**
     * Get the position of the terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain.GetPosition.html | Terrain.GetPosition}
     */
    GetPosition(): Vector3;
    /**
     * Get the previously set splat material properties by copying to the dest MaterialPropertyBlock object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain.GetSplatMaterialPropertyBlock.html | Terrain.GetSplatMaterialPropertyBlock}
     */
    GetSplatMaterialPropertyBlock(dest: MaterialPropertyBlock): void;
    /**
     * Samples the height at the given position defined in world space, relative to the Terrain space.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain.SampleHeight.html | Terrain.SampleHeight}
     */
    SampleHeight(worldPosition: Vector3): number;
    /**
     * Defines whether Unity cleans up rendering resources for a given Camera during garbage collection.
     * @param cameraInstanceID The InstanceID of the camera for which freeUnusedRenderingResources is being set. See Object.GetInstanceID.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain.SetKeepUnusedCameraRenderingResources.html | Terrain.SetKeepUnusedCameraRenderingResources}
     */
    SetKeepUnusedCameraRenderingResources(cameraInstanceID: number, keepUnused: boolean): void;
    /**
     * Lets you set up the connection between neighboring Terrain tiles. This ensures LOD matches up on neighboring Terrain tiles.
     * @param left The Terrain tile to the left is in the negative X direction.
     * @param top The Terrain tile to the top is in the positive Z direction.
     * @param right The Terrain tile to the right is in the positive X direction.
     * @param bottom The Terrain tile to the bottom is in the negative Z direction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain.SetNeighbors.html | Terrain.SetNeighbors}
     */
    SetNeighbors(left: Terrain, top: Terrain, right: Terrain, bottom: Terrain): void;
    /**
     * Set the additional material properties when rendering the terrain heightmap using the splat material.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain.SetSplatMaterialPropertyBlock.html | Terrain.SetSplatMaterialPropertyBlock}
     */
    SetSplatMaterialPropertyBlock(properties: MaterialPropertyBlock): void;


}
    
interface TerrainConstructor {
    /**
     * Graphics format of the Terrain heightmap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-heightmapFormat.html | Terrain.heightmapFormat}
     */
    readonly heightmapFormat: GraphicsFormat;
    readonly heightmapTextureFormat: TextureFormat;
    /**
     * RenderTextureFormat of the terrain heightmap.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-heightmapRenderTextureFormat.html | Terrain.heightmapRenderTextureFormat}
     */
    readonly heightmapRenderTextureFormat: RenderTextureFormat;
    /**
     * Graphics format of the Terrain normal map texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-normalmapFormat.html | Terrain.normalmapFormat}
     */
    readonly normalmapFormat: GraphicsFormat;
    /**
     * Texture format of the Terrain normal map texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-normalmapTextureFormat.html | Terrain.normalmapTextureFormat}
     */
    readonly normalmapTextureFormat: TextureFormat;
    /**
     * Render texture format of the Terrain normal map texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-normalmapRenderTextureFormat.html | Terrain.normalmapRenderTextureFormat}
     */
    readonly normalmapRenderTextureFormat: RenderTextureFormat;
    /**
     * Graphics format of the Terrain holes Texture when it is not compressed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-holesFormat.html | Terrain.holesFormat}
     */
    readonly holesFormat: GraphicsFormat;
    /**
     * Render texture format of the Terrain holes Texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-holesRenderTextureFormat.html | Terrain.holesRenderTextureFormat}
     */
    readonly holesRenderTextureFormat: RenderTextureFormat;
    /**
     * Graphics format of the Terrain holes Texture when it is compressed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-compressedHolesFormat.html | Terrain.compressedHolesFormat}
     */
    readonly compressedHolesFormat: GraphicsFormat;
    /**
     * Texture format of the Terrain holes Texture when it is compressed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-compressedHolesTextureFormat.html | Terrain.compressedHolesTextureFormat}
     */
    readonly compressedHolesTextureFormat: TextureFormat;
    /**
     * The active Terrain. This is a convenient function to get to the main Terrain in the Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-activeTerrain.html | Terrain.activeTerrain}
     */
    readonly activeTerrain: Terrain;
    /**
     * The active terrains in the Scene.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Terrain-activeTerrains.html | Terrain.activeTerrains}
     */
    readonly activeTerrains: Readonly<Terrain[]>;


    new(): Terrain;


    CreateTerrainGameObject(assignTerrain: TerrainData): GameObject;
    GetActiveTerrains(terrainList: Readonly<Terrain[]>): void;
    SetConnectivityDirty(): void;

}
declare const Terrain: TerrainConstructor;
    
interface GraphicRaycaster extends BaseRaycaster {
    readonly sortOrderPriority: number;
    readonly renderOrderPriority: number;
    ignoreReversedGraphics: boolean;
    blockingObjects: BlockingObjects;
    blockingMask: LayerMask;
    readonly eventCamera: Camera;



    Raycast(eventData: PointerEventData, resultAppendList: Readonly<RaycastResult[]>): void;


}
    
interface IPostProcessComponent {



    IsActive(): boolean;


}
    
interface IApplyRevertPropertyContextMenuItemProvider {



    GetSourceName(comp: Component): string;
    GetSourceTerm(): string;


}
    
interface VolumeComponent extends ScriptableObject, IApplyRevertPropertyContextMenuItemProvider {
    active: boolean;
    readonly displayName: string;
    readonly parameters: Readonly<VolumeParameter[]>;



    AnyPropertiesIsOverridden(): boolean;
    GetHashCode(): number;
    GetSourceName(comp: Component): string;
    GetSourceTerm(): string;
    Override(state: VolumeComponent, interpFactor: number): void;
    Release(): void;
    SetAllOverridesTo(state: boolean): void;


}
    
interface VolumeParameter {
    overrideState: boolean;



    Clone(): unknown;
    GetValue<T>(): T;
    Release(): void;
    SetValue(parameter: VolumeParameter): void;


}
    
interface VolumeParameterConstructor {
    k_DebuggerDisplay: string;




    IsObjectParameter(type: Type): boolean;

}
declare const VolumeParameter: VolumeParameterConstructor;
    
interface VolumeComponentConstructor {


    new(): VolumeComponent;



}
declare const VolumeComponent: VolumeComponentConstructor;
    
interface DepthOfField extends VolumeComponent, IPostProcessComponent {
    mode: DepthOfFieldModeParameter;
    gaussianStart: MinFloatParameter;
    gaussianEnd: MinFloatParameter;
    gaussianMaxRadius: ClampedFloatParameter;
    highQualitySampling: BoolParameter;
    focusDistance: MinFloatParameter;
    aperture: ClampedFloatParameter;
    focalLength: ClampedFloatParameter;
    bladeCount: ClampedIntParameter;
    bladeCurvature: ClampedFloatParameter;
    bladeRotation: ClampedFloatParameter;



    IsActive(): boolean;


}
    
interface VolumeParameter<T> extends VolumeParameter {
    value: T;



    Clone(): unknown;
    Equals(other: VolumeParameter<T>): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    Interp(from: T, to: T, t: number): void;
    Override(x: T): void;
    SetValue(parameter: VolumeParameter): void;
    ToString(): string;


}
    
interface VolumeParameterConstructor {


    new(): VolumeParameter<T>;



}
declare const VolumeParameter: VolumeParameterConstructor;
    
interface DepthOfFieldModeParameter extends VolumeParameter<DepthOfFieldMode> {





}
    
interface DepthOfFieldModeParameterConstructor {


    new(value: DepthOfFieldMode, overrideState: boolean): DepthOfFieldModeParameter;



}
declare const DepthOfFieldModeParameter: DepthOfFieldModeParameterConstructor;
    
interface FloatParameter extends VolumeParameter<number> {



    Interp(from: number, to: number, t: number): void;


}
    
interface FloatParameterConstructor {


    new(value: number, overrideState: boolean): FloatParameter;



}
declare const FloatParameter: FloatParameterConstructor;
    
interface MinFloatParameter extends FloatParameter {
    min: number;
    value: number;





}
    
interface MinFloatParameterConstructor {


    new(value: number, min: number, overrideState: boolean): MinFloatParameter;



}
declare const MinFloatParameter: MinFloatParameterConstructor;
    
interface ClampedFloatParameter extends FloatParameter {
    min: number;
    max: number;
    value: number;





}
    
interface ClampedFloatParameterConstructor {


    new(value: number, min: number, max: number, overrideState: boolean): ClampedFloatParameter;



}
declare const ClampedFloatParameter: ClampedFloatParameterConstructor;
    
interface BoolParameter extends VolumeParameter<boolean> {
    displayType: DisplayType;





}
    
interface BoolParameterConstructor {


    new(value: boolean, overrideState: boolean): BoolParameter;
    new(value: boolean, displayType: DisplayType, overrideState: boolean): BoolParameter;



}
declare const BoolParameter: BoolParameterConstructor;
    
interface IntParameter extends VolumeParameter<number> {



    Interp(from: number, to: number, t: number): void;


}
    
interface IntParameterConstructor {


    new(value: number, overrideState: boolean): IntParameter;



}
declare const IntParameter: IntParameterConstructor;
    
interface ClampedIntParameter extends IntParameter {
    min: number;
    max: number;
    value: number;





}
    
interface ClampedIntParameterConstructor {


    new(value: number, min: number, max: number, overrideState: boolean): ClampedIntParameter;



}
declare const ClampedIntParameter: ClampedIntParameterConstructor;
    
interface DepthOfFieldConstructor {


    new(): DepthOfField;



}
declare const DepthOfField: DepthOfFieldConstructor;
    
interface IVolume {
    isGlobal: boolean;
    readonly colliders: Readonly<Collider[]>;





}
    
interface Volume extends MonoBehaviour, IVolume {
    priority: number;
    blendDistance: number;
    weight: number;
    sharedProfile: VolumeProfile;
    isGlobal: boolean;
    profile: VolumeProfile;
    readonly colliders: Readonly<Collider[]>;



    HasInstantiatedProfile(): boolean;


}
    
    
    
interface VolumeConstructor {


    new(): Volume;



}
declare const Volume: VolumeConstructor;
    
interface LensDistortion extends VolumeComponent, IPostProcessComponent {
    intensity: ClampedFloatParameter;
    xMultiplier: ClampedFloatParameter;
    yMultiplier: ClampedFloatParameter;
    center: Vector2Parameter;
    scale: ClampedFloatParameter;



    IsActive(): boolean;


}
    
interface Vector2Parameter extends VolumeParameter<Vector2> {



    Interp(from: Vector2, to: Vector2, t: number): void;


}
    
interface Vector2ParameterConstructor {


    new(value: Vector2, overrideState: boolean): Vector2Parameter;



}
declare const Vector2Parameter: Vector2ParameterConstructor;
    
interface LensDistortionConstructor {


    new(): LensDistortion;



}
declare const LensDistortion: LensDistortionConstructor;
    
interface Vignette extends VolumeComponent, IPostProcessComponent {
    color: ColorParameter;
    center: Vector2Parameter;
    intensity: ClampedFloatParameter;
    smoothness: ClampedFloatParameter;
    rounded: BoolParameter;



    IsActive(): boolean;


}
    
interface ColorParameter extends VolumeParameter<Color> {
    hdr: boolean;
    showAlpha: boolean;
    showEyeDropper: boolean;



    Interp(from: Color, to: Color, t: number): void;


}
    
interface ColorParameterConstructor {


    new(value: Color, overrideState: boolean): ColorParameter;
    new(value: Color, hdr: boolean, showAlpha: boolean, showEyeDropper: boolean, overrideState: boolean): ColorParameter;



}
declare const ColorParameter: ColorParameterConstructor;
    
interface VignetteConstructor {


    new(): Vignette;



}
declare const Vignette: VignetteConstructor;
    
interface ShaderWarmup {





}
    
interface ShaderWarmupSetup {
    vdecl: Readonly<VertexAttributeDescriptor[]>;





}
    
interface ShaderVariantCollection extends Object {
    /**
     * Number of shaders in this collection (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ShaderVariantCollection-shaderCount.html | ShaderVariantCollection.shaderCount}
     */
    readonly shaderCount: number;
    /**
     * Number of total variants in this collection (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ShaderVariantCollection-variantCount.html | ShaderVariantCollection.variantCount}
     */
    readonly variantCount: number;
    /**
     * Number of total variants in this collection that are already warmed up (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ShaderVariantCollection-warmedUpVariantCount.html | ShaderVariantCollection.warmedUpVariantCount}
     */
    readonly warmedUpVariantCount: number;
    /**
     * Is this ShaderVariantCollection already warmed up? (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ShaderVariantCollection-isWarmedUp.html | ShaderVariantCollection.isWarmedUp}
     */
    readonly isWarmedUp: boolean;



    Add(variant: ShaderVariant): boolean;
    /**
     * Remove all shader variants from the collection.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ShaderVariantCollection.Clear.html | ShaderVariantCollection.Clear}
     */
    Clear(): void;
    Contains(variant: ShaderVariant): boolean;
    Remove(variant: ShaderVariant): boolean;
    /**
     * Prewarms all shader variants in this shader variant collection.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ShaderVariantCollection.WarmUp.html | ShaderVariantCollection.WarmUp}
     */
    WarmUp(): void;
    /**
     * Prewarms the given number of shader variants in this shader variant collection.
     * @param variantCount The maximum number of variants to warm up.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ShaderVariantCollection.WarmUpProgressively.html | ShaderVariantCollection.WarmUpProgressively}
     */
    WarmUpProgressively(variantCount: number): boolean;


}
    
interface ShaderVariant {
    shader: Shader;
    passType: PassType;
    keywords: Readonly<string[]>;





}
    
interface ShaderVariantConstructor {


    new(shader: Shader, passType: PassType, keywords: Readonly<string[]>): ShaderVariant;



}
declare const ShaderVariant: ShaderVariantConstructor;
    
interface ShaderVariantCollectionConstructor {


    new(): ShaderVariantCollection;



}
declare const ShaderVariantCollection: ShaderVariantCollectionConstructor;
    
interface ShaderWarmupConstructor {




    WarmupShader(shader: Shader, setup: ShaderWarmupSetup): void;
    WarmupShaderFromCollection(collection: ShaderVariantCollection, shader: Shader, setup: ShaderWarmupSetup): void;

}
declare const ShaderWarmup: ShaderWarmupConstructor;
    
    
    
interface QualitySettings extends Object {





}
    
interface RenderPipelineAsset extends ScriptableObject {
    /**
     * The render index for the terrain brush in the editor.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-terrainBrushPassIndex.html | Rendering.RenderPipelineAsset.terrainBrushPassIndex}
     */
    readonly terrainBrushPassIndex: number;
    /**
     * Return the default Material for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-defaultMaterial.html | Rendering.RenderPipelineAsset.defaultMaterial}
     */
    readonly defaultMaterial: Material;
    /**
     * Retrieves the default Autodesk Interactive Shader for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-autodeskInteractiveShader.html | Rendering.RenderPipelineAsset.autodeskInteractiveShader}
     */
    readonly autodeskInteractiveShader: Shader;
    /**
     * Retrieves the default Autodesk Interactive transparent Shader for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-autodeskInteractiveTransparentShader.html | Rendering.RenderPipelineAsset.autodeskInteractiveTransparentShader}
     */
    readonly autodeskInteractiveTransparentShader: Shader;
    /**
     * Retrieves the default Autodesk Interactive masked Shader for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-autodeskInteractiveMaskedShader.html | Rendering.RenderPipelineAsset.autodeskInteractiveMaskedShader}
     */
    readonly autodeskInteractiveMaskedShader: Shader;
    /**
     * Return the detail lit Shader for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-terrainDetailLitShader.html | Rendering.RenderPipelineAsset.terrainDetailLitShader}
     */
    readonly terrainDetailLitShader: Shader;
    /**
     * Return the detail grass Shader for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-terrainDetailGrassShader.html | Rendering.RenderPipelineAsset.terrainDetailGrassShader}
     */
    readonly terrainDetailGrassShader: Shader;
    /**
     * Return the detail grass billboard Shader for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-terrainDetailGrassBillboardShader.html | Rendering.RenderPipelineAsset.terrainDetailGrassBillboardShader}
     */
    readonly terrainDetailGrassBillboardShader: Shader;
    /**
     * Return the default particle Material for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-defaultParticleMaterial.html | Rendering.RenderPipelineAsset.defaultParticleMaterial}
     */
    readonly defaultParticleMaterial: Material;
    /**
     * Return the default Line Material for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-defaultLineMaterial.html | Rendering.RenderPipelineAsset.defaultLineMaterial}
     */
    readonly defaultLineMaterial: Material;
    /**
     * Return the default Terrain  Material for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-defaultTerrainMaterial.html | Rendering.RenderPipelineAsset.defaultTerrainMaterial}
     */
    readonly defaultTerrainMaterial: Material;
    /**
     * Return the default UI Material for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-defaultUIMaterial.html | Rendering.RenderPipelineAsset.defaultUIMaterial}
     */
    readonly defaultUIMaterial: Material;
    /**
     * Return the default UI overdraw Material for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-defaultUIOverdrawMaterial.html | Rendering.RenderPipelineAsset.defaultUIOverdrawMaterial}
     */
    readonly defaultUIOverdrawMaterial: Material;
    /**
     * Return the default UI ETC1  Material for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-defaultUIETC1SupportedMaterial.html | Rendering.RenderPipelineAsset.defaultUIETC1SupportedMaterial}
     */
    readonly defaultUIETC1SupportedMaterial: Material;
    /**
     * Return the default 2D Material for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-default2DMaterial.html | Rendering.RenderPipelineAsset.default2DMaterial}
     */
    readonly default2DMaterial: Material;
    /**
     * Gets the default 2D Mask Material used by Sprite Masks in Universal Render Pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-default2DMaskMaterial.html | Rendering.RenderPipelineAsset.default2DMaskMaterial}
     */
    readonly default2DMaskMaterial: Material;
    /**
     * Return the default Shader for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-defaultShader.html | Rendering.RenderPipelineAsset.defaultShader}
     */
    readonly defaultShader: Shader;
    /**
     * Return the default SpeedTree v7 Shader for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-defaultSpeedTree7Shader.html | Rendering.RenderPipelineAsset.defaultSpeedTree7Shader}
     */
    readonly defaultSpeedTree7Shader: Shader;
    /**
     * Return the default SpeedTree v8 Shader for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-defaultSpeedTree8Shader.html | Rendering.RenderPipelineAsset.defaultSpeedTree8Shader}
     */
    readonly defaultSpeedTree8Shader: Shader;
    /**
     * Return the default SpeedTree v9 Shader for this pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-defaultSpeedTree9Shader.html | Rendering.RenderPipelineAsset.defaultSpeedTree9Shader}
     */
    readonly defaultSpeedTree9Shader: Shader;
    /**
     * Returns the Shader Tag value for the render pipeline that is described by this asset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-renderPipelineShaderTag.html | Rendering.RenderPipelineAsset.renderPipelineShaderTag}
     */
    readonly renderPipelineShaderTag: string;
    /**
     * Returns a RenderPipeline type associated with the given RenderPipelineAsset instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineAsset-pipelineType.html | Rendering.RenderPipelineAsset.pipelineType}
     */
    readonly pipelineType: Type;





}
    
interface TextureMipmapLimitSettings {
    /**
     * Indicates whether the limitBias functions as an offset to the global texture mipmap limit or, instead, acts as an override to it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextureMipmapLimitSettings-limitBiasMode.html | TextureMipmapLimitSettings.limitBiasMode}
     */
    limitBiasMode: TextureMipmapLimitBiasMode;
    /**
     * The new value to apply on top of the global texture mipmap limit. Can act as an offset (default) or an override to it.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/TextureMipmapLimitSettings-limitBias.html | TextureMipmapLimitSettings.limitBias}
     */
    limitBias: number;





}
    
interface QualitySettingsConstructor {
    /**
     * The maximum number of pixel lights that should affect any object.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-pixelLightCount.html | QualitySettings.pixelLightCount}
     */
    pixelLightCount: number;
    /**
     * Real-time Shadows type to be used.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-shadows.html | QualitySettings.shadows}
     */
    shadows: ShadowQuality;
    /**
     * Directional light shadow projection.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-shadowProjection.html | QualitySettings.shadowProjection}
     */
    shadowProjection: ShadowProjection;
    /**
     * Number of cascades to use for directional light shadows.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-shadowCascades.html | QualitySettings.shadowCascades}
     */
    shadowCascades: number;
    /**
     * Shadow drawing distance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-shadowDistance.html | QualitySettings.shadowDistance}
     */
    shadowDistance: number;
    /**
     * The default resolution of the shadow maps.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-shadowResolution.html | QualitySettings.shadowResolution}
     */
    shadowResolution: ShadowResolution;
    /**
     * The rendering mode of Shadowmask.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-shadowmaskMode.html | QualitySettings.shadowmaskMode}
     */
    shadowmaskMode: ShadowmaskMode;
    /**
     * Offset shadow frustum near plane.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-shadowNearPlaneOffset.html | QualitySettings.shadowNearPlaneOffset}
     */
    shadowNearPlaneOffset: number;
    /**
     * The normalized cascade distribution for a 2 cascade setup. The value defines the position of the cascade with respect to Zero.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-shadowCascade2Split.html | QualitySettings.shadowCascade2Split}
     */
    shadowCascade2Split: number;
    /**
     * The normalized cascade start position for a 4 cascade setup. Each member of the vector defines the normalized position of the coresponding cascade with respect to Zero.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-shadowCascade4Split.html | QualitySettings.shadowCascade4Split}
     */
    shadowCascade4Split: Vector3;
    /**
     * Global multiplier for the LOD's switching distance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-lodBias.html | QualitySettings.lodBias}
     */
    lodBias: number;
    /**
     * Global anisotropic filtering mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-anisotropicFiltering.html | QualitySettings.anisotropicFiltering}
     */
    anisotropicFiltering: AnisotropicFiltering;
    /**
     * Indicates how many of the highest-resolution mips of each texture Unity does not upload at the given quality level. To set more specific mipmap limits, you can flag textures to ignore mipmap limits or assign them to mipmap limit groups.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-globalTextureMipmapLimit.html | QualitySettings.globalTextureMipmapLimit}
     */
    globalTextureMipmapLimit: number;
    /**
     * A maximum LOD level. All LOD groups.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-maximumLODLevel.html | QualitySettings.maximumLODLevel}
     */
    maximumLODLevel: number;
    /**
     * Enables or disables LOD Cross Fade.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-enableLODCrossFade.html | QualitySettings.enableLODCrossFade}
     */
    enableLODCrossFade: boolean;
    /**
     * Budget for how many ray casts can be performed per frame for approximate collision testing.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-particleRaycastBudget.html | QualitySettings.particleRaycastBudget}
     */
    particleRaycastBudget: number;
    /**
     * Should soft blending be used for particles?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-softParticles.html | QualitySettings.softParticles}
     */
    softParticles: boolean;
    /**
     * Use a two-pass shader for the vegetation in the terrain engine.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-softVegetation.html | QualitySettings.softVegetation}
     */
    softVegetation: boolean;
    /**
     * Represents the number of vertical syncs that should pass between each frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-vSyncCount.html | QualitySettings.vSyncCount}
     */
    vSyncCount: number;
    /**
     * How much CPU usage to assign to the final lighting calculations at runtime.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-realtimeGICPUUsage.html | QualitySettings.realtimeGICPUUsage}
     */
    realtimeGICPUUsage: number;
    /**
     * Choose the level of Multi-Sample Anti-aliasing (MSAA) that the GPU performs.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-antiAliasing.html | QualitySettings.antiAliasing}
     */
    antiAliasing: number;
    /**
     * Async texture upload provides timesliced async texture upload on the render thread with tight control over memory and timeslicing. There are no allocations except for the ones which driver has to do. To read data and upload texture data a ringbuffer whose size can be controlled is re-used.

Use asyncUploadTimeSlice to set the time-slice in milliseconds for asynchronous texture uploads per
frame. Minimum value is 1 and maximum is 33.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-asyncUploadTimeSlice.html | QualitySettings.asyncUploadTimeSlice}
     */
    asyncUploadTimeSlice: number;
    /**
     * Asynchronous texture and mesh data upload provides timesliced async texture and mesh data upload on the render thread with tight control over memory and timeslicing. There are no allocations except for the ones which driver has to do. To read data and upload texture and mesh data, Unity re-uses a ringbuffer whose size can be controlled.

Use asyncUploadBufferSize to set the buffer size for asynchronous texture and mesh data uploads. The minimum value is 2 megabytes and the maximum value is 2047 megabytes. The buffer resizes automatically to fit the largest texture currently loading. To avoid a buffer resize (which can use extra system resources) set this value to the size of the largest texture in the Scene. If you have issues with excessive memory usage, you may need to reduce the value of this buffer or disable asyncUploadPersistentBuffer. Memory fragmentation can occur if you choose the latter option.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-asyncUploadBufferSize.html | QualitySettings.asyncUploadBufferSize}
     */
    asyncUploadBufferSize: number;
    /**
     * This flag controls if the async upload pipeline's ring buffer remains allocated when there are no active loading operations.
Set this to true, to make the ring buffer allocation persist after all upload operations have completed.
If you have issues with excessive memory usage, you can set this to false. This means you reduce the runtime memory footprint, but memory fragmentation can occur.
The default value is true.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-asyncUploadPersistentBuffer.html | QualitySettings.asyncUploadPersistentBuffer}
     */
    asyncUploadPersistentBuffer: boolean;
    /**
     * Enables or disables real-time reflection probes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-realtimeReflectionProbes.html | QualitySettings.realtimeReflectionProbes}
     */
    realtimeReflectionProbes: boolean;
    /**
     * If enabled, billboards will face towards camera position rather than camera orientation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-billboardsFaceCameraPosition.html | QualitySettings.billboardsFaceCameraPosition}
     */
    billboardsFaceCameraPosition: boolean;
    /**
     * Use the legacy pre-2022.2 algorithm for distributing details on terrain.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-useLegacyDetailDistribution.html | QualitySettings.useLegacyDetailDistribution}
     */
    useLegacyDetailDistribution: boolean;
    /**
     * In resolution scaling mode, this factor is used to multiply with the target Fixed DPI specified to get the actual Fixed DPI to use for this quality setting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-resolutionScalingFixedDPIFactor.html | QualitySettings.resolutionScalingFixedDPIFactor}
     */
    resolutionScalingFixedDPIFactor: number;
    /**
     * Controls which fields should have their values overriden in active Terrains.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-terrainQualityOverrides.html | QualitySettings.terrainQualityOverrides}
     */
    terrainQualityOverrides: TerrainQualityOverrides;
    /**
     * Value set to Terrain.heightmapPixelError if TerrainQualityOverrides.PixelError is set in terrainQualityOverrides.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-terrainPixelError.html | QualitySettings.terrainPixelError}
     */
    terrainPixelError: number;
    /**
     * Value set to Terrain.detailObjectDensity if TerrainQualityOverrides.DetailDensity is set in terrainQualityOverrides.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-terrainDetailDensityScale.html | QualitySettings.terrainDetailDensityScale}
     */
    terrainDetailDensityScale: number;
    /**
     * Value set to Terrain.basemapDistance if TerrainQualityOverrides.BasemapDistance is set in terrainQualityOverrides.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-terrainBasemapDistance.html | QualitySettings.terrainBasemapDistance}
     */
    terrainBasemapDistance: number;
    /**
     * Value set to Terrain.detailObjectDistance if TerrainQualityOverrides.DetailDistance is set in terrainQualityOverrides.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-terrainDetailDistance.html | QualitySettings.terrainDetailDistance}
     */
    terrainDetailDistance: number;
    /**
     * Value set to Terrain.treeDistance if TerrainQualityOverrides.TreeDistance is set in terrainQualityOverrides.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-terrainTreeDistance.html | QualitySettings.terrainTreeDistance}
     */
    terrainTreeDistance: number;
    /**
     * Value set to Terrain.treeBillboardDistance if TerrainQualityOverrides.BillboardStart is set in terrainQualityOverrides.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-terrainBillboardStart.html | QualitySettings.terrainBillboardStart}
     */
    terrainBillboardStart: number;
    /**
     * Value set to Terrain.treeCrossFadeLength if TerrainQualityOverrides.FadeLength is set in terrainQualityOverrides.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-terrainFadeLength.html | QualitySettings.terrainFadeLength}
     */
    terrainFadeLength: number;
    /**
     * Value set to Terrain.treeMaximumFullLODCount if TerrainQualityOverrides.MaxTrees is set in terrainQualityOverrides.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-terrainMaxTrees.html | QualitySettings.terrainMaxTrees}
     */
    terrainMaxTrees: number;
    /**
     * The RenderPipelineAsset that defines the override render pipeline for the current quality level.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-renderPipeline.html | QualitySettings.renderPipeline}
     */
    renderPipeline: RenderPipelineAsset;
    /**
     * The maximum number of bones per vertex that are taken into account during skinning, for all meshes in the project.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-skinWeights.html | QualitySettings.skinWeights}
     */
    skinWeights: SkinWeights;
    /**
     * The number of Quality Levels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-count.html | QualitySettings.count}
     */
    readonly count: number;
    /**
     * Enable automatic streaming of texture mipmap levels based on their distance from all active cameras.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-streamingMipmapsActive.html | QualitySettings.streamingMipmapsActive}
     */
    streamingMipmapsActive: boolean;
    /**
     * The total amount of memory (in megabytes) to be used by streaming and non-streaming textures.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-streamingMipmapsMemoryBudget.html | QualitySettings.streamingMipmapsMemoryBudget}
     */
    streamingMipmapsMemoryBudget: number;
    /**
     * The number of renderer instances that are processed each frame when calculating which texture mipmap levels should be streamed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-streamingMipmapsRenderersPerFrame.html | QualitySettings.streamingMipmapsRenderersPerFrame}
     */
    streamingMipmapsRenderersPerFrame: number;
    /**
     * The maximum number of mipmap levels to discard for each texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-streamingMipmapsMaxLevelReduction.html | QualitySettings.streamingMipmapsMaxLevelReduction}
     */
    streamingMipmapsMaxLevelReduction: number;
    /**
     * Process all enabled Cameras for texture streaming (rather than just those with StreamingController components).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-streamingMipmapsAddAllCameras.html | QualitySettings.streamingMipmapsAddAllCameras}
     */
    streamingMipmapsAddAllCameras: boolean;
    /**
     * The maximum number of active texture file IO requests from the texture streaming system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-streamingMipmapsMaxFileIORequests.html | QualitySettings.streamingMipmapsMaxFileIORequests}
     */
    streamingMipmapsMaxFileIORequests: number;
    /**
     * Maximum number of frames queued up by graphics driver.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-maxQueuedFrames.html | QualitySettings.maxQueuedFrames}
     */
    maxQueuedFrames: number;
    /**
     * The indexed list of available Quality Settings.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-names.html | QualitySettings.names}
     */
    readonly names: Readonly<string[]>;
    /**
     * Desired color space (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-desiredColorSpace.html | QualitySettings.desiredColorSpace}
     */
    readonly desiredColorSpace: ColorSpace;
    /**
     * Active color space (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/QualitySettings-activeColorSpace.html | QualitySettings.activeColorSpace}
     */
    readonly activeColorSpace: ColorSpace;




    DecreaseLevel(applyExpensiveChanges: boolean): void;
    DecreaseLevel(): void;
    ForEach(callback: Action): void;
    ForEach(callback: Action<number, string>): void;
    GetActiveQualityLevelsForPlatform(buildTargetGroupName: string): Readonly<number[]>;
    GetActiveQualityLevelsForPlatformCount(buildTargetGroupName: string): number;
    GetAllRenderPipelineAssetsForPlatform(buildTargetGroupName: string, renderPipelineAssets: Readonly<RenderPipelineAsset[]>): void;
    GetQualityLevel(): number;
    GetQualitySettings(): Object;
    GetRenderPipelineAssetAt(index: number): RenderPipelineAsset;
    GetTextureMipmapLimitSettings(groupName: string): TextureMipmapLimitSettings;
    IncreaseLevel(applyExpensiveChanges: boolean): void;
    IncreaseLevel(): void;
    IsPlatformIncluded(buildTargetGroupName: string, index: number): boolean;
    SetLODSettings(lodBias: number, maximumLODLevel: number, setDirty: boolean): void;
    SetQualityLevel(index: number): void;
    SetQualityLevel(index: number, applyExpensiveChanges: boolean): void;
    SetTextureMipmapLimitSettings(groupName: string, textureMipmapLimitSettings: TextureMipmapLimitSettings): void;

    readonly activeQualityLevelChanged: MonoSignal<number, number>;
}
declare const QualitySettings: QualitySettingsConstructor;
    
interface GraphicsSettings extends Object {





}
    
interface IRenderPipelineGraphicsSettings {
    /**
     * The current version of this settings.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.IRenderPipelineGraphicsSettings-version.html | Rendering.IRenderPipelineGraphicsSettings.version}
     */
    readonly version: number;
    /**
     * If the setting is available in player build.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.IRenderPipelineGraphicsSettings-isAvailableInPlayerBuild.html | Rendering.IRenderPipelineGraphicsSettings.isAvailableInPlayerBuild}
     */
    readonly isAvailableInPlayerBuild: boolean;



    /**
     * Optional method to perform custom reset logic.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.IRenderPipelineGraphicsSettings.Reset.html | Rendering.IRenderPipelineGraphicsSettings.Reset}
     */
    Reset(): void;


}
    
interface RenderPipeline {
    /**
     * Returns true when the RenderPipeline is invalid or destroyed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipeline-disposed.html | Rendering.RenderPipeline.disposed}
     */
    readonly disposed: boolean;
    readonly defaultSettings: RenderPipelineGlobalSettings;





}
    
interface RenderPipelineGlobalSettings extends ScriptableObject, ISerializationCallbackReceiver {



    /**
     * Editor-only function that initializes the RenderPipelineGlobalSettings.
     * @param source RenderPipelineGlobalSettings that Unity will copy values from. Optional.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineGlobalSettings.Initialize.html | Rendering.RenderPipelineGlobalSettings.Initialize}
     */
    Initialize(source: RenderPipelineGlobalSettings): void;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;


}
    
interface RenderPipelineConstructor {




    SubmitRenderRequest<RequestData>(camera: Camera, data: RequestData): void;
    SupportsRenderRequest<RequestData>(camera: Camera, data: RequestData): boolean;

}
declare const RenderPipeline: RenderPipelineConstructor;
    
interface GraphicsSettingsConstructor {
    /**
     * Transparent object sorting mode.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-transparencySortMode.html | Rendering.GraphicsSettings.transparencySortMode}
     */
    transparencySortMode: TransparencySortMode;
    /**
     * An axis that describes the direction along which the distances of objects are measured for the purpose of sorting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-transparencySortAxis.html | Rendering.GraphicsSettings.transparencySortAxis}
     */
    transparencySortAxis: Vector3;
    /**
     * Is the current render pipeline capable of rendering direct lighting for rectangular area Lights?
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-realtimeDirectRectangularAreaLights.html | Rendering.GraphicsSettings.realtimeDirectRectangularAreaLights}
     */
    realtimeDirectRectangularAreaLights: boolean;
    /**
     * If this is true, Light intensity is multiplied against linear color values. If it is false, gamma color values are used.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-lightsUseLinearIntensity.html | Rendering.GraphicsSettings.lightsUseLinearIntensity}
     */
    lightsUseLinearIntensity: boolean;
    /**
     * Whether to use a Light's color temperature when calculating the final color of that Light.&quot;
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-lightsUseColorTemperature.html | Rendering.GraphicsSettings.lightsUseColorTemperature}
     */
    lightsUseColorTemperature: boolean;
    /**
     * Stores the default value for the GateFit property of newly created Cameras.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-defaultGateFitMode.html | Rendering.GraphicsSettings.defaultGateFitMode}
     */
    defaultGateFitMode: GateFitMode;
    /**
     * Enable/Disable SRP batcher (experimental) at runtime.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-useScriptableRenderPipelineBatching.html | Rendering.GraphicsSettings.useScriptableRenderPipelineBatching}
     */
    useScriptableRenderPipelineBatching: boolean;
    /**
     * If this is true, a log entry is made each time a shader is compiled at application runtime.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-logWhenShaderIsCompiled.html | Rendering.GraphicsSettings.logWhenShaderIsCompiled}
     */
    logWhenShaderIsCompiled: boolean;
    /**
     * Disables the built-in update loop for Custom Render Textures, so that you can write your own update loop.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-disableBuiltinCustomRenderTextureUpdate.html | Rendering.GraphicsSettings.disableBuiltinCustomRenderTextureUpdate}
     */
    disableBuiltinCustomRenderTextureUpdate: boolean;
    /**
     * If and when to include video shaders in the build.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-videoShadersIncludeMode.html | Rendering.GraphicsSettings.videoShadersIncludeMode}
     */
    videoShadersIncludeMode: VideoShadersIncludeMode;
    /**
     * Defines the way Unity chooses a probe to light a Renderer that is lit by Light Probes but positioned outside the bounds of the Light Probe tetrahedral hull.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-lightProbeOutsideHullStrategy.html | Rendering.GraphicsSettings.lightProbeOutsideHullStrategy}
     */
    lightProbeOutsideHullStrategy: LightProbeOutsideHullStrategy;
    /**
     * The RenderPipelineAsset that defines the active render pipeline for the current quality level.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-currentRenderPipeline.html | Rendering.GraphicsSettings.currentRenderPipeline}
     */
    readonly currentRenderPipeline: RenderPipelineAsset;
    /**
     * If the value is true, a Scriptable Render Pipeline is active.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-isScriptableRenderPipelineEnabled.html | Rendering.GraphicsSettings.isScriptableRenderPipelineEnabled}
     */
    readonly isScriptableRenderPipelineEnabled: boolean;
    /**
     * The type of the currently active RenderPipelineAsset, or null if there's no currently active Asset.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-currentRenderPipelineAssetType.html | Rendering.GraphicsSettings.currentRenderPipelineAssetType}
     */
    readonly currentRenderPipelineAssetType: Type;
    /**
     * The RenderPipelineAsset that defines the default render pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-defaultRenderPipeline.html | Rendering.GraphicsSettings.defaultRenderPipeline}
     */
    defaultRenderPipeline: RenderPipelineAsset;
    /**
     * An array containing the RenderPipelineAsset instances that describe the default render pipeline and any quality level overrides.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-allConfiguredRenderPipelines.html | Rendering.GraphicsSettings.allConfiguredRenderPipelines}
     */
    readonly allConfiguredRenderPipelines: Readonly<RenderPipelineAsset[]>;
    /**
     * Enable or disable using the camera position as the reference point for culling lights.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-cameraRelativeLightCulling.html | Rendering.GraphicsSettings.cameraRelativeLightCulling}
     */
    cameraRelativeLightCulling: boolean;
    /**
     * Enable or disable using the camera position as the reference point for culling shadows.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.GraphicsSettings-cameraRelativeShadowCulling.html | Rendering.GraphicsSettings.cameraRelativeShadowCulling}
     */
    cameraRelativeShadowCulling: boolean;




    ForEach(callback: Action<IRenderPipelineGraphicsSettings>): void;
    GetCustomShader(type: BuiltinShaderType): Shader;
    GetGraphicsSettings(): Object;
    GetRenderPipelineSettings<T extends IRenderPipelineGraphicsSettings>(): T;
    GetSettingsForRenderPipeline<T extends RenderPipeline>(): RenderPipelineGlobalSettings;
    GetSettingsForRenderPipeline(renderPipelineType: Type): RenderPipelineGlobalSettings;
    GetShaderMode(type: BuiltinShaderType): BuiltinShaderMode;
    HasShaderDefine(tier: GraphicsTier, defineHash: BuiltinShaderDefine): boolean;
    HasShaderDefine(defineHash: BuiltinShaderDefine): boolean;
    SetCustomShader(type: BuiltinShaderType, shader: Shader): void;
    SetShaderMode(type: BuiltinShaderType, mode: BuiltinShaderMode): void;
    Subscribe<TChild extends IRenderPipelineGraphicsSettings>(callback: Action<TChild, string>): void;
    Unsubscribe<TChild extends IRenderPipelineGraphicsSettings>(callback: Action<TChild, string>): void;

}
declare const GraphicsSettings: GraphicsSettingsConstructor;
    
interface IGPUResidentRenderPipeline {
    readonly gpuResidentDrawerSettings: GPUResidentDrawerSettings;
    gpuResidentDrawerMode: GPUResidentDrawerMode;



    IsGPUResidentDrawerSupportedBySRP(logReason: boolean): boolean;


}
    
interface GPUResidentDrawerSettings {
    mode: GPUResidentDrawerMode;
    supportDitheringCrossFade: boolean;
    enableOcclusionCulling: boolean;
    allowInEditMode: boolean;
    smallMeshScreenPercentage: number;
    pickingShader: Shader;
    errorShader: Shader;
    loadingShader: Shader;





}
    
interface IGPUResidentRenderPipelineConstructor {




    IsGPUResidentDrawerEnabled(): boolean;
    IsGPUResidentDrawerSupportedByProjectConfiguration(logReason: boolean): boolean;
    ReinitializeGPUResidentDrawer(): void;

}
declare const IGPUResidentRenderPipeline: IGPUResidentRenderPipelineConstructor;
    
interface IRenderGraphEnabledRenderPipeline {
    readonly isImmediateModeSupported: boolean;





}
    
interface IProbeVolumeEnabledRenderPipeline {
    readonly supportProbeVolume: boolean;
    readonly maxSHBands: ProbeVolumeSHBands;





}
    
interface ISTPEnabledRenderPipeline {
    readonly isStpUsed: boolean;





}
    
interface UniversalRenderPipeline extends RenderPipeline {
    readonly defaultSettings: RenderPipelineGlobalSettings;



    ToString(): string;


}
    
interface UniversalRenderPipelineConstructor {
    k_ShaderTagName: string;
    readonly maxShadowBias: number;
    readonly minRenderScale: number;
    readonly maxRenderScale: number;
    readonly maxNumIterationsEnclosingSphere: number;
    readonly maxPerObjectLights: number;
    readonly maxVisibleAdditionalLights: number;
    readonly asset: UniversalRenderPipelineAsset;


    new(asset: UniversalRenderPipelineAsset): UniversalRenderPipeline;


    IsGameCamera(camera: Camera): boolean;

}
declare const UniversalRenderPipeline: UniversalRenderPipelineConstructor;
    
interface RenderPipelineAsset<TRenderPipeline extends RenderPipeline> extends RenderPipelineAsset {
    readonly pipelineType: Type;
    readonly renderPipelineShaderTag: string;





}
    
interface UniversalRenderPipelineAsset extends RenderPipelineAsset<UniversalRenderPipeline>, ISerializationCallbackReceiver, IGPUResidentRenderPipeline, IRenderGraphEnabledRenderPipeline, IProbeVolumeEnabledRenderPipeline, ISTPEnabledRenderPipeline {
    readonly rendererDataList: ReadOnlySpan<ScriptableRendererData>;
    readonly renderers: ReadOnlySpan<ScriptableRenderer>;
    readonly isImmediateModeSupported: boolean;
    readonly scriptableRenderer: ScriptableRenderer;
    supportsCameraDepthTexture: boolean;
    supportsCameraOpaqueTexture: boolean;
    readonly opaqueDownsampling: Downsampling;
    readonly supportsTerrainHoles: boolean;
    storeActionsOptimization: StoreActionsOptimization;
    supportsHDR: boolean;
    hdrColorBufferPrecision: HDRColorBufferPrecision;
    msaaSampleCount: number;
    renderScale: number;
    readonly enableLODCrossFade: boolean;
    readonly lodCrossFadeDitheringType: LODCrossFadeDitheringType;
    upscalingFilter: UpscalingFilterSelection;
    fsrOverrideSharpness: boolean;
    fsrSharpness: number;
    readonly shEvalMode: ShEvalMode;
    readonly lightProbeSystem: LightProbeSystem;
    readonly probeVolumeMemoryBudget: ProbeVolumeTextureMemoryBudget;
    readonly probeVolumeBlendingMemoryBudget: ProbeVolumeBlendingTextureMemoryBudget;
    readonly supportProbeVolumeGPUStreaming: boolean;
    readonly supportProbeVolumeDiskStreaming: boolean;
    readonly supportProbeVolumeScenarios: boolean;
    readonly supportProbeVolumeScenarioBlending: boolean;
    readonly probeVolumeSHBands: ProbeVolumeSHBands;
    readonly mainLightRenderingMode: LightRenderingMode;
    readonly supportsMainLightShadows: boolean;
    mainLightShadowmapResolution: number;
    readonly additionalLightsRenderingMode: LightRenderingMode;
    maxAdditionalLightsCount: number;
    readonly supportsAdditionalLightShadows: boolean;
    additionalLightsShadowmapResolution: number;
    readonly additionalLightsShadowResolutionTierLow: number;
    readonly additionalLightsShadowResolutionTierMedium: number;
    readonly additionalLightsShadowResolutionTierHigh: number;
    readonly reflectionProbeBlending: boolean;
    readonly reflectionProbeBoxProjection: boolean;
    shadowDistance: number;
    shadowCascadeCount: number;
    cascade2Split: number;
    cascade3Split: Vector2;
    cascade4Split: Vector3;
    cascadeBorder: number;
    shadowDepthBias: number;
    shadowNormalBias: number;
    readonly supportsSoftShadows: boolean;
    supportsDynamicBatching: boolean;
    readonly supportsMixedLighting: boolean;
    readonly supportsLightCookies: boolean;
    readonly useRenderingLayers: boolean;
    readonly volumeFrameworkUpdateMode: VolumeFrameworkUpdateMode;
    volumeProfile: VolumeProfile;
    useSRPBatcher: boolean;
    colorGradingMode: ColorGradingMode;
    colorGradingLutSize: number;
    readonly allowPostProcessAlphaOutput: boolean;
    readonly useFastSRGBLinearConversion: boolean;
    readonly supportScreenSpaceLensFlare: boolean;
    readonly supportDataDrivenLensFlare: boolean;
    useAdaptivePerformance: boolean;
    conservativeEnclosingSphere: boolean;
    numIterationsEnclosingSphere: number;
    readonly renderPipelineShaderTag: string;
    gpuResidentDrawerMode: GPUResidentDrawerMode;
    gpuResidentDrawerEnableOcclusionCullingInCameras: boolean;
    smallMeshScreenPercentage: number;
    readonly supportProbeVolume: boolean;
    readonly maxSHBands: ProbeVolumeSHBands;
    readonly isStpUsed: boolean;
    readonly defaultMaterial: Material;
    readonly defaultParticleMaterial: Material;
    readonly defaultLineMaterial: Material;
    readonly defaultTerrainMaterial: Material;
    readonly default2DMaterial: Material;
    readonly default2DMaskMaterial: Material;
    readonly decalMaterial: Material;
    readonly defaultShader: Shader;
    readonly autodeskInteractiveShader: Shader;
    readonly autodeskInteractiveTransparentShader: Shader;
    readonly autodeskInteractiveMaskedShader: Shader;
    readonly terrainDetailLitShader: Shader;
    readonly terrainDetailGrassShader: Shader;
    readonly terrainDetailGrassBillboardShader: Shader;
    readonly defaultSpeedTree7Shader: Shader;
    readonly defaultSpeedTree8Shader: Shader;
    readonly defaultSpeedTree9Shader: Shader;



    GetRenderer(index: number): ScriptableRenderer;
    LoadBuiltinRendererData(type: RendererType): ScriptableRendererData;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;


}
    
interface ScriptableRendererData extends ScriptableObject {
    readonly rendererFeatures: Readonly<ScriptableRendererFeature[]>;
    useNativeRenderPass: boolean;



    SetDirty(): void;


}
    
interface ScriptableRendererFeature extends ScriptableObject {
    readonly isActive: boolean;



    AddRenderPasses(renderer: ScriptableRenderer, renderingData: RenderingData): void;
    Create(): void;
    Dispose(): void;
    OnCameraPreCull(renderer: ScriptableRenderer, cameraData: CameraData): void;
    SetActive(active: boolean): void;
    SetupRenderPasses(renderer: ScriptableRenderer, renderingData: RenderingData): void;


}
    
interface ScriptableRenderer {
    supportedRenderingFeatures: RenderingFeatures;
    unsupportedGraphicsDeviceTypes: Readonly<number[]>;
    readonly supportsGPUOcclusion: boolean;



    Dispose(): void;
    EnqueuePass(pass: ScriptableRenderPass): void;
    FinishRendering(cmd: CommandBuffer): void;
    OnBeginRenderGraphFrame(): void;
    OnEndRenderGraphFrame(): void;
    SetupCullingParameters(cullingParameters: ScriptableCullingParameters, cameraData: CameraData): void;
    SupportedCameraStackingTypes(): number;
    SupportsCameraStackingType(cameraRenderType: CameraRenderType): boolean;


}
    
interface RenderingFeatures {
    msaa: boolean;





}
    
interface RenderingFeaturesConstructor {


    new(): RenderingFeatures;



}
declare const RenderingFeatures: RenderingFeaturesConstructor;
    
interface IRenderGraphRecorder {



    RecordRenderGraph(renderGraph: RenderGraph, frameData: ContextContainer): void;


}
    
interface RenderGraph {
    nativeRenderPassesEnabled: boolean;
    readonly name: string;
    readonly defaultResources: RenderGraphDefaultResources;



    BeginProfilingSampler(sampler: ProfilingSampler, file: string, line: number): void;
    BeginRecording(parameters: RenderGraphParameters): void;
    Cleanup(): void;
    CreateBuffer(desc: BufferDesc): BufferHandle;
    CreateBuffer(graphicsBuffer: BufferHandle): BufferHandle;
    CreateGizmoRendererList(camera: Camera, gizmoSubset: GizmoSubset): RendererListHandle;
    CreateRendererList(desc: RendererListDesc): RendererListHandle;
    CreateRendererList(desc: RendererListParams): RendererListHandle;
    CreateShadowRendererList(shadowDrawingSettings: ShadowDrawingSettings): RendererListHandle;
    CreateSharedTexture(desc: TextureDesc, explicitRelease: boolean): TextureHandle;
    CreateSkyboxRendererList(camera: Camera): RendererListHandle;
    CreateSkyboxRendererList(camera: Camera, projectionMatrix: Matrix4x4, viewMatrix: Matrix4x4): RendererListHandle;
    CreateSkyboxRendererList(camera: Camera, projectionMatrixL: Matrix4x4, viewMatrixL: Matrix4x4, projectionMatrixR: Matrix4x4, viewMatrixR: Matrix4x4): RendererListHandle;
    CreateTexture(desc: TextureDesc): TextureHandle;
    CreateTexture(texture: TextureHandle): TextureHandle;
    CreateTextureIfInvalid(desc: TextureDesc, texture: TextureHandle): void;
    CreateUIOverlayRendererList(camera: Camera): RendererListHandle;
    CreateUIOverlayRendererList(camera: Camera, uiSubset: UISubset): RendererListHandle;
    CreateWireOverlayRendererList(camera: Camera): RendererListHandle;
    EndFrame(): void;
    EndProfilingSampler(sampler: ProfilingSampler, file: string, line: number): void;
    EndRecordingAndExecute(): void;
    GetBufferDesc(graphicsBuffer: BufferHandle): BufferDesc;
    GetRenderTargetInfo(texture: TextureHandle): RenderTargetInfo;
    GetTextureDesc(texture: TextureHandle): TextureDesc;
    ImportBackbuffer(rt: RenderTargetIdentifier, info: RenderTargetInfo, importParams: ImportResourceParams): TextureHandle;
    ImportBackbuffer(rt: RenderTargetIdentifier): TextureHandle;
    ImportBuffer(graphicsBuffer: GraphicsBuffer, forceRelease: boolean): BufferHandle;
    ImportRayTracingAccelerationStructure(accelStruct: RayTracingAccelerationStructure, name: string): RayTracingAccelerationStructureHandle;
    ImportTexture(rt: RTHandle): TextureHandle;
    ImportTexture(rt: RTHandle, importParams: ImportResourceParams): TextureHandle;
    ImportTexture(rt: RTHandle, info: RenderTargetInfo, importParams: ImportResourceParams): TextureHandle;
    RefreshSharedTextureDesc(handle: TextureHandle, desc: TextureDesc): void;
    RegisterDebug(panel: Panel): void;
    ReleaseSharedTexture(texture: TextureHandle): void;
    UnRegisterDebug(): void;


}
    
interface RenderGraphDefaultResources {
    readonly blackTexture: TextureHandle;
    readonly whiteTexture: TextureHandle;
    readonly clearTextureXR: TextureHandle;
    readonly magentaTextureXR: TextureHandle;
    readonly blackTextureXR: TextureHandle;
    readonly blackTextureArrayXR: TextureHandle;
    readonly blackUIntTextureXR: TextureHandle;
    readonly blackTexture3DXR: TextureHandle;
    readonly whiteTextureXR: TextureHandle;
    readonly defaultShadowTexture: TextureHandle;





}
    
interface TextureHandle {



    GetDescriptor(renderGraph: RenderGraph): TextureDesc;
    IsValid(): boolean;


}
    
interface TextureDesc {
    sizeMode: TextureSizeMode;
    width: number;
    height: number;
    slices: number;
    scale: Vector2;
    func: ScaleFunc;
    format: GraphicsFormat;
    filterMode: FilterMode;
    wrapMode: TextureWrapMode;
    dimension: TextureDimension;
    enableRandomWrite: boolean;
    useMipMap: boolean;
    autoGenerateMips: boolean;
    isShadowMap: boolean;
    anisoLevel: number;
    mipMapBias: number;
    msaaSamples: MSAASamples;
    bindTextureMS: boolean;
    useDynamicScale: boolean;
    useDynamicScaleExplicit: boolean;
    memoryless: RenderTextureMemoryless;
    vrUsage: VRTextureUsage;
    name: string;
    fastMemoryDesc: FastMemoryDesc;
    fallBackToBlackTexture: boolean;
    disableFallBackToImportedTexture: boolean;
    clearBuffer: boolean;
    clearColor: Color;
    discardBuffer: boolean;
    depthBufferBits: DepthBits;
    colorFormat: GraphicsFormat;



    CalculateFinalDimensions(): Vector2Int;
    GetHashCode(): number;


}
    
interface ScaleFunc extends MulticastDelegate {



    BeginInvoke(size: Vector2Int, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): Vector2Int;
    Invoke(size: Vector2Int): Vector2Int;


}
    
interface ScaleFuncConstructor {


    new(object: unknown, method: IntPtr): ScaleFunc;



}
declare const ScaleFunc: ScaleFuncConstructor;
    
interface FastMemoryDesc {
    inFastMemory: boolean;
    flags: FastMemoryFlags;
    residencyFraction: number;





}
    
interface TextureDescConstructor {


    new(width: number, height: number, dynamicResolution: boolean, xrReady: boolean): TextureDesc;
    new(scale: Vector2, dynamicResolution: boolean, xrReady: boolean): TextureDesc;
    new(func: ScaleFunc, dynamicResolution: boolean, xrReady: boolean): TextureDesc;
    new(input: TextureDesc): TextureDesc;
    new(input: RenderTextureDescriptor): TextureDesc;
    new(input: RenderTexture): TextureDesc;



}
declare const TextureDesc: TextureDescConstructor;
    
interface TextureHandleConstructor {
    readonly nullHandle: TextureHandle;





}
declare const TextureHandle: TextureHandleConstructor;
    
interface ProfilingSampler {
    readonly name: string;
    enableRecording: boolean;
    readonly gpuElapsedTime: number;
    readonly gpuSampleCount: number;
    readonly cpuElapsedTime: number;
    readonly cpuSampleCount: number;
    readonly inlineCpuElapsedTime: number;
    readonly inlineCpuSampleCount: number;



    Begin(cmd: CommandBuffer): void;
    End(cmd: CommandBuffer): void;


}
    
interface ProfilingSamplerConstructor {


    new(name: string): ProfilingSampler;


    Get<TEnum extends Enum>(marker: TEnum): ProfilingSampler;

}
declare const ProfilingSampler: ProfilingSamplerConstructor;
    
interface BufferHandle {



    IsValid(): boolean;


}
    
interface BufferHandleConstructor {
    readonly nullHandle: BufferHandle;





}
declare const BufferHandle: BufferHandleConstructor;
    
interface RendererListHandle {



    IsValid(): boolean;


}
    
interface BufferDesc {
    count: number;
    stride: number;
    name: string;
    target: Target;
    usageFlags: UsageFlags;



    GetHashCode(): number;


}
    
interface BufferDescConstructor {


    new(count: number, stride: number): BufferDesc;
    new(count: number, stride: number, target: Target): BufferDesc;



}
declare const BufferDesc: BufferDescConstructor;
    
interface RenderTargetInfo {
    width: number;
    height: number;
    volumeDepth: number;
    msaaSamples: number;
    format: GraphicsFormat;
    bindMS: boolean;





}
    
interface ImportResourceParams {
    clearOnFirstUse: boolean;
    clearColor: Color;
    discardOnLastUse: boolean;





}
    
interface RayTracingAccelerationStructureHandle {



    IsValid(): boolean;


}
    
interface RayTracingAccelerationStructureHandleConstructor {
    readonly nullHandle: RayTracingAccelerationStructureHandle;





}
declare const RayTracingAccelerationStructureHandle: RayTracingAccelerationStructureHandleConstructor;
    
interface RTHandle {
    readonly scaleFactor: Vector2;
    readonly useScaling: boolean;
    readonly referenceSize: Vector2Int;
    readonly rtHandleProperties: RTHandleProperties;
    readonly rt: RenderTexture;
    readonly externalTexture: Texture;
    readonly nameID: RenderTargetIdentifier;
    readonly name: string;
    readonly isMSAAEnabled: boolean;



    ClearCustomHandleProperties(): void;
    CopyToFastMemory(cmd: CommandBuffer, residencyFraction: number, flags: FastMemoryFlags): void;
    GetInstanceID(): number;
    GetScaledSize(refSize: Vector2Int): Vector2Int;
    GetScaledSize(): Vector2Int;
    Release(): void;
    SetCustomHandleProperties(properties: RTHandleProperties): void;
    SwitchOutFastMemory(cmd: CommandBuffer, copyContents: boolean): void;
    SwitchToFastMemory(cmd: CommandBuffer, residencyFraction: number, flags: FastMemoryFlags, copyContents: boolean): void;


}
    
interface RTHandleProperties {
    previousViewportSize: Vector2Int;
    previousRenderTargetSize: Vector2Int;
    currentViewportSize: Vector2Int;
    currentRenderTargetSize: Vector2Int;
    rtHandleScale: Vector4;





}
    
interface IContainer {
    readonly children: Readonly<Widget[]>;
    displayName: string;
    readonly queryPath: string;





}
    
interface Widget {
    isHiddenCallback: Func<boolean>;
    readonly panel: Panel;
    readonly parent: IContainer;
    flags: Flags;
    displayName: string;
    tooltip: string;
    readonly queryPath: string;
    readonly isEditorOnly: boolean;
    readonly isRuntimeOnly: boolean;
    readonly isInactiveInEditor: boolean;
    readonly isHidden: boolean;
    nameAndTooltip: NameAndTooltip;



    GetHashCode(): number;


}
    
interface NameAndTooltip {
    name: string;
    tooltip: string;





}
    
interface Panel extends IContainer {
    flags: Flags;
    displayName: string;
    groupIndex: number;
    readonly queryPath: string;
    readonly isEditorOnly: boolean;
    readonly isRuntimeOnly: boolean;
    readonly isInactiveInEditor: boolean;
    readonly editorForceUpdate: boolean;
    readonly children: Readonly<Widget[]>;

    readonly onSetDirty: MonoSignal<Panel>;


    GetHashCode(): number;
    SetDirty(): void;


}
    
interface PanelConstructor {


    new(): Panel;



}
declare const Panel: PanelConstructor;
    
interface RenderGraphConstructor {
    readonly kMaxMRTCount: number;
    readonly isRenderGraphViewerActive: boolean;


    new(name: string): RenderGraph;


    GetRegisteredRenderGraphs(): Readonly<RenderGraph[]>;

}
declare const RenderGraph: RenderGraphConstructor;
    
interface ContextContainer {



    Contains<T extends ContextItem>(): boolean;
    Create<T extends ContextItem>(): T;
    Dispose(): void;
    Get<T extends ContextItem>(): T;
    GetOrCreate<T extends ContextItem>(): T;


}
    
interface ContextItem {



    Reset(): void;


}
    
interface ContextContainerConstructor {


    new(): ContextContainer;



}
declare const ContextContainer: ContextContainerConstructor;
    
interface ScriptableRenderPass extends IRenderGraphRecorder {
    renderPassEvent: RenderPassEvent;
    readonly colorAttachmentHandles: Readonly<RTHandle[]>;
    readonly colorAttachmentHandle: RTHandle;
    readonly depthAttachmentHandle: RTHandle;
    readonly colorStoreActions: Readonly<number[]>;
    readonly depthStoreAction: RenderBufferStoreAction;
    readonly input: ScriptableRenderPassInput;
    readonly clearFlag: ClearFlag;
    readonly clearColor: Color;
    requiresIntermediateTexture: boolean;



    ConfigureInput(passInput: ScriptableRenderPassInput): void;
    CreateDrawingSettings(shaderTagId: ShaderTagId, renderingData: RenderingData, sortingCriteria: SortingCriteria): DrawingSettings;
    CreateDrawingSettings(shaderTagId: ShaderTagId, renderingData: UniversalRenderingData, cameraData: UniversalCameraData, lightData: UniversalLightData, sortingCriteria: SortingCriteria): DrawingSettings;
    CreateDrawingSettings(shaderTagIdList: Readonly<ShaderTagId[]>, renderingData: RenderingData, sortingCriteria: SortingCriteria): DrawingSettings;
    CreateDrawingSettings(shaderTagIdList: Readonly<ShaderTagId[]>, renderingData: UniversalRenderingData, cameraData: UniversalCameraData, lightData: UniversalLightData, sortingCriteria: SortingCriteria): DrawingSettings;
    FrameCleanup(cmd: CommandBuffer): void;
    OnCameraCleanup(cmd: CommandBuffer): void;
    RecordRenderGraph(renderGraph: RenderGraph, frameData: ContextContainer): void;


}
    
interface DrawingSettings {
    /**
     * How to sort objects during rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings-sortingSettings.html | Rendering.DrawingSettings.sortingSettings}
     */
    sortingSettings: SortingSettings;
    /**
     * What kind of per-object data to setup during rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings-perObjectData.html | Rendering.DrawingSettings.perObjectData}
     */
    perObjectData: PerObjectData;
    /**
     * Controls whether dynamic batching is enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings-enableDynamicBatching.html | Rendering.DrawingSettings.enableDynamicBatching}
     */
    enableDynamicBatching: boolean;
    /**
     * Controls whether instancing is enabled.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings-enableInstancing.html | Rendering.DrawingSettings.enableInstancing}
     */
    enableInstancing: boolean;
    /**
     * Sets the Material to use for all drawers that would render in this group.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings-overrideMaterial.html | Rendering.DrawingSettings.overrideMaterial}
     */
    overrideMaterial: Material;
    /**
     * Sets the shader to use for all drawers that would render in this group. Override shaders do not override existing material properties.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings-overrideShader.html | Rendering.DrawingSettings.overrideShader}
     */
    overrideShader: Shader;
    /**
     * Selects which pass of the override material to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings-overrideMaterialPassIndex.html | Rendering.DrawingSettings.overrideMaterialPassIndex}
     */
    overrideMaterialPassIndex: number;
    /**
     * Selects which pass of the override shader to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings-overrideShaderPassIndex.html | Rendering.DrawingSettings.overrideShaderPassIndex}
     */
    overrideShaderPassIndex: number;
    /**
     * Sets the Material to use for any drawers in this group that don't meet the requirements.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings-fallbackMaterial.html | Rendering.DrawingSettings.fallbackMaterial}
     */
    fallbackMaterial: Material;
    /**
     * Configures what light should be used as main light.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings-mainLightIndex.html | Rendering.DrawingSettings.mainLightIndex}
     */
    mainLightIndex: number;



    Equals(other: DrawingSettings): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    /**
     * Get the name of the shader pass.
     * @param index Index of the shader pass to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings.GetShaderPassName.html | Rendering.DrawingSettings.GetShaderPassName}
     */
    GetShaderPassName(index: number): ShaderTagId;
    /**
     * Set the name of the shader pass.
     * @param index Index of the shader pass to use.
     * @param shaderPassName Name of the shader pass.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.DrawingSettings.SetShaderPassName.html | Rendering.DrawingSettings.SetShaderPassName}
     */
    SetShaderPassName(index: number, shaderPassName: ShaderTagId): void;


}
    
interface SortingSettings {
    /**
     * Used to calculate the distance to objects.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SortingSettings-worldToCameraMatrix.html | Rendering.SortingSettings.worldToCameraMatrix}
     */
    worldToCameraMatrix: Matrix4x4;
    /**
     * Used to calculate the distance to objects.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SortingSettings-cameraPosition.html | Rendering.SortingSettings.cameraPosition}
     */
    cameraPosition: Vector3;
    /**
     * Used to calculate distance to objects, by comparing the positions of objects to this axis.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SortingSettings-customAxis.html | Rendering.SortingSettings.customAxis}
     */
    customAxis: Vector3;
    /**
     * What kind of sorting to do while rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SortingSettings-criteria.html | Rendering.SortingSettings.criteria}
     */
    criteria: SortingCriteria;
    /**
     * Type of sorting to use while rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.SortingSettings-distanceMetric.html | Rendering.SortingSettings.distanceMetric}
     */
    distanceMetric: DistanceMetric;



    Equals(other: SortingSettings): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;


}
    
interface SortingSettingsConstructor {


    new(camera: Camera): SortingSettings;



}
declare const SortingSettings: SortingSettingsConstructor;
    
interface DrawingSettingsConstructor {
    readonly maxShaderPasses: number;


    new(shaderPassName: ShaderTagId, sortingSettings: SortingSettings): DrawingSettings;



}
declare const DrawingSettings: DrawingSettingsConstructor;
    
interface UniversalRenderingData extends ContextItem {
    cullResults: CullingResults;
    supportsDynamicBatching: boolean;
    perObjectData: PerObjectData;
    readonly renderingMode: RenderingMode;
    readonly opaqueLayerMask: LayerMask;
    readonly transparentLayerMask: LayerMask;



    Reset(): void;


}
    
interface CullingResults {
    /**
     * Array of visible lights.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CullingResults-visibleLights.html | Rendering.CullingResults.visibleLights}
     */
    readonly visibleLights: Readonly<VisibleLight[]>;
    /**
     * Off-screen lights that still affect visible vertices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CullingResults-visibleOffscreenVertexLights.html | Rendering.CullingResults.visibleOffscreenVertexLights}
     */
    readonly visibleOffscreenVertexLights: Readonly<VisibleLight[]>;
    /**
     * Array of visible reflection probes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CullingResults-visibleReflectionProbes.html | Rendering.CullingResults.visibleReflectionProbes}
     */
    readonly visibleReflectionProbes: Readonly<VisibleReflectionProbe[]>;
    /**
     * Gets the number of per-object light indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CullingResults-lightIndexCount.html | Rendering.CullingResults.lightIndexCount}
     */
    readonly lightIndexCount: number;
    /**
     * Gets the number of per-object reflection probe indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CullingResults-reflectionProbeIndexCount.html | Rendering.CullingResults.reflectionProbeIndexCount}
     */
    readonly reflectionProbeIndexCount: number;
    /**
     * Gets the number of per-object light and reflection probe indices.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CullingResults-lightAndReflectionProbeIndexCount.html | Rendering.CullingResults.lightAndReflectionProbeIndexCount}
     */
    readonly lightAndReflectionProbeIndexCount: number;



    Equals(other: CullingResults): boolean;
    Equals(obj: unknown): boolean;
    /**
     * Fills a buffer with per-object light indices.
     * @param computeBuffer The compute buffer object to fill.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CullingResults.FillLightAndReflectionProbeIndices.html | Rendering.CullingResults.FillLightAndReflectionProbeIndices}
     */
    FillLightAndReflectionProbeIndices(computeBuffer: ComputeBuffer): void;
    /**
     * Fills a buffer with per-object light indices.
     * @param buffer The buffer object to fill.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CullingResults.FillLightAndReflectionProbeIndices.html | Rendering.CullingResults.FillLightAndReflectionProbeIndices}
     */
    FillLightAndReflectionProbeIndices(buffer: GraphicsBuffer): void;
    GetHashCode(): number;
    /**
     * If a RenderPipeline sorts or otherwise modifies the VisibleLight list, an index remap will be necessary to properly make use of per-object light lists.
     * @param allocator The allocator to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CullingResults.GetLightIndexMap.html | Rendering.CullingResults.GetLightIndexMap}
     */
    GetLightIndexMap(allocator: Allocator): Readonly<number[]>;
    /**
     * If a RenderPipeline sorts or otherwise modifies the VisibleReflectionProbe list, an index remap will be necessary to properly make use of per-object reflection probe lists.
     * @param allocator The allocator to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CullingResults.GetReflectionProbeIndexMap.html | Rendering.CullingResults.GetReflectionProbeIndexMap}
     */
    GetReflectionProbeIndexMap(allocator: Allocator): Readonly<number[]>;
    SetLightIndexMap(lightIndexMap: Readonly<number[]>): void;
    SetReflectionProbeIndexMap(lightIndexMap: Readonly<number[]>): void;


}
    
interface VisibleLight {
    /**
     * Accessor to Light component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleLight-light.html | Rendering.VisibleLight.light}
     */
    readonly light: Light;
    /**
     * Light type.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleLight-lightType.html | Rendering.VisibleLight.lightType}
     */
    lightType: LightType;
    /**
     * Light color multiplied by intensity.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleLight-finalColor.html | Rendering.VisibleLight.finalColor}
     */
    finalColor: Color;
    /**
     * Light's influence rectangle on screen.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleLight-screenRect.html | Rendering.VisibleLight.screenRect}
     */
    screenRect: Rect;
    /**
     * Light transformation matrix.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleLight-localToWorldMatrix.html | Rendering.VisibleLight.localToWorldMatrix}
     */
    localToWorldMatrix: Matrix4x4;
    /**
     * Light range.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleLight-range.html | Rendering.VisibleLight.range}
     */
    range: number;
    /**
     * Spot light angle.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleLight-spotAngle.html | Rendering.VisibleLight.spotAngle}
     */
    spotAngle: number;
    /**
     * Light intersects near clipping plane.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleLight-intersectsNearPlane.html | Rendering.VisibleLight.intersectsNearPlane}
     */
    intersectsNearPlane: boolean;
    /**
     * Light intersects far clipping plane.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleLight-intersectsFarPlane.html | Rendering.VisibleLight.intersectsFarPlane}
     */
    intersectsFarPlane: boolean;
    /**
     * Has the light been forced to be visibile.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleLight-forcedVisible.html | Rendering.VisibleLight.forcedVisible}
     */
    readonly forcedVisible: boolean;



    Equals(other: VisibleLight): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;


}
    
interface VisibleReflectionProbe {
    /**
     * Probe texture.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleReflectionProbe-texture.html | Rendering.VisibleReflectionProbe.texture}
     */
    readonly texture: Texture;
    /**
     * Accessor to ReflectionProbe component.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleReflectionProbe-reflectionProbe.html | Rendering.VisibleReflectionProbe.reflectionProbe}
     */
    readonly reflectionProbe: ReflectionProbe;
    /**
     * The probe's world space axis-aligned bounding box in which the probe can contribute to reflections.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleReflectionProbe-bounds.html | Rendering.VisibleReflectionProbe.bounds}
     */
    bounds: Bounds;
    /**
     * Probe transformation matrix.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleReflectionProbe-localToWorldMatrix.html | Rendering.VisibleReflectionProbe.localToWorldMatrix}
     */
    localToWorldMatrix: Matrix4x4;
    /**
     * Shader data for probe HDR texture decoding.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleReflectionProbe-hdrData.html | Rendering.VisibleReflectionProbe.hdrData}
     */
    hdrData: Vector4;
    /**
     * The center of the probe's bounding box in which the probe can contribute to reflections. The center is relative to the position of the probe.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleReflectionProbe-center.html | Rendering.VisibleReflectionProbe.center}
     */
    center: Vector3;
    /**
     * Probe blending distance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleReflectionProbe-blendDistance.html | Rendering.VisibleReflectionProbe.blendDistance}
     */
    blendDistance: number;
    /**
     * Probe importance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleReflectionProbe-importance.html | Rendering.VisibleReflectionProbe.importance}
     */
    importance: number;
    /**
     * Should probe use box projection.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.VisibleReflectionProbe-isBoxProjection.html | Rendering.VisibleReflectionProbe.isBoxProjection}
     */
    isBoxProjection: boolean;



    Equals(other: VisibleReflectionProbe): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;


}
    
interface UniversalRenderingDataConstructor {


    new(): UniversalRenderingData;



}
declare const UniversalRenderingData: UniversalRenderingDataConstructor;
    
interface UniversalCameraData extends ContextItem {
    camera: Camera;
    renderType: CameraRenderType;
    targetTexture: RenderTexture;
    cameraTargetDescriptor: RenderTextureDescriptor;
    renderScale: number;
    clearDepth: boolean;
    cameraType: CameraType;
    isDefaultViewport: boolean;
    isHdrEnabled: boolean;
    allowHDROutput: boolean;
    isAlphaOutputEnabled: boolean;
    requiresDepthTexture: boolean;
    requiresOpaqueTexture: boolean;
    postProcessingRequiresDepthTexture: boolean;
    xrRendering: boolean;
    defaultOpaqueSortFlags: SortingCriteria;
    maxShadowDistance: number;
    postProcessEnabled: boolean;
    captureActions: IEnumerator<Action<RenderTargetIdentifier, CommandBuffer>>;
    volumeLayerMask: LayerMask;
    volumeTrigger: Transform;
    isStopNaNEnabled: boolean;
    isDitheringEnabled: boolean;
    antialiasing: AntialiasingMode;
    antialiasingQuality: AntialiasingQuality;
    renderer: ScriptableRenderer;
    resolveFinalTarget: boolean;
    worldSpaceCameraPos: Vector3;
    backgroundColor: Color;
    baseCamera: Camera;
    readonly scaledWidth: number;
    readonly scaledHeight: number;
    historyManager: UniversalCameraHistory;
    readonly isGameCamera: boolean;
    readonly isSceneViewCamera: boolean;
    readonly isPreviewCamera: boolean;
    readonly isHDROutputActive: boolean;
    readonly hdrDisplayInformation: HDRDisplayInformation;
    readonly hdrDisplayColorGamut: ColorGamut;
    readonly rendersOverlayUI: boolean;
    readonly xr: XRPass;



    GetGPUProjectionMatrix(viewIndex: number): Matrix4x4;
    GetGPUProjectionMatrixNoJitter(viewIndex: number): Matrix4x4;
    GetProjectionMatrix(viewIndex: number): Matrix4x4;
    GetViewMatrix(viewIndex: number): Matrix4x4;
    IsCameraProjectionMatrixFlipped(): boolean;
    IsHandleYFlipped(handle: RTHandle): boolean;
    IsRenderTargetProjectionMatrixFlipped(color: RTHandle, depth: RTHandle): boolean;
    Reset(): void;


}
    
interface IPerFrameHistoryAccessTracker {



    RequestAccess<Type extends ContextItem>(): void;


}
    
interface ICameraHistoryWriteAccess {



    GetHistoryForWrite<Type extends ContextItem>(): Type;
    IsAccessRequested<Type extends ContextItem>(): boolean;
    IsWritten<Type extends ContextItem>(): boolean;


}
    
interface ICameraHistoryReadAccess {

    readonly OnGatherHistoryRequests: MonoSignal<void>;


    GetHistoryForRead<Type extends ContextItem>(): Type;


}
    
interface UniversalCameraHistory extends IPerFrameHistoryAccessTracker, ICameraHistoryWriteAccess, ICameraHistoryReadAccess {

    readonly OnGatherHistoryRequests: MonoSignal<void>;


    Dispose(): void;
    GetHistoryForRead<Type extends ContextItem>(): Type;
    GetHistoryForWrite<Type extends ContextItem>(): Type;
    IsAccessRequested<Type extends ContextItem>(): boolean;
    IsWritten<Type extends ContextItem>(): boolean;
    RequestAccess<Type extends ContextItem>(): void;


}
    
interface HDRDisplayInformation {
    maxFullFrameToneMapLuminance: number;
    maxToneMapLuminance: number;
    minToneMapLuminance: number;
    paperWhiteNits: number;





}
    
interface HDRDisplayInformationConstructor {


    new(maxFullFrameToneMapLuminance: number, maxToneMapLuminance: number, minToneMapLuminance: number, hdrPaperWhiteNits: number): HDRDisplayInformation;



}
declare const HDRDisplayInformation: HDRDisplayInformationConstructor;
    
interface XRPass {
    readonly enabled: boolean;
    readonly supportsFoveatedRendering: boolean;
    readonly copyDepth: boolean;
    readonly hasMotionVectorPass: boolean;
    readonly isFirstCameraPass: boolean;
    readonly isLastCameraPass: boolean;
    readonly multipassId: number;
    readonly cullingPassId: number;
    readonly renderTarget: RenderTargetIdentifier;
    readonly renderTargetDesc: RenderTextureDescriptor;
    readonly motionVectorRenderTarget: RenderTargetIdentifier;
    readonly motionVectorRenderTargetDesc: RenderTextureDescriptor;
    readonly cullingParams: ScriptableCullingParameters;
    readonly viewCount: number;
    readonly singlePassEnabled: boolean;
    readonly foveatedRenderingInfo: IntPtr;
    readonly isHDRDisplayOutputActive: boolean;
    readonly hdrDisplayOutputColorGamut: ColorGamut;
    readonly hdrDisplayOutputInformation: HDRDisplayInformation;
    readonly occlusionMeshScale: number;
    readonly hasValidOcclusionMesh: boolean;



    ApplyXRViewCenterOffset(center: Vector2): Vector4;
    GetOcclusionMesh(viewIndex: number): Mesh;
    GetPrevViewMatrix(viewIndex: number): Matrix4x4;
    GetPrevViewValid(viewIndex: number): boolean;
    GetProjMatrix(viewIndex: number): Matrix4x4;
    GetTextureArraySlice(viewIndex: number): number;
    GetViewMatrix(viewIndex: number): Matrix4x4;
    GetViewport(viewIndex: number): Rect;
    InitBase(createInfo: XRPassCreateInfo): void;
    Release(): void;
    RenderDebugXRViewsFrustum(): void;
    RenderOcclusionMesh(cmd: CommandBuffer, renderIntoTexture: boolean): void;
    RenderOcclusionMesh(cmd: RasterCommandBuffer, renderIntoTexture: boolean): void;
    StartSinglePass(cmd: CommandBuffer): void;
    StartSinglePass(cmd: IRasterCommandBuffer): void;
    StopSinglePass(cmd: CommandBuffer): void;
    StopSinglePass(cmd: BaseCommandBuffer): void;


}
    
interface ScriptableCullingParameters {
    /**
     * This parameter controls how many visible lights are allowed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-maximumVisibleLights.html | Rendering.ScriptableCullingParameters.maximumVisibleLights}
     */
    maximumVisibleLights: number;
    /**
     * This property enables a conservative method for calculating the size and position of the minimal enclosing sphere around the frustum cascade corner points for shadow culling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-conservativeEnclosingSphere.html | Rendering.ScriptableCullingParameters.conservativeEnclosingSphere}
     */
    conservativeEnclosingSphere: boolean;
    numIterationsEnclosingSphere: number;
    /**
     * Number of culling planes to use.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-cullingPlaneCount.html | Rendering.ScriptableCullingParameters.cullingPlaneCount}
     */
    cullingPlaneCount: number;
    /**
     * Is the cull orthographic.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-isOrthographic.html | Rendering.ScriptableCullingParameters.isOrthographic}
     */
    isOrthographic: boolean;
    /**
     * LODParameters for culling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-lodParameters.html | Rendering.ScriptableCullingParameters.lodParameters}
     */
    lodParameters: LODParameters;
    /**
     * The mask for the culling operation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-cullingMask.html | Rendering.ScriptableCullingParameters.cullingMask}
     */
    cullingMask: number;
    /**
     * The matrix for the culling operation.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-cullingMatrix.html | Rendering.ScriptableCullingParameters.cullingMatrix}
     */
    cullingMatrix: Matrix4x4;
    /**
     * Position for the origin of the cull.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-origin.html | Rendering.ScriptableCullingParameters.origin}
     */
    origin: Vector3;
    /**
     * Shadow distance to use for the cull.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-shadowDistance.html | Rendering.ScriptableCullingParameters.shadowDistance}
     */
    shadowDistance: number;
    /**
     * Offset to apply to the near camera plane when performing shadow map rendering.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-shadowNearPlaneOffset.html | Rendering.ScriptableCullingParameters.shadowNearPlaneOffset}
     */
    shadowNearPlaneOffset: number;
    /**
     * Flags to configure a culling operation in the Scriptable Render Pipeline.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-cullingOptions.html | Rendering.ScriptableCullingParameters.cullingOptions}
     */
    cullingOptions: CullingOptions;
    /**
     * Reflection Probe Sort options for the cull.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-reflectionProbeSortingCriteria.html | Rendering.ScriptableCullingParameters.reflectionProbeSortingCriteria}
     */
    reflectionProbeSortingCriteria: ReflectionProbeSortingCriteria;
    /**
     * Camera Properties used for culling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-cameraProperties.html | Rendering.ScriptableCullingParameters.cameraProperties}
     */
    cameraProperties: CameraProperties;
    /**
     * The view matrix generated for single-pass stereo culling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-stereoViewMatrix.html | Rendering.ScriptableCullingParameters.stereoViewMatrix}
     */
    stereoViewMatrix: Matrix4x4;
    /**
     * The projection matrix generated for single-pass stereo culling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-stereoProjectionMatrix.html | Rendering.ScriptableCullingParameters.stereoProjectionMatrix}
     */
    stereoProjectionMatrix: Matrix4x4;
    /**
     * Distance between the virtual eyes.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-stereoSeparationDistance.html | Rendering.ScriptableCullingParameters.stereoSeparationDistance}
     */
    stereoSeparationDistance: number;
    /**
     * This parameter determines query distance for occlusion culling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-accurateOcclusionThreshold.html | Rendering.ScriptableCullingParameters.accurateOcclusionThreshold}
     */
    accurateOcclusionThreshold: number;
    /**
     * This parameter controls how many active jobs contribute to occlusion culling.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-maximumPortalCullingJobs.html | Rendering.ScriptableCullingParameters.maximumPortalCullingJobs}
     */
    maximumPortalCullingJobs: number;



    Equals(other: ScriptableCullingParameters): boolean;
    Equals(obj: unknown): boolean;
    /**
     * Fetch the culling plane at the given index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters.GetCullingPlane.html | Rendering.ScriptableCullingParameters.GetCullingPlane}
     */
    GetCullingPlane(index: number): Plane;
    GetHashCode(): number;
    /**
     * Get the distance for the culling of a specific layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters.GetLayerCullingDistance.html | Rendering.ScriptableCullingParameters.GetLayerCullingDistance}
     */
    GetLayerCullingDistance(layerIndex: number): number;
    /**
     * Set the culling plane at a given index.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters.SetCullingPlane.html | Rendering.ScriptableCullingParameters.SetCullingPlane}
     */
    SetCullingPlane(index: number, plane: Plane): void;
    /**
     * Set the distance for the culling of a specific layer.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters.SetLayerCullingDistance.html | Rendering.ScriptableCullingParameters.SetLayerCullingDistance}
     */
    SetLayerCullingDistance(layerIndex: number, distance: number): void;


}
    
interface LODParameters {
    /**
     * Indicates whether camera is orthographic.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LODParameters-isOrthographic.html | Rendering.LODParameters.isOrthographic}
     */
    isOrthographic: boolean;
    /**
     * Camera position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LODParameters-cameraPosition.html | Rendering.LODParameters.cameraPosition}
     */
    cameraPosition: Vector3;
    /**
     * Camera's field of view.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LODParameters-fieldOfView.html | Rendering.LODParameters.fieldOfView}
     */
    fieldOfView: number;
    /**
     * Orhographic camera size.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LODParameters-orthoSize.html | Rendering.LODParameters.orthoSize}
     */
    orthoSize: number;
    /**
     * Rendering view height in pixels.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.LODParameters-cameraPixelHeight.html | Rendering.LODParameters.cameraPixelHeight}
     */
    cameraPixelHeight: number;



    Equals(other: LODParameters): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;


}
    
interface CameraProperties {



    Equals(other: CameraProperties): boolean;
    Equals(obj: unknown): boolean;
    /**
     * Get a camera culling plane.
     * @param index Plane index (up to 5).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CameraProperties.GetCameraCullingPlane.html | Rendering.CameraProperties.GetCameraCullingPlane}
     */
    GetCameraCullingPlane(index: number): Plane;
    GetHashCode(): number;
    /**
     * Get a shadow culling plane.
     * @param index Plane index (up to 5).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CameraProperties.GetShadowCullingPlane.html | Rendering.CameraProperties.GetShadowCullingPlane}
     */
    GetShadowCullingPlane(index: number): Plane;
    /**
     * Set a camera culling plane.
     * @param index Plane index (up to 5).
     * @param plane Camera culling plane.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CameraProperties.SetCameraCullingPlane.html | Rendering.CameraProperties.SetCameraCullingPlane}
     */
    SetCameraCullingPlane(index: number, plane: Plane): void;
    /**
     * Set a shadow culling plane.
     * @param index Plane index (up to 5).
     * @param plane Shadow culling plane.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.CameraProperties.SetShadowCullingPlane.html | Rendering.CameraProperties.SetShadowCullingPlane}
     */
    SetShadowCullingPlane(index: number, plane: Plane): void;


}
    
interface ScriptableCullingParametersConstructor {
    readonly maximumCullingPlaneCount: number;
    readonly layerCount: number;
    /**
     * The lower limit to the value ScriptableCullingParameters.maximumPortalCullingJobs.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-cullingJobsLowerLimit.html | Rendering.ScriptableCullingParameters.cullingJobsLowerLimit}
     */
    readonly cullingJobsLowerLimit: number;
    /**
     * The upper limit to the value ScriptableCullingParameters.maximumPortalCullingJobs.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Rendering.ScriptableCullingParameters-cullingJobsUpperLimit.html | Rendering.ScriptableCullingParameters.cullingJobsUpperLimit}
     */
    readonly cullingJobsUpperLimit: number;





}
declare const ScriptableCullingParameters: ScriptableCullingParametersConstructor;
    
interface XRPassCreateInfo {





}
    
interface IBaseCommandBuffer {



    BeginSample(name: string): void;
    BeginSample(sampler: CustomSampler): void;
    BeginSample(marker: ProfilerMarker): void;
    DisableKeyword(keyword: GlobalKeyword): void;
    DisableKeyword(material: Material, keyword: LocalKeyword): void;
    DisableKeyword(computeShader: ComputeShader, keyword: LocalKeyword): void;
    DisableScissorRect(): void;
    DisableShaderKeyword(keyword: string): void;
    EnableKeyword(keyword: GlobalKeyword): void;
    EnableKeyword(material: Material, keyword: LocalKeyword): void;
    EnableKeyword(computeShader: ComputeShader, keyword: LocalKeyword): void;
    EnableScissorRect(scissor: Rect): void;
    EnableShaderKeyword(keyword: string): void;
    EndSample(name: string): void;
    EndSample(sampler: CustomSampler): void;
    EndSample(marker: ProfilerMarker): void;
    IncrementUpdateCount(dest: RenderTargetIdentifier): void;
    InvokeOnRenderObjectCallbacks(): void;
    IssuePluginCustomBlit(callback: IntPtr, command: number, source: RenderTargetIdentifier, dest: RenderTargetIdentifier, commandParam: number, commandFlags: number): void;
    IssuePluginCustomTextureUpdateV2(callback: IntPtr, targetTexture: Texture, userData: number): void;
    IssuePluginEvent(callback: IntPtr, eventID: number): void;
    IssuePluginEventAndData(callback: IntPtr, eventID: number, data: IntPtr): void;
    MarkLateLatchMatrixShaderPropertyID(matrixPropertyType: CameraLateLatchMatrixType, shaderPropertyID: number): void;
    SetGlobalBuffer(name: string, value: ComputeBuffer): void;
    SetGlobalBuffer(nameID: number, value: ComputeBuffer): void;
    SetGlobalBuffer(name: string, value: GraphicsBuffer): void;
    SetGlobalBuffer(nameID: number, value: GraphicsBuffer): void;
    SetGlobalColor(nameID: number, value: Color): void;
    SetGlobalColor(name: string, value: Color): void;
    SetGlobalConstantBuffer(buffer: ComputeBuffer, nameID: number, offset: number, size: number): void;
    SetGlobalConstantBuffer(buffer: ComputeBuffer, name: string, offset: number, size: number): void;
    SetGlobalConstantBuffer(buffer: GraphicsBuffer, nameID: number, offset: number, size: number): void;
    SetGlobalConstantBuffer(buffer: GraphicsBuffer, name: string, offset: number, size: number): void;
    SetGlobalDepthBias(bias: number, slopeBias: number): void;
    SetGlobalFloat(nameID: number, value: number): void;
    SetGlobalFloat(name: string, value: number): void;
    SetGlobalFloatArray(nameID: number, values: Readonly<number[]>): void;
    SetGlobalFloatArray(propertyName: string, values: Readonly<number[]>): void;
    SetGlobalFloatArray(nameID: number, values: Readonly<number[]>): void;
    SetGlobalFloatArray(propertyName: string, values: Readonly<number[]>): void;
    SetGlobalInt(nameID: number, value: number): void;
    SetGlobalInt(name: string, value: number): void;
    SetGlobalInteger(nameID: number, value: number): void;
    SetGlobalInteger(name: string, value: number): void;
    SetGlobalMatrix(nameID: number, value: Matrix4x4): void;
    SetGlobalMatrix(name: string, value: Matrix4x4): void;
    SetGlobalMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    SetGlobalMatrixArray(propertyName: string, values: Readonly<Matrix4x4[]>): void;
    SetGlobalMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    SetGlobalMatrixArray(propertyName: string, values: Readonly<Matrix4x4[]>): void;
    SetGlobalTexture(name: string, value: TextureHandle): void;
    SetGlobalTexture(nameID: number, value: TextureHandle): void;
    SetGlobalTexture(name: string, value: TextureHandle, element: RenderTextureSubElement): void;
    SetGlobalTexture(nameID: number, value: TextureHandle, element: RenderTextureSubElement): void;
    SetGlobalVector(nameID: number, value: Vector4): void;
    SetGlobalVector(name: string, value: Vector4): void;
    SetGlobalVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    SetGlobalVectorArray(propertyName: string, values: Readonly<Vector4[]>): void;
    SetGlobalVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    SetGlobalVectorArray(propertyName: string, values: Readonly<Vector4[]>): void;
    SetInvertCulling(invertCulling: boolean): void;
    SetKeyword(keyword: GlobalKeyword, value: boolean): void;
    SetKeyword(material: Material, keyword: LocalKeyword, value: boolean): void;
    SetKeyword(computeShader: ComputeShader, keyword: LocalKeyword, value: boolean): void;
    SetLateLatchProjectionMatrices(projectionMat: Readonly<Matrix4x4[]>): void;
    SetShadowSamplingMode(shadowmap: RenderTargetIdentifier, mode: ShadowSamplingMode): void;
    SetSinglePassStereo(mode: SinglePassStereoMode): void;
    SetupCameraProperties(camera: Camera): void;
    SetViewport(pixelRect: Rect): void;
    SetViewProjectionMatrices(view: Matrix4x4, proj: Matrix4x4): void;
    UnmarkLateLatchMatrix(matrixPropertyType: CameraLateLatchMatrixType): void;


}
    
interface IRasterCommandBuffer extends IBaseCommandBuffer {



    ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: Color): void;
    ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: Color, depth: number): void;
    ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: Color, depth: number, stencil: number): void;
    ClearRenderTarget(clearFlags: RTClearFlags, backgroundColor: Color, depth: number, stencil: number): void;
    ClearRenderTarget(clearFlags: RTClearFlags, backgroundColors: Readonly<Color[]>, depth: number, stencil: number): void;
    ConfigureFoveatedRendering(platformData: IntPtr): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number, shaderPass: number, properties: MaterialPropertyBlock): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number, shaderPass: number): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, matrices: Readonly<Matrix4x4[]>, count: number, properties: MaterialPropertyBlock): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, matrices: Readonly<Matrix4x4[]>, count: number): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, matrices: Readonly<Matrix4x4[]>): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: ComputeBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: ComputeBuffer, argsOffset: number): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: ComputeBuffer): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: GraphicsBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: GraphicsBuffer, argsOffset: number): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: GraphicsBuffer): void;
    DrawMeshInstancedProcedural(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, count: number, properties: MaterialPropertyBlock): void;
    DrawMultipleMeshes(matrices: Readonly<Matrix4x4[]>, meshes: Readonly<Mesh[]>, subsetIndices: Readonly<number[]>, count: number, material: Material, shaderPass: number, properties: MaterialPropertyBlock): void;
    DrawOcclusionMesh(normalizedCamViewport: RectInt): void;
    DrawProcedural(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, vertexCount: number, instanceCount: number, properties: MaterialPropertyBlock): void;
    DrawProcedural(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, vertexCount: number, instanceCount: number): void;
    DrawProcedural(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, vertexCount: number): void;
    DrawProcedural(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, indexCount: number, instanceCount: number, properties: MaterialPropertyBlock): void;
    DrawProcedural(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, indexCount: number, instanceCount: number): void;
    DrawProcedural(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, indexCount: number): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer): void;
    DrawRenderer(renderer: Renderer, material: Material, submeshIndex: number, shaderPass: number): void;
    DrawRenderer(renderer: Renderer, material: Material, submeshIndex: number): void;
    DrawRenderer(renderer: Renderer, material: Material): void;
    DrawRendererList(rendererList: RendererList): void;
    SetFoveatedRenderingMode(foveatedRenderingMode: FoveatedRenderingMode): void;
    SetInstanceMultiplier(multiplier: number): void;
    SetWireframe(enable: boolean): void;


}
    
interface BaseCommandBuffer {
    readonly name: string;
    readonly sizeInBytes: number;





}
    
interface RasterCommandBuffer extends BaseCommandBuffer, IRasterCommandBuffer {



    BeginSample(name: string): void;
    BeginSample(sampler: CustomSampler): void;
    BeginSample(marker: ProfilerMarker): void;
    ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: Color): void;
    ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: Color, depth: number): void;
    ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: Color, depth: number, stencil: number): void;
    ClearRenderTarget(clearFlags: RTClearFlags, backgroundColor: Color, depth: number, stencil: number): void;
    ClearRenderTarget(clearFlags: RTClearFlags, backgroundColors: Readonly<Color[]>, depth: number, stencil: number): void;
    ConfigureFoveatedRendering(platformData: IntPtr): void;
    DisableKeyword(keyword: GlobalKeyword): void;
    DisableKeyword(material: Material, keyword: LocalKeyword): void;
    DisableKeyword(computeShader: ComputeShader, keyword: LocalKeyword): void;
    DisableScissorRect(): void;
    DisableShaderKeyword(keyword: string): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number, shaderPass: number, properties: MaterialPropertyBlock): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number, shaderPass: number): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number): void;
    DrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, matrices: Readonly<Matrix4x4[]>, count: number, properties: MaterialPropertyBlock): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, matrices: Readonly<Matrix4x4[]>, count: number): void;
    DrawMeshInstanced(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, matrices: Readonly<Matrix4x4[]>): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: ComputeBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: ComputeBuffer, argsOffset: number): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: ComputeBuffer): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: GraphicsBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: GraphicsBuffer, argsOffset: number): void;
    DrawMeshInstancedIndirect(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, bufferWithArgs: GraphicsBuffer): void;
    DrawMeshInstancedProcedural(mesh: Mesh, submeshIndex: number, material: Material, shaderPass: number, count: number, properties: MaterialPropertyBlock): void;
    DrawMultipleMeshes(matrices: Readonly<Matrix4x4[]>, meshes: Readonly<Mesh[]>, subsetIndices: Readonly<number[]>, count: number, material: Material, shaderPass: number, properties: MaterialPropertyBlock): void;
    DrawOcclusionMesh(normalizedCamViewport: RectInt): void;
    DrawProcedural(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, vertexCount: number, instanceCount: number, properties: MaterialPropertyBlock): void;
    DrawProcedural(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, vertexCount: number, instanceCount: number): void;
    DrawProcedural(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, vertexCount: number): void;
    DrawProcedural(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, indexCount: number, instanceCount: number, properties: MaterialPropertyBlock): void;
    DrawProcedural(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, indexCount: number, instanceCount: number): void;
    DrawProcedural(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, indexCount: number): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer, argsOffset: number): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: ComputeBuffer): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number): void;
    DrawProceduralIndirect(matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number, properties: MaterialPropertyBlock): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer, argsOffset: number): void;
    DrawProceduralIndirect(indexBuffer: GraphicsBuffer, matrix: Matrix4x4, material: Material, shaderPass: number, topology: MeshTopology, bufferWithArgs: GraphicsBuffer): void;
    DrawRenderer(renderer: Renderer, material: Material, submeshIndex: number, shaderPass: number): void;
    DrawRenderer(renderer: Renderer, material: Material, submeshIndex: number): void;
    DrawRenderer(renderer: Renderer, material: Material): void;
    DrawRendererList(rendererList: RendererList): void;
    EnableKeyword(keyword: GlobalKeyword): void;
    EnableKeyword(material: Material, keyword: LocalKeyword): void;
    EnableKeyword(computeShader: ComputeShader, keyword: LocalKeyword): void;
    EnableScissorRect(scissor: Rect): void;
    EnableShaderKeyword(keyword: string): void;
    EndSample(name: string): void;
    EndSample(sampler: CustomSampler): void;
    EndSample(marker: ProfilerMarker): void;
    IncrementUpdateCount(dest: RenderTargetIdentifier): void;
    InvokeOnRenderObjectCallbacks(): void;
    IssuePluginCustomBlit(callback: IntPtr, command: number, source: RenderTargetIdentifier, dest: RenderTargetIdentifier, commandParam: number, commandFlags: number): void;
    IssuePluginCustomTextureUpdateV2(callback: IntPtr, targetTexture: Texture, userData: number): void;
    IssuePluginEvent(callback: IntPtr, eventID: number): void;
    IssuePluginEventAndData(callback: IntPtr, eventID: number, data: IntPtr): void;
    MarkLateLatchMatrixShaderPropertyID(matrixPropertyType: CameraLateLatchMatrixType, shaderPropertyID: number): void;
    SetFoveatedRenderingMode(foveatedRenderingMode: FoveatedRenderingMode): void;
    SetGlobalBuffer(name: string, value: ComputeBuffer): void;
    SetGlobalBuffer(nameID: number, value: ComputeBuffer): void;
    SetGlobalBuffer(name: string, value: GraphicsBuffer): void;
    SetGlobalBuffer(nameID: number, value: GraphicsBuffer): void;
    SetGlobalColor(nameID: number, value: Color): void;
    SetGlobalColor(name: string, value: Color): void;
    SetGlobalConstantBuffer(buffer: ComputeBuffer, nameID: number, offset: number, size: number): void;
    SetGlobalConstantBuffer(buffer: ComputeBuffer, name: string, offset: number, size: number): void;
    SetGlobalConstantBuffer(buffer: GraphicsBuffer, nameID: number, offset: number, size: number): void;
    SetGlobalConstantBuffer(buffer: GraphicsBuffer, name: string, offset: number, size: number): void;
    SetGlobalDepthBias(bias: number, slopeBias: number): void;
    SetGlobalFloat(nameID: number, value: number): void;
    SetGlobalFloat(name: string, value: number): void;
    SetGlobalFloatArray(nameID: number, values: Readonly<number[]>): void;
    SetGlobalFloatArray(propertyName: string, values: Readonly<number[]>): void;
    SetGlobalFloatArray(nameID: number, values: Readonly<number[]>): void;
    SetGlobalFloatArray(propertyName: string, values: Readonly<number[]>): void;
    SetGlobalInt(nameID: number, value: number): void;
    SetGlobalInt(name: string, value: number): void;
    SetGlobalInteger(nameID: number, value: number): void;
    SetGlobalInteger(name: string, value: number): void;
    SetGlobalMatrix(nameID: number, value: Matrix4x4): void;
    SetGlobalMatrix(name: string, value: Matrix4x4): void;
    SetGlobalMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    SetGlobalMatrixArray(propertyName: string, values: Readonly<Matrix4x4[]>): void;
    SetGlobalMatrixArray(nameID: number, values: Readonly<Matrix4x4[]>): void;
    SetGlobalMatrixArray(propertyName: string, values: Readonly<Matrix4x4[]>): void;
    SetGlobalTexture(name: string, value: TextureHandle): void;
    SetGlobalTexture(nameID: number, value: TextureHandle): void;
    SetGlobalTexture(name: string, value: TextureHandle, element: RenderTextureSubElement): void;
    SetGlobalTexture(nameID: number, value: TextureHandle, element: RenderTextureSubElement): void;
    SetGlobalVector(nameID: number, value: Vector4): void;
    SetGlobalVector(name: string, value: Vector4): void;
    SetGlobalVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    SetGlobalVectorArray(propertyName: string, values: Readonly<Vector4[]>): void;
    SetGlobalVectorArray(nameID: number, values: Readonly<Vector4[]>): void;
    SetGlobalVectorArray(propertyName: string, values: Readonly<Vector4[]>): void;
    SetInstanceMultiplier(multiplier: number): void;
    SetInvertCulling(invertCulling: boolean): void;
    SetKeyword(keyword: GlobalKeyword, value: boolean): void;
    SetKeyword(material: Material, keyword: LocalKeyword, value: boolean): void;
    SetKeyword(computeShader: ComputeShader, keyword: LocalKeyword, value: boolean): void;
    SetLateLatchProjectionMatrices(projectionMat: Readonly<Matrix4x4[]>): void;
    SetShadowSamplingMode(shadowmap: RenderTargetIdentifier, mode: ShadowSamplingMode): void;
    SetSinglePassStereo(mode: SinglePassStereoMode): void;
    SetupCameraProperties(camera: Camera): void;
    SetViewport(pixelRect: Rect): void;
    SetViewProjectionMatrices(view: Matrix4x4, proj: Matrix4x4): void;
    SetWireframe(enable: boolean): void;
    UnmarkLateLatchMatrix(matrixPropertyType: CameraLateLatchMatrixType): void;


}
    
interface XRPassConstructor {


    new(): XRPass;


    CreateDefault(createInfo: XRPassCreateInfo): XRPass;

}
declare const XRPass: XRPassConstructor;
    
interface UniversalCameraDataConstructor {


    new(): UniversalCameraData;



}
declare const UniversalCameraData: UniversalCameraDataConstructor;
    
interface UniversalLightData extends ContextItem {
    mainLightIndex: number;
    additionalLightsCount: number;
    maxPerObjectAdditionalLightsCount: number;
    visibleLights: Readonly<VisibleLight[]>;
    shadeAdditionalLightsPerVertex: boolean;
    supportsMixedLighting: boolean;
    reflectionProbeBoxProjection: boolean;
    reflectionProbeBlending: boolean;
    supportsLightLayers: boolean;
    supportsAdditionalLights: boolean;



    Reset(): void;


}
    
interface UniversalLightDataConstructor {


    new(): UniversalLightData;



}
declare const UniversalLightData: UniversalLightDataConstructor;
    
interface ScriptableRenderPassConstructor {


    new(): ScriptableRenderPass;



}
declare const ScriptableRenderPass: ScriptableRenderPassConstructor;
    
interface ScriptableRendererConstructor {


    new(data: ScriptableRendererData): ScriptableRenderer;


    SetCameraMatrices(cmd: CommandBuffer, cameraData: CameraData, setInverseMatrices: boolean): void;
    SetCameraMatrices(cmd: CommandBuffer, cameraData: UniversalCameraData, setInverseMatrices: boolean): void;

}
declare const ScriptableRenderer: ScriptableRendererConstructor;
    
interface UniversalRenderPipelineAssetConstructor {
    k_MinLutSize: number;
    k_MaxLutSize: number;
    readonly AdditionalLightsDefaultShadowResolutionTierLow: number;
    readonly AdditionalLightsDefaultShadowResolutionTierMedium: number;
    readonly AdditionalLightsDefaultShadowResolutionTierHigh: number;
    readonly packagePath: string;


    new(): UniversalRenderPipelineAsset;


    Create(rendererData: ScriptableRendererData): UniversalRenderPipelineAsset;

}
declare const UniversalRenderPipelineAsset: UniversalRenderPipelineAssetConstructor;
    
interface WheelHit {
    /**
     * The other Collider the wheel is hitting.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelHit-collider.html | WheelHit.collider}
     */
    collider: Collider;
    /**
     * The point of contact between the wheel and the ground.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelHit-point.html | WheelHit.point}
     */
    point: Vector3;
    /**
     * The normal at the point of contact.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelHit-normal.html | WheelHit.normal}
     */
    normal: Vector3;
    /**
     * The direction the wheel is pointing in.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelHit-forwardDir.html | WheelHit.forwardDir}
     */
    forwardDir: Vector3;
    /**
     * The sideways direction of the wheel.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelHit-sidewaysDir.html | WheelHit.sidewaysDir}
     */
    sidewaysDir: Vector3;
    /**
     * The magnitude of the force being applied for the contact.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelHit-force.html | WheelHit.force}
     */
    force: number;
    /**
     * Tire slip in the rolling direction. Acceleration slip is negative, braking slip is positive.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelHit-forwardSlip.html | WheelHit.forwardSlip}
     */
    forwardSlip: number;
    /**
     * Tire slip in the sideways direction.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/WheelHit-sidewaysSlip.html | WheelHit.sidewaysSlip}
     */
    sidewaysSlip: number;





}
    
interface NetworkServer {





}
    
interface InterestManagementBase extends MonoBehaviour {



    OnCheckObserver(identity: NetworkIdentity, newObserver: NetworkConnectionToClient): boolean;
    OnDestroyed(identity: NetworkIdentity): void;
    OnSpawned(identity: NetworkIdentity): void;
    Rebuild(identity: NetworkIdentity, initialize: boolean): void;
    ResetState(): void;
    SetHostVisibility(identity: NetworkIdentity, visible: boolean): void;


}
    
interface TimeSample {
    average: number;



    Begin(): void;
    End(): void;


}
    
interface TimeSampleConstructor {


    new(n: number): TimeSample;



}
declare const TimeSample: TimeSampleConstructor;
    
interface LocalConnectionToClient extends NetworkConnectionToClient {



    Disconnect(): void;


}
    
interface LocalConnectionToClientConstructor {


    new(): LocalConnectionToClient;



}
declare const LocalConnectionToClient: LocalConnectionToClientConstructor;
    
interface NetworkServerConstructor {
    maxConnections: number;
    tickRate: number;
    connections: CSDictionary<number, NetworkConnectionToClient>;
    readonly spawned: CSDictionary<number, NetworkIdentity>;
    dontListen: boolean;
    isLoadingScene: boolean;
    aoi: InterestManagementBase;
    exceptionsDisconnect: boolean;
    disconnectInactiveConnections: boolean;
    disconnectInactiveTimeout: number;
    OnConnectedEvent: Action<NetworkConnectionToClient>;
    OnDisconnectedEvent: Action<NetworkConnectionToClient>;
    OnErrorEvent: Action<NetworkConnectionToClient, TransportError, string>;
    OnTransportExceptionEvent: Action<NetworkConnectionToClient, Exception>;
    actualTickRate: number;
    earlyUpdateDuration: TimeSample;
    lateUpdateDuration: TimeSample;
    fullUpdateDuration: TimeSample;
    readonly tickInterval: number;
    readonly sendRate: number;
    readonly sendInterval: number;
    readonly localConnection: LocalConnectionToClient;
    readonly active: boolean;
    readonly activeHost: boolean;




    AddConnection(conn: NetworkConnectionToClient): boolean;
    AddPlayerForConnection(conn: NetworkConnectionToClient, player: GameObject, assetId: number): boolean;
    AddPlayerForConnection(conn: NetworkConnectionToClient, player: GameObject): boolean;
    ClearHandlers(): void;
    Destroy(obj: GameObject): void;
    DestroyPlayerForConnection(conn: NetworkConnectionToClient): void;
    DisconnectAll(): void;
    HasExternalConnections(): boolean;
    Listen(maxConns: number): void;
    RebuildObservers(identity: NetworkIdentity, initialize: boolean): void;
    RegisterHandler<T extends NetworkMessage>(handler: Action<NetworkConnectionToClient, T>, requireAuthentication: boolean): void;
    RegisterHandler<T extends NetworkMessage>(handler: Action<NetworkConnectionToClient, T, number>, requireAuthentication: boolean): void;
    RemoveConnection(connectionId: number): boolean;
    RemovePlayerForConnection(conn: NetworkConnectionToClient, removeOptions: RemovePlayerOptions): void;
    ReplaceHandler<T extends NetworkMessage>(handler: Action<T>, requireAuthentication: boolean): void;
    ReplaceHandler<T extends NetworkMessage>(handler: Action<NetworkConnectionToClient, T>, requireAuthentication: boolean): void;
    ReplaceHandler<T extends NetworkMessage>(handler: Action<NetworkConnectionToClient, T, number>, requireAuthentication: boolean): void;
    ReplacePlayerForConnection(conn: NetworkConnectionToClient, player: GameObject, keepAuthority: boolean): boolean;
    ReplacePlayerForConnection(conn: NetworkConnectionToClient, player: GameObject, assetId: number, keepAuthority: boolean): boolean;
    SendToAll<T extends NetworkMessage>(message: T, channelId: number, sendToReadyOnly: boolean): void;
    SendToReady<T extends NetworkMessage>(message: T, channelId: number): void;
    SendToReadyObservers<T extends NetworkMessage>(identity: NetworkIdentity, message: T, includeOwner: boolean, channelId: number): void;
    SendToReadyObservers<T extends NetworkMessage>(identity: NetworkIdentity, message: T, channelId: number): void;
    SetAllClientsNotReady(): void;
    SetClientNotReady(conn: NetworkConnectionToClient): void;
    SetClientReady(conn: NetworkConnectionToClient): void;
    Shutdown(): void;
    Spawn(obj: GameObject, ownerPlayer: GameObject): void;
    Spawn(obj: GameObject): void;
    Spawn(obj: GameObject, ownerConnection: NetworkConnection): void;
    Spawn(obj: GameObject, assetId: number, ownerConnection: NetworkConnection): void;
    SpawnObjects(): boolean;
    UnregisterHandler<T extends NetworkMessage>(): void;
    UnSpawn(obj: GameObject): void;

}
declare const NetworkServer: NetworkServerConstructor;
    
interface NetworkClient {





}
    
interface SnapshotInterpolationSettings {
    bufferTimeMultiplier: number;
    bufferLimit: number;
    catchupNegativeThreshold: number;
    catchupPositiveThreshold: number;
    catchupSpeed: number;
    slowdownSpeed: number;
    driftEmaDuration: number;
    dynamicAdjustment: boolean;
    dynamicAdjustmentTolerance: number;
    deliveryTimeEmaDuration: number;





}
    
interface SnapshotInterpolationSettingsConstructor {


    new(): SnapshotInterpolationSettings;



}
declare const SnapshotInterpolationSettings: SnapshotInterpolationSettingsConstructor;
    
interface ExponentialMovingAverage {
    Value: number;
    Variance: number;
    StandardDeviation: number;



    Add(newValue: number): void;
    Reset(): void;


}
    
interface ExponentialMovingAverageConstructor {


    new(n: number): ExponentialMovingAverage;



}
declare const ExponentialMovingAverage: ExponentialMovingAverageConstructor;
    
interface SpawnDelegate extends MulticastDelegate {



    BeginInvoke(position: Vector3, assetId: number, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): GameObject;
    Invoke(position: Vector3, assetId: number): GameObject;


}
    
interface SpawnDelegateConstructor {


    new(object: unknown, method: IntPtr): SpawnDelegate;



}
declare const SpawnDelegate: SpawnDelegateConstructor;
    
interface UnSpawnDelegate extends MulticastDelegate {



    BeginInvoke(spawned: GameObject, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): void;
    Invoke(spawned: GameObject): void;


}
    
interface UnSpawnDelegateConstructor {


    new(object: unknown, method: IntPtr): UnSpawnDelegate;



}
declare const UnSpawnDelegate: UnSpawnDelegateConstructor;
    
interface SpawnHandlerDelegate extends MulticastDelegate {



    BeginInvoke(msg: SpawnMessage, callback: AsyncCallback, object: unknown): IAsyncResult;
    EndInvoke(result: IAsyncResult): GameObject;
    Invoke(msg: SpawnMessage): GameObject;


}
    
interface SpawnMessage extends NetworkMessage {
    netId: number;
    isLocalPlayer: boolean;
    isOwner: boolean;
    sceneId: number;
    assetId: number;
    position: Vector3;
    rotation: Quaternion;
    scale: Vector3;
    payload: Readonly<number[]>;





}
    
interface SpawnHandlerDelegateConstructor {


    new(object: unknown, method: IntPtr): SpawnHandlerDelegate;



}
declare const SpawnHandlerDelegate: SpawnHandlerDelegateConstructor;
    
interface NetworkClientConstructor {
    exceptionsDisconnect: boolean;
    readonly spawned: CSDictionary<number, NetworkIdentity>;
    ready: boolean;
    OnConnectedEvent: Action;
    OnDisconnectedEvent: Action;
    OnErrorEvent: Action<TransportError, string>;
    OnTransportExceptionEvent: Action<Exception>;
    readonly prefabs: CSDictionary<number, GameObject>;
    aoi: InterestManagementBase;
    isLoadingScene: boolean;
    connectionQuality: ConnectionQuality;
    lastConnectionQuality: ConnectionQuality;
    connectionQualityMethod: ConnectionQualityMethod;
    connectionQualityInterval: number;
    snapshotSettings: SnapshotInterpolationSettings;
    snapshots: CSDictionary<number, TimeSnapshot>;
    driftEma: ExponentialMovingAverage;
    dynamicAdjustment: boolean;
    dynamicAdjustmentTolerance: number;
    deliveryTimeEmaDuration: number;
    readonly sendRate: number;
    readonly sendInterval: number;
    readonly connection: NetworkConnection;
    readonly localPlayer: NetworkIdentity;
    readonly active: boolean;
    readonly activeHost: boolean;
    readonly isConnecting: boolean;
    readonly isConnected: boolean;
    readonly bufferTimeMultiplier: number;
    readonly initialBufferTime: number;
    readonly bufferTime: number;




    AddPlayer(): boolean;
    ClearSpawners(): void;
    Connect(address: string): void;
    Connect(uri: Uri): void;
    ConnectHost(): void;
    DestroyAllClientObjects(): void;
    Disconnect(): void;
    OnGUI(): void;
    OnTimeSnapshot(snap: TimeSnapshot): void;
    PrepareToSpawnSceneObjects(): void;
    Ready(): boolean;
    RegisterHandler<T extends NetworkMessage>(handler: Action<T>, requireAuthentication: boolean): void;
    RegisterHandler<T extends NetworkMessage>(handler: Action<T, number>, requireAuthentication: boolean): void;
    RegisterPrefab(prefab: GameObject, newAssetId: number): void;
    RegisterPrefab(prefab: GameObject): void;
    RegisterPrefab(prefab: GameObject, newAssetId: number, spawnHandler: SpawnDelegate, unspawnHandler: UnSpawnDelegate): void;
    RegisterPrefab(prefab: GameObject, spawnHandler: SpawnDelegate, unspawnHandler: UnSpawnDelegate): void;
    RegisterPrefab(prefab: GameObject, newAssetId: number, spawnHandler: SpawnHandlerDelegate, unspawnHandler: UnSpawnDelegate): void;
    RegisterPrefab(prefab: GameObject, spawnHandler: SpawnHandlerDelegate, unspawnHandler: UnSpawnDelegate): void;
    RegisterSpawnHandler(assetId: number, spawnHandler: SpawnDelegate, unspawnHandler: UnSpawnDelegate): void;
    RegisterSpawnHandler(assetId: number, spawnHandler: SpawnHandlerDelegate, unspawnHandler: UnSpawnDelegate): void;
    ReplaceHandler<T extends NetworkMessage>(handler: Action<T>, requireAuthentication: boolean): void;
    ReplaceHandler<T extends NetworkMessage>(handler: Action<T, number>, requireAuthentication: boolean): void;
    Send<T extends NetworkMessage>(message: T, channelId: number): void;
    Shutdown(): void;
    UnregisterHandler<T extends NetworkMessage>(): boolean;
    UnregisterPrefab(prefab: GameObject): void;
    UnregisterSpawnHandler(assetId: number): void;

    readonly onConnectionQualityChanged: MonoSignal<ConnectionQuality, ConnectionQuality>;
}
declare const NetworkClient: NetworkClientConstructor;
    
interface NetworkTransformBase extends NetworkBehaviour {
    target: Transform;
    readonly clientSnapshots: CSDictionary<number, TransformSnapshot>;
    readonly serverSnapshots: CSDictionary<number, TransformSnapshot>;
    syncPosition: boolean;
    syncRotation: boolean;
    syncScale: boolean;
    onlySyncOnChange: boolean;
    compressRotation: boolean;
    interpolatePosition: boolean;
    interpolateRotation: boolean;
    interpolateScale: boolean;
    coordinateSpace: CoordinateSpace;
    sendIntervalMultiplier: number;
    timelineOffset: boolean;
    showGizmos: boolean;
    showOverlay: boolean;
    overlayColor: Color;



    CmdTeleport(destination: Vector3): void;
    CmdTeleport(destination: Vector3, rotation: Quaternion): void;
    Reset(): void;
    ResetState(): void;
    RpcTeleport(destination: Vector3): void;
    RpcTeleport(destination: Vector3, rotation: Quaternion): void;
    Weaved(): boolean;


}
    
interface TransformSnapshot extends Snapshot {
    position: Vector3;
    rotation: Quaternion;
    scale: Vector3;
    remoteTime: number;
    localTime: number;



    ToString(): string;


}
    
interface TransformSnapshotConstructor {


    new(remoteTime: number, localTime: number, position: Vector3, rotation: Quaternion, scale: Vector3): TransformSnapshot;


    Interpolate(from: TransformSnapshot, to: TransformSnapshot, t: number): TransformSnapshot;

}
declare const TransformSnapshot: TransformSnapshotConstructor;
    
interface NetworkTransformUnreliable extends NetworkTransformBase {
    bufferResetMultiplier: number;
    positionSensitivity: number;
    rotationSensitivity: number;
    scaleSensitivity: number;



    OnDeserialize(reader: NetworkReader, initialState: boolean): void;
    OnSerialize(writer: NetworkWriter, initialState: boolean): void;
    Weaved(): boolean;


}
    
interface NetworkTransformUnreliableConstructor {


    new(): NetworkTransformUnreliable;



}
declare const NetworkTransformUnreliable: NetworkTransformUnreliableConstructor;
    
    
    
interface NetworkTransformReliable extends NetworkTransformBase {
    onlySyncOnChangeCorrectionMultiplier: number;
    rotationSensitivity: number;
    positionPrecision: number;
    scalePrecision: number;



    OnDeserialize(reader: NetworkReader, initialState: boolean): void;
    OnSerialize(writer: NetworkWriter, initialState: boolean): void;
    ResetState(): void;
    Weaved(): boolean;


}
    
interface NetworkTransformReliableConstructor {


    new(): NetworkTransformReliable;



}
declare const NetworkTransformReliable: NetworkTransformReliableConstructor;
    
interface NetworkAnimator extends NetworkBehaviour {
    clientAuthority: boolean;
    animator: Animator;
    _Mirror_SyncVarHookDelegate_animatorSpeed: Action<number, number>;
    NetworkanimatorSpeed: number;



    DeserializeSyncVars(reader: NetworkReader, initialState: boolean): void;
    OnDeserialize(reader: NetworkReader, initialState: boolean): void;
    OnSerialize(writer: NetworkWriter, initialState: boolean): void;
    Reset(): void;
    ResetTrigger(triggerName: string): void;
    ResetTrigger(hash: number): void;
    SerializeSyncVars(writer: NetworkWriter, forceAll: boolean): void;
    SetTrigger(triggerName: string): void;
    SetTrigger(hash: number): void;
    Weaved(): boolean;


}
    
interface NetworkAnimatorConstructor {


    new(): NetworkAnimator;



}
declare const NetworkAnimator: NetworkAnimatorConstructor;
    
interface NetworkConnectionToServer extends NetworkConnection {



    Disconnect(): void;


}
    
interface NetworkConnectionToServerConstructor {


    new(): NetworkConnectionToServer;



}
declare const NetworkConnectionToServer: NetworkConnectionToServerConstructor;
    
    
    
interface PredictedRigidbody extends NetworkBehaviour {
    predictedRigidbody: Rigidbody;
    mode: PredictionMode;
    motionSmoothingVelocityThreshold: number;
    motionSmoothingAngularVelocityThreshold: number;
    motionSmoothingTimeTolerance: number;
    stateHistoryLimit: number;
    recordInterval: number;
    onlyRecordChanges: boolean;
    compareLastFirst: boolean;
    positionCorrectionThreshold: number;
    rotationCorrectionThreshold: number;
    oneFrameAhead: boolean;
    snapThreshold: number;
    showGhost: boolean;
    ghostVelocityThreshold: number;
    localGhostMaterial: Material;
    remoteGhostMaterial: Material;
    checkGhostsEveryNthFrame: number;
    positionInterpolationSpeed: number;
    rotationInterpolationSpeed: number;
    teleportDistanceMultiplier: number;
    reduceSendsWhileIdle: boolean;



    OnDeserialize(reader: NetworkReader, initialState: boolean): void;
    OnSerialize(writer: NetworkWriter, initialState: boolean): void;
    OnStopClient(): void;
    Weaved(): boolean;


}
    
interface PredictedRigidbodyConstructor {


    new(): PredictedRigidbody;



}
declare const PredictedRigidbody: PredictedRigidbodyConstructor;
    
interface PredictedState {
    readonly timestamp: number;
    position: Vector3;
    positionDelta: Vector3;
    rotation: Quaternion;
    rotationDelta: Quaternion;
    velocity: Vector3;
    velocityDelta: Vector3;
    angularVelocity: Vector3;
    angularVelocityDelta: Vector3;





}
    
interface NativeTween {





}
    
interface NativeTweenConstructor {




    AnchoredPosition(self: Component, to: Vector2, duration: number): Tween<Vector2>;
    AnchoredPosition(self: GameObject, to: Vector2, duration: number): Tween<Vector2>;
    AnchoredPositionX(self: Component, to: number, duration: number): Tween<number>;
    AnchoredPositionX(self: GameObject, to: number, duration: number): Tween<number>;
    AnchoredPositionY(self: Component, to: number, duration: number): Tween<number>;
    AnchoredPositionY(self: GameObject, to: number, duration: number): Tween<number>;
    AnchorMax(self: Component, to: Vector2, duration: number): Tween<Vector2>;
    AnchorMax(self: GameObject, to: Vector2, duration: number): Tween<Vector2>;
    AnchorMin(self: Component, to: Vector2, duration: number): Tween<Vector2>;
    AnchorMin(self: GameObject, to: Vector2, duration: number): Tween<Vector2>;
    AudioSourcePitch(self: Component, to: number, duration: number): Tween<number>;
    AudioSourcePitch(self: GameObject, to: number, duration: number): Tween<number>;
    AudioSourcePriority(self: Component, to: number, duration: number): Tween<number>;
    AudioSourcePriority(self: GameObject, to: number, duration: number): Tween<number>;
    AudioSourceReverbZoneMix(self: Component, to: number, duration: number): Tween<number>;
    AudioSourceReverbZoneMix(self: GameObject, to: number, duration: number): Tween<number>;
    AudioSourceSpatialBlend(self: Component, to: number, duration: number): Tween<number>;
    AudioSourceSpatialBlend(self: GameObject, to: number, duration: number): Tween<number>;
    AudioSourceStereoPan(self: Component, to: number, duration: number): Tween<number>;
    AudioSourceStereoPan(self: GameObject, to: number, duration: number): Tween<number>;
    AudioSourceVolume(self: Component, to: number, duration: number): Tween<number>;
    AudioSourceVolume(self: GameObject, to: number, duration: number): Tween<number>;
    CameraFieldOfView(self: Component, to: number, duration: number): Tween<number>;
    CameraFieldOfView(self: GameObject, to: number, duration: number): Tween<number>;
    CameraOrthographicSize(self: Component, to: number, duration: number): Tween<number>;
    CameraOrthographicSize(self: GameObject, to: number, duration: number): Tween<number>;
    CancelAll(self: Component, includeChildren: boolean, includeInactive: boolean): void;
    CancelAll(self: GameObject, includeChildren: boolean, includeInactive: boolean): void;
    CanvasGroupAlpha(self: Component, to: number, duration: number): Tween<number>;
    CanvasGroupAlpha(self: GameObject, to: number, duration: number): Tween<number>;
    GraphicAlpha(self: Component, to: number, duration: number): Tween<number>;
    GraphicAlpha(self: GameObject, to: number, duration: number): Tween<number>;
    GraphicColor(self: Component, to: Color, duration: number): Tween<Color>;
    GraphicColor(self: GameObject, to: Color, duration: number): Tween<Color>;
    ImageFillAmount(self: Component, to: number, duration: number): Tween<number>;
    ImageFillAmount(self: GameObject, to: number, duration: number): Tween<number>;
    LightColor(self: Component, to: Color, duration: number): Tween<Color>;
    LightColor(self: GameObject, to: Color, duration: number): Tween<Color>;
    LightIntensity(self: Component, to: number, duration: number): Tween<number>;
    LightIntensity(self: GameObject, to: number, duration: number): Tween<number>;
    LightRange(self: Component, to: number, duration: number): Tween<number>;
    LightRange(self: GameObject, to: number, duration: number): Tween<number>;
    LightSpotAngle(self: Component, to: number, duration: number): Tween<number>;
    LightSpotAngle(self: GameObject, to: number, duration: number): Tween<number>;
    LocalPosition(self: Component, to: Vector3, duration: number): Tween<Vector3>;
    LocalPosition(self: GameObject, to: Vector3, duration: number): Tween<Vector3>;
    LocalPositionX(self: Component, to: number, duration: number): Tween<number>;
    LocalPositionX(self: GameObject, to: number, duration: number): Tween<number>;
    LocalPositionY(self: Component, to: number, duration: number): Tween<number>;
    LocalPositionY(self: GameObject, to: number, duration: number): Tween<number>;
    LocalPositionZ(self: Component, to: number, duration: number): Tween<number>;
    LocalPositionZ(self: GameObject, to: number, duration: number): Tween<number>;
    LocalRotation(self: Component, to: Vector3, duration: number): Tween<Vector3>;
    LocalRotation(self: GameObject, to: Vector3, duration: number): Tween<Vector3>;
    LocalRotationX(self: Component, to: number, duration: number): Tween<number>;
    LocalRotationX(self: GameObject, to: number, duration: number): Tween<number>;
    LocalRotationY(self: Component, to: number, duration: number): Tween<number>;
    LocalRotationY(self: GameObject, to: number, duration: number): Tween<number>;
    LocalScale(self: Component, to: Vector3, duration: number): Tween<Vector3>;
    LocalScale(self: GameObject, to: Vector3, duration: number): Tween<Vector3>;
    LocalScaleX(self: Component, to: number, duration: number): Tween<number>;
    LocalScaleX(self: GameObject, to: number, duration: number): Tween<number>;
    LocalScaleY(self: Component, to: number, duration: number): Tween<number>;
    LocalScaleY(self: GameObject, to: number, duration: number): Tween<number>;
    LocalScaleZ(self: Component, to: number, duration: number): Tween<number>;
    LocalScaleZ(self: GameObject, to: number, duration: number): Tween<number>;
    MaterialAlpha(self: Component, to: number, duration: number): Tween<number>;
    MaterialAlpha(self: GameObject, to: number, duration: number): Tween<number>;
    MaterialColor(self: Component, to: Color, duration: number): Tween<Color>;
    MaterialColor(self: GameObject, to: Color, duration: number): Tween<Color>;
    MaterialsColorProperty(self: Component, propertyName: string, from: Color, to: Color, duration: number): Tween<number>;
    MaterialsFloatProperty(self: Component, propertyName: string, from: number, to: number, duration: number): Tween<number>;
    MaterialsVectorProperty(self: Component, propertyName: string, from: Vector4, to: Vector4, duration: number): Tween<number>;
    OffsetMax(self: Component, to: Vector2, duration: number): Tween<Vector2>;
    OffsetMax(self: GameObject, to: Vector2, duration: number): Tween<Vector2>;
    OffsetMin(self: Component, to: Vector2, duration: number): Tween<Vector2>;
    OffsetMin(self: GameObject, to: Vector2, duration: number): Tween<Vector2>;
    Position(self: Component, to: Vector3, duration: number): Tween<Vector3>;
    Position(self: GameObject, to: Vector3, duration: number): Tween<Vector3>;
    PositionX(self: Component, to: number, duration: number): Tween<number>;
    PositionX(self: GameObject, to: number, duration: number): Tween<number>;
    PositionY(self: Component, to: number, duration: number): Tween<number>;
    PositionY(self: GameObject, to: number, duration: number): Tween<number>;
    PositionZ(self: Component, to: number, duration: number): Tween<number>;
    PositionZ(self: GameObject, to: number, duration: number): Tween<number>;
    RendererColor(self: Component, from: Color, to: Color, duration: number): Tween<Color>;
    RendererColor(self: GameObject, from: Color, to: Color, duration: number): Tween<Color>;
    Rotation(self: Component, to: Vector3, duration: number): Tween<Vector3>;
    Rotation(self: GameObject, to: Vector3, duration: number): Tween<Vector3>;
    RotationX(self: Component, to: number, duration: number): Tween<number>;
    RotationX(self: GameObject, to: number, duration: number): Tween<number>;
    RotationY(self: Component, to: number, duration: number): Tween<number>;
    RotationY(self: GameObject, to: number, duration: number): Tween<number>;
    RotationZ(self: Component, to: number, duration: number): Tween<number>;
    RotationZ(self: GameObject, to: number, duration: number): Tween<number>;
    SizeDelta(self: Component, to: Vector2, duration: number): Tween<Vector2>;
    SizeDelta(self: GameObject, to: Vector2, duration: number): Tween<Vector2>;
    SpriteRendererAlpha(self: Component, to: number, duration: number): Tween<number>;
    SpriteRendererAlpha(self: GameObject, to: number, duration: number): Tween<number>;
    SpriteRendererColor(self: Component, to: Color, duration: number): Tween<Color>;
    SpriteRendererColor(self: GameObject, to: Color, duration: number): Tween<Color>;
    TextMeshAlpha(self: Component, to: number, duration: number): Tween<number>;
    TextMeshAlpha(self: GameObject, to: number, duration: number): Tween<number>;
    TextMeshColor(self: Component, to: Color, duration: number): Tween<Color>;
    TextMeshColor(self: GameObject, to: Color, duration: number): Tween<Color>;
    TextMeshProAlpha(self: Component, to: number, duration: number): Tween<number>;
    TextMeshProAlpha(self: GameObject, to: number, duration: number): Tween<number>;
    TextMeshProColor(self: Component, to: Color, duration: number): Tween<Color>;
    TextMeshProColor(self: GameObject, to: Color, duration: number): Tween<Color>;
    TweenLocalRotationZ(self: Component, to: number, duration: number): Tween<number>;
    TweenLocalRotationZ(self: GameObject, to: number, duration: number): Tween<number>;
    ValueColor(self: Component, to: Color, duration: number, onUpdate: Action<Color>): Tween<Color>;
    ValueColor(self: GameObject, to: Color, duration: number, onUpdate: Action<Color>): Tween<Color>;
    ValueFloat(self: Component, to: number, duration: number, onUpdate: Action<number>): Tween<number>;
    ValueFloat(self: GameObject, to: number, duration: number, onUpdate: Action<number>): Tween<number>;
    ValueVector2(self: Component, to: Vector2, duration: number, onUpdate: Action<Vector2>): Tween<Vector2>;
    ValueVector2(self: GameObject, to: Vector2, duration: number, onUpdate: Action<Vector2>): Tween<Vector2>;
    ValueVector3(self: Component, to: Vector3, duration: number, onUpdate: Action<Vector3>): Tween<Vector3>;
    ValueVector3(self: GameObject, to: Vector3, duration: number, onUpdate: Action<Vector3>): Tween<Vector3>;
    VolumeWeight(self: Component, to: number, duration: number): Tween<number>;
    VolumeWeight(self: GameObject, to: number, duration: number): Tween<number>;

}
declare const NativeTween: NativeTweenConstructor;
    
interface TweenComponent<DriverValueType, ComponentType extends Component> extends Tween<DriverValueType> {



    OnInitialize(): boolean;


}
    
interface ConstantForce extends Behaviour {
    /**
     * The force applied to the rigidbody every frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ConstantForce-force.html | ConstantForce.force}
     */
    force: Vector3;
    /**
     * The torque applied to the rigidbody every frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ConstantForce-torque.html | ConstantForce.torque}
     */
    torque: Vector3;
    /**
     * The force - relative to the rigid bodies coordinate system - applied every frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ConstantForce-relativeForce.html | ConstantForce.relativeForce}
     */
    relativeForce: Vector3;
    /**
     * The torque - relative to the rigid bodies coordinate system - applied every frame.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ConstantForce-relativeTorque.html | ConstantForce.relativeTorque}
     */
    relativeTorque: Vector3;





}
    
interface ConstantForceConstructor {


    new(): ConstantForce;



}
declare const ConstantForce: ConstantForceConstructor;
    
interface PhysicsUpdateBehaviour2D extends Behaviour {





}
    
interface PhysicsUpdateBehaviour2DConstructor {


    new(): PhysicsUpdateBehaviour2D;



}
declare const PhysicsUpdateBehaviour2D: PhysicsUpdateBehaviour2DConstructor;
    
interface ConstantForce2D extends PhysicsUpdateBehaviour2D {
    /**
     * The linear force applied to the rigidbody each physics update.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ConstantForce2D-force.html | ConstantForce2D.force}
     */
    force: Vector2;
    /**
     * The linear force, relative to the rigid-body coordinate system, applied each physics update.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ConstantForce2D-relativeForce.html | ConstantForce2D.relativeForce}
     */
    relativeForce: Vector2;
    /**
     * The torque applied to the rigidbody each physics update.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/ConstantForce2D-torque.html | ConstantForce2D.torque}
     */
    torque: number;





}
    
interface ConstantForce2DConstructor {


    new(): ConstantForce2D;



}
declare const ConstantForce2D: ConstantForce2DConstructor;
    
interface FixedJoint extends Joint {





}
    
interface FixedJointConstructor {


    new(): FixedJoint;



}
declare const FixedJoint: FixedJointConstructor;
    
interface GridLayout extends Behaviour {
    /**
     * The size of each cell in the layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout-cellSize.html | GridLayout.cellSize}
     */
    readonly cellSize: Vector3;
    /**
     * The size of the gap between each cell in the layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout-cellGap.html | GridLayout.cellGap}
     */
    readonly cellGap: Vector3;
    /**
     * The layout of the cells.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout-cellLayout.html | GridLayout.cellLayout}
     */
    readonly cellLayout: CellLayout;
    /**
     * The cell swizzle for the layout.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout-cellSwizzle.html | GridLayout.cellSwizzle}
     */
    readonly cellSwizzle: CellSwizzle;



    /**
     * Converts a cell position to local position space.
     * @param cellPosition Cell position to convert.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout.CellToLocal.html | GridLayout.CellToLocal}
     */
    CellToLocal(cellPosition: Vector3): Vector3;
    /**
     * Converts an interpolated cell position in floats to local position space.
     * @param cellPosition Interpolated cell position to convert.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout.CellToLocalInterpolated.html | GridLayout.CellToLocalInterpolated}
     */
    CellToLocalInterpolated(cellPosition: Vector3): Vector3;
    /**
     * Converts a cell position to world position space.
     * @param cellPosition Cell position to convert.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout.CellToWorld.html | GridLayout.CellToWorld}
     */
    CellToWorld(cellPosition: Vector3): Vector3;
    /**
     * Returns the local bounds for a cell at the location.
     * @param cellPosition Location of the cell.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout.GetBoundsLocal.html | GridLayout.GetBoundsLocal}
     */
    GetBoundsLocal(cellPosition: Vector3): Bounds;
    /**
     * Returns the local bounds for the groups of cells at the location.
     * @param origin Origin of the group of cells.
     * @param size Size of the group of cells.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout.GetBoundsLocal.html | GridLayout.GetBoundsLocal}
     */
    GetBoundsLocal(origin: Vector3, size: Vector3): Bounds;
    /**
     * Get the default center coordinate of a cell for the set layout of the Grid.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout.GetLayoutCellCenter.html | GridLayout.GetLayoutCellCenter}
     */
    GetLayoutCellCenter(): Vector3;
    /**
     * Converts a local position to cell position.
     * @param localPosition Local Position to convert.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout.LocalToCell.html | GridLayout.LocalToCell}
     */
    LocalToCell(localPosition: Vector3): Vector3;
    /**
     * Converts a local position to cell position.
     * @param localPosition Local Position to convert.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout.LocalToCellInterpolated.html | GridLayout.LocalToCellInterpolated}
     */
    LocalToCellInterpolated(localPosition: Vector3): Vector3;
    /**
     * Converts a local position to world position.
     * @param localPosition Local Position to convert.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout.LocalToWorld.html | GridLayout.LocalToWorld}
     */
    LocalToWorld(localPosition: Vector3): Vector3;
    /**
     * Converts a world position to cell position.
     * @param worldPosition World Position to convert.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout.WorldToCell.html | GridLayout.WorldToCell}
     */
    WorldToCell(worldPosition: Vector3): Vector3;
    /**
     * Converts a world position to local position.
     * @param worldPosition World Position to convert.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/GridLayout.WorldToLocal.html | GridLayout.WorldToLocal}
     */
    WorldToLocal(worldPosition: Vector3): Vector3;


}
    
interface GridLayoutConstructor {


    new(): GridLayout;



}
declare const GridLayout: GridLayoutConstructor;
    
interface Grid extends GridLayout {
    /**
     * The size of each cell in the Grid.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Grid-cellSize.html | Grid.cellSize}
     */
    cellSize: Vector3;
    /**
     * The size of the gap between each cell in the Grid.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Grid-cellGap.html | Grid.cellGap}
     */
    cellGap: Vector3;
    /**
     * The layout of the cells in the Grid.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Grid-cellLayout.html | Grid.cellLayout}
     */
    cellLayout: CellLayout;
    /**
     * The cell swizzle for the Grid.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Grid-cellSwizzle.html | Grid.cellSwizzle}
     */
    cellSwizzle: CellSwizzle;



    /**
     * Get the logical center coordinate of a grid cell in local space.
     * @param position Grid cell position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Grid.GetCellCenterLocal.html | Grid.GetCellCenterLocal}
     */
    GetCellCenterLocal(position: Vector3): Vector3;
    /**
     * Get the logical center coordinate of a grid cell in world space.
     * @param position Grid cell position.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/Grid.GetCellCenterWorld.html | Grid.GetCellCenterWorld}
     */
    GetCellCenterWorld(position: Vector3): Vector3;


}
    
interface GridConstructor {


    new(): Grid;


    InverseSwizzle(swizzle: CellSwizzle, position: Vector3): Vector3;
    Swizzle(swizzle: CellSwizzle, position: Vector3): Vector3;

}
declare const Grid: GridConstructor;
    
interface UIScrollRectEventBubbler extends MonoBehaviour, IBeginDragHandler, IDragHandler, IEndDragHandler, IScrollHandler {
    Bubble: boolean;
    DisableEventTriggerWhileDragging: boolean;
    DisableDragEvents: boolean;
    readonly EventTrigger: EventTrigger;



    OnBeginDrag(eventData: PointerEventData): void;
    OnDisable(): void;
    OnDrag(eventData: PointerEventData): void;
    OnEndDrag(eventData: PointerEventData): void;
    OnScroll(eventData: PointerEventData): void;


}
    
interface UIScrollRectEventBubblerConstructor {


    new(): UIScrollRectEventBubbler;



}
declare const UIScrollRectEventBubbler: UIScrollRectEventBubblerConstructor;
    
interface VisualEffect extends Behaviour {
    outputEventReceived: Action<VFXOutputEventArgs>;
    /**
     * Use this property to set the pause state of the visual effect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect-pause.html | VFX.VisualEffect.pause}
     */
    pause: boolean;
    /**
     * A multiplier that Unity applies to the delta time when it updates the VisualEffect. The default value is 1.0f.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect-playRate.html | VFX.VisualEffect.playRate}
     */
    playRate: number;
    /**
     * The initial seed used for internal random number generator.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect-startSeed.html | VFX.VisualEffect.startSeed}
     */
    startSeed: number;
    /**
     * This property controls whether the visual effect generates a new seed for the random number generator with each call to VFX.VisualEffect.Play function.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect-resetSeedOnPlay.html | VFX.VisualEffect.resetSeedOnPlay}
     */
    resetSeedOnPlay: boolean;
    /**
     * The default event name ID. To retrieve this value, use the Shader.PropertyID after VisualEffect has awakened or after you've invoked VFX.VisualEffect.Reinit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect-initialEventID.html | VFX.VisualEffect.initialEventID}
     */
    initialEventID: number;
    /**
     * The default event name. Unity calls this event when the VisualEffect awakes, or when you call VisualEffect.Reinit.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect-initialEventName.html | VFX.VisualEffect.initialEventName}
     */
    initialEventName: string;
    /**
     * Use this property to determine if this visual effect is not visible from any Camera. (Read Only)
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect-culled.html | VFX.VisualEffect.culled}
     */
    readonly culled: boolean;
    /**
     * The VisualEffectAsset that the VisualEffect uses.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect-visualEffectAsset.html | VFX.VisualEffect.visualEffectAsset}
     */
    visualEffectAsset: VisualEffectAsset;
    /**
     * Returns the sum of all alive particles within the visual effect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect-aliveParticleCount.html | VFX.VisualEffect.aliveParticleCount}
     */
    readonly aliveParticleCount: number;



    /**
     * If VFX.VisualEffect._pause is true, this method processes the next visual effect update for exactly one frame with the current delta time.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.AdvanceOneFrame.html | VFX.VisualEffect.AdvanceOneFrame}
     */
    AdvanceOneFrame(): void;
    /**
     * Use this method to create a new VFXEventAttribute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.CreateVFXEventAttribute.html | VFX.VisualEffect.CreateVFXEventAttribute}
     */
    CreateVFXEventAttribute(): VFXEventAttribute;
    /**
     * Gets the value of a named Animation Curve property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetAnimationCurve.html | VFX.VisualEffect.GetAnimationCurve}
     */
    GetAnimationCurve(nameID: number): AnimationCurve;
    /**
     * Gets the value of a named Animation Curve property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetAnimationCurve.html | VFX.VisualEffect.GetAnimationCurve}
     */
    GetAnimationCurve(name: string): AnimationCurve;
    /**
     * Gets the value of a named bool property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetBool.html | VFX.VisualEffect.GetBool}
     */
    GetBool(nameID: number): boolean;
    /**
     * Gets the value of a named bool property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetBool.html | VFX.VisualEffect.GetBool}
     */
    GetBool(name: string): boolean;
    /**
     * Gets the value of a named float property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetFloat.html | VFX.VisualEffect.GetFloat}
     */
    GetFloat(nameID: number): number;
    /**
     * Gets the value of a named float property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetFloat.html | VFX.VisualEffect.GetFloat}
     */
    GetFloat(name: string): number;
    /**
     * Gets the value of a named Gradient property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetGradient.html | VFX.VisualEffect.GetGradient}
     */
    GetGradient(nameID: number): Gradient;
    /**
     * Gets the value of a named Gradient property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetGradient.html | VFX.VisualEffect.GetGradient}
     */
    GetGradient(name: string): Gradient;
    /**
     * Get a named exposed integer.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetInt.html | VFX.VisualEffect.GetInt}
     */
    GetInt(nameID: number): number;
    /**
     * Get a named exposed integer.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetInt.html | VFX.VisualEffect.GetInt}
     */
    GetInt(name: string): number;
    /**
     * Gets the value of a named Matrix4x4 property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetMatrix4x4.html | VFX.VisualEffect.GetMatrix4x4}
     */
    GetMatrix4x4(nameID: number): Matrix4x4;
    /**
     * Gets the value of a named Matrix4x4 property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetMatrix4x4.html | VFX.VisualEffect.GetMatrix4x4}
     */
    GetMatrix4x4(name: string): Matrix4x4;
    /**
     * Gets the value of a named Mesh property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetMesh.html | VFX.VisualEffect.GetMesh}
     */
    GetMesh(nameID: number): Mesh;
    /**
     * Gets the value of a named Mesh property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetMesh.html | VFX.VisualEffect.GetMesh}
     */
    GetMesh(name: string): Mesh;
    GetOutputEventNames(names: Readonly<string[]>): void;
    /**
     * Gets information on a particle system.
     * @param nameID The system ID. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetParticleSystemInfo.html | VFX.VisualEffect.GetParticleSystemInfo}
     */
    GetParticleSystemInfo(nameID: number): VFXParticleSystemInfo;
    /**
     * Gets information on a particle system.
     * @param name The name of the particle system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetParticleSystemInfo.html | VFX.VisualEffect.GetParticleSystemInfo}
     */
    GetParticleSystemInfo(name: string): VFXParticleSystemInfo;
    GetParticleSystemNames(names: Readonly<string[]>): void;
    /**
     * Gets the value of a named Skinned Mesh Renderer property.
     * @param nameID The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetSkinnedMeshRenderer.html | VFX.VisualEffect.GetSkinnedMeshRenderer}
     */
    GetSkinnedMeshRenderer(nameID: number): SkinnedMeshRenderer;
    /**
     * Gets the value of a named Skinned Mesh Renderer property.
     * @param name The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetSkinnedMeshRenderer.html | VFX.VisualEffect.GetSkinnedMeshRenderer}
     */
    GetSkinnedMeshRenderer(name: string): SkinnedMeshRenderer;
    /**
     * Gets state on a spawn system.
     * @param nameID The system ID. This is the same ID that Shader.PropertyToID returns.
     * @param spawnState A modified  VFXSpawnerState instance.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetSpawnSystemInfo.html | VFX.VisualEffect.GetSpawnSystemInfo}
     */
    GetSpawnSystemInfo(nameID: number, spawnState: VFXSpawnerState): void;
    GetSpawnSystemInfo(nameID: number): VFXSpawnerState;
    /**
     * Gets state on a spawn system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetSpawnSystemInfo.html | VFX.VisualEffect.GetSpawnSystemInfo}
     */
    GetSpawnSystemInfo(name: string): VFXSpawnerState;
    GetSpawnSystemNames(names: Readonly<string[]>): void;
    GetSystemNames(names: Readonly<string[]>): void;
    /**
     * Gets the value of a named texture property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetTexture.html | VFX.VisualEffect.GetTexture}
     */
    GetTexture(nameID: number): Texture;
    /**
     * Gets the value of a named texture property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetTexture.html | VFX.VisualEffect.GetTexture}
     */
    GetTexture(name: string): Texture;
    /**
     * Gets expected texture dimension for a named exposed texture.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetTextureDimension.html | VFX.VisualEffect.GetTextureDimension}
     */
    GetTextureDimension(nameID: number): TextureDimension;
    /**
     * Gets expected texture dimension for a named exposed texture.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetTextureDimension.html | VFX.VisualEffect.GetTextureDimension}
     */
    GetTextureDimension(name: string): TextureDimension;
    /**
     * Gets the value of a named unsigned integer property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetUInt.html | VFX.VisualEffect.GetUInt}
     */
    GetUInt(nameID: number): number;
    /**
     * Gets the value of a named unsigned integer property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetUInt.html | VFX.VisualEffect.GetUInt}
     */
    GetUInt(name: string): number;
    /**
     * Gets the value of a named Vector2 property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetVector2.html | VFX.VisualEffect.GetVector2}
     */
    GetVector2(nameID: number): Vector2;
    /**
     * Gets the value of a named Vector2 property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetVector2.html | VFX.VisualEffect.GetVector2}
     */
    GetVector2(name: string): Vector2;
    /**
     * Gets the value of a named Vector3 property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetVector3.html | VFX.VisualEffect.GetVector3}
     */
    GetVector3(nameID: number): Vector3;
    /**
     * Gets the value of a named Vector3 property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetVector3.html | VFX.VisualEffect.GetVector3}
     */
    GetVector3(name: string): Vector3;
    /**
     * Gets the value of a named Vector4 or Color property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetVector4.html | VFX.VisualEffect.GetVector4}
     */
    GetVector4(nameID: number): Vector4;
    /**
     * Gets the value of a named Vector4 or Color property.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.GetVector4.html | VFX.VisualEffect.GetVector4}
     */
    GetVector4(name: string): Vector4;
    /**
     * Checks if the Visual Effect can override an Animation Curve with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasAnimationCurve.html | VFX.VisualEffect.HasAnimationCurve}
     */
    HasAnimationCurve(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override an Animation Curve with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasAnimationCurve.html | VFX.VisualEffect.HasAnimationCurve}
     */
    HasAnimationCurve(name: string): boolean;
    /**
     * Checks if any particle system in the effect is awake.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasAnySystemAwake.html | VFX.VisualEffect.HasAnySystemAwake}
     */
    HasAnySystemAwake(): boolean;
    /**
     * Checks if the Visual Effect can override a bool with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasBool.html | VFX.VisualEffect.HasBool}
     */
    HasBool(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override a bool with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasBool.html | VFX.VisualEffect.HasBool}
     */
    HasBool(name: string): boolean;
    /**
     * Checks if the Visual Effect can override a float with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasFloat.html | VFX.VisualEffect.HasFloat}
     */
    HasFloat(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override a float with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasFloat.html | VFX.VisualEffect.HasFloat}
     */
    HasFloat(name: string): boolean;
    /**
     * Checks if the Visual Effect can override a Gradient with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasGradient.html | VFX.VisualEffect.HasGradient}
     */
    HasGradient(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override a Gradient with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasGradient.html | VFX.VisualEffect.HasGradient}
     */
    HasGradient(name: string): boolean;
    /**
     * Checks if the Visual Effect can override a GraphicsBuffer with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasGraphicsBuffer.html | VFX.VisualEffect.HasGraphicsBuffer}
     */
    HasGraphicsBuffer(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override a GraphicsBuffer with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasGraphicsBuffer.html | VFX.VisualEffect.HasGraphicsBuffer}
     */
    HasGraphicsBuffer(name: string): boolean;
    /**
     * Checks if the Visual Effect can override an integer with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasInt.html | VFX.VisualEffect.HasInt}
     */
    HasInt(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override an integer with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasInt.html | VFX.VisualEffect.HasInt}
     */
    HasInt(name: string): boolean;
    /**
     * Checks if the Visual Effect can override a Matrix4x4 with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasMatrix4x4.html | VFX.VisualEffect.HasMatrix4x4}
     */
    HasMatrix4x4(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override a Matrix4x4 with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasMatrix4x4.html | VFX.VisualEffect.HasMatrix4x4}
     */
    HasMatrix4x4(name: string): boolean;
    /**
     * Checks if the Visual Effect can override a Mesh with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasMesh.html | VFX.VisualEffect.HasMesh}
     */
    HasMesh(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override a Mesh with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasMesh.html | VFX.VisualEffect.HasMesh}
     */
    HasMesh(name: string): boolean;
    /**
     * Checks if the Visual Effect can override a Skinned Mesh Renderer with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasSkinnedMeshRenderer.html | VFX.VisualEffect.HasSkinnedMeshRenderer}
     */
    HasSkinnedMeshRenderer(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override a Skinned Mesh Renderer with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasSkinnedMeshRenderer.html | VFX.VisualEffect.HasSkinnedMeshRenderer}
     */
    HasSkinnedMeshRenderer(name: string): boolean;
    /**
     * Use this function to determine if the VisualEffect has the system you pass in.
     * @param nameID The system ID. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasSystem.html | VFX.VisualEffect.HasSystem}
     */
    HasSystem(nameID: number): boolean;
    /**
     * Use this function to determine if the VisualEffect has the system you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasSystem.html | VFX.VisualEffect.HasSystem}
     */
    HasSystem(name: string): boolean;
    /**
     * Checks if the Visual Effect can override a texture with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasTexture.html | VFX.VisualEffect.HasTexture}
     */
    HasTexture(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override a texture with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasTexture.html | VFX.VisualEffect.HasTexture}
     */
    HasTexture(name: string): boolean;
    /**
     * Checks if the Visual Effect can override an unsigned integer with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasUInt.html | VFX.VisualEffect.HasUInt}
     */
    HasUInt(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override an unsigned integer with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasUInt.html | VFX.VisualEffect.HasUInt}
     */
    HasUInt(name: string): boolean;
    /**
     * Checks if the Visual Effect can override a Vector2 with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasVector2.html | VFX.VisualEffect.HasVector2}
     */
    HasVector2(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override a Vector2 with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasVector2.html | VFX.VisualEffect.HasVector2}
     */
    HasVector2(name: string): boolean;
    /**
     * Checks if the Visual Effect can override a Vector3 with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasVector3.html | VFX.VisualEffect.HasVector3}
     */
    HasVector3(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override a Vector3 with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasVector3.html | VFX.VisualEffect.HasVector3}
     */
    HasVector3(name: string): boolean;
    /**
     * Checks if the Visual Effect can override a Vector4 or Color with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasVector4.html | VFX.VisualEffect.HasVector4}
     */
    HasVector4(nameID: number): boolean;
    /**
     * Checks if the Visual Effect can override a Vector4 or Color with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.HasVector4.html | VFX.VisualEffect.HasVector4}
     */
    HasVector4(name: string): boolean;
    /**
     * Use this method to send a play event to every Spawn system.
     * @param eventAttribute Can be null or a VFXEventAttribute. To create a VFXEventAttribute, use VFX.VisualEffect.CreateVFXEventAttribute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.Play.html | VFX.VisualEffect.Play}
     */
    Play(eventAttribute: VFXEventAttribute): void;
    /**
     * Use this method to send a play event to every Spawn system.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.Play.html | VFX.VisualEffect.Play}
     */
    Play(): void;
    /**
     * Reintialize visual effect.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.Reinit.html | VFX.VisualEffect.Reinit}
     */
    Reinit(): void;
    /**
     * Use this method to set the overridden state to false. This restores the default value that the Visual Effect Asset specifies.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.ResetOverride.html | VFX.VisualEffect.ResetOverride}
     */
    ResetOverride(nameID: number): void;
    /**
     * Use this method to set the overridden state to false. This restores the default value that the Visual Effect Asset specifies.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.ResetOverride.html | VFX.VisualEffect.ResetOverride}
     */
    ResetOverride(name: string): void;
    /**
     * Use this method to send a custom named event.
     * @param eventNameID The ID of the event. This is the same ID that Shader.PropertyToID returns.
     * @param eventAttribute Can be null or a VFXEventAttribute. To create a VFXEventAttribute, use VFX.VisualEffect.CreateVFXEventAttribute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SendEvent.html | VFX.VisualEffect.SendEvent}
     */
    SendEvent(eventNameID: number, eventAttribute: VFXEventAttribute): void;
    /**
     * Use this method to send a custom named event.
     * @param eventName The name of the event.
     * @param eventAttribute Can be null or a VFXEventAttribute. To create a VFXEventAttribute, use VFX.VisualEffect.CreateVFXEventAttribute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SendEvent.html | VFX.VisualEffect.SendEvent}
     */
    SendEvent(eventName: string, eventAttribute: VFXEventAttribute): void;
    /**
     * Use this method to send a custom named event.
     * @param eventNameID The ID of the event. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SendEvent.html | VFX.VisualEffect.SendEvent}
     */
    SendEvent(eventNameID: number): void;
    /**
     * Use this method to send a custom named event.
     * @param eventName The name of the event.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SendEvent.html | VFX.VisualEffect.SendEvent}
     */
    SendEvent(eventName: string): void;
    /**
     * Sets the value of a named Animation Curve property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param c The new Animation Curve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetAnimationCurve.html | VFX.VisualEffect.SetAnimationCurve}
     */
    SetAnimationCurve(nameID: number, c: AnimationCurve): void;
    /**
     * Sets the value of a named Animation Curve property.
     * @param name The name of the property.
     * @param c The new Animation Curve.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetAnimationCurve.html | VFX.VisualEffect.SetAnimationCurve}
     */
    SetAnimationCurve(name: string, c: AnimationCurve): void;
    /**
     * Sets the value of a named bool property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param b The new boolean value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetBool.html | VFX.VisualEffect.SetBool}
     */
    SetBool(nameID: number, b: boolean): void;
    /**
     * Sets the value of a named bool property.
     * @param name The name of the property.
     * @param b The new boolean value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetBool.html | VFX.VisualEffect.SetBool}
     */
    SetBool(name: string, b: boolean): void;
    /**
     * Sets the value of a named float property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param f The new float value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetFloat.html | VFX.VisualEffect.SetFloat}
     */
    SetFloat(nameID: number, f: number): void;
    /**
     * Sets the value of a named float property.
     * @param name The name of the property.
     * @param f The new float value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetFloat.html | VFX.VisualEffect.SetFloat}
     */
    SetFloat(name: string, f: number): void;
    /**
     * Sets the value of a named Gradient property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param g The new Gradient value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetGradient.html | VFX.VisualEffect.SetGradient}
     */
    SetGradient(nameID: number, g: Gradient): void;
    /**
     * Sets the value of a named Gradient property.
     * @param name The name of the property.
     * @param g The new Gradient value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetGradient.html | VFX.VisualEffect.SetGradient}
     */
    SetGradient(name: string, g: Gradient): void;
    /**
     * Sets the value of a named GraphicsBuffer property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param g The new GraphicsBuffer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetGraphicsBuffer.html | VFX.VisualEffect.SetGraphicsBuffer}
     */
    SetGraphicsBuffer(nameID: number, g: GraphicsBuffer): void;
    /**
     * Sets the value of a named GraphicsBuffer property.
     * @param name The name of the property.
     * @param g The new GraphicsBuffer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetGraphicsBuffer.html | VFX.VisualEffect.SetGraphicsBuffer}
     */
    SetGraphicsBuffer(name: string, g: GraphicsBuffer): void;
    /**
     * Sets the value of a named integer property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param i The new integer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetInt.html | VFX.VisualEffect.SetInt}
     */
    SetInt(nameID: number, i: number): void;
    /**
     * Sets the value of a named integer property.
     * @param name The name of the property.
     * @param i The new integer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetInt.html | VFX.VisualEffect.SetInt}
     */
    SetInt(name: string, i: number): void;
    /**
     * Sets the value of a named Matrix4x4 property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param v The new Matrix4x4 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetMatrix4x4.html | VFX.VisualEffect.SetMatrix4x4}
     */
    SetMatrix4x4(nameID: number, v: Matrix4x4): void;
    /**
     * Sets the value of a named Matrix4x4 property.
     * @param name The name of the property.
     * @param v The new Matrix4x4 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetMatrix4x4.html | VFX.VisualEffect.SetMatrix4x4}
     */
    SetMatrix4x4(name: string, v: Matrix4x4): void;
    /**
     * Sets the value of a named Mesh property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param m The new Mesh value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetMesh.html | VFX.VisualEffect.SetMesh}
     */
    SetMesh(nameID: number, m: Mesh): void;
    /**
     * Sets the value of a named Mesh property.
     * @param name The name of the property.
     * @param m The new Mesh value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetMesh.html | VFX.VisualEffect.SetMesh}
     */
    SetMesh(name: string, m: Mesh): void;
    /**
     * Sets the value of a named Skinned Mesh Renderer property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param m The new Skinned Mesh Renderer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetSkinnedMeshRenderer.html | VFX.VisualEffect.SetSkinnedMeshRenderer}
     */
    SetSkinnedMeshRenderer(nameID: number, m: SkinnedMeshRenderer): void;
    /**
     * Sets the value of a named Skinned Mesh Renderer property.
     * @param name The name of the property.
     * @param m The new Skinned Mesh Renderer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetSkinnedMeshRenderer.html | VFX.VisualEffect.SetSkinnedMeshRenderer}
     */
    SetSkinnedMeshRenderer(name: string, m: SkinnedMeshRenderer): void;
    /**
     * Sets the value of a named texture property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param t The new texture value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetTexture.html | VFX.VisualEffect.SetTexture}
     */
    SetTexture(nameID: number, t: Texture): void;
    /**
     * Sets the value of a named texture property.
     * @param name The name of the property.
     * @param t The new texture value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetTexture.html | VFX.VisualEffect.SetTexture}
     */
    SetTexture(name: string, t: Texture): void;
    /**
     * Sets the value of a named unsigned integer property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param i The new unsigned integer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetUInt.html | VFX.VisualEffect.SetUInt}
     */
    SetUInt(nameID: number, i: number): void;
    /**
     * Sets the value of a named unsigned integer property.
     * @param name The name of the property.
     * @param i The new unsigned integer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetUInt.html | VFX.VisualEffect.SetUInt}
     */
    SetUInt(name: string, i: number): void;
    /**
     * Sets the value of a named Vector2 property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param v The new Vector2 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetVector2.html | VFX.VisualEffect.SetVector2}
     */
    SetVector2(nameID: number, v: Vector2): void;
    /**
     * Sets the value of a named Vector2 property.
     * @param name The name of the property.
     * @param v The new Vector2 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetVector2.html | VFX.VisualEffect.SetVector2}
     */
    SetVector2(name: string, v: Vector2): void;
    /**
     * Sets the value of a named Vector3 property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param v The new Vector3 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetVector3.html | VFX.VisualEffect.SetVector3}
     */
    SetVector3(nameID: number, v: Vector3): void;
    /**
     * Sets the value of a named Vector3 property.
     * @param name The name of the property.
     * @param v The new Vector3 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetVector3.html | VFX.VisualEffect.SetVector3}
     */
    SetVector3(name: string, v: Vector3): void;
    /**
     * Sets the value of a named Vector4 or Color property.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param v The new Vector4 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetVector4.html | VFX.VisualEffect.SetVector4}
     */
    SetVector4(nameID: number, v: Vector4): void;
    /**
     * Sets the value of a named Vector4 or Color property.
     * @param name The name of the property.
     * @param v The new Vector4 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.SetVector4.html | VFX.VisualEffect.SetVector4}
     */
    SetVector4(name: string, v: Vector4): void;
    /**
     * Use this method to fast-forward the visual effect by simulating all systems for several step counts using the specified delta time.
     * @param stepDeltaTime The delta time, in seconds, the simulation applies to each step.
     * @param stepCount Number of steps to proceed.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.Simulate.html | VFX.VisualEffect.Simulate}
     */
    Simulate(stepDeltaTime: number, stepCount: number): void;
    /**
     * Use this method to send a stop event to all Spawn systems.
     * @param eventAttribute Can be null or a VFXEventAttribute. To create a VFXEventAttribute, use VFX.VisualEffect.CreateVFXEventAttribute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.Stop.html | VFX.VisualEffect.Stop}
     */
    Stop(eventAttribute: VFXEventAttribute): void;
    /**
     * Use this method to send a stop event to all Spawn systems.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffect.Stop.html | VFX.VisualEffect.Stop}
     */
    Stop(): void;


}
    
interface VFXOutputEventArgs {
    /**
     * Stores the nameId of the source output event context that triggered this event.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXOutputEventArgs-nameId.html | VFX.VFXOutputEventArgs.nameId}
     */
    readonly nameId: number;
    /**
     * Stores the current event attribute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXOutputEventArgs-eventAttribute.html | VFX.VFXOutputEventArgs.eventAttribute}
     */
    readonly eventAttribute: VFXEventAttribute;





}
    
interface VFXEventAttribute {



    /**
     * Copies the values from a VFXEventAttribute to the one you call this function from.
     * @param eventAttibute The source event attribute.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.CopyValuesFrom.html | VFX.VFXEventAttribute.CopyValuesFrom}
     */
    CopyValuesFrom(eventAttibute: VFXEventAttribute): void;
    Dispose(): void;
    /**
     * Use this method to get the value of a named bool property from the VFXEventAttribute.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetBool.html | VFX.VFXEventAttribute.GetBool}
     */
    GetBool(nameID: number): boolean;
    /**
     * Use this method to get the value of a named bool property from the VFXEventAttribute.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetBool.html | VFX.VFXEventAttribute.GetBool}
     */
    GetBool(name: string): boolean;
    /**
     * Use this method to get the value of a named float property from the VFXEventAttribute.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetFloat.html | VFX.VFXEventAttribute.GetFloat}
     */
    GetFloat(nameID: number): number;
    /**
     * Use this method to get the value of a named float property from the VFXEventAttribute.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetFloat.html | VFX.VFXEventAttribute.GetFloat}
     */
    GetFloat(name: string): number;
    /**
     * Use this method to get the value of a named integer property from the VFXEventAttribute.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetInt.html | VFX.VFXEventAttribute.GetInt}
     */
    GetInt(nameID: number): number;
    /**
     * Use this method to get the value of a named integer property from the VFXEventAttribute.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetInt.html | VFX.VFXEventAttribute.GetInt}
     */
    GetInt(name: string): number;
    /**
     * Use this method to get the value of a named Matrix4x4 property from the VFXEventAttribute.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetMatrix4x4.html | VFX.VFXEventAttribute.GetMatrix4x4}
     */
    GetMatrix4x4(nameID: number): Matrix4x4;
    /**
     * Use this method to get the value of a named Matrix4x4 property from the VFXEventAttribute.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetMatrix4x4.html | VFX.VFXEventAttribute.GetMatrix4x4}
     */
    GetMatrix4x4(name: string): Matrix4x4;
    /**
     * Use this method to get the value of a named unsigned integer property from the VFXEventAttribute.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetUint.html | VFX.VFXEventAttribute.GetUint}
     */
    GetUint(nameID: number): number;
    /**
     * Use this method to get the value of a named unsigned integer property from the VFXEventAttribute.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetUint.html | VFX.VFXEventAttribute.GetUint}
     */
    GetUint(name: string): number;
    /**
     * Use this method to get the value of a named Vector2 property from the VFXEventAttribute.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetVector2.html | VFX.VFXEventAttribute.GetVector2}
     */
    GetVector2(nameID: number): Vector2;
    /**
     * Use this method to get the value of a named Vector2 property from the VFXEventAttribute.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetVector2.html | VFX.VFXEventAttribute.GetVector2}
     */
    GetVector2(name: string): Vector2;
    /**
     * Use this method to get the value of a named Vector3 property from the VFXEventAttribute.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetVector3.html | VFX.VFXEventAttribute.GetVector3}
     */
    GetVector3(nameID: number): Vector3;
    /**
     * Use this method to get the value of a named Vector3 property from the VFXEventAttribute.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetVector3.html | VFX.VFXEventAttribute.GetVector3}
     */
    GetVector3(name: string): Vector3;
    /**
     * Use this method to get the value of a named Vector4 property from the VFXEventAttribute.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetVector4.html | VFX.VFXEventAttribute.GetVector4}
     */
    GetVector4(nameID: number): Vector4;
    /**
     * Use this method to get the value of a named Vector4 property from the VFXEventAttribute.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.GetVector4.html | VFX.VFXEventAttribute.GetVector4}
     */
    GetVector4(name: string): Vector4;
    /**
     * Use this method to check if the VFXEventAttribute stores a bool with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasBool.html | VFX.VFXEventAttribute.HasBool}
     */
    HasBool(nameID: number): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a bool with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasBool.html | VFX.VFXEventAttribute.HasBool}
     */
    HasBool(name: string): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a float with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasFloat.html | VFX.VFXEventAttribute.HasFloat}
     */
    HasFloat(nameID: number): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a float with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasFloat.html | VFX.VFXEventAttribute.HasFloat}
     */
    HasFloat(name: string): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a integer with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasInt.html | VFX.VFXEventAttribute.HasInt}
     */
    HasInt(nameID: number): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a integer with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasInt.html | VFX.VFXEventAttribute.HasInt}
     */
    HasInt(name: string): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a Matrix4x4 with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasMatrix4x4.html | VFX.VFXEventAttribute.HasMatrix4x4}
     */
    HasMatrix4x4(nameID: number): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a Matrix4x4 with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasMatrix4x4.html | VFX.VFXEventAttribute.HasMatrix4x4}
     */
    HasMatrix4x4(name: string): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a unsigned integer with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasUint.html | VFX.VFXEventAttribute.HasUint}
     */
    HasUint(nameID: number): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a unsigned integer with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasUint.html | VFX.VFXEventAttribute.HasUint}
     */
    HasUint(name: string): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a Vector2 with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasVector2.html | VFX.VFXEventAttribute.HasVector2}
     */
    HasVector2(nameID: number): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a Vector2 with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasVector2.html | VFX.VFXEventAttribute.HasVector2}
     */
    HasVector2(name: string): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a Vector3 with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasVector3.html | VFX.VFXEventAttribute.HasVector3}
     */
    HasVector3(nameID: number): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a Vector3 with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasVector3.html | VFX.VFXEventAttribute.HasVector3}
     */
    HasVector3(name: string): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a Vector4 with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasVector4.html | VFX.VFXEventAttribute.HasVector4}
     */
    HasVector4(nameID: number): boolean;
    /**
     * Use this method to check if the VFXEventAttribute stores a Vector4 with the name you pass in.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.HasVector4.html | VFX.VFXEventAttribute.HasVector4}
     */
    HasVector4(name: string): boolean;
    /**
     * Use this method to set the value of a bool with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param b The new bool value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetBool.html | VFX.VFXEventAttribute.SetBool}
     */
    SetBool(nameID: number, b: boolean): void;
    /**
     * Use this method to set the value of a bool with the name you pass in.
     * @param name The name of the property.
     * @param b The new bool value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetBool.html | VFX.VFXEventAttribute.SetBool}
     */
    SetBool(name: string, b: boolean): void;
    /**
     * Use this method to set the value of a float with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param f The new float value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetFloat.html | VFX.VFXEventAttribute.SetFloat}
     */
    SetFloat(nameID: number, f: number): void;
    /**
     * Use this method to set the value of a float with the name you pass in.
     * @param name The name of the property.
     * @param f The new float value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetFloat.html | VFX.VFXEventAttribute.SetFloat}
     */
    SetFloat(name: string, f: number): void;
    /**
     * Use this method to set the value of an integer with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param i The new integer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetInt.html | VFX.VFXEventAttribute.SetInt}
     */
    SetInt(nameID: number, i: number): void;
    /**
     * Use this method to set the value of an integer with the name you pass in.
     * @param name The name of the property.
     * @param i The new integer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetInt.html | VFX.VFXEventAttribute.SetInt}
     */
    SetInt(name: string, i: number): void;
    /**
     * Use this method to set the value of a Matrix4x4 with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param v The new Matrix4x4 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetMatrix4x4.html | VFX.VFXEventAttribute.SetMatrix4x4}
     */
    SetMatrix4x4(nameID: number, v: Matrix4x4): void;
    /**
     * Use this method to set the value of a Matrix4x4 with the name you pass in.
     * @param name The name of the property.
     * @param v The new Matrix4x4 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetMatrix4x4.html | VFX.VFXEventAttribute.SetMatrix4x4}
     */
    SetMatrix4x4(name: string, v: Matrix4x4): void;
    /**
     * Use this method to set the value of an unsigned integer with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param i The new unsigned integer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetUint.html | VFX.VFXEventAttribute.SetUint}
     */
    SetUint(nameID: number, i: number): void;
    /**
     * Use this method to set the value of an unsigned integer with the name you pass in.
     * @param name The name of the property.
     * @param i The new unsigned integer value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetUint.html | VFX.VFXEventAttribute.SetUint}
     */
    SetUint(name: string, i: number): void;
    /**
     * Use this method to set the value of a Vector2 with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param v The new Vector2 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetVector2.html | VFX.VFXEventAttribute.SetVector2}
     */
    SetVector2(nameID: number, v: Vector2): void;
    /**
     * Use this method to set the value of a Vector2 with the name you pass in.
     * @param name The name of the property.
     * @param v The new Vector2 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetVector2.html | VFX.VFXEventAttribute.SetVector2}
     */
    SetVector2(name: string, v: Vector2): void;
    /**
     * Use this method to set the value of a Vector3 with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param v The new Vector3 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetVector3.html | VFX.VFXEventAttribute.SetVector3}
     */
    SetVector3(nameID: number, v: Vector3): void;
    /**
     * Use this method to set the value of a Vector3 with the name you pass in.
     * @param name The name of the property.
     * @param v The new Vector3 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetVector3.html | VFX.VFXEventAttribute.SetVector3}
     */
    SetVector3(name: string, v: Vector3): void;
    /**
     * Use this method to set the value of a Vector4 with the name you pass in.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * @param v The new Vector4 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetVector4.html | VFX.VFXEventAttribute.SetVector4}
     */
    SetVector4(nameID: number, v: Vector4): void;
    /**
     * Use this method to set the value of a Vector4 with the name you pass in.
     * @param name The name of the property.
     * @param v The new Vector4 value.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXEventAttribute.SetVector4.html | VFX.VFXEventAttribute.SetVector4}
     */
    SetVector4(name: string, v: Vector4): void;


}
    
interface VFXEventAttributeConstructor {


    new(original: VFXEventAttribute): VFXEventAttribute;



}
declare const VFXEventAttribute: VFXEventAttributeConstructor;
    
interface VFXOutputEventArgsConstructor {


    new(nameId: number, eventAttribute: VFXEventAttribute): VFXOutputEventArgs;



}
declare const VFXOutputEventArgs: VFXOutputEventArgsConstructor;
    
interface VisualEffectObject extends Object {





}
    
interface VisualEffectAsset extends VisualEffectObject {



    GetEvents(names: Readonly<string[]>): void;
    GetExposedProperties(exposedProperties: Readonly<VFXExposedProperty[]>): void;
    /**
     * Provides the configured space of an exposed property in VisualEffectAsset.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffectAsset.GetExposedSpace.html | VFX.VisualEffectAsset.GetExposedSpace}
     */
    GetExposedSpace(nameID: number): VFXSpace;
    /**
     * Provides the configured space of an exposed property in VisualEffectAsset.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffectAsset.GetExposedSpace.html | VFX.VisualEffectAsset.GetExposedSpace}
     */
    GetExposedSpace(name: string): VFXSpace;
    /**
     * Gets the TextureDimension of a named exposed Texture.
     * @param nameID The ID of the property. This is the same ID that Shader.PropertyToID returns.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffectAsset.GetTextureDimension.html | VFX.VisualEffectAsset.GetTextureDimension}
     */
    GetTextureDimension(nameID: number): TextureDimension;
    /**
     * Gets the TextureDimension of a named exposed Texture.
     * @param name The name of the property.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VisualEffectAsset.GetTextureDimension.html | VFX.VisualEffectAsset.GetTextureDimension}
     */
    GetTextureDimension(name: string): TextureDimension;


}
    
interface VFXExposedProperty {
    name: string;
    type: Type;





}
    
interface VisualEffectAssetConstructor {
    PlayEventName: string;
    StopEventName: string;
    readonly PlayEventID: number;
    readonly StopEventID: number;


    new(): VisualEffectAsset;



}
declare const VisualEffectAsset: VisualEffectAssetConstructor;
    
interface VFXParticleSystemInfo {
    aliveCount: number;
    capacity: number;
    sleeping: boolean;
    bounds: Bounds;





}
    
interface VFXParticleSystemInfoConstructor {


    new(aliveCount: number, capacity: number, sleeping: boolean, bounds: Bounds): VFXParticleSystemInfo;



}
declare const VFXParticleSystemInfo: VFXParticleSystemInfoConstructor;
    
interface VFXSpawnerState {
    /**
     * The current playing state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-playing.html | VFX.VFXSpawnerState.playing}
     */
    playing: boolean;
    /**
     * This boolean indicates if a new loop has just started.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-newLoop.html | VFX.VFXSpawnerState.newLoop}
     */
    readonly newLoop: boolean;
    /**
     * The current state of VFXSpawnerState.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-loopState.html | VFX.VFXSpawnerState.loopState}
     */
    loopState: VFXSpawnerLoopState;
    /**
     * The current Spawn count.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-spawnCount.html | VFX.VFXSpawnerState.spawnCount}
     */
    spawnCount: number;
    /**
     * The current delta time.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-deltaTime.html | VFX.VFXSpawnerState.deltaTime}
     */
    deltaTime: number;
    /**
     * The accumulated delta time since the last Play event.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-totalTime.html | VFX.VFXSpawnerState.totalTime}
     */
    totalTime: number;
    /**
     * The current delay time that the VFXSpawner waits for before it starts a loop.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-delayBeforeLoop.html | VFX.VFXSpawnerState.delayBeforeLoop}
     */
    delayBeforeLoop: number;
    /**
     * The duration of the looping state.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-loopDuration.html | VFX.VFXSpawnerState.loopDuration}
     */
    loopDuration: number;
    /**
     * The current delay time that the VFXSpawner waits for after it finishes a loop.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-delayAfterLoop.html | VFX.VFXSpawnerState.delayAfterLoop}
     */
    delayAfterLoop: number;
    /**
     * The current index of loop.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-loopIndex.html | VFX.VFXSpawnerState.loopIndex}
     */
    loopIndex: number;
    /**
     * The current loop count.
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-loopCount.html | VFX.VFXSpawnerState.loopCount}
     */
    loopCount: number;
    /**
     * Gets the modifiable current event attribute (Read Only).
     * 
     * More info: {@link https://docs.unity3d.com/ScriptReference/VFX.VFXSpawnerState-vfxEventAttribute.html | VFX.VFXSpawnerState.vfxEventAttribute}
     */
    readonly vfxEventAttribute: VFXEventAttribute;



    Dispose(): void;


}
    
interface VFXSpawnerStateConstructor {


    new(): VFXSpawnerState;



}
declare const VFXSpawnerState: VFXSpawnerStateConstructor;
    
interface VisualEffectConstructor {


    new(): VisualEffect;



}
declare const VisualEffect: VisualEffectConstructor;
    
interface BezierCurve {
    P0: float3;
    P1: float3;
    P2: float3;
    P3: float3;
    Tangent0: float3;
    Tangent1: float3;



    Equals(other: BezierCurve): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    GetInvertedCurve(): BezierCurve;
    Transform(matrix: float4x4): BezierCurve;


}
    
interface float4x4 {
    c0: float4;
    c1: float4;
    c2: float4;
    c3: float4;
    readonly Item: float4;



    Equals(rhs: float4x4): boolean;
    Equals(o: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;
    ToString(format: string, formatProvider: IFormatProvider): string;


}
    
interface quaternion {
    value: float4;



    Equals(x: quaternion): boolean;
    Equals(x: unknown): boolean;
    GetHashCode(): number;
    ToString(): string;
    ToString(format: string, formatProvider: IFormatProvider): string;


}
    
interface quaternionConstructor {
    readonly identity: quaternion;


    new(x: number, y: number, z: number, w: number): quaternion;
    new(value: float4): quaternion;
    new(m: float3x3): quaternion;
    new(m: float4x4): quaternion;


    AxisAngle(axis: float3, angle: number): quaternion;
    Euler(xyz: float3, order: RotationOrder): quaternion;
    Euler(x: number, y: number, z: number, order: RotationOrder): quaternion;
    EulerXYZ(xyz: float3): quaternion;
    EulerXYZ(x: number, y: number, z: number): quaternion;
    EulerXZY(xyz: float3): quaternion;
    EulerXZY(x: number, y: number, z: number): quaternion;
    EulerYXZ(xyz: float3): quaternion;
    EulerYXZ(x: number, y: number, z: number): quaternion;
    EulerYZX(xyz: float3): quaternion;
    EulerYZX(x: number, y: number, z: number): quaternion;
    EulerZXY(xyz: float3): quaternion;
    EulerZXY(x: number, y: number, z: number): quaternion;
    EulerZYX(xyz: float3): quaternion;
    EulerZYX(x: number, y: number, z: number): quaternion;
    LookRotation(forward: float3, up: float3): quaternion;
    LookRotationSafe(forward: float3, up: float3): quaternion;
    RotateX(angle: number): quaternion;
    RotateY(angle: number): quaternion;
    RotateZ(angle: number): quaternion;

}
declare const quaternion: quaternionConstructor;
    
interface float4x4Constructor {
    readonly identity: float4x4;
    readonly zero: float4x4;


    new(c0: float4, c1: float4, c2: float4, c3: float4): float4x4;
    new(m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number): float4x4;
    new(v: number): float4x4;
    new(v: boolean): float4x4;
    new(v: bool4x4): float4x4;
    new(v: number): float4x4;
    new(v: int4x4): float4x4;
    new(v: number): float4x4;
    new(v: uint4x4): float4x4;
    new(v: number): float4x4;
    new(v: double4x4): float4x4;
    new(rotation: float3x3, translation: float3): float4x4;
    new(rotation: quaternion, translation: float3): float4x4;
    new(transform: RigidTransform): float4x4;


    AxisAngle(axis: float3, angle: number): float4x4;
    Euler(xyz: float3, order: RotationOrder): float4x4;
    Euler(x: number, y: number, z: number, order: RotationOrder): float4x4;
    EulerXYZ(xyz: float3): float4x4;
    EulerXYZ(x: number, y: number, z: number): float4x4;
    EulerXZY(xyz: float3): float4x4;
    EulerXZY(x: number, y: number, z: number): float4x4;
    EulerYXZ(xyz: float3): float4x4;
    EulerYXZ(x: number, y: number, z: number): float4x4;
    EulerYZX(xyz: float3): float4x4;
    EulerYZX(x: number, y: number, z: number): float4x4;
    EulerZXY(xyz: float3): float4x4;
    EulerZXY(x: number, y: number, z: number): float4x4;
    EulerZYX(xyz: float3): float4x4;
    EulerZYX(x: number, y: number, z: number): float4x4;
    LookAt(eye: float3, target: float3, up: float3): float4x4;
    Ortho(width: number, height: number, near: number, far: number): float4x4;
    OrthoOffCenter(left: number, right: number, bottom: number, top: number, near: number, far: number): float4x4;
    PerspectiveFov(verticalFov: number, aspect: number, near: number, far: number): float4x4;
    PerspectiveOffCenter(left: number, right: number, bottom: number, top: number, near: number, far: number): float4x4;
    RotateX(angle: number): float4x4;
    RotateY(angle: number): float4x4;
    RotateZ(angle: number): float4x4;
    Scale(s: number): float4x4;
    Scale(x: number, y: number, z: number): float4x4;
    Scale(scales: float3): float4x4;
    Translate(vector: float3): float4x4;
    TRS(translation: float3, rotation: quaternion, scale: float3): float4x4;

}
declare const float4x4: float4x4Constructor;
    
interface BezierCurveConstructor {


    new(p0: float3, p1: float3): BezierCurve;
    new(p0: float3, p1: float3, p2: float3): BezierCurve;
    new(p0: float3, p1: float3, p2: float3, p3: float3): BezierCurve;
    new(a: BezierKnot, b: BezierKnot): BezierCurve;


    FromTangent(pointA: float3, tangentOutA: float3, pointB: float3, tangentInB: float3): BezierCurve;

}
declare const BezierCurve: BezierCurveConstructor;
    
interface BezierKnot extends ISerializationCallbackReceiver {
    Position: float3;
    TangentIn: float3;
    TangentOut: float3;
    Rotation: quaternion;



    Equals(other: BezierKnot): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    ToString(): string;
    Transform(matrix: float4x4): BezierKnot;


}
    
interface BezierKnotConstructor {


    new(position: float3): BezierKnot;
    new(position: float3, tangentIn: float3, tangentOut: float3): BezierKnot;
    new(position: float3, tangentIn: float3, tangentOut: float3, rotation: quaternion): BezierKnot;



}
declare const BezierKnot: BezierKnotConstructor;
    
interface CurveUtility {





}
    
interface DistanceToInterpolation {
    Distance: number;
    T: number;





}
    
interface CurveUtilityConstructor {




    ApproximateLength(curve: BezierCurve): number;
    CalculateCurveLengths(curve: BezierCurve, lookupTable: Readonly<DistanceToInterpolation[]>): void;
    CalculateCurveLengths(curve: BezierCurve, lookupTable: Readonly<DistanceToInterpolation[]>): void;
    CalculateLength(curve: BezierCurve, resolution: number): number;
    EvaluateAcceleration(curve: BezierCurve, t: number): float3;
    EvaluateCurvature(curve: BezierCurve, t: number): number;
    EvaluatePosition(curve: BezierCurve, t: number): float3;
    EvaluateTangent(curve: BezierCurve, t: number): float3;
    GetDistanceToInterpolation(curve: BezierCurve, distance: number): number;
    GetDistanceToInterpolation<T extends Readonly<DistanceToInterpolation[]>>(lut: T, distance: number): number;
    GetNearestPoint(curve: BezierCurve, ray: Ray, resolution: number): float3;

}
declare const CurveUtility: CurveUtilityConstructor;
    
interface ISpline {
    readonly Closed: boolean;



    GetCurve(index: number): BezierCurve;
    GetCurveInterpolation(curveIndex: number, curveDistance: number): number;
    GetCurveLength(index: number): number;
    GetCurveUpVector(index: number, t: number): float3;
    GetLength(): number;


}
    
interface Spline extends Readonly<BezierKnot[]> {
    readonly Count: number;
    readonly IsReadOnly: boolean;
    Knots: Readonly<BezierKnot[]>;
    Closed: boolean;
    Item: BezierKnot;



    Add(item: BezierKnot): void;
    Add(knotPosition: float3, tangentMode: TangentMode): void;
    Add(item: BezierKnot, mode: TangentMode): void;
    Add(item: BezierKnot, mode: TangentMode, tension: number): void;
    Add(spline: Readonly<BezierKnot[]>): void;
    AddRange(knotPositions: Readonly<float3[]>, tangentMode: TangentMode): void;
    Clear(): void;
    Contains(item: BezierKnot): boolean;
    Copy(copyFrom: Readonly<BezierKnot[]>): void;
    CopyTo(array: Readonly<BezierKnot[]>, arrayIndex: number): void;
    EnforceTangentModeNoNotify(index: number): void;
    EnforceTangentModeNoNotify(range: Readonly<number[]>): void;
    GetAutoSmoothTension(index: number): number;
    GetCurve(index: number): BezierCurve;
    GetCurveInterpolation(curveIndex: number, curveDistance: number): number;
    GetCurveLength(index: number): number;
    GetCurveUpVector(index: number, t: number): float3;
    GetEnumerator(): IEnumerator<BezierKnot>;
    GetFloat4DataKeys(): Readonly<string[]>;
    GetFloat4DataValues(): Readonly<Readonly<DataPoint<float4>[]>[]>;
    GetFloatDataKeys(): Readonly<string[]>;
    GetFloatDataValues(): Readonly<Readonly<DataPoint<number>[]>[]>;
    GetIntDataKeys(): Readonly<string[]>;
    GetIntDataValues(): Readonly<Readonly<DataPoint<number>[]>[]>;
    GetLength(): number;
    GetObjectDataKeys(): Readonly<string[]>;
    GetObjectDataValues(): Readonly<Readonly<DataPoint<Object>[]>[]>;
    GetOrCreateFloat4Data(key: string): Readonly<DataPoint<float4>[]>;
    GetOrCreateFloatData(key: string): Readonly<DataPoint<number>[]>;
    GetOrCreateIntData(key: string): Readonly<DataPoint<number>[]>;
    GetOrCreateObjectData(key: string): Readonly<DataPoint<Object>[]>;
    GetSplineDataKeys(type: EmbeddedSplineDataType): Readonly<string[]>;
    GetTangentMode(index: number): TangentMode;
    IndexOf(item: BezierKnot): number;
    Insert(index: number, knot: BezierKnot): void;
    Insert(index: number, knot: BezierKnot, mode: TangentMode): void;
    Insert(index: number, knot: BezierKnot, mode: TangentMode, tension: number): void;
    Insert(index: number, knotPosition: float3, tangentMode: TangentMode): void;
    InsertRange(index: number, knotPositions: Readonly<float3[]>, tangentMode: TangentMode): void;
    Remove(item: BezierKnot): boolean;
    RemoveAt(index: number): void;
    RemoveFloat4Data(key: string): boolean;
    RemoveFloatData(key: string): boolean;
    RemoveIntData(key: string): boolean;
    RemoveObjectData(key: string): boolean;
    Resize(newSize: number): void;
    SetAutoSmoothTension(index: number, tension: number): void;
    SetAutoSmoothTension(range: Readonly<number[]>, tension: number): void;
    SetAutoSmoothTensionNoNotify(index: number, tension: number): void;
    SetAutoSmoothTensionNoNotify(range: Readonly<number[]>, tension: number): void;
    SetFloat4Data(key: string, value: Readonly<DataPoint<float4>[]>): void;
    SetFloatData(key: string, value: Readonly<DataPoint<number>[]>): void;
    SetIntData(key: string, value: Readonly<DataPoint<number>[]>): void;
    SetKnot(index: number, value: BezierKnot, main: BezierTangent): void;
    SetKnotNoNotify(index: number, value: BezierKnot, main: BezierTangent): void;
    SetObjectData(key: string, value: Readonly<DataPoint<Object>[]>): void;
    SetTangentMode(mode: TangentMode): void;
    SetTangentMode(index: number, mode: TangentMode, main: BezierTangent): void;
    SetTangentMode(range: Readonly<number[]>, mode: TangentMode, main: BezierTangent): void;
    SetTangentModeNoNotify(index: number, mode: TangentMode, main: BezierTangent): void;
    ToArray(): Readonly<BezierKnot[]>;
    Warmup(): void;


}
    
interface IDataPoint {
    Index: number;





}
    
interface DataPoint<TDataType> extends IDataPoint {
    Index: number;
    Value: TDataType;



    CompareTo(other: DataPoint<TDataType>): number;
    CompareTo(other: number): number;
    ToString(): string;


}
    
interface DataPointConstructor {


    new(index: number, value: TDataType): DataPoint<TDataType>;



}
declare const DataPoint: DataPointConstructor;
    
interface SplineConstructor {


    new(): Spline;
    new(knotCapacity: number, closed: boolean): Spline;
    new(knots: Readonly<BezierKnot[]>, closed: boolean): Spline;
    new(knotPositions: Readonly<float3[]>, tangentMode: TangentMode, closed: boolean): Spline;
    new(spline: Readonly<BezierKnot[]>): Spline;



    readonly Changed: MonoSignal<Readonly<BezierKnot[]>, number, SplineModification>;
}
declare const Spline: SplineConstructor;
    
interface SplineComponent extends MonoBehaviour {





}
    
interface SplineAnimate extends SplineComponent {
    Container: SplineContainer;
    PlayOnAwake: boolean;
    Loop: LoopMode;
    AnimationMethod: Method;
    Duration: number;
    MaxSpeed: number;
    Easing: EasingMode;
    Alignment: AlignmentMode;
    ObjectForwardAxis: AlignAxis;
    ObjectUpAxis: AlignAxis;
    NormalizedTime: number;
    ElapsedTime: number;
    StartOffset: number;
    readonly IsPlaying: boolean;

    readonly Updated: MonoSignal<Vector3, Quaternion>;
    readonly Completed: MonoSignal<void>;


    Pause(): void;
    Play(): void;
    Restart(autoplay: boolean): void;
    Update(): void;


}
    
interface ISplineContainer {
    Splines: Readonly<Readonly<BezierKnot[]>[]>;
    readonly KnotLinkCollection: KnotLinkCollection;





}
    
interface KnotLinkCollection {
    readonly Count: number;



    Clear(): void;
    GetKnotLinks(knotIndex: SplineKnotIndex): Readonly<SplineKnotIndex[]>;
    KnotIndexChanged(splineIndex: number, previousKnotIndex: number, newKnotIndex: number): void;
    KnotIndexChanged(previousIndex: SplineKnotIndex, newIndex: SplineKnotIndex): void;
    KnotInserted(splineIndex: number, knotIndex: number): void;
    KnotInserted(index: SplineKnotIndex): void;
    KnotRemoved(splineIndex: number, knotIndex: number): void;
    KnotRemoved(index: SplineKnotIndex): void;
    Link(knotA: SplineKnotIndex, knotB: SplineKnotIndex): void;
    ShiftKnotIndices(index: SplineKnotIndex, offset: number): void;
    SplineIndexChanged(previousIndex: number, newIndex: number): void;
    SplineRemoved(splineIndex: number): void;
    Unlink(knot: SplineKnotIndex): void;


}
    
interface SplineKnotIndex {
    Spline: number;
    Knot: number;



    Equals(otherIndex: SplineKnotIndex): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    IsValid(): boolean;
    ToString(): string;


}
    
interface SplineKnotIndexConstructor {
    Invalid: SplineKnotIndex;


    new(spline: number, knot: number): SplineKnotIndex;



}
declare const SplineKnotIndex: SplineKnotIndexConstructor;
    
interface KnotLinkCollectionConstructor {


    new(): KnotLinkCollection;



}
declare const KnotLinkCollection: KnotLinkCollectionConstructor;
    
interface SplineContainer extends MonoBehaviour, ISerializationCallbackReceiver, ISplineContainer {
    Splines: Readonly<Readonly<BezierKnot[]>[]>;
    readonly KnotLinkCollection: KnotLinkCollection;
    readonly Item: Readonly<BezierKnot[]>;
    Spline: Readonly<BezierKnot[]>;



    CalculateLength(): number;
    CalculateLength(splineIndex: number): number;
    EvaluateAcceleration(t: number): float3;
    EvaluateAcceleration(splineIndex: number, t: number): float3;
    EvaluateAcceleration<T extends Readonly<BezierKnot[]>>(spline: T, t: number): float3;
    EvaluatePosition(t: number): float3;
    EvaluatePosition(splineIndex: number, t: number): float3;
    EvaluatePosition<T extends Readonly<BezierKnot[]>>(spline: T, t: number): float3;
    EvaluateTangent(t: number): float3;
    EvaluateTangent(splineIndex: number, t: number): float3;
    EvaluateTangent<T extends Readonly<BezierKnot[]>>(spline: T, t: number): float3;
    EvaluateUpVector(t: number): float3;
    EvaluateUpVector(splineIndex: number, t: number): float3;
    EvaluateUpVector<T extends Readonly<BezierKnot[]>>(spline: T, t: number): float3;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    Warmup(): void;


}
    
interface SplineContainerConstructor {


    new(): SplineContainer;



    readonly SplineAdded: MonoSignal<SplineContainer, number>;
    readonly SplineRemoved: MonoSignal<SplineContainer, number>;
    readonly SplineReordered: MonoSignal<SplineContainer, number, number>;
}
declare const SplineContainer: SplineContainerConstructor;
    
interface SplineAnimateConstructor {


    new(): SplineAnimate;



}
declare const SplineAnimate: SplineAnimateConstructor;
    
interface SplineUtility {





}
    
interface SplineInfo extends ISerializationCallbackReceiver {
    readonly Object: Object;
    Container: ISplineContainer;
    readonly Transform: Transform;
    readonly Spline: Readonly<BezierKnot[]>;
    Index: number;
    readonly LocalToWorld: float4x4;



    Equals(other: SplineInfo): boolean;
    Equals(obj: unknown): boolean;
    GetHashCode(): number;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;


}
    
interface SplineInfoConstructor {


    new(container: ISplineContainer, index: number): SplineInfo;



}
declare const SplineInfo: SplineInfoConstructor;
    
interface SplineUtilityConstructor {
    DefaultTension: number;
    CatmullRomTension: number;
    PickResolutionMin: number;
    PickResolutionDefault: number;
    PickResolutionMax: number;
    DrawResolutionDefault: number;




    AddSpline<T extends ISplineContainer>(container: T): Readonly<BezierKnot[]>;
    AddSpline<T extends ISplineContainer>(container: T, spline: Readonly<BezierKnot[]>): void;
    AreKnotLinked(container: ISplineContainer, knotA: SplineKnotIndex, knotB: SplineKnotIndex): boolean;
    CalculateLength<T extends Readonly<BezierKnot[]>>(spline: T, transform: float4x4): number;
    CalculateUpVector<T extends Readonly<BezierKnot[]>>(spline: T, t: number): float3;
    ConvertIndexUnit<T extends Readonly<BezierKnot[]>>(spline: T, t: number, targetPathUnit: PathIndexUnit): number;
    ConvertIndexUnit<T extends Readonly<BezierKnot[]>>(spline: T, value: number, fromPathUnit: PathIndexUnit, targetPathUnit: PathIndexUnit): number;
    CopyKnotLinks<T extends ISplineContainer>(container: T, srcSplineIndex: number, destSplineIndex: number): void;
    CurveToSplineT<T extends Readonly<BezierKnot[]>>(spline: T, curve: number): number;
    EvaluateAcceleration<T extends Readonly<BezierKnot[]>>(spline: T, t: number): float3;
    EvaluateCurvature<T extends Readonly<BezierKnot[]>>(spline: T, t: number): number;
    EvaluateCurvatureCenter<T extends Readonly<BezierKnot[]>>(spline: T, t: number): float3;
    EvaluatePosition<T extends Readonly<BezierKnot[]>>(spline: T, t: number): float3;
    EvaluateTangent<T extends Readonly<BezierKnot[]>>(spline: T, t: number): float3;
    EvaluateUpVector<T extends Readonly<BezierKnot[]>>(spline: T, t: number): float3;
    GetAutoSmoothKnot(position: float3, previous: float3, next: float3): BezierKnot;
    GetAutoSmoothKnot(position: float3, previous: float3, next: float3, normal: float3): BezierKnot;
    GetAutoSmoothKnot(position: float3, previous: float3, next: float3, normal: float3, tension: number): BezierKnot;
    GetAutoSmoothTangent(previous: float3, next: float3, tension: number): float3;
    GetAutoSmoothTangent(previous: float3, current: float3, next: float3, tension: number): float3;
    GetBounds<T extends Readonly<BezierKnot[]>>(spline: T): Bounds;
    GetBounds<T extends Readonly<BezierKnot[]>>(spline: T, transform: float4x4): Bounds;
    GetCatmullRomTangent(previous: float3, next: float3): float3;
    GetCurveCount<T extends Readonly<BezierKnot[]>>(spline: T): number;
    GetNormalizedInterpolation<T extends Readonly<BezierKnot[]>>(spline: T, t: number, originalPathUnit: PathIndexUnit): number;
    GetSubdivisionCount(length: number, resolution: number): number;
    JoinSplinesOnKnots(container: ISplineContainer, mainKnot: SplineKnotIndex, otherKnot: SplineKnotIndex): SplineKnotIndex;
    LinkKnots<T extends ISplineContainer>(container: T, knotA: SplineKnotIndex, knotB: SplineKnotIndex): void;
    Next<T extends Readonly<BezierKnot[]>>(spline: T, index: number): BezierKnot;
    NextIndex<T extends Readonly<BezierKnot[]>>(spline: T, index: number): number;
    Previous<T extends Readonly<BezierKnot[]>>(spline: T, index: number): BezierKnot;
    PreviousIndex<T extends Readonly<BezierKnot[]>>(spline: T, index: number): number;
    ReducePoints<T extends Readonly<float3[]>>(line: T, epsilon: number): Readonly<float3[]>;
    ReducePoints<T extends Readonly<float3[]>>(line: T, results: Readonly<float3[]>, epsilon: number): void;
    RemoveSpline<T extends ISplineContainer>(container: T, spline: Readonly<BezierKnot[]>): boolean;
    RemoveSplineAt<T extends ISplineContainer>(container: T, splineIndex: number): boolean;
    ReorderSpline<T extends ISplineContainer>(container: T, previousSplineIndex: number, newSplineIndex: number): boolean;
    ReverseFlow(container: ISplineContainer, splineIndex: number): void;
    ReverseFlow(splineInfo: SplineInfo): void;
    ReverseFlow(spline: Readonly<BezierKnot[]>): void;
    SetLinkedKnotPosition<T extends ISplineContainer>(container: T, index: SplineKnotIndex): void;
    SetPivot(container: SplineContainer, position: Vector3): void;
    SplitSplineOnKnot(container: ISplineContainer, knotInfo: SplineKnotIndex): SplineKnotIndex;
    UnlinkKnots<T extends ISplineContainer>(container: T, knots: Readonly<SplineKnotIndex[]>): void;

}
declare const SplineUtility: SplineUtilityConstructor;
    
interface AnimationEventData extends ScriptableObject {
    key: string;
    stringValue: string;
    intValue: number;
    floatValue: number;





}
    
interface AnimationEventDataConstructor {


    new(): AnimationEventData;



}
declare const AnimationEventData: AnimationEventDataConstructor;
    
interface VoxelWorld extends MonoBehaviour {
    useSimplifiedVoxels: boolean;
    doVisuals: boolean;
    debugReloadOnScriptReloadMode: boolean;
    useCameraAsFocusPosition: boolean;
    autoLoad: boolean;
    voxelWorldFile: WorldSaveFile;
    worldNetworker: VoxelWorldNetworker;
    chunksFolder: GameObject;
    lightsFolder: GameObject;
    finishedReplicatingChunksFromServer: boolean;
    chunks: CSDictionary<Vector3, Chunk>;
    lodNearDistance: number;
    lodFarDistance: number;
    lodTransitionSpeed: number;
    voxelBlocks: VoxelBlocks;
    selectedBlockIndex: number;
    highlightedBlock: number;
    highlightedBlockPos: Vector3;
    currentCamera: Camera;
    mirrorAround: Vector3;
    renderingDisabled: boolean;
    hasUnsavedChanges: boolean;
    loadingStatus: LoadingStatus;
    focusPosition: Vector3;

    readonly BeforeVoxelChunkUpdated: MonoSignal<Chunk>;
    readonly VoxelChunkUpdated: MonoSignal<Chunk>;
    readonly BeforeVoxelPlaced: MonoSignal<number, Vector3>;
    readonly VoxelPlaced: MonoSignal<unknown, unknown, unknown, unknown>;
    readonly OnFinishedLoading: MonoSignal<void>;
    readonly OnFinishedReplicatingChunksFromServer: MonoSignal<void>;


    AddChunk(key: Vector3, chunk: Chunk): void;
    BulkReadVoxels(positions: Readonly<Vector3[]>): Readonly<number[]>;
    CalculatePlaneIntersection(origin: Vector3, dir: Vector3, planeNormal: Vector3, planePoint: Vector3): Vector3;
    CanSeePoint(pos: Vector3, dest: Vector3, destNormal: Vector3): boolean;
    ColorVoxelAt(pos: Vector3, color: Color, priority: boolean): void;
    CreateSingleStarterBlock(): void;
    DamageVoxelAt(pos: Vector3, damage: number, priority: boolean): void;
    DeleteRenderedGameObjects(): void;
    DirtyMesh(voxel: Vector3, dirtyCollisions: boolean, priority: boolean): void;
    DirtyNeighborMeshes(voxel: Vector3, dirtyCollision: boolean, priority: boolean): void;
    FillFlatGround(): void;
    FillRandomTerrain(): void;
    FillSingleBlock(): void;
    FullWorldUpdate(): void;
    GenerateWorld(populateTerrain: boolean): void;
    GetChunkByChunkPos(pos: Vector3): Chunk;
    GetCollisionType(voxelData: number): CollisionType;
    GetNumProcessingMeshChunks(): number;
    GetNumRadiosityProcessingChunks(): number;
    GetPrefabAt(pos: Vector3): GameObject;
    GetRandomVoxelInWorld(): Vector3;
    GetVoxelAndChunkAt(pos: Vector3): ValueTuple<number, Chunk>;
    GetVoxelAt(pos: Vector3): number;
    GetVoxelColorAt(pos: Vector3): Color32;
    InvokeOnFinishedReplicatingChunksFromServer(): void;
    LoadEmptyWorld(): void;
    LoadWorldFromSaveFile(file: WorldSaveFile): void;
    OnRenderObject(): void;
    RaycastVoxel(pos: Vector3, direction: Vector3, maxDistance: number): VoxelRaycastResult;
    RaycastVoxel_Internal(pos: Vector3, direction: Vector3, maxDistance: number, debug: boolean): ValueTuple<boolean, number, Vector3, Vector3>;
    RaycastVoxelForLighting(pos: Vector3, direction: Vector3, maxDistance: number, debug: boolean): number;
    ReadVoxelAt(pos: Vector3): number;
    RegenerateAllMeshes(): void;
    ReloadTextureAtlas(): void;
    SaveToDomainReloadFile(): void;
    SaveToFile(): void;
    SpawnDebugSphere(pos: Vector3, col: Color, radius: number): GameObject;
    TransformPointToLocalSpace(point: Vector3): Vector3;
    TransformPointToWorldSpace(point: Vector3): Vector3;
    TransformRayToLocalSpace(ray: Ray): Ray;
    TransformVectorToLocalSpace(vec: Vector3): Vector3;
    TransformVectorToWorldSpace(vec: Vector3): Vector3;
    Update(): void;
    UpdateFocusCamera(focusCamera: Camera): void;
    WaitForChunkToLoad(voxel: Vector3): void;
    WriteTemporaryVoxelCollisionAt(pos: Vector3, num: number): void;
    WriteVoxelAt(pos: Vector3, num: number, priority: boolean): void;
    WriteVoxelGroupAt(positions: Readonly<Vector3[]>, nums: Readonly<number[]>, priority: boolean): void;


}
    
interface WorldSaveFile extends ScriptableObject {
    chunks: Readonly<SaveChunk[]>;
    blockIdToScopeName: Readonly<BlockIdToScopedName[]>;
    chunksCompressed: Readonly<number[]>;
    chunksCompressedV2: boolean;



    CreateFromVoxelWorld(world: VoxelWorld): void;
    GetChunks(): Readonly<SaveChunk[]>;
    GetFileBlockIdFromStringId(blockTypeId: string): number;
    GetFileScopedBlockTypeId(fileBlockId: number): string;
    LoadIntoVoxelWorld(world: VoxelWorld): void;


}
    
interface SaveChunk {
    key: Vector3;
    data: Readonly<number[]>;
    color: Readonly<number[]>;



    Serialize(writer: BinaryWriter, version: number): void;


}
    
interface SaveChunkConstructor {


    new(key: Vector3, data: Readonly<number[]>, color: Readonly<number[]>): SaveChunk;


    Deserialize(reader: BinaryReader, version: number, voxelData: Readonly<number[]>, colors: Readonly<number[]>): Vector3;

}
declare const SaveChunk: SaveChunkConstructor;
    
interface BlockIdToScopedName {
    id: number;
    name: string;





}
    
interface WorldSaveFileConstructor {


    new(): WorldSaveFile;



}
declare const WorldSaveFile: WorldSaveFileConstructor;
    
interface VoxelWorldNetworker extends NetworkBehaviour {
    world: VoxelWorld;
    networkWriteVoxels: boolean;



    OnReadyCommand(connection: NetworkConnectionToClient): void;
    OnStartClient(): void;
    TargetFinishedSendingWorldRpc(conn: NetworkConnection): void;
    TargetWriteChunksRpc(conn: NetworkConnection, positions: Readonly<Vector3[]>, chunks: Readonly<Chunk[]>): void;
    TargetWriteVoxelGroupRpc(conn: NetworkConnection, positions: Readonly<Vector3[]>, nums: Readonly<number[]>, priority: boolean): void;
    TargetWriteVoxelRpc(conn: NetworkConnection, pos: Vector3, voxel: number): void;
    Weaved(): boolean;


}
    
interface Chunk {
    readWriteVoxel: Readonly<number[]>;
    color: Readonly<number[]>;
    damageMap: CSDictionary<number, number>;
    keysWithVoxels: Readonly<number[]>;
    materialPropertiesDirty: boolean;
    world: VoxelWorld;
    bottomLeftInt: Vector3;
    bounds: Bounds;
    numUpdates: number;
    currentCamera: Camera;
    colliders: Readonly<BoxCollider[]>;
    chunkKey: Vector3;



    Busy(): boolean;
    Clear(): void;
    Free(): void;
    GetGameObject(): GameObject;
    GetKey(): Vector3;
    GetLocalColorAt(localX: number, localY: number, localZ: number): Color32;
    GetLocalVoxelAt(localPos: Vector3): number;
    GetLocalVoxelAt(localX: number, localY: number, localZ: number): number;
    GetPrefabAt(worldPos: Vector3): GameObject;
    GetPriorityUpdate(): boolean;
    GetRandomOccupiedVoxelPosition(): Vector3;
    GetVoxelAt(worldPos: Vector3): number;
    GetVoxelColorAt(worldPos: Vector3): Color32;
    HasVoxels(): boolean;
    IsGeometryDirty(): boolean;
    IsLoaded(): boolean;
    MainthreadForceCollisionRebuild(): void;
    MainthreadUpdateMesh(world: VoxelWorld): boolean;
    MarkKeysWithVoxelsDirty(): void;
    NeedsToCopyMeshToScene(): boolean;
    NeedsToGenerateMesh(): boolean;
    SetCollisionDirty(dirty: boolean): void;
    SetGeometryDirty(dirty: boolean, priority: boolean): void;
    SetWorld(world: VoxelWorld): void;
    WaitForLoaded(): void;
    WriteTemporaryCollision(position: Vector3, hasCollision: boolean): void;
    WriteVoxel(worldPos: Vector3, num: number): void;
    WriteVoxelColor(worldPos: Vector3, col: Color32): void;
    WriteVoxelDamage(worldPos: Vector3, dmg: number): void;


}
    
interface ChunkConstructor {


    new(): Chunk;


    TestAABBSphere(aabb: Bounds, sphereCenter: Vector3, sphereRadius: number): boolean;
    WorldPosToLocalPos(globalCoord: Vector3): Vector3;
    WorldPosToLocalPos(globalCoord: Vector3): Vector3;
    WorldPosToVoxelIndex(globalCoord: Vector3): number;

}
declare const Chunk: ChunkConstructor;
    
interface VoxelWorldNetworkerConstructor {


    new(): VoxelWorldNetworker;



}
declare const VoxelWorldNetworker: VoxelWorldNetworkerConstructor;
    
interface VoxelRaycastResult {
    Hit: boolean;
    Distance: number;
    HitPosition: Vector3;
    HitNormal: Vector3;





}
    
interface VoxelWorldConstructor {
    runThreaded: boolean;
    maxActiveThreads: number;
    maxMainThreadMeshMillisecondsPerFrame: number;
    maxMainThreadThreadKickoffMillisecondsPerFrame: number;
    showDebugSpheres: boolean;
    showDebugBounds: boolean;
    chunkSize: number;
    flipNames: Readonly<string[]>;
    allFlips: Readonly<number[]>;


    new(): VoxelWorld;


    Abs(input: Vector3): Vector3;
    CardinalVector(normal: Vector3): Vector3;
    CreateChunk(key: Vector3): Chunk;
    DeleteChildGameObjects(parent: GameObject): void;
    FlipBitsToQuaternion(flipBits: number): Quaternion;
    Floor(input: Vector3): Vector3;
    FloorInt(input: Vector3): Vector3;
    GetFirstInstance(): VoxelWorld;
    GetScaleFromFlipBits(flipBits: number): Vector3;
    GetVoxelFlippedBits(voxel: number): number;
    HashCoordinates(x: number, y: number, z: number): number;
    SetVoxelFlippedBits(voxel: number, flippedBits: number): number;
    SetVoxelSolidBit(voxel: number, solid: boolean): number;
    Sign(input: Vector3): Vector3;
    VoxelDataToBlockId(block: number): number;
    VoxelDataToBlockId(block: number): number;
    VoxelDataToExtraBits(block: number): number;
    VoxelIsSolid(voxel: number): boolean;

}
declare const VoxelWorld: VoxelWorldConstructor;
    
interface CanvasDistanceCondition extends MonoBehaviour {
    maxDistanceSqrd: number;
    maxDistance: number;





}
    
interface CanvasDistanceConditionConstructor {


    new(): CanvasDistanceCondition;



}
declare const CanvasDistanceCondition: CanvasDistanceConditionConstructor;
    
interface Singleton<T extends MonoBehaviour> extends MonoBehaviour {



    OnApplicationQuit(): void;


}
    
interface SingletonConstructor {
    readonly IsAwake: boolean;
    readonly Instance: T;





}
declare const Singleton: SingletonConstructor;
    
interface CanvasDistanceManager extends Singleton<CanvasDistanceManager> {



    Register(canvasObject: CanvasDistanceCondition): void;
    SetCamera(cam: Camera): void;


}
    
interface CanvasDistanceManagerConstructor {


    new(): CanvasDistanceManager;



}
declare const CanvasDistanceManager: CanvasDistanceManagerConstructor;
    
interface ActiveAccessory {
    AccessoryComponent: AccessoryComponent;
    lodLevel: number;
    maxLodLevel: number;
    rootTransform: Transform;
    gameObjects: Readonly<GameObject[]>;
    meshRenderers: Readonly<MeshRenderer[]>;
    skinnedMeshRenderers: Readonly<SkinnedMeshRenderer[]>;
    renderers: Readonly<Renderer[]>;
    meshFilters: Readonly<MeshFilter[]>;
    lods: Readonly<ActiveAccessory[]>;





}
    
interface ActiveAccessoryConstructor {


    new(): ActiveAccessory;



}
declare const ActiveAccessory: ActiveAccessoryConstructor;
    
interface VisualGraphComponent extends MonoBehaviour {
    image: RawImage;
    dataResolution: number;
    logValues: boolean;
    testGraphOverTime: boolean;
    testGraph: boolean;
    readonly minValue: number;
    readonly maxValue: number;



    AddValue(newValue: number): void;
    AddValues(newValue: Vector3): void;
    ClearRange(): void;
    SetLineColor(colorA: Color): void;
    SetLineColors(colorA: Color, colorB: Color, colorC: Color): void;
    SetRange(minRange: number, maxRange: number): void;
    UpdateMesh(): void;


}
    
interface VisualGraphComponentConstructor {


    new(): VisualGraphComponent;



}
declare const VisualGraphComponent: VisualGraphComponentConstructor;
    
interface CharacterMovementSettings extends MonoBehaviour {
    characterHeight: number;
    characterRadius: number;
    colliderGroundOffset: number;
    onlySprintForward: boolean;
    useAccelerationMovement: boolean;
    speed: number;
    sprintSpeed: number;
    accelerationForce: number;
    sprintAccelerationForce: number;
    minAccelerationDelta: number;
    inAirDirectionalControl: number;
    accelerationTurnFriction: number;
    autoCrouch: boolean;
    preventFallingWhileCrouching: CrouchEdgeDetection;
    preventStepUpWhileCrouching: boolean;
    crouchSpeedMultiplier: number;
    crouchHeightMultiplier: number;
    numberOfJumps: number;
    jumpSpeed: number;
    jumpCoyoteTime: number;
    allowDebugFlying: boolean;
    flySpeedMultiplier: number;
    verticalFlySpeed: number;
    jumpUpBlockCooldown: number;
    useGravity: boolean;
    useGravityWhileGrounded: boolean;
    alwaysSnapToGround: boolean;
    gravityMultiplier: number;
    upwardsGravityMultiplier: number;
    groundCollisionLayerMask: LayerMask;
    terminalVelocity: number;
    minimumVelocity: number;
    useMinimumVelocityInAir: boolean;
    preventWallClipping: boolean;
    drag: number;
    airDragMultiplier: number;
    airSpeedMultiplier: number;
    additionalNoInputDrag: number;
    airInputAcceleration: number;
    detectStepUps: boolean;
    alwaysStepUp: boolean;
    assistedLedgeJump: boolean;
    maxStepUpHeight: number;
    stepUpRampDistance: number;
    detectSlopes: boolean;
    slopeForce: number;
    minSlopeDelta: number;
    maxSlopeDelta: number;





}
    
interface CharacterMovementSettingsConstructor {


    new(): CharacterMovementSettings;



}
declare const CharacterMovementSettings: CharacterMovementSettingsConstructor;
    
interface CharacterAnimationSyncData {
    state: CharacterState;
    grounded: boolean;
    sprinting: boolean;
    crouching: boolean;
    jumping: boolean;
    localVelocity: Vector3;
    lookVector: Vector3;



    Equals(obj: unknown): boolean;
    GetHashCode(): number;


}
    
interface CharacterAnimationSyncDataConstructor {


    new(): CharacterAnimationSyncData;



}
declare const CharacterAnimationSyncData: CharacterAnimationSyncDataConstructor;
    
interface IClipper {



    PerformClipping(): void;


}
    
interface RectMask2D extends UIBehaviour, ICanvasRaycastFilter, IClipper {
    padding: Vector4;
    softness: Vector2Int;
    readonly canvasRect: Rect;
    readonly rectTransform: RectTransform;



    AddClippable(clippable: IClippable): void;
    IsRaycastLocationValid(sp: Vector2, eventCamera: Camera): boolean;
    PerformClipping(): void;
    RemoveClippable(clippable: IClippable): void;
    UpdateClipSoftness(): void;


}
    
interface AirshipSteamFriendInfo {
    playingAirship: boolean;
    playingOtherGame: boolean;
    steamId: number;
    steamName: string;





}
    
interface EditorPrefs {





}
    
interface EditorPrefsConstructor {


    new(): EditorPrefs;


    DeleteAll(): void;
    DeleteKey(key: string): void;
    GetBool(key: string, defaultValue: boolean): boolean;
    GetBool(key: string): boolean;
    GetFloat(key: string, defaultValue: number): number;
    GetFloat(key: string): number;
    GetInt(key: string, defaultValue: number): number;
    GetInt(key: string): number;
    GetString(key: string, defaultValue: string): string;
    GetString(key: string): string;
    HasKey(key: string): boolean;
    SetBool(key: string, value: boolean): void;
    SetFloat(key: string, value: number): void;
    SetInt(key: string, value: number): void;
    SetString(key: string, value: string): void;

}
declare const EditorPrefs: EditorPrefsConstructor;

